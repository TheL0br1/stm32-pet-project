
led-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  08009ff8  08009ff8  00019ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a768  0800a768  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a768  0800a768  0001a768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a770  0800a770  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a770  0800a770  0001a770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a774  0800a774  0001a774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  200001d4  0800a94c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  0800a94c  0002079c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000124ad  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a2b  00000000  00000000  000326f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00035120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d57  00000000  00000000  00036220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019546  00000000  00000000  00036f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f7a  00000000  00000000  000504bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d0f2  00000000  00000000  00064437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c04  00000000  00000000  0010152c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00107130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009fe0 	.word	0x08009fe0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009fe0 	.word	0x08009fe0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a6 	b.w	8000f9c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9e08      	ldr	r6, [sp, #32]
 8000cda:	460d      	mov	r5, r1
 8000cdc:	4604      	mov	r4, r0
 8000cde:	460f      	mov	r7, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14a      	bne.n	8000d7a <__udivmoddi4+0xa6>
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	4694      	mov	ip, r2
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0xe2>
 8000cea:	fab2 f382 	clz	r3, r2
 8000cee:	b143      	cbz	r3, 8000d02 <__udivmoddi4+0x2e>
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	f1c3 0220 	rsb	r2, r3, #32
 8000cf8:	409f      	lsls	r7, r3
 8000cfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	409c      	lsls	r4, r3
 8000d02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d06:	fa1f f58c 	uxth.w	r5, ip
 8000d0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d0e:	0c22      	lsrs	r2, r4, #16
 8000d10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d18:	fb01 f005 	mul.w	r0, r1, r5
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	d90a      	bls.n	8000d36 <__udivmoddi4+0x62>
 8000d20:	eb1c 0202 	adds.w	r2, ip, r2
 8000d24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d28:	f080 811c 	bcs.w	8000f64 <__udivmoddi4+0x290>
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	f240 8119 	bls.w	8000f64 <__udivmoddi4+0x290>
 8000d32:	3902      	subs	r1, #2
 8000d34:	4462      	add	r2, ip
 8000d36:	1a12      	subs	r2, r2, r0
 8000d38:	b2a4      	uxth	r4, r4
 8000d3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d46:	fb00 f505 	mul.w	r5, r0, r5
 8000d4a:	42a5      	cmp	r5, r4
 8000d4c:	d90a      	bls.n	8000d64 <__udivmoddi4+0x90>
 8000d4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x294>
 8000d5a:	42a5      	cmp	r5, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x294>
 8000d60:	4464      	add	r4, ip
 8000d62:	3802      	subs	r0, #2
 8000d64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d68:	1b64      	subs	r4, r4, r5
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	b11e      	cbz	r6, 8000d76 <__udivmoddi4+0xa2>
 8000d6e:	40dc      	lsrs	r4, r3
 8000d70:	2300      	movs	r3, #0
 8000d72:	e9c6 4300 	strd	r4, r3, [r6]
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0xbc>
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f000 80ed 	beq.w	8000f5e <__udivmoddi4+0x28a>
 8000d84:	2100      	movs	r1, #0
 8000d86:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	fab3 f183 	clz	r1, r3
 8000d94:	2900      	cmp	r1, #0
 8000d96:	d149      	bne.n	8000e2c <__udivmoddi4+0x158>
 8000d98:	42ab      	cmp	r3, r5
 8000d9a:	d302      	bcc.n	8000da2 <__udivmoddi4+0xce>
 8000d9c:	4282      	cmp	r2, r0
 8000d9e:	f200 80f8 	bhi.w	8000f92 <__udivmoddi4+0x2be>
 8000da2:	1a84      	subs	r4, r0, r2
 8000da4:	eb65 0203 	sbc.w	r2, r5, r3
 8000da8:	2001      	movs	r0, #1
 8000daa:	4617      	mov	r7, r2
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d0e2      	beq.n	8000d76 <__udivmoddi4+0xa2>
 8000db0:	e9c6 4700 	strd	r4, r7, [r6]
 8000db4:	e7df      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000db6:	b902      	cbnz	r2, 8000dba <__udivmoddi4+0xe6>
 8000db8:	deff      	udf	#255	; 0xff
 8000dba:	fab2 f382 	clz	r3, r2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f040 8090 	bne.w	8000ee4 <__udivmoddi4+0x210>
 8000dc4:	1a8a      	subs	r2, r1, r2
 8000dc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dca:	fa1f fe8c 	uxth.w	lr, ip
 8000dce:	2101      	movs	r1, #1
 8000dd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000dd8:	0c22      	lsrs	r2, r4, #16
 8000dda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dde:	fb0e f005 	mul.w	r0, lr, r5
 8000de2:	4290      	cmp	r0, r2
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x124>
 8000de6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x122>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f200 80cb 	bhi.w	8000f8c <__udivmoddi4+0x2b8>
 8000df6:	4645      	mov	r5, r8
 8000df8:	1a12      	subs	r2, r2, r0
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e00:	fb07 2210 	mls	r2, r7, r0, r2
 8000e04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e08:	fb0e fe00 	mul.w	lr, lr, r0
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x14e>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e18:	d202      	bcs.n	8000e20 <__udivmoddi4+0x14c>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	f200 80bb 	bhi.w	8000f96 <__udivmoddi4+0x2c2>
 8000e20:	4610      	mov	r0, r2
 8000e22:	eba4 040e 	sub.w	r4, r4, lr
 8000e26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2a:	e79f      	b.n	8000d6c <__udivmoddi4+0x98>
 8000e2c:	f1c1 0720 	rsb	r7, r1, #32
 8000e30:	408b      	lsls	r3, r1
 8000e32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e42:	40fd      	lsrs	r5, r7
 8000e44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e48:	4323      	orrs	r3, r4
 8000e4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	fb09 5518 	mls	r5, r9, r8, r5
 8000e56:	0c1c      	lsrs	r4, r3, #16
 8000e58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e60:	42a5      	cmp	r5, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6a:	d90b      	bls.n	8000e84 <__udivmoddi4+0x1b0>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e74:	f080 8088 	bcs.w	8000f88 <__udivmoddi4+0x2b4>
 8000e78:	42a5      	cmp	r5, r4
 8000e7a:	f240 8085 	bls.w	8000f88 <__udivmoddi4+0x2b4>
 8000e7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e82:	4464      	add	r4, ip
 8000e84:	1b64      	subs	r4, r4, r5
 8000e86:	b29d      	uxth	r5, r3
 8000e88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e98:	45a6      	cmp	lr, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x1da>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea4:	d26c      	bcs.n	8000f80 <__udivmoddi4+0x2ac>
 8000ea6:	45a6      	cmp	lr, r4
 8000ea8:	d96a      	bls.n	8000f80 <__udivmoddi4+0x2ac>
 8000eaa:	3b02      	subs	r3, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000eb6:	eba4 040e 	sub.w	r4, r4, lr
 8000eba:	42ac      	cmp	r4, r5
 8000ebc:	46c8      	mov	r8, r9
 8000ebe:	46ae      	mov	lr, r5
 8000ec0:	d356      	bcc.n	8000f70 <__udivmoddi4+0x29c>
 8000ec2:	d053      	beq.n	8000f6c <__udivmoddi4+0x298>
 8000ec4:	b156      	cbz	r6, 8000edc <__udivmoddi4+0x208>
 8000ec6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eca:	eb64 040e 	sbc.w	r4, r4, lr
 8000ece:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed2:	40ca      	lsrs	r2, r1
 8000ed4:	40cc      	lsrs	r4, r1
 8000ed6:	4317      	orrs	r7, r2
 8000ed8:	e9c6 7400 	strd	r7, r4, [r6]
 8000edc:	4618      	mov	r0, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee4:	f1c3 0120 	rsb	r1, r3, #32
 8000ee8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eec:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef4:	409d      	lsls	r5, r3
 8000ef6:	432a      	orrs	r2, r5
 8000ef8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f04:	fb07 1510 	mls	r5, r7, r0, r1
 8000f08:	0c11      	lsrs	r1, r2, #16
 8000f0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f12:	428d      	cmp	r5, r1
 8000f14:	fa04 f403 	lsl.w	r4, r4, r3
 8000f18:	d908      	bls.n	8000f2c <__udivmoddi4+0x258>
 8000f1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f22:	d22f      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f24:	428d      	cmp	r5, r1
 8000f26:	d92d      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f28:	3802      	subs	r0, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1b49      	subs	r1, r1, r5
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f34:	fb07 1115 	mls	r1, r7, r5, r1
 8000f38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f40:	4291      	cmp	r1, r2
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x282>
 8000f44:	eb1c 0202 	adds.w	r2, ip, r2
 8000f48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f4c:	d216      	bcs.n	8000f7c <__udivmoddi4+0x2a8>
 8000f4e:	4291      	cmp	r1, r2
 8000f50:	d914      	bls.n	8000f7c <__udivmoddi4+0x2a8>
 8000f52:	3d02      	subs	r5, #2
 8000f54:	4462      	add	r2, ip
 8000f56:	1a52      	subs	r2, r2, r1
 8000f58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f5c:	e738      	b.n	8000dd0 <__udivmoddi4+0xfc>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e708      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000f64:	4639      	mov	r1, r7
 8000f66:	e6e6      	b.n	8000d36 <__udivmoddi4+0x62>
 8000f68:	4610      	mov	r0, r2
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x90>
 8000f6c:	4548      	cmp	r0, r9
 8000f6e:	d2a9      	bcs.n	8000ec4 <__udivmoddi4+0x1f0>
 8000f70:	ebb9 0802 	subs.w	r8, r9, r2
 8000f74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	e7a3      	b.n	8000ec4 <__udivmoddi4+0x1f0>
 8000f7c:	4645      	mov	r5, r8
 8000f7e:	e7ea      	b.n	8000f56 <__udivmoddi4+0x282>
 8000f80:	462b      	mov	r3, r5
 8000f82:	e794      	b.n	8000eae <__udivmoddi4+0x1da>
 8000f84:	4640      	mov	r0, r8
 8000f86:	e7d1      	b.n	8000f2c <__udivmoddi4+0x258>
 8000f88:	46d0      	mov	r8, sl
 8000f8a:	e77b      	b.n	8000e84 <__udivmoddi4+0x1b0>
 8000f8c:	3d02      	subs	r5, #2
 8000f8e:	4462      	add	r2, ip
 8000f90:	e732      	b.n	8000df8 <__udivmoddi4+0x124>
 8000f92:	4608      	mov	r0, r1
 8000f94:	e70a      	b.n	8000dac <__udivmoddi4+0xd8>
 8000f96:	4464      	add	r4, ip
 8000f98:	3802      	subs	r0, #2
 8000f9a:	e742      	b.n	8000e22 <__udivmoddi4+0x14e>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <update_arr>:
uint8_t LedMode;
uint8_t displayMode;
int16_t microphoneValue;

//util function to change timer frequency
void update_arr(TIM_HandleTypeDef *htim, uint16_t arr) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
    __HAL_TIM_SET_AUTORELOAD(htim, arr);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	887a      	ldrh	r2, [r7, #2]
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fb4:	887a      	ldrh	r2, [r7, #2]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60da      	str	r2, [r3, #12]
    if (__HAL_TIM_GET_COUNTER(htim) >= __HAL_TIM_GET_AUTORELOAD(htim)) {
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d307      	bcc.n	8000fda <update_arr+0x3a>
        htim->Instance->EGR |= TIM_EGR_UG;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f042 0201 	orr.w	r2, r2, #1
 8000fd8:	615a      	str	r2, [r3, #20]
    }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <parseString>:

void parseString(char *input) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

    displayMode = 0;
 8000ff0:	4ba8      	ldr	r3, [pc, #672]	; (8001294 <parseString+0x2ac>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]

    char *token;
    switch (input[0]) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b6d      	cmp	r3, #109	; 0x6d
 8000ffc:	d015      	beq.n	800102a <parseString+0x42>
 8000ffe:	2b6d      	cmp	r3, #109	; 0x6d
 8001000:	f300 8117 	bgt.w	8001232 <parseString+0x24a>
 8001004:	2b63      	cmp	r3, #99	; 0x63
 8001006:	d003      	beq.n	8001010 <parseString+0x28>
 8001008:	2b64      	cmp	r3, #100	; 0x64
 800100a:	f000 8101 	beq.w	8001210 <parseString+0x228>
 800100e:	e110      	b.n	8001232 <parseString+0x24a>
        case 'c':
            LED_setColor(strtoul(&input[1], NULL, 10));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3301      	adds	r3, #1
 8001014:	220a      	movs	r2, #10
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f006 fda1 	bl	8007b60 <strtoul>
 800101e:	4603      	mov	r3, r0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f960 	bl	80012e8 <LED_setColor>
            break;
 8001028:	e12f      	b.n	800128a <parseString+0x2a2>
        case 'm': {
            HAL_TIM_Base_Stop_IT(&htim3);
 800102a:	489b      	ldr	r0, [pc, #620]	; (8001298 <parseString+0x2b0>)
 800102c:	f003 ff34 	bl	8004e98 <HAL_TIM_Base_Stop_IT>
            HAL_TIM_Base_Stop_IT(&htim2);
 8001030:	489a      	ldr	r0, [pc, #616]	; (800129c <parseString+0x2b4>)
 8001032:	f003 ff31 	bl	8004e98 <HAL_TIM_Base_Stop_IT>
            token = strtok(input, ";");
 8001036:	499a      	ldr	r1, [pc, #616]	; (80012a0 <parseString+0x2b8>)
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f006 fedb 	bl	8007df4 <strtok>
 800103e:	60f8      	str	r0, [r7, #12]
            LedMode = strtoul(&token[1], NULL, 10);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3301      	adds	r3, #1
 8001044:	220a      	movs	r2, #10
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f006 fd89 	bl	8007b60 <strtoul>
 800104e:	4603      	mov	r3, r0
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b94      	ldr	r3, [pc, #592]	; (80012a4 <parseString+0x2bc>)
 8001054:	701a      	strb	r2, [r3, #0]
            switch (LedMode) {
 8001056:	4b93      	ldr	r3, [pc, #588]	; (80012a4 <parseString+0x2bc>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b04      	cmp	r3, #4
 800105c:	f200 8114 	bhi.w	8001288 <parseString+0x2a0>
 8001060:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <parseString+0x80>)
 8001062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001066:	bf00      	nop
 8001068:	0800107d 	.word	0x0800107d
 800106c:	080010dd 	.word	0x080010dd
 8001070:	08001121 	.word	0x08001121
 8001074:	08001165 	.word	0x08001165
 8001078:	080011a9 	.word	0x080011a9
                case 0:
                    token = strtok(NULL, ";");
 800107c:	4988      	ldr	r1, [pc, #544]	; (80012a0 <parseString+0x2b8>)
 800107e:	2000      	movs	r0, #0
 8001080:	f006 feb8 	bl	8007df4 <strtok>
 8001084:	60f8      	str	r0, [r7, #12]
                    currentColor = strtoul(token, NULL, 10);
 8001086:	220a      	movs	r2, #10
 8001088:	2100      	movs	r1, #0
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f006 fd68 	bl	8007b60 <strtoul>
 8001090:	4603      	mov	r3, r0
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b84      	ldr	r3, [pc, #528]	; (80012a8 <parseString+0x2c0>)
 8001096:	701a      	strb	r2, [r3, #0]
                    token = strtok(NULL, ";");
 8001098:	4981      	ldr	r1, [pc, #516]	; (80012a0 <parseString+0x2b8>)
 800109a:	2000      	movs	r0, #0
 800109c:	f006 feaa 	bl	8007df4 <strtok>
 80010a0:	60f8      	str	r0, [r7, #12]
                    pulseFrequency = strtof(token, NULL);
 80010a2:	2100      	movs	r1, #0
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f006 fc83 	bl	80079b0 <strtof>
 80010aa:	eef0 7a40 	vmov.f32	s15, s0
 80010ae:	4b7f      	ldr	r3, [pc, #508]	; (80012ac <parseString+0x2c4>)
 80010b0:	edc3 7a00 	vstr	s15, [r3]
                    update_arr(&htim3, pulseFrequency * ARR_1SECOND_VALUE);
 80010b4:	4b7d      	ldr	r3, [pc, #500]	; (80012ac <parseString+0x2c4>)
 80010b6:	edd3 7a00 	vldr	s15, [r3]
 80010ba:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80012b0 <parseString+0x2c8>
 80010be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c6:	ee17 3a90 	vmov	r3, s15
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4619      	mov	r1, r3
 80010ce:	4872      	ldr	r0, [pc, #456]	; (8001298 <parseString+0x2b0>)
 80010d0:	f7ff ff66 	bl	8000fa0 <update_arr>
                    HAL_TIM_Base_Start_IT(&htim3);
 80010d4:	4870      	ldr	r0, [pc, #448]	; (8001298 <parseString+0x2b0>)
 80010d6:	f003 fe7d 	bl	8004dd4 <HAL_TIM_Base_Start_IT>
                    break;
 80010da:	e098      	b.n	800120e <parseString+0x226>
                case 1:
                    token = strtok(NULL, ";");
 80010dc:	4970      	ldr	r1, [pc, #448]	; (80012a0 <parseString+0x2b8>)
 80010de:	2000      	movs	r0, #0
 80010e0:	f006 fe88 	bl	8007df4 <strtok>
 80010e4:	60f8      	str	r0, [r7, #12]
                    pulseFrequency = strtof(token, NULL);
 80010e6:	2100      	movs	r1, #0
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f006 fc61 	bl	80079b0 <strtof>
 80010ee:	eef0 7a40 	vmov.f32	s15, s0
 80010f2:	4b6e      	ldr	r3, [pc, #440]	; (80012ac <parseString+0x2c4>)
 80010f4:	edc3 7a00 	vstr	s15, [r3]
                    update_arr(&htim3, pulseFrequency * ARR_1SECOND_VALUE);
 80010f8:	4b6c      	ldr	r3, [pc, #432]	; (80012ac <parseString+0x2c4>)
 80010fa:	edd3 7a00 	vldr	s15, [r3]
 80010fe:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80012b0 <parseString+0x2c8>
 8001102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110a:	ee17 3a90 	vmov	r3, s15
 800110e:	b29b      	uxth	r3, r3
 8001110:	4619      	mov	r1, r3
 8001112:	4861      	ldr	r0, [pc, #388]	; (8001298 <parseString+0x2b0>)
 8001114:	f7ff ff44 	bl	8000fa0 <update_arr>
                    HAL_TIM_Base_Start_IT(&htim3);
 8001118:	485f      	ldr	r0, [pc, #380]	; (8001298 <parseString+0x2b0>)
 800111a:	f003 fe5b 	bl	8004dd4 <HAL_TIM_Base_Start_IT>
                    break;
 800111e:	e076      	b.n	800120e <parseString+0x226>
                case 2:
                    token = strtok(NULL, ";");
 8001120:	495f      	ldr	r1, [pc, #380]	; (80012a0 <parseString+0x2b8>)
 8001122:	2000      	movs	r0, #0
 8001124:	f006 fe66 	bl	8007df4 <strtok>
 8001128:	60f8      	str	r0, [r7, #12]
                    pulseFrequency = strtof(token, NULL);
 800112a:	2100      	movs	r1, #0
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f006 fc3f 	bl	80079b0 <strtof>
 8001132:	eef0 7a40 	vmov.f32	s15, s0
 8001136:	4b5d      	ldr	r3, [pc, #372]	; (80012ac <parseString+0x2c4>)
 8001138:	edc3 7a00 	vstr	s15, [r3]
                    update_arr(&htim3, pulseFrequency * ARR_1SECOND_VALUE);
 800113c:	4b5b      	ldr	r3, [pc, #364]	; (80012ac <parseString+0x2c4>)
 800113e:	edd3 7a00 	vldr	s15, [r3]
 8001142:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80012b0 <parseString+0x2c8>
 8001146:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800114e:	ee17 3a90 	vmov	r3, s15
 8001152:	b29b      	uxth	r3, r3
 8001154:	4619      	mov	r1, r3
 8001156:	4850      	ldr	r0, [pc, #320]	; (8001298 <parseString+0x2b0>)
 8001158:	f7ff ff22 	bl	8000fa0 <update_arr>
                    HAL_TIM_Base_Start_IT(&htim3);
 800115c:	484e      	ldr	r0, [pc, #312]	; (8001298 <parseString+0x2b0>)
 800115e:	f003 fe39 	bl	8004dd4 <HAL_TIM_Base_Start_IT>
                    break;
 8001162:	e054      	b.n	800120e <parseString+0x226>
                case 3:
                    token = strtok(NULL, ";");
 8001164:	494e      	ldr	r1, [pc, #312]	; (80012a0 <parseString+0x2b8>)
 8001166:	2000      	movs	r0, #0
 8001168:	f006 fe44 	bl	8007df4 <strtok>
 800116c:	60f8      	str	r0, [r7, #12]
                    pulseFrequency = strtof(token, NULL);
 800116e:	2100      	movs	r1, #0
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f006 fc1d 	bl	80079b0 <strtof>
 8001176:	eef0 7a40 	vmov.f32	s15, s0
 800117a:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <parseString+0x2c4>)
 800117c:	edc3 7a00 	vstr	s15, [r3]
                    update_arr(&htim3, pulseFrequency * ARR_1SECOND_VALUE);
 8001180:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <parseString+0x2c4>)
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80012b0 <parseString+0x2c8>
 800118a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001192:	ee17 3a90 	vmov	r3, s15
 8001196:	b29b      	uxth	r3, r3
 8001198:	4619      	mov	r1, r3
 800119a:	483f      	ldr	r0, [pc, #252]	; (8001298 <parseString+0x2b0>)
 800119c:	f7ff ff00 	bl	8000fa0 <update_arr>
                    HAL_TIM_Base_Start_IT(&htim3);
 80011a0:	483d      	ldr	r0, [pc, #244]	; (8001298 <parseString+0x2b0>)
 80011a2:	f003 fe17 	bl	8004dd4 <HAL_TIM_Base_Start_IT>
                    break;
 80011a6:	e032      	b.n	800120e <parseString+0x226>
                case 4:
                    token = strtok(NULL, ";");
 80011a8:	493d      	ldr	r1, [pc, #244]	; (80012a0 <parseString+0x2b8>)
 80011aa:	2000      	movs	r0, #0
 80011ac:	f006 fe22 	bl	8007df4 <strtok>
 80011b0:	60f8      	str	r0, [r7, #12]
                    currentColor = strtoul(token, NULL, 10);
 80011b2:	220a      	movs	r2, #10
 80011b4:	2100      	movs	r1, #0
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f006 fcd2 	bl	8007b60 <strtoul>
 80011bc:	4603      	mov	r3, r0
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <parseString+0x2c0>)
 80011c2:	701a      	strb	r2, [r3, #0]
                    token = strtok(NULL, ";");
 80011c4:	4936      	ldr	r1, [pc, #216]	; (80012a0 <parseString+0x2b8>)
 80011c6:	2000      	movs	r0, #0
 80011c8:	f006 fe14 	bl	8007df4 <strtok>
 80011cc:	60f8      	str	r0, [r7, #12]
                    pulseFrequency = strtof(token, NULL);
 80011ce:	2100      	movs	r1, #0
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f006 fbed 	bl	80079b0 <strtof>
 80011d6:	eef0 7a40 	vmov.f32	s15, s0
 80011da:	4b34      	ldr	r3, [pc, #208]	; (80012ac <parseString+0x2c4>)
 80011dc:	edc3 7a00 	vstr	s15, [r3]
                    update_arr(&htim3, pulseFrequency * ARR_1SECOND_VALUE);
 80011e0:	4b32      	ldr	r3, [pc, #200]	; (80012ac <parseString+0x2c4>)
 80011e2:	edd3 7a00 	vldr	s15, [r3]
 80011e6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80012b0 <parseString+0x2c8>
 80011ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f2:	ee17 3a90 	vmov	r3, s15
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	4619      	mov	r1, r3
 80011fa:	4827      	ldr	r0, [pc, #156]	; (8001298 <parseString+0x2b0>)
 80011fc:	f7ff fed0 	bl	8000fa0 <update_arr>
                    HAL_TIM_Base_Start_IT(&htim2);
 8001200:	4826      	ldr	r0, [pc, #152]	; (800129c <parseString+0x2b4>)
 8001202:	f003 fde7 	bl	8004dd4 <HAL_TIM_Base_Start_IT>
                    HAL_TIM_Base_Start_IT(&htim3);
 8001206:	4824      	ldr	r0, [pc, #144]	; (8001298 <parseString+0x2b0>)
 8001208:	f003 fde4 	bl	8004dd4 <HAL_TIM_Base_Start_IT>
                    break;
 800120c:	bf00      	nop
            }
            break;
 800120e:	e03b      	b.n	8001288 <parseString+0x2a0>
        }

        case 'd':
            token = strtok(input, ";");
 8001210:	4923      	ldr	r1, [pc, #140]	; (80012a0 <parseString+0x2b8>)
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f006 fdee 	bl	8007df4 <strtok>
 8001218:	60f8      	str	r0, [r7, #12]
            displayMode = strtoul(&token[1], NULL, 10);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3301      	adds	r3, #1
 800121e:	220a      	movs	r2, #10
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f006 fc9c 	bl	8007b60 <strtoul>
 8001228:	4603      	mov	r3, r0
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <parseString+0x2ac>)
 800122e:	701a      	strb	r2, [r3, #0]
            break;
 8001230:	e02b      	b.n	800128a <parseString+0x2a2>

        default:
            token = strtok(input, ";");
 8001232:	491b      	ldr	r1, [pc, #108]	; (80012a0 <parseString+0x2b8>)
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f006 fddd 	bl	8007df4 <strtok>
 800123a:	60f8      	str	r0, [r7, #12]
            uint8_t var1 = strtoul(token, NULL, 10);
 800123c:	220a      	movs	r2, #10
 800123e:	2100      	movs	r1, #0
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f006 fc8d 	bl	8007b60 <strtoul>
 8001246:	4603      	mov	r3, r0
 8001248:	72fb      	strb	r3, [r7, #11]
            token = strtok(NULL, ";");
 800124a:	4915      	ldr	r1, [pc, #84]	; (80012a0 <parseString+0x2b8>)
 800124c:	2000      	movs	r0, #0
 800124e:	f006 fdd1 	bl	8007df4 <strtok>
 8001252:	60f8      	str	r0, [r7, #12]

            uint8_t var2 = strtoul(token, NULL, 10);
 8001254:	220a      	movs	r2, #10
 8001256:	2100      	movs	r1, #0
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f006 fc81 	bl	8007b60 <strtoul>
 800125e:	4603      	mov	r3, r0
 8001260:	72bb      	strb	r3, [r7, #10]
            token = strtok(NULL, ";");
 8001262:	490f      	ldr	r1, [pc, #60]	; (80012a0 <parseString+0x2b8>)
 8001264:	2000      	movs	r0, #0
 8001266:	f006 fdc5 	bl	8007df4 <strtok>
 800126a:	60f8      	str	r0, [r7, #12]

            uint8_t var3 = strtoul(token, NULL, 10);
 800126c:	220a      	movs	r2, #10
 800126e:	2100      	movs	r1, #0
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f006 fc75 	bl	8007b60 <strtoul>
 8001276:	4603      	mov	r3, r0
 8001278:	727b      	strb	r3, [r7, #9]
            LED_setColorRGB(var1, var2, var3);
 800127a:	7a7a      	ldrb	r2, [r7, #9]
 800127c:	7ab9      	ldrb	r1, [r7, #10]
 800127e:	7afb      	ldrb	r3, [r7, #11]
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f817 	bl	80012b4 <LED_setColorRGB>
            break;
 8001286:	e000      	b.n	800128a <parseString+0x2a2>
            break;
 8001288:	bf00      	nop
    }



}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200001f9 	.word	0x200001f9
 8001298:	2000038c 	.word	0x2000038c
 800129c:	20000344 	.word	0x20000344
 80012a0:	08009ff8 	.word	0x08009ff8
 80012a4:	200001f8 	.word	0x200001f8
 80012a8:	200001f1 	.word	0x200001f1
 80012ac:	200001f4 	.word	0x200001f4
 80012b0:	42c80000 	.word	0x42c80000

080012b4 <LED_setColorRGB>:

void LED_setColorRGB(uint8_t R, uint8_t G, uint8_t B) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	460b      	mov	r3, r1
 80012c0:	71bb      	strb	r3, [r7, #6]
 80012c2:	4613      	mov	r3, r2
 80012c4:	717b      	strb	r3, [r7, #5]
    TIM1->CCR1 = R;
 80012c6:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <LED_setColorRGB+0x30>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	6353      	str	r3, [r2, #52]	; 0x34
    TIM1->CCR2 = G;
 80012cc:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <LED_setColorRGB+0x30>)
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	6393      	str	r3, [r2, #56]	; 0x38
    TIM1->CCR3 = B;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <LED_setColorRGB+0x30>)
 80012d4:	797b      	ldrb	r3, [r7, #5]
 80012d6:	63d3      	str	r3, [r2, #60]	; 0x3c
    prepateLCDMessage();
 80012d8:	f000 fb4c 	bl	8001974 <prepateLCDMessage>

}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40010000 	.word	0x40010000

080012e8 <LED_setColor>:

void LED_setColor(enum Color color) {
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
    TIM1->CCR1 = colorValues[color].red / ARR_DIV;
 80012f2:	79fa      	ldrb	r2, [r7, #7]
 80012f4:	492a      	ldr	r1, [pc, #168]	; (80013a0 <LED_setColor+0xb8>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	440b      	add	r3, r1
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f90e 	bl	8000524 <__aeabi_i2d>
 8001308:	a323      	add	r3, pc, #140	; (adr r3, 8001398 <LED_setColor+0xb0>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff fa9d 	bl	800084c <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4c23      	ldr	r4, [pc, #140]	; (80013a4 <LED_setColor+0xbc>)
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f7ff fc1c 	bl	8000b58 <__aeabi_d2uiz>
 8001320:	4603      	mov	r3, r0
 8001322:	6363      	str	r3, [r4, #52]	; 0x34
    TIM1->CCR2 = colorValues[color].green / ARR_DIV;
 8001324:	79fa      	ldrb	r2, [r7, #7]
 8001326:	491e      	ldr	r1, [pc, #120]	; (80013a0 <LED_setColor+0xb8>)
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	3304      	adds	r3, #4
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f8f4 	bl	8000524 <__aeabi_i2d>
 800133c:	a316      	add	r3, pc, #88	; (adr r3, 8001398 <LED_setColor+0xb0>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7ff fa83 	bl	800084c <__aeabi_ddiv>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4c16      	ldr	r4, [pc, #88]	; (80013a4 <LED_setColor+0xbc>)
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fc02 	bl	8000b58 <__aeabi_d2uiz>
 8001354:	4603      	mov	r3, r0
 8001356:	63a3      	str	r3, [r4, #56]	; 0x38
    TIM1->CCR3 = colorValues[color].blue / ARR_DIV;
 8001358:	79fa      	ldrb	r2, [r7, #7]
 800135a:	4911      	ldr	r1, [pc, #68]	; (80013a0 <LED_setColor+0xb8>)
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	3308      	adds	r3, #8
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f8da 	bl	8000524 <__aeabi_i2d>
 8001370:	a309      	add	r3, pc, #36	; (adr r3, 8001398 <LED_setColor+0xb0>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff fa69 	bl	800084c <__aeabi_ddiv>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4c09      	ldr	r4, [pc, #36]	; (80013a4 <LED_setColor+0xbc>)
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fbe8 	bl	8000b58 <__aeabi_d2uiz>
 8001388:	4603      	mov	r3, r0
 800138a:	63e3      	str	r3, [r4, #60]	; 0x3c
    prepateLCDMessage();
 800138c:	f000 faf2 	bl	8001974 <prepateLCDMessage>

}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bd90      	pop	{r4, r7, pc}
 8001398:	66666666 	.word	0x66666666
 800139c:	40046666 	.word	0x40046666
 80013a0:	0800a010 	.word	0x0800a010
 80013a4:	40010000 	.word	0x40010000

080013a8 <LED_pulseMode>:

void LED_pulseMode() {
 80013a8:	b5b0      	push	{r4, r5, r7, lr}
 80013aa:	af00      	add	r7, sp, #0
    TIM1->CCR1 = colorValues[currentColor].red / ARR_DIV - pulseCounter;
 80013ac:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <LED_pulseMode+0x130>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4a4a      	ldr	r2, [pc, #296]	; (80014dc <LED_pulseMode+0x134>)
 80013b4:	460b      	mov	r3, r1
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	440b      	add	r3, r1
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8af 	bl	8000524 <__aeabi_i2d>
 80013c6:	a342      	add	r3, pc, #264	; (adr r3, 80014d0 <LED_pulseMode+0x128>)
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	f7ff fa3e 	bl	800084c <__aeabi_ddiv>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4614      	mov	r4, r2
 80013d6:	461d      	mov	r5, r3
 80013d8:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <LED_pulseMode+0x138>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8a1 	bl	8000524 <__aeabi_i2d>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4620      	mov	r0, r4
 80013e8:	4629      	mov	r1, r5
 80013ea:	f7fe ff4d 	bl	8000288 <__aeabi_dsub>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4c3c      	ldr	r4, [pc, #240]	; (80014e4 <LED_pulseMode+0x13c>)
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fbae 	bl	8000b58 <__aeabi_d2uiz>
 80013fc:	4603      	mov	r3, r0
 80013fe:	6363      	str	r3, [r4, #52]	; 0x34
    TIM1->CCR2 = colorValues[currentColor].green / ARR_DIV - pulseCounter;
 8001400:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <LED_pulseMode+0x130>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	4a35      	ldr	r2, [pc, #212]	; (80014dc <LED_pulseMode+0x134>)
 8001408:	460b      	mov	r3, r1
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	440b      	add	r3, r1
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	3304      	adds	r3, #4
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f884 	bl	8000524 <__aeabi_i2d>
 800141c:	a32c      	add	r3, pc, #176	; (adr r3, 80014d0 <LED_pulseMode+0x128>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7ff fa13 	bl	800084c <__aeabi_ddiv>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4614      	mov	r4, r2
 800142c:	461d      	mov	r5, r3
 800142e:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <LED_pulseMode+0x138>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f876 	bl	8000524 <__aeabi_i2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4620      	mov	r0, r4
 800143e:	4629      	mov	r1, r5
 8001440:	f7fe ff22 	bl	8000288 <__aeabi_dsub>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4c26      	ldr	r4, [pc, #152]	; (80014e4 <LED_pulseMode+0x13c>)
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fb83 	bl	8000b58 <__aeabi_d2uiz>
 8001452:	4603      	mov	r3, r0
 8001454:	63a3      	str	r3, [r4, #56]	; 0x38
    TIM1->CCR3 = colorValues[currentColor].blue / ARR_DIV - pulseCounter;
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <LED_pulseMode+0x130>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	4619      	mov	r1, r3
 800145c:	4a1f      	ldr	r2, [pc, #124]	; (80014dc <LED_pulseMode+0x134>)
 800145e:	460b      	mov	r3, r1
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	440b      	add	r3, r1
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	3308      	adds	r3, #8
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f859 	bl	8000524 <__aeabi_i2d>
 8001472:	a317      	add	r3, pc, #92	; (adr r3, 80014d0 <LED_pulseMode+0x128>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f9e8 	bl	800084c <__aeabi_ddiv>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4614      	mov	r4, r2
 8001482:	461d      	mov	r5, r3
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <LED_pulseMode+0x138>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f84b 	bl	8000524 <__aeabi_i2d>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4620      	mov	r0, r4
 8001494:	4629      	mov	r1, r5
 8001496:	f7fe fef7 	bl	8000288 <__aeabi_dsub>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4c11      	ldr	r4, [pc, #68]	; (80014e4 <LED_pulseMode+0x13c>)
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff fb58 	bl	8000b58 <__aeabi_d2uiz>
 80014a8:	4603      	mov	r3, r0
 80014aa:	63e3      	str	r3, [r4, #60]	; 0x3c
    pulseCounter++;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <LED_pulseMode+0x138>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <LED_pulseMode+0x138>)
 80014b6:	701a      	strb	r2, [r3, #0]
    if (pulseCounter >= CCR_MAX_VALUE) {
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <LED_pulseMode+0x138>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b63      	cmp	r3, #99	; 0x63
 80014be:	d904      	bls.n	80014ca <LED_pulseMode+0x122>
        pulseCounter = 0;
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <LED_pulseMode+0x138>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
        prepateLCDMessage();
 80014c6:	f000 fa55 	bl	8001974 <prepateLCDMessage>

    }
}
 80014ca:	bf00      	nop
 80014cc:	bdb0      	pop	{r4, r5, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	66666666 	.word	0x66666666
 80014d4:	40046666 	.word	0x40046666
 80014d8:	200001f1 	.word	0x200001f1
 80014dc:	0800a010 	.word	0x0800a010
 80014e0:	200001f0 	.word	0x200001f0
 80014e4:	40010000 	.word	0x40010000

080014e8 <LED_continuousTransformationMode>:

void LED_continuousTransformationMode() {
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	af00      	add	r7, sp, #0
    TIM1->CCR1 = colorValues[currentColor].red / ARR_DIV - pulseCounter;
 80014ec:	4b54      	ldr	r3, [pc, #336]	; (8001640 <LED_continuousTransformationMode+0x158>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	4a54      	ldr	r2, [pc, #336]	; (8001644 <LED_continuousTransformationMode+0x15c>)
 80014f4:	460b      	mov	r3, r1
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	440b      	add	r3, r1
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f80f 	bl	8000524 <__aeabi_i2d>
 8001506:	a34c      	add	r3, pc, #304	; (adr r3, 8001638 <LED_continuousTransformationMode+0x150>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7ff f99e 	bl	800084c <__aeabi_ddiv>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4614      	mov	r4, r2
 8001516:	461d      	mov	r5, r3
 8001518:	4b4b      	ldr	r3, [pc, #300]	; (8001648 <LED_continuousTransformationMode+0x160>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f801 	bl	8000524 <__aeabi_i2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4620      	mov	r0, r4
 8001528:	4629      	mov	r1, r5
 800152a:	f7fe fead 	bl	8000288 <__aeabi_dsub>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4c46      	ldr	r4, [pc, #280]	; (800164c <LED_continuousTransformationMode+0x164>)
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff fb0e 	bl	8000b58 <__aeabi_d2uiz>
 800153c:	4603      	mov	r3, r0
 800153e:	6363      	str	r3, [r4, #52]	; 0x34
    TIM1->CCR2 = colorValues[currentColor].green / ARR_DIV - pulseCounter;
 8001540:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <LED_continuousTransformationMode+0x158>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	4a3f      	ldr	r2, [pc, #252]	; (8001644 <LED_continuousTransformationMode+0x15c>)
 8001548:	460b      	mov	r3, r1
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	440b      	add	r3, r1
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	3304      	adds	r3, #4
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ffe4 	bl	8000524 <__aeabi_i2d>
 800155c:	a336      	add	r3, pc, #216	; (adr r3, 8001638 <LED_continuousTransformationMode+0x150>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7ff f973 	bl	800084c <__aeabi_ddiv>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4614      	mov	r4, r2
 800156c:	461d      	mov	r5, r3
 800156e:	4b36      	ldr	r3, [pc, #216]	; (8001648 <LED_continuousTransformationMode+0x160>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffd6 	bl	8000524 <__aeabi_i2d>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4620      	mov	r0, r4
 800157e:	4629      	mov	r1, r5
 8001580:	f7fe fe82 	bl	8000288 <__aeabi_dsub>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4c30      	ldr	r4, [pc, #192]	; (800164c <LED_continuousTransformationMode+0x164>)
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fae3 	bl	8000b58 <__aeabi_d2uiz>
 8001592:	4603      	mov	r3, r0
 8001594:	63a3      	str	r3, [r4, #56]	; 0x38
    TIM1->CCR3 = colorValues[currentColor].blue / ARR_DIV - pulseCounter;
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <LED_continuousTransformationMode+0x158>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	4619      	mov	r1, r3
 800159c:	4a29      	ldr	r2, [pc, #164]	; (8001644 <LED_continuousTransformationMode+0x15c>)
 800159e:	460b      	mov	r3, r1
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	440b      	add	r3, r1
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3308      	adds	r3, #8
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffb9 	bl	8000524 <__aeabi_i2d>
 80015b2:	a321      	add	r3, pc, #132	; (adr r3, 8001638 <LED_continuousTransformationMode+0x150>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7ff f948 	bl	800084c <__aeabi_ddiv>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <LED_continuousTransformationMode+0x160>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffab 	bl	8000524 <__aeabi_i2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4620      	mov	r0, r4
 80015d4:	4629      	mov	r1, r5
 80015d6:	f7fe fe57 	bl	8000288 <__aeabi_dsub>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4c1b      	ldr	r4, [pc, #108]	; (800164c <LED_continuousTransformationMode+0x164>)
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f7ff fab8 	bl	8000b58 <__aeabi_d2uiz>
 80015e8:	4603      	mov	r3, r0
 80015ea:	63e3      	str	r3, [r4, #60]	; 0x3c
    pulseCounter++;
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <LED_continuousTransformationMode+0x160>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <LED_continuousTransformationMode+0x160>)
 80015f6:	701a      	strb	r2, [r3, #0]
    if (pulseCounter >= CCR_MAX_VALUE) {
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <LED_continuousTransformationMode+0x160>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b63      	cmp	r3, #99	; 0x63
 80015fe:	d919      	bls.n	8001634 <LED_continuousTransformationMode+0x14c>
        pulseCounter = 0;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <LED_continuousTransformationMode+0x160>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
        currentColor++;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <LED_continuousTransformationMode+0x158>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <LED_continuousTransformationMode+0x158>)
 8001610:	701a      	strb	r2, [r3, #0]
        currentColor %= 11;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <LED_continuousTransformationMode+0x158>)
 8001614:	7819      	ldrb	r1, [r3, #0]
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <LED_continuousTransformationMode+0x168>)
 8001618:	fba3 2301 	umull	r2, r3, r3, r1
 800161c:	08da      	lsrs	r2, r3, #3
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	1acb      	subs	r3, r1, r3
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <LED_continuousTransformationMode+0x158>)
 800162e:	701a      	strb	r2, [r3, #0]
        prepateLCDMessage();
 8001630:	f000 f9a0 	bl	8001974 <prepateLCDMessage>

    }
}
 8001634:	bf00      	nop
 8001636:	bdb0      	pop	{r4, r5, r7, pc}
 8001638:	66666666 	.word	0x66666666
 800163c:	40046666 	.word	0x40046666
 8001640:	200001f1 	.word	0x200001f1
 8001644:	0800a010 	.word	0x0800a010
 8001648:	200001f0 	.word	0x200001f0
 800164c:	40010000 	.word	0x40010000
 8001650:	ba2e8ba3 	.word	0xba2e8ba3
 8001654:	00000000 	.word	0x00000000

08001658 <LED_continuousColorChangeMode>:

void LED_continuousColorChangeMode() {
 8001658:	b598      	push	{r3, r4, r7, lr}
 800165a:	af00      	add	r7, sp, #0
    TIM1->CCR1 = colorValues[currentColor].red / ARR_DIV;
 800165c:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <LED_continuousColorChangeMode+0x100>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	4a3e      	ldr	r2, [pc, #248]	; (800175c <LED_continuousColorChangeMode+0x104>)
 8001664:	460b      	mov	r3, r1
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	440b      	add	r3, r1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff57 	bl	8000524 <__aeabi_i2d>
 8001676:	a336      	add	r3, pc, #216	; (adr r3, 8001750 <LED_continuousColorChangeMode+0xf8>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7ff f8e6 	bl	800084c <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4c36      	ldr	r4, [pc, #216]	; (8001760 <LED_continuousColorChangeMode+0x108>)
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fa65 	bl	8000b58 <__aeabi_d2uiz>
 800168e:	4603      	mov	r3, r0
 8001690:	6363      	str	r3, [r4, #52]	; 0x34
    TIM1->CCR2 = colorValues[currentColor].green / ARR_DIV;
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <LED_continuousColorChangeMode+0x100>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	4619      	mov	r1, r3
 8001698:	4a30      	ldr	r2, [pc, #192]	; (800175c <LED_continuousColorChangeMode+0x104>)
 800169a:	460b      	mov	r3, r1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	440b      	add	r3, r1
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	3304      	adds	r3, #4
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff3b 	bl	8000524 <__aeabi_i2d>
 80016ae:	a328      	add	r3, pc, #160	; (adr r3, 8001750 <LED_continuousColorChangeMode+0xf8>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7ff f8ca 	bl	800084c <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4c28      	ldr	r4, [pc, #160]	; (8001760 <LED_continuousColorChangeMode+0x108>)
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff fa49 	bl	8000b58 <__aeabi_d2uiz>
 80016c6:	4603      	mov	r3, r0
 80016c8:	63a3      	str	r3, [r4, #56]	; 0x38
    TIM1->CCR3 = colorValues[currentColor].blue / ARR_DIV;
 80016ca:	4b23      	ldr	r3, [pc, #140]	; (8001758 <LED_continuousColorChangeMode+0x100>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	4619      	mov	r1, r3
 80016d0:	4a22      	ldr	r2, [pc, #136]	; (800175c <LED_continuousColorChangeMode+0x104>)
 80016d2:	460b      	mov	r3, r1
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	440b      	add	r3, r1
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	3308      	adds	r3, #8
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff1f 	bl	8000524 <__aeabi_i2d>
 80016e6:	a31a      	add	r3, pc, #104	; (adr r3, 8001750 <LED_continuousColorChangeMode+0xf8>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7ff f8ae 	bl	800084c <__aeabi_ddiv>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4c1a      	ldr	r4, [pc, #104]	; (8001760 <LED_continuousColorChangeMode+0x108>)
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff fa2d 	bl	8000b58 <__aeabi_d2uiz>
 80016fe:	4603      	mov	r3, r0
 8001700:	63e3      	str	r3, [r4, #60]	; 0x3c
    pulseCounter++;
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <LED_continuousColorChangeMode+0x10c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <LED_continuousColorChangeMode+0x10c>)
 800170c:	701a      	strb	r2, [r3, #0]
    if (pulseCounter >= CCR_MAX_VALUE) {
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <LED_continuousColorChangeMode+0x10c>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b63      	cmp	r3, #99	; 0x63
 8001714:	d918      	bls.n	8001748 <LED_continuousColorChangeMode+0xf0>
        pulseCounter = 0;
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <LED_continuousColorChangeMode+0x10c>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
        currentColor++;
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <LED_continuousColorChangeMode+0x100>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <LED_continuousColorChangeMode+0x100>)
 8001726:	701a      	strb	r2, [r3, #0]
        currentColor %= 12;
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <LED_continuousColorChangeMode+0x100>)
 800172a:	781a      	ldrb	r2, [r3, #0]
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <LED_continuousColorChangeMode+0x110>)
 800172e:	fba3 1302 	umull	r1, r3, r3, r2
 8001732:	08d9      	lsrs	r1, r3, #3
 8001734:	460b      	mov	r3, r1
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	440b      	add	r3, r1
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <LED_continuousColorChangeMode+0x100>)
 8001742:	701a      	strb	r2, [r3, #0]
        prepateLCDMessage();
 8001744:	f000 f916 	bl	8001974 <prepateLCDMessage>

    }
}
 8001748:	bf00      	nop
 800174a:	bd98      	pop	{r3, r4, r7, pc}
 800174c:	f3af 8000 	nop.w
 8001750:	66666666 	.word	0x66666666
 8001754:	40046666 	.word	0x40046666
 8001758:	200001f1 	.word	0x200001f1
 800175c:	0800a010 	.word	0x0800a010
 8001760:	40010000 	.word	0x40010000
 8001764:	200001f0 	.word	0x200001f0
 8001768:	aaaaaaab 	.word	0xaaaaaaab

0800176c <LED_randomColorMode>:

void LED_randomColorMode() {
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
    pulseCounter++;
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <LED_randomColorMode+0x80>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <LED_randomColorMode+0x80>)
 800177a:	701a      	strb	r2, [r3, #0]
    if (pulseCounter >= CCR_MAX_VALUE) {
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <LED_randomColorMode+0x80>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b63      	cmp	r3, #99	; 0x63
 8001782:	d931      	bls.n	80017e8 <LED_randomColorMode+0x7c>
        pulseCounter = 0;
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <LED_randomColorMode+0x80>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
        TIM1->CCR1 = rand() % 100;
 800178a:	f005 fac7 	bl	8006d1c <rand>
 800178e:	4603      	mov	r3, r0
 8001790:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <LED_randomColorMode+0x84>)
 8001792:	fb82 1203 	smull	r1, r2, r2, r3
 8001796:	1151      	asrs	r1, r2, #5
 8001798:	17da      	asrs	r2, r3, #31
 800179a:	1a8a      	subs	r2, r1, r2
 800179c:	2164      	movs	r1, #100	; 0x64
 800179e:	fb01 f202 	mul.w	r2, r1, r2
 80017a2:	1a9a      	subs	r2, r3, r2
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <LED_randomColorMode+0x88>)
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR2 = rand() % 100;
 80017a8:	f005 fab8 	bl	8006d1c <rand>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <LED_randomColorMode+0x84>)
 80017b0:	fb82 1203 	smull	r1, r2, r2, r3
 80017b4:	1151      	asrs	r1, r2, #5
 80017b6:	17da      	asrs	r2, r3, #31
 80017b8:	1a8a      	subs	r2, r1, r2
 80017ba:	2164      	movs	r1, #100	; 0x64
 80017bc:	fb01 f202 	mul.w	r2, r1, r2
 80017c0:	1a9a      	subs	r2, r3, r2
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <LED_randomColorMode+0x88>)
 80017c4:	639a      	str	r2, [r3, #56]	; 0x38
        TIM1->CCR3 = rand() % 100;
 80017c6:	f005 faa9 	bl	8006d1c <rand>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <LED_randomColorMode+0x84>)
 80017ce:	fb82 1203 	smull	r1, r2, r2, r3
 80017d2:	1151      	asrs	r1, r2, #5
 80017d4:	17da      	asrs	r2, r3, #31
 80017d6:	1a8a      	subs	r2, r1, r2
 80017d8:	2164      	movs	r1, #100	; 0x64
 80017da:	fb01 f202 	mul.w	r2, r1, r2
 80017de:	1a9a      	subs	r2, r3, r2
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <LED_randomColorMode+0x88>)
 80017e2:	63da      	str	r2, [r3, #60]	; 0x3c
        prepateLCDMessage();
 80017e4:	f000 f8c6 	bl	8001974 <prepateLCDMessage>

    }
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200001f0 	.word	0x200001f0
 80017f0:	51eb851f 	.word	0x51eb851f
 80017f4:	40010000 	.word	0x40010000

080017f8 <LED_microphoneMode>:

void LED_microphoneMode() {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	; 0x30
 80017fc:	af00      	add	r7, sp, #0
    pulseCounter++;
 80017fe:	4b57      	ldr	r3, [pc, #348]	; (800195c <LED_microphoneMode+0x164>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	3301      	adds	r3, #1
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4b55      	ldr	r3, [pc, #340]	; (800195c <LED_microphoneMode+0x164>)
 8001808:	701a      	strb	r2, [r3, #0]
    if (pulseCounter >= CCR_MAX_VALUE) {
 800180a:	4b54      	ldr	r3, [pc, #336]	; (800195c <LED_microphoneMode+0x164>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b63      	cmp	r3, #99	; 0x63
 8001810:	f240 80a0 	bls.w	8001954 <LED_microphoneMode+0x15c>
        pulseCounter = 0;
 8001814:	4b51      	ldr	r3, [pc, #324]	; (800195c <LED_microphoneMode+0x164>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
        TIM1->CCR1 = min(100, max(0, microphoneValue - ADC_NOISE_VALUE)) /
 800181a:	2364      	movs	r3, #100	; 0x64
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800181e:	2300      	movs	r3, #0
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
 8001822:	4b4f      	ldr	r3, [pc, #316]	; (8001960 <LED_microphoneMode+0x168>)
 8001824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001828:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
 800182e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001832:	4293      	cmp	r3, r2
 8001834:	bfb8      	it	lt
 8001836:	4613      	movlt	r3, r2
 8001838:	623b      	str	r3, [r7, #32]
 800183a:	6a3a      	ldr	r2, [r7, #32]
 800183c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183e:	4293      	cmp	r3, r2
 8001840:	bfa8      	it	ge
 8001842:	4613      	movge	r3, r2
                     ADC_DIV * ((float) colorValues[currentColor].red / (float) UCHAR_MAX);
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184c:	4b45      	ldr	r3, [pc, #276]	; (8001964 <LED_microphoneMode+0x16c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	4a45      	ldr	r2, [pc, #276]	; (8001968 <LED_microphoneMode+0x170>)
 8001854:	460b      	mov	r3, r1
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	440b      	add	r3, r1
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001868:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800196c <LED_microphoneMode+0x174>
 800186c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001870:	ee67 7a27 	vmul.f32	s15, s14, s15
        TIM1->CCR1 = min(100, max(0, microphoneValue - ADC_NOISE_VALUE)) /
 8001874:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <LED_microphoneMode+0x178>)
 8001876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800187a:	ee17 2a90 	vmov	r2, s15
 800187e:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR2 = min(100, max(0, microphoneValue - ADC_NOISE_VALUE)) /
 8001880:	2364      	movs	r3, #100	; 0x64
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	4b35      	ldr	r3, [pc, #212]	; (8001960 <LED_microphoneMode+0x168>)
 800188a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188e:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4293      	cmp	r3, r2
 800189a:	bfb8      	it	lt
 800189c:	4613      	movlt	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	4293      	cmp	r3, r2
 80018a6:	bfa8      	it	ge
 80018a8:	4613      	movge	r3, r2
                     ADC_DIV * ((float) colorValues[currentColor].green / (float) UCHAR_MAX);
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <LED_microphoneMode+0x16c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	4619      	mov	r1, r3
 80018b8:	4a2b      	ldr	r2, [pc, #172]	; (8001968 <LED_microphoneMode+0x170>)
 80018ba:	460b      	mov	r3, r1
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	440b      	add	r3, r1
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	3304      	adds	r3, #4
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	ee07 3a90 	vmov	s15, r3
 80018cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018d0:	ed9f 6a26 	vldr	s12, [pc, #152]	; 800196c <LED_microphoneMode+0x174>
 80018d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018d8:	ee67 7a27 	vmul.f32	s15, s14, s15
        TIM1->CCR2 = min(100, max(0, microphoneValue - ADC_NOISE_VALUE)) /
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <LED_microphoneMode+0x178>)
 80018de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e2:	ee17 2a90 	vmov	r2, s15
 80018e6:	639a      	str	r2, [r3, #56]	; 0x38
        TIM1->CCR3 = min(100, max(0, microphoneValue - ADC_NOISE_VALUE)) /
 80018e8:	2364      	movs	r3, #100	; 0x64
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <LED_microphoneMode+0x168>)
 80018f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f6:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	4293      	cmp	r3, r2
 8001902:	bfb8      	it	lt
 8001904:	4613      	movlt	r3, r2
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4293      	cmp	r3, r2
 800190e:	bfa8      	it	ge
 8001910:	4613      	movge	r3, r2
                     ADC_DIV * ((float) colorValues[currentColor].blue / (float) UCHAR_MAX);
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <LED_microphoneMode+0x16c>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	4619      	mov	r1, r3
 8001920:	4a11      	ldr	r2, [pc, #68]	; (8001968 <LED_microphoneMode+0x170>)
 8001922:	460b      	mov	r3, r1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	440b      	add	r3, r1
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	3308      	adds	r3, #8
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	ee07 3a90 	vmov	s15, r3
 8001934:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001938:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 800196c <LED_microphoneMode+0x174>
 800193c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001940:	ee67 7a27 	vmul.f32	s15, s14, s15
        TIM1->CCR3 = min(100, max(0, microphoneValue - ADC_NOISE_VALUE)) /
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <LED_microphoneMode+0x178>)
 8001946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800194a:	ee17 2a90 	vmov	r2, s15
 800194e:	63da      	str	r2, [r3, #60]	; 0x3c
        prepateLCDMessage();
 8001950:	f000 f810 	bl	8001974 <prepateLCDMessage>
    }

}
 8001954:	bf00      	nop
 8001956:	3730      	adds	r7, #48	; 0x30
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200001f0 	.word	0x200001f0
 8001960:	200001fa 	.word	0x200001fa
 8001964:	200001f1 	.word	0x200001f1
 8001968:	0800a010 	.word	0x0800a010
 800196c:	437f0000 	.word	0x437f0000
 8001970:	40010000 	.word	0x40010000

08001974 <prepateLCDMessage>:

void prepateLCDMessage() {
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af02      	add	r7, sp, #8
    if (!displayMode) return;
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <prepateLCDMessage+0x48>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d018      	beq.n	80019b4 <prepateLCDMessage+0x40>
    char a[20];
    switch (displayMode) {
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <prepateLCDMessage+0x48>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d115      	bne.n	80019b6 <prepateLCDMessage+0x42>
        case 1:
            sprintf(a, "%lu;%lu;%lu", TIM1->CCR1, TIM1->CCR2, TIM1->CCR3);
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <prepateLCDMessage+0x4c>)
 800198c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <prepateLCDMessage+0x4c>)
 8001990:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <prepateLCDMessage+0x4c>)
 8001994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001996:	1d38      	adds	r0, r7, #4
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	460b      	mov	r3, r1
 800199c:	4909      	ldr	r1, [pc, #36]	; (80019c4 <prepateLCDMessage+0x50>)
 800199e:	f006 f9ab 	bl	8007cf8 <siprintf>
            LCD_clrScr();
 80019a2:	f000 fd09 	bl	80023b8 <LCD_clrScr>
            LCD_print(a, 4, 3);
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2203      	movs	r2, #3
 80019aa:	2104      	movs	r1, #4
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 fce3 	bl	8002378 <LCD_print>
            break;
 80019b2:	e000      	b.n	80019b6 <prepateLCDMessage+0x42>
    if (!displayMode) return;
 80019b4:	bf00      	nop

    }
}
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200001f9 	.word	0x200001f9
 80019c0:	40010000 	.word	0x40010000
 80019c4:	08009ffc 	.word	0x08009ffc

080019c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80019cc:	f001 f87e 	bl	8002acc <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80019d0:	f000 f856 	bl	8001a80 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80019d4:	f000 fae4 	bl	8001fa0 <MX_GPIO_Init>
    MX_DMA_Init();
 80019d8:	f000 fac2 	bl	8001f60 <MX_DMA_Init>
    MX_ADC1_Init();
 80019dc:	f000 f8bc 	bl	8001b58 <MX_ADC1_Init>
    MX_TIM1_Init();
 80019e0:	f000 f942 	bl	8001c68 <MX_TIM1_Init>
    MX_TIM2_Init();
 80019e4:	f000 f9f8 	bl	8001dd8 <MX_TIM2_Init>
    MX_USART1_UART_Init();
 80019e8:	f000 fa90 	bl	8001f0c <MX_USART1_UART_Init>
    MX_TIM3_Init();
 80019ec:	f000 fa40 	bl	8001e70 <MX_TIM3_Init>
    MX_SPI1_Init();
 80019f0:	f000 f904 	bl	8001bfc <MX_SPI1_Init>
    /* USER CODE BEGIN 2 */
    HAL_ADC_Start(&hadc1);
 80019f4:	481a      	ldr	r0, [pc, #104]	; (8001a60 <main+0x98>)
 80019f6:	f001 f91f 	bl	8002c38 <HAL_ADC_Start>
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &UARTRecieveBuffer[UARTBufIterator++], 1);
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <main+0x9c>)
 80019fc:	f993 2000 	ldrsb.w	r2, [r3]
 8001a00:	b2d3      	uxtb	r3, r2
 8001a02:	3301      	adds	r3, #1
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	b259      	sxtb	r1, r3
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <main+0x9c>)
 8001a0a:	7019      	strb	r1, [r3, #0]
 8001a0c:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <main+0xa0>)
 8001a0e:	4413      	add	r3, r2
 8001a10:	2201      	movs	r2, #1
 8001a12:	4619      	mov	r1, r3
 8001a14:	4815      	ldr	r0, [pc, #84]	; (8001a6c <main+0xa4>)
 8001a16:	f004 fa28 	bl	8005e6a <HAL_UART_Receive_IT>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4814      	ldr	r0, [pc, #80]	; (8001a70 <main+0xa8>)
 8001a1e:	f003 fac3 	bl	8004fa8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001a22:	2104      	movs	r1, #4
 8001a24:	4812      	ldr	r0, [pc, #72]	; (8001a70 <main+0xa8>)
 8001a26:	f003 fabf 	bl	8004fa8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001a2a:	2108      	movs	r1, #8
 8001a2c:	4810      	ldr	r0, [pc, #64]	; (8001a70 <main+0xa8>)
 8001a2e:	f003 fabb 	bl	8004fa8 <HAL_TIM_PWM_Start>
    LCD_setRST(GPIOC, GPIO_PIN_4);
 8001a32:	2110      	movs	r1, #16
 8001a34:	480f      	ldr	r0, [pc, #60]	; (8001a74 <main+0xac>)
 8001a36:	f000 fb75 	bl	8002124 <LCD_setRST>
    LCD_setCE(GPIOC, GPIO_PIN_5);
 8001a3a:	2120      	movs	r1, #32
 8001a3c:	480d      	ldr	r0, [pc, #52]	; (8001a74 <main+0xac>)
 8001a3e:	f000 fb85 	bl	800214c <LCD_setCE>
    LCD_setDC(GPIOB, GPIO_PIN_0);
 8001a42:	2101      	movs	r1, #1
 8001a44:	480c      	ldr	r0, [pc, #48]	; (8001a78 <main+0xb0>)
 8001a46:	f000 fb95 	bl	8002174 <LCD_setDC>
    LCD_init();
 8001a4a:	f000 fc1d 	bl	8002288 <LCD_init>
    LCD_print("hello", 4, 3);
 8001a4e:	2203      	movs	r2, #3
 8001a50:	2104      	movs	r1, #4
 8001a52:	480a      	ldr	r0, [pc, #40]	; (8001a7c <main+0xb4>)
 8001a54:	f000 fc90 	bl	8002378 <LCD_print>
    srand(0);
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f005 f931 	bl	8006cc0 <srand>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
 8001a5e:	e7fe      	b.n	8001a5e <main+0x96>
 8001a60:	200001fc 	.word	0x200001fc
 8001a64:	20000422 	.word	0x20000422
 8001a68:	20000418 	.word	0x20000418
 8001a6c:	200003d4 	.word	0x200003d4
 8001a70:	200002fc 	.word	0x200002fc
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	0800a008 	.word	0x0800a008

08001a80 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b094      	sub	sp, #80	; 0x50
 8001a84:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a86:	f107 0320 	add.w	r3, r7, #32
 8001a8a:	2230      	movs	r2, #48	; 0x30
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f006 f995 	bl	8007dbe <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <SystemClock_Config+0xd0>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	4a28      	ldr	r2, [pc, #160]	; (8001b50 <SystemClock_Config+0xd0>)
 8001aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab4:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <SystemClock_Config+0xd0>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <SystemClock_Config+0xd4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001acc:	4a21      	ldr	r2, [pc, #132]	; (8001b54 <SystemClock_Config+0xd4>)
 8001ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <SystemClock_Config+0xd4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ae8:	2310      	movs	r3, #16
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aec:	2302      	movs	r3, #2
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001af0:	2300      	movs	r3, #0
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8001af4:	2308      	movs	r3, #8
 8001af6:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 84;
 8001af8:	2354      	movs	r3, #84	; 0x54
 8001afa:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001afc:	2302      	movs	r3, #2
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b00:	2304      	movs	r3, #4
 8001b02:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b04:	f107 0320 	add.w	r3, r7, #32
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 fa2b 	bl	8003f64 <HAL_RCC_OscConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <SystemClock_Config+0x98>
        Error_Handler();
 8001b14:	f000 fb00 	bl	8002118 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b18:	230f      	movs	r3, #15
 8001b1a:	60fb      	str	r3, [r7, #12]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b28:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2e:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	2102      	movs	r1, #2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 fc8c 	bl	8004454 <HAL_RCC_ClockConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0xc6>
        Error_Handler();
 8001b42:	f000 fae9 	bl	8002118 <Error_Handler>
    }
}
 8001b46:	bf00      	nop
 8001b48:	3750      	adds	r7, #80	; 0x50
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40007000 	.word	0x40007000

08001b58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 8001b5e:	463b      	mov	r3, r7
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
    hadc1.Instance = ADC1;
 8001b6a:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <MX_ADC1_Init+0x98>)
 8001b6c:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <MX_ADC1_Init+0x9c>)
 8001b6e:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001b70:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <MX_ADC1_Init+0x98>)
 8001b72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b76:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <MX_ADC1_Init+0x98>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <MX_ADC1_Init+0x98>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <MX_ADC1_Init+0x98>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <MX_ADC1_Init+0x98>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <MX_ADC1_Init+0x98>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <MX_ADC1_Init+0x98>)
 8001b9a:	4a17      	ldr	r2, [pc, #92]	; (8001bf8 <MX_ADC1_Init+0xa0>)
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <MX_ADC1_Init+0x98>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <MX_ADC1_Init+0x98>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <MX_ADC1_Init+0x98>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = EOC_SEQ_CONV;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <MX_ADC1_Init+0x98>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001bb8:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <MX_ADC1_Init+0x98>)
 8001bba:	f000 fff9 	bl	8002bb0 <HAL_ADC_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_ADC1_Init+0x70>
        Error_Handler();
 8001bc4:	f000 faa8 	bl	8002118 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
    sConfig.Channel = ADC_CHANNEL_0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_ADC1_Init+0x98>)
 8001bda:	f001 f979 	bl	8002ed0 <HAL_ADC_ConfigChannel>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_ADC1_Init+0x90>
        Error_Handler();
 8001be4:	f000 fa98 	bl	8002118 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200001fc 	.word	0x200001fc
 8001bf4:	40012000 	.word	0x40012000
 8001bf8:	0f000001 	.word	0x0f000001

08001bfc <MX_SPI1_Init>:
/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <MX_SPI1_Init+0x64>)
 8001c02:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <MX_SPI1_Init+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <MX_SPI1_Init+0x64>)
 8001c08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c0c:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <MX_SPI1_Init+0x64>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <MX_SPI1_Init+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_SPI1_Init+0x64>)
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_SPI1_Init+0x64>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_SPI1_Init+0x64>)
 8001c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c2c:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_SPI1_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <MX_SPI1_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_SPI1_Init+0x64>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <MX_SPI1_Init+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_SPI1_Init+0x64>)
 8001c48:	220a      	movs	r2, #10
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001c4c:	4804      	ldr	r0, [pc, #16]	; (8001c60 <MX_SPI1_Init+0x64>)
 8001c4e:	f002 fde1 	bl	8004814 <HAL_SPI_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_SPI1_Init+0x60>
        Error_Handler();
 8001c58:	f000 fa5e 	bl	8002118 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	200002a4 	.word	0x200002a4
 8001c64:	40013000 	.word	0x40013000

08001c68 <MX_TIM1_Init>:
/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b096      	sub	sp, #88	; 0x58
 8001c6c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]
 8001c96:	615a      	str	r2, [r3, #20]
 8001c98:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f006 f88c 	bl	8007dbe <memset>

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <MX_TIM1_Init+0x168>)
 8001ca8:	4a4a      	ldr	r2, [pc, #296]	; (8001dd4 <MX_TIM1_Init+0x16c>)
 8001caa:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 84 - 1;
 8001cac:	4b48      	ldr	r3, [pc, #288]	; (8001dd0 <MX_TIM1_Init+0x168>)
 8001cae:	2253      	movs	r2, #83	; 0x53
 8001cb0:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <MX_TIM1_Init+0x168>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 250 - 1;
 8001cb8:	4b45      	ldr	r3, [pc, #276]	; (8001dd0 <MX_TIM1_Init+0x168>)
 8001cba:	22f9      	movs	r2, #249	; 0xf9
 8001cbc:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbe:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <MX_TIM1_Init+0x168>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8001cc4:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <MX_TIM1_Init+0x168>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cca:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <MX_TIM1_Init+0x168>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001cd0:	483f      	ldr	r0, [pc, #252]	; (8001dd0 <MX_TIM1_Init+0x168>)
 8001cd2:	f003 f82f 	bl	8004d34 <HAL_TIM_Base_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM1_Init+0x78>
        Error_Handler();
 8001cdc:	f000 fa1c 	bl	8002118 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001ce6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cea:	4619      	mov	r1, r3
 8001cec:	4838      	ldr	r0, [pc, #224]	; (8001dd0 <MX_TIM1_Init+0x168>)
 8001cee:	f003 fbd5 	bl	800549c <HAL_TIM_ConfigClockSource>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM1_Init+0x94>
        Error_Handler();
 8001cf8:	f000 fa0e 	bl	8002118 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001cfc:	4834      	ldr	r0, [pc, #208]	; (8001dd0 <MX_TIM1_Init+0x168>)
 8001cfe:	f003 f8fa 	bl	8004ef6 <HAL_TIM_PWM_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM1_Init+0xa4>
        Error_Handler();
 8001d08:	f000 fa06 	bl	8002118 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	643b      	str	r3, [r7, #64]	; 0x40
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8001d14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d18:	4619      	mov	r1, r3
 8001d1a:	482d      	ldr	r0, [pc, #180]	; (8001dd0 <MX_TIM1_Init+0x168>)
 8001d1c:	f003 ff84 	bl	8005c28 <HAL_TIMEx_MasterConfigSynchronization>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM1_Init+0xc2>
        Error_Handler();
 8001d26:	f000 f9f7 	bl	8002118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d2a:	2360      	movs	r3, #96	; 0x60
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d36:	2300      	movs	r3, #0
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4820      	ldr	r0, [pc, #128]	; (8001dd0 <MX_TIM1_Init+0x168>)
 8001d50:	f003 fae2 	bl	8005318 <HAL_TIM_PWM_ConfigChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001d5a:	f000 f9dd 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d62:	2204      	movs	r2, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	481a      	ldr	r0, [pc, #104]	; (8001dd0 <MX_TIM1_Init+0x168>)
 8001d68:	f003 fad6 	bl	8005318 <HAL_TIM_PWM_ConfigChannel>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001d72:	f000 f9d1 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4814      	ldr	r0, [pc, #80]	; (8001dd0 <MX_TIM1_Init+0x168>)
 8001d80:	f003 faca 	bl	8005318 <HAL_TIM_PWM_ConfigChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001d8a:	f000 f9c5 	bl	8002118 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001da2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	4619      	mov	r1, r3
 8001db0:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <MX_TIM1_Init+0x168>)
 8001db2:	f003 ffa7 	bl	8005d04 <HAL_TIMEx_ConfigBreakDeadTime>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001dbc:	f000 f9ac 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <MX_TIM1_Init+0x168>)
 8001dc2:	f000 fc75 	bl	80026b0 <HAL_TIM_MspPostInit>

}
 8001dc6:	bf00      	nop
 8001dc8:	3758      	adds	r7, #88	; 0x58
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200002fc 	.word	0x200002fc
 8001dd4:	40010000 	.word	0x40010000

08001dd8 <MX_TIM2_Init>:
/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dec:	463b      	mov	r3, r7
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <MX_TIM2_Init+0x94>)
 8001df6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dfa:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 840 - 1;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <MX_TIM2_Init+0x94>)
 8001dfe:	f240 3247 	movw	r2, #839	; 0x347
 8001e02:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <MX_TIM2_Init+0x94>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 2 - 1;
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <MX_TIM2_Init+0x94>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e10:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <MX_TIM2_Init+0x94>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <MX_TIM2_Init+0x94>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001e1c:	4813      	ldr	r0, [pc, #76]	; (8001e6c <MX_TIM2_Init+0x94>)
 8001e1e:	f002 ff89 	bl	8004d34 <HAL_TIM_Base_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM2_Init+0x54>
        Error_Handler();
 8001e28:	f000 f976 	bl	8002118 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e30:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001e32:	f107 0308 	add.w	r3, r7, #8
 8001e36:	4619      	mov	r1, r3
 8001e38:	480c      	ldr	r0, [pc, #48]	; (8001e6c <MX_TIM2_Init+0x94>)
 8001e3a:	f003 fb2f 	bl	800549c <HAL_TIM_ConfigClockSource>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM2_Init+0x70>
        Error_Handler();
 8001e44:	f000 f968 	bl	8002118 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001e50:	463b      	mov	r3, r7
 8001e52:	4619      	mov	r1, r3
 8001e54:	4805      	ldr	r0, [pc, #20]	; (8001e6c <MX_TIM2_Init+0x94>)
 8001e56:	f003 fee7 	bl	8005c28 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM2_Init+0x8c>
        Error_Handler();
 8001e60:	f000 f95a 	bl	8002118 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000344 	.word	0x20000344

08001e70 <MX_TIM3_Init>:
/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e76:	f107 0308 	add.w	r3, r7, #8
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e84:	463b      	mov	r3, r7
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <MX_TIM3_Init+0x94>)
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <MX_TIM3_Init+0x98>)
 8001e90:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 8400 - 1;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <MX_TIM3_Init+0x94>)
 8001e94:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001e98:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <MX_TIM3_Init+0x94>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 10 - 1;
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <MX_TIM3_Init+0x94>)
 8001ea2:	2209      	movs	r2, #9
 8001ea4:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <MX_TIM3_Init+0x94>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <MX_TIM3_Init+0x94>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001eb2:	4814      	ldr	r0, [pc, #80]	; (8001f04 <MX_TIM3_Init+0x94>)
 8001eb4:	f002 ff3e 	bl	8004d34 <HAL_TIM_Base_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM3_Init+0x52>
        Error_Handler();
 8001ebe:	f000 f92b 	bl	8002118 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec6:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001ec8:	f107 0308 	add.w	r3, r7, #8
 8001ecc:	4619      	mov	r1, r3
 8001ece:	480d      	ldr	r0, [pc, #52]	; (8001f04 <MX_TIM3_Init+0x94>)
 8001ed0:	f003 fae4 	bl	800549c <HAL_TIM_ConfigClockSource>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM3_Init+0x6e>
        Error_Handler();
 8001eda:	f000 f91d 	bl	8002118 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4806      	ldr	r0, [pc, #24]	; (8001f04 <MX_TIM3_Init+0x94>)
 8001eec:	f003 fe9c 	bl	8005c28 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM3_Init+0x8a>
        Error_Handler();
 8001ef6:	f000 f90f 	bl	8002118 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000038c 	.word	0x2000038c
 8001f08:	40000400 	.word	0x40000400

08001f0c <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_USART1_UART_Init+0x4c>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <MX_USART1_UART_Init+0x50>)
 8001f14:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <MX_USART1_UART_Init+0x4c>)
 8001f18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f1c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_USART1_UART_Init+0x4c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_USART1_UART_Init+0x4c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <MX_USART1_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_USART1_UART_Init+0x4c>)
 8001f32:	220c      	movs	r2, #12
 8001f34:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <MX_USART1_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_USART1_UART_Init+0x4c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_USART1_UART_Init+0x4c>)
 8001f44:	f003 ff44 	bl	8005dd0 <HAL_UART_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_USART1_UART_Init+0x46>
        Error_Handler();
 8001f4e:	f000 f8e3 	bl	8002118 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200003d4 	.word	0x200003d4
 8001f5c:	40011000 	.word	0x40011000

08001f60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <MX_DMA_Init+0x3c>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <MX_DMA_Init+0x3c>)
 8001f70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <MX_DMA_Init+0x3c>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	2038      	movs	r0, #56	; 0x38
 8001f88:	f001 fa9b 	bl	80034c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f8c:	2038      	movs	r0, #56	; 0x38
 8001f8e:	f001 fab4 	bl	80034fa <HAL_NVIC_EnableIRQ>

}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800

08001fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
 8001fb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b30      	ldr	r3, [pc, #192]	; (800207c <MX_GPIO_Init+0xdc>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a2f      	ldr	r2, [pc, #188]	; (800207c <MX_GPIO_Init+0xdc>)
 8001fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b2d      	ldr	r3, [pc, #180]	; (800207c <MX_GPIO_Init+0xdc>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <MX_GPIO_Init+0xdc>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a28      	ldr	r2, [pc, #160]	; (800207c <MX_GPIO_Init+0xdc>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b26      	ldr	r3, [pc, #152]	; (800207c <MX_GPIO_Init+0xdc>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	4b22      	ldr	r3, [pc, #136]	; (800207c <MX_GPIO_Init+0xdc>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a21      	ldr	r2, [pc, #132]	; (800207c <MX_GPIO_Init+0xdc>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b1f      	ldr	r3, [pc, #124]	; (800207c <MX_GPIO_Init+0xdc>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <MX_GPIO_Init+0xdc>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a1a      	ldr	r2, [pc, #104]	; (800207c <MX_GPIO_Init+0xdc>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b18      	ldr	r3, [pc, #96]	; (800207c <MX_GPIO_Init+0xdc>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	2130      	movs	r1, #48	; 0x30
 800202a:	4815      	ldr	r0, [pc, #84]	; (8002080 <MX_GPIO_Init+0xe0>)
 800202c:	f001 ff80 	bl	8003f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002030:	2200      	movs	r2, #0
 8002032:	2101      	movs	r1, #1
 8002034:	4813      	ldr	r0, [pc, #76]	; (8002084 <MX_GPIO_Init+0xe4>)
 8002036:	f001 ff7b 	bl	8003f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800203a:	2330      	movs	r3, #48	; 0x30
 800203c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203e:	2301      	movs	r3, #1
 8002040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	480b      	ldr	r0, [pc, #44]	; (8002080 <MX_GPIO_Init+0xe0>)
 8002052:	f001 fde9 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002056:	2301      	movs	r3, #1
 8002058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205a:	2301      	movs	r3, #1
 800205c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <MX_GPIO_Init+0xe4>)
 800206e:	f001 fddb 	bl	8003c28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002072:	bf00      	nop
 8002074:	3728      	adds	r7, #40	; 0x28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	40020800 	.word	0x40020800
 8002084:	40020400 	.word	0x40020400

08002088 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <HAL_UART_RxCpltCallback+0x80>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d122      	bne.n	80020e0 <HAL_UART_RxCpltCallback+0x58>
        // Process the received data here
        // ...
        if (UARTRecieveBuffer[UARTBufIterator - 1] == '\0' || UARTRecieveBuffer[UARTBufIterator - 1] == '\r' ||
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <HAL_UART_RxCpltCallback+0x84>)
 800209c:	f993 3000 	ldrsb.w	r3, [r3]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <HAL_UART_RxCpltCallback+0x88>)
 80020a4:	5cd3      	ldrb	r3, [r2, r3]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00f      	beq.n	80020ca <HAL_UART_RxCpltCallback+0x42>
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_UART_RxCpltCallback+0x84>)
 80020ac:	f993 3000 	ldrsb.w	r3, [r3]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	4a17      	ldr	r2, [pc, #92]	; (8002110 <HAL_UART_RxCpltCallback+0x88>)
 80020b4:	5cd3      	ldrb	r3, [r2, r3]
 80020b6:	2b0d      	cmp	r3, #13
 80020b8:	d007      	beq.n	80020ca <HAL_UART_RxCpltCallback+0x42>
            UARTRecieveBuffer[UARTBufIterator - 1] == '\n') {
 80020ba:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_UART_RxCpltCallback+0x84>)
 80020bc:	f993 3000 	ldrsb.w	r3, [r3]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	4a13      	ldr	r2, [pc, #76]	; (8002110 <HAL_UART_RxCpltCallback+0x88>)
 80020c4:	5cd3      	ldrb	r3, [r2, r3]
        if (UARTRecieveBuffer[UARTBufIterator - 1] == '\0' || UARTRecieveBuffer[UARTBufIterator - 1] == '\r' ||
 80020c6:	2b0a      	cmp	r3, #10
 80020c8:	d10a      	bne.n	80020e0 <HAL_UART_RxCpltCallback+0x58>
            parseString(UARTRecieveBuffer);
 80020ca:	4811      	ldr	r0, [pc, #68]	; (8002110 <HAL_UART_RxCpltCallback+0x88>)
 80020cc:	f7fe ff8c 	bl	8000fe8 <parseString>
            memset(UARTRecieveBuffer, 0, sizeof(UARTRecieveBuffer));
 80020d0:	220a      	movs	r2, #10
 80020d2:	2100      	movs	r1, #0
 80020d4:	480e      	ldr	r0, [pc, #56]	; (8002110 <HAL_UART_RxCpltCallback+0x88>)
 80020d6:	f005 fe72 	bl	8007dbe <memset>
            UARTBufIterator = 0;
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <HAL_UART_RxCpltCallback+0x84>)
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
        }
        // Restart reception for the next byte
    }
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &UARTRecieveBuffer[UARTBufIterator++], 1);
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_UART_RxCpltCallback+0x84>)
 80020e2:	f993 2000 	ldrsb.w	r2, [r3]
 80020e6:	b2d3      	uxtb	r3, r2
 80020e8:	3301      	adds	r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	b259      	sxtb	r1, r3
 80020ee:	4b07      	ldr	r3, [pc, #28]	; (800210c <HAL_UART_RxCpltCallback+0x84>)
 80020f0:	7019      	strb	r1, [r3, #0]
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <HAL_UART_RxCpltCallback+0x88>)
 80020f4:	4413      	add	r3, r2
 80020f6:	2201      	movs	r2, #1
 80020f8:	4619      	mov	r1, r3
 80020fa:	4806      	ldr	r0, [pc, #24]	; (8002114 <HAL_UART_RxCpltCallback+0x8c>)
 80020fc:	f003 feb5 	bl	8005e6a <HAL_UART_Receive_IT>

}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40011000 	.word	0x40011000
 800210c:	20000422 	.word	0x20000422
 8002110:	20000418 	.word	0x20000418
 8002114:	200003d4 	.word	0x200003d4

08002118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800211c:	b672      	cpsid	i
}
 800211e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002120:	e7fe      	b.n	8002120 <Error_Handler+0x8>
	...

08002124 <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8002130:	4a05      	ldr	r2, [pc, #20]	; (8002148 <LCD_setRST+0x24>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 8002136:	4a04      	ldr	r2, [pc, #16]	; (8002148 <LCD_setRST+0x24>)
 8002138:	887b      	ldrh	r3, [r7, #2]
 800213a:	8093      	strh	r3, [r2, #4]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	20000620 	.word	0x20000620

0800214c <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8002158:	4a05      	ldr	r2, [pc, #20]	; (8002170 <LCD_setCE+0x24>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 800215e:	4a04      	ldr	r2, [pc, #16]	; (8002170 <LCD_setCE+0x24>)
 8002160:	887b      	ldrh	r3, [r7, #2]
 8002162:	8193      	strh	r3, [r2, #12]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	20000620 	.word	0x20000620

08002174 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 8002180:	4a05      	ldr	r2, [pc, #20]	; (8002198 <LCD_setDC+0x24>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 8002186:	4a04      	ldr	r2, [pc, #16]	; (8002198 <LCD_setDC+0x24>)
 8002188:	887b      	ldrh	r3, [r7, #2]
 800218a:	8293      	strh	r3, [r2, #20]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	20000620 	.word	0x20000620

0800219c <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <LCD_send+0x50>)
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	4a10      	ldr	r2, [pc, #64]	; (80021ec <LCD_send+0x50>)
 80021ac:	8a91      	ldrh	r1, [r2, #20]
 80021ae:	2201      	movs	r2, #1
 80021b0:	4618      	mov	r0, r3
 80021b2:	f001 febd 	bl	8003f30 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <LCD_send+0x50>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <LCD_send+0x50>)
 80021bc:	8991      	ldrh	r1, [r2, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f001 feb5 	bl	8003f30 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, &val, 1, HAL_MAX_DELAY);
 80021c6:	1df9      	adds	r1, r7, #7
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
 80021cc:	2201      	movs	r2, #1
 80021ce:	4808      	ldr	r0, [pc, #32]	; (80021f0 <LCD_send+0x54>)
 80021d0:	f002 fba9 	bl	8004926 <HAL_SPI_Transmit>

    // Установка сигнала CE после передачи данных
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <LCD_send+0x50>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <LCD_send+0x50>)
 80021da:	8991      	ldrh	r1, [r2, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	4618      	mov	r0, r3
 80021e0:	f001 fea6 	bl	8003f30 <HAL_GPIO_WritePin>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000620 	.word	0x20000620
 80021f0:	200002a4 	.word	0x200002a4

080021f4 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	460a      	mov	r2, r1
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	4613      	mov	r3, r2
 8002202:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 8002204:	79bb      	ldrb	r3, [r7, #6]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d11c      	bne.n	8002244 <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 800220a:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <LCD_write+0x90>)
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <LCD_write+0x90>)
 8002210:	8a91      	ldrh	r1, [r2, #20]
 8002212:	2200      	movs	r2, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f001 fe8b 	bl	8003f30 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <LCD_write+0x90>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	4a19      	ldr	r2, [pc, #100]	; (8002284 <LCD_write+0x90>)
 8002220:	8991      	ldrh	r1, [r2, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f001 fe83 	bl	8003f30 <HAL_GPIO_WritePin>
    LCD_send(data);
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ffb5 	bl	800219c <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <LCD_write+0x90>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4a13      	ldr	r2, [pc, #76]	; (8002284 <LCD_write+0x90>)
 8002238:	8991      	ldrh	r1, [r2, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	4618      	mov	r0, r3
 800223e:	f001 fe77 	bl	8003f30 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8002242:	e01b      	b.n	800227c <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <LCD_write+0x90>)
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <LCD_write+0x90>)
 800224a:	8a91      	ldrh	r1, [r2, #20]
 800224c:	2201      	movs	r2, #1
 800224e:	4618      	mov	r0, r3
 8002250:	f001 fe6e 	bl	8003f30 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <LCD_write+0x90>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <LCD_write+0x90>)
 800225a:	8991      	ldrh	r1, [r2, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f001 fe66 	bl	8003f30 <HAL_GPIO_WritePin>
    LCD_send(data);
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff98 	bl	800219c <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <LCD_write+0x90>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <LCD_write+0x90>)
 8002272:	8991      	ldrh	r1, [r2, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	4618      	mov	r0, r3
 8002278:	f001 fe5a 	bl	8003f30 <HAL_GPIO_WritePin>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000620 	.word	0x20000620

08002288 <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 800228c:	4b17      	ldr	r3, [pc, #92]	; (80022ec <LCD_init+0x64>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a16      	ldr	r2, [pc, #88]	; (80022ec <LCD_init+0x64>)
 8002292:	8891      	ldrh	r1, [r2, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f001 fe4a 	bl	8003f30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 800229c:	4b13      	ldr	r3, [pc, #76]	; (80022ec <LCD_init+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a12      	ldr	r2, [pc, #72]	; (80022ec <LCD_init+0x64>)
 80022a2:	8891      	ldrh	r1, [r2, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	4618      	mov	r0, r3
 80022a8:	f001 fe42 	bl	8003f30 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 80022ac:	2100      	movs	r1, #0
 80022ae:	2021      	movs	r0, #33	; 0x21
 80022b0:	f7ff ffa0 	bl	80021f4 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 80022b4:	2100      	movs	r1, #0
 80022b6:	20b8      	movs	r0, #184	; 0xb8
 80022b8:	f7ff ff9c 	bl	80021f4 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 80022bc:	2100      	movs	r1, #0
 80022be:	2004      	movs	r0, #4
 80022c0:	f7ff ff98 	bl	80021f4 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 80022c4:	2100      	movs	r1, #0
 80022c6:	2014      	movs	r0, #20
 80022c8:	f7ff ff94 	bl	80021f4 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 80022cc:	2100      	movs	r1, #0
 80022ce:	2020      	movs	r0, #32
 80022d0:	f7ff ff90 	bl	80021f4 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 80022d4:	2100      	movs	r1, #0
 80022d6:	200c      	movs	r0, #12
 80022d8:	f7ff ff8c 	bl	80021f4 <LCD_write>
  LCD_clrScr();
 80022dc:	f000 f86c 	bl	80023b8 <LCD_clrScr>
  lcd.inverttext = false;
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <LCD_init+0x68>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000620 	.word	0x20000620
 80022f0:	20000424 	.word	0x20000424

080022f4 <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < 6; i++){
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	e02d      	b.n	8002360 <LCD_putChar+0x6c>
    if(lcd.inverttext != true)
 8002304:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <LCD_putChar+0x7c>)
 8002306:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 800230a:	f083 0301 	eor.w	r3, r3, #1
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d010      	beq.n	8002336 <LCD_putChar+0x42>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f1a3 0220 	sub.w	r2, r3, #32
 800231a:	4916      	ldr	r1, [pc, #88]	; (8002374 <LCD_putChar+0x80>)
 800231c:	4613      	mov	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4413      	add	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	18ca      	adds	r2, r1, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4413      	add	r3, r2
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2101      	movs	r1, #1
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff60 	bl	80021f4 <LCD_write>
 8002334:	e011      	b.n	800235a <LCD_putChar+0x66>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	f1a3 0220 	sub.w	r2, r3, #32
 800233c:	490d      	ldr	r1, [pc, #52]	; (8002374 <LCD_putChar+0x80>)
 800233e:	4613      	mov	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4413      	add	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	18ca      	adds	r2, r1, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	43db      	mvns	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2101      	movs	r1, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff4d 	bl	80021f4 <LCD_write>
  for(int i = 0; i < 6; i++){
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3301      	adds	r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b05      	cmp	r3, #5
 8002364:	ddce      	ble.n	8002304 <LCD_putChar+0x10>
  }
}
 8002366:	bf00      	nop
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000424 	.word	0x20000424
 8002374:	0800a094 	.word	0x0800a094

08002378 <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]
 8002384:	4613      	mov	r3, r2
 8002386:	70bb      	strb	r3, [r7, #2]
  LCD_goXY(x, y);
 8002388:	78ba      	ldrb	r2, [r7, #2]
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f830 	bl	80023f4 <LCD_goXY>
  while(*str){
 8002394:	e006      	b.n	80023a4 <LCD_print+0x2c>
    LCD_putChar(*str++);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ffa8 	bl	80022f4 <LCD_putChar>
  while(*str){
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f4      	bne.n	8002396 <LCD_print+0x1e>
  }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	e00b      	b.n	80023dc <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 80023c4:	2101      	movs	r1, #1
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7ff ff14 	bl	80021f4 <LCD_write>
    lcd.buffer[i] = 0;
 80023cc:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <LCD_clrScr+0x38>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3301      	adds	r3, #1
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80023e2:	dbef      	blt.n	80023c4 <LCD_clrScr+0xc>
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000424 	.word	0x20000424

080023f4 <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	460a      	mov	r2, r1
 80023fe:	71fb      	strb	r3, [r7, #7]
 8002400:	4613      	mov	r3, r2
 8002402:	71bb      	strb	r3, [r7, #6]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fef0 	bl	80021f4 <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 8002414:	79bb      	ldrb	r3, [r7, #6]
 8002416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fee8 	bl	80021f4 <LCD_write>
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_MspInit+0x4c>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4a0f      	ldr	r2, [pc, #60]	; (8002478 <HAL_MspInit+0x4c>)
 800243c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002440:	6453      	str	r3, [r2, #68]	; 0x44
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_MspInit+0x4c>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_MspInit+0x4c>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	4a08      	ldr	r2, [pc, #32]	; (8002478 <HAL_MspInit+0x4c>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245c:	6413      	str	r3, [r2, #64]	; 0x40
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_MspInit+0x4c>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800

0800247c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a2f      	ldr	r2, [pc, #188]	; (8002558 <HAL_ADC_MspInit+0xdc>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d157      	bne.n	800254e <HAL_ADC_MspInit+0xd2>
  {
      /* USER CODE BEGIN ADC1_MspInit 0 */

      /* USER CODE END ADC1_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_ADC1_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	4b2e      	ldr	r3, [pc, #184]	; (800255c <HAL_ADC_MspInit+0xe0>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	4a2d      	ldr	r2, [pc, #180]	; (800255c <HAL_ADC_MspInit+0xe0>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ac:	6453      	str	r3, [r2, #68]	; 0x44
 80024ae:	4b2b      	ldr	r3, [pc, #172]	; (800255c <HAL_ADC_MspInit+0xe0>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_ADC_MspInit+0xe0>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a26      	ldr	r2, [pc, #152]	; (800255c <HAL_ADC_MspInit+0xe0>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_ADC_MspInit+0xe0>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
      /**ADC1 GPIO Configuration
      PA0-WKUP     ------> ADC1_IN0
      */
      GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024d6:	2301      	movs	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024da:	2303      	movs	r3, #3
 80024dc:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4619      	mov	r1, r3
 80024e8:	481d      	ldr	r0, [pc, #116]	; (8002560 <HAL_ADC_MspInit+0xe4>)
 80024ea:	f001 fb9d 	bl	8003c28 <HAL_GPIO_Init>

      /* ADC1 DMA Init */
      /* ADC1 Init */
      hdma_adc1.Instance = DMA2_Stream0;
 80024ee:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <HAL_ADC_MspInit+0xe8>)
 80024f0:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <HAL_ADC_MspInit+0xec>)
 80024f2:	601a      	str	r2, [r3, #0]
      hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <HAL_ADC_MspInit+0xe8>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	605a      	str	r2, [r3, #4]
      hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024fa:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <HAL_ADC_MspInit+0xe8>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
      hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002500:	4b18      	ldr	r3, [pc, #96]	; (8002564 <HAL_ADC_MspInit+0xe8>)
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
      hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <HAL_ADC_MspInit+0xe8>)
 8002508:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800250c:	611a      	str	r2, [r3, #16]
      hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <HAL_ADC_MspInit+0xe8>)
 8002510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002514:	615a      	str	r2, [r3, #20]
      hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <HAL_ADC_MspInit+0xe8>)
 8002518:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800251c:	619a      	str	r2, [r3, #24]
      hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_ADC_MspInit+0xe8>)
 8002520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002524:	61da      	str	r2, [r3, #28]
      hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002526:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <HAL_ADC_MspInit+0xe8>)
 8002528:	2200      	movs	r2, #0
 800252a:	621a      	str	r2, [r3, #32]
      hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_ADC_MspInit+0xe8>)
 800252e:	2200      	movs	r2, #0
 8002530:	625a      	str	r2, [r3, #36]	; 0x24
      if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 8002532:	480c      	ldr	r0, [pc, #48]	; (8002564 <HAL_ADC_MspInit+0xe8>)
 8002534:	f000 fffc 	bl	8003530 <HAL_DMA_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_ADC_MspInit+0xc6>
          Error_Handler();
 800253e:	f7ff fdeb 	bl	8002118 <Error_Handler>
      }

      __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a07      	ldr	r2, [pc, #28]	; (8002564 <HAL_ADC_MspInit+0xe8>)
 8002546:	639a      	str	r2, [r3, #56]	; 0x38
 8002548:	4a06      	ldr	r2, [pc, #24]	; (8002564 <HAL_ADC_MspInit+0xe8>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6393      	str	r3, [r2, #56]	; 0x38
      /* USER CODE BEGIN ADC1_MspInit 1 */

      /* USER CODE END ADC1_MspInit 1 */
  }

}
 800254e:	bf00      	nop
 8002550:	3728      	adds	r7, #40	; 0x28
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40012000 	.word	0x40012000
 800255c:	40023800 	.word	0x40023800
 8002560:	40020000 	.word	0x40020000
 8002564:	20000244 	.word	0x20000244
 8002568:	40026410 	.word	0x40026410

0800256c <HAL_SPI_MspInit>:
* @brief SPI MSP Initialization
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
    if (hspi->Instance == SPI1) {
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a19      	ldr	r2, [pc, #100]	; (80025f0 <HAL_SPI_MspInit+0x84>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d12b      	bne.n	80025e6 <HAL_SPI_MspInit+0x7a>
        /* USER CODE BEGIN SPI1_MspInit 0 */

        /* USER CODE END SPI1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_SPI1_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_SPI_MspInit+0x88>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <HAL_SPI_MspInit+0x88>)
 8002598:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800259c:	6453      	str	r3, [r2, #68]	; 0x44
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_SPI_MspInit+0x88>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_SPI_MspInit+0x88>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <HAL_SPI_MspInit+0x88>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <HAL_SPI_MspInit+0x88>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
        /**SPI1 GPIO Configuration
        PA5     ------> SPI1_SCK
        PA7     ------> SPI1_MOSI
        */
        GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7;
 80025c6:	23a0      	movs	r3, #160	; 0xa0
 80025c8:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d2:	2303      	movs	r3, #3
 80025d4:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025d6:	2305      	movs	r3, #5
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	4805      	ldr	r0, [pc, #20]	; (80025f8 <HAL_SPI_MspInit+0x8c>)
 80025e2:	f001 fb21 	bl	8003c28 <HAL_GPIO_Init>
        /* USER CODE BEGIN SPI1_MspInit 1 */

        /* USER CODE END SPI1_MspInit 1 */
    }

}
 80025e6:	bf00      	nop
 80025e8:	3728      	adds	r7, #40	; 0x28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40013000 	.word	0x40013000
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40020000 	.word	0x40020000

080025fc <HAL_TIM_Base_MspInit>:
* @brief TIM_Base MSP Initialization
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
    if (htim_base->Instance == TIM1) {
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a26      	ldr	r2, [pc, #152]	; (80026a4 <HAL_TIM_Base_MspInit+0xa8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d10e      	bne.n	800262c <HAL_TIM_Base_MspInit+0x30>
        /* USER CODE BEGIN TIM1_MspInit 0 */

        /* USER CODE END TIM1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM1_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	4a24      	ldr	r2, [pc, #144]	; (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6453      	str	r3, [r2, #68]	; 0x44
 800261e:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
        /* USER CODE BEGIN TIM3_MspInit 1 */

        /* USER CODE END TIM3_MspInit 1 */
    }

}
 800262a:	e036      	b.n	800269a <HAL_TIM_Base_MspInit+0x9e>
    } else if (htim_base->Instance == TIM2) {
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002634:	d116      	bne.n	8002664 <HAL_TIM_Base_MspInit+0x68>
        __HAL_RCC_TIM2_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]
        HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	201c      	movs	r0, #28
 8002658:	f000 ff33 	bl	80034c2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800265c:	201c      	movs	r0, #28
 800265e:	f000 ff4c 	bl	80034fa <HAL_NVIC_EnableIRQ>
}
 8002662:	e01a      	b.n	800269a <HAL_TIM_Base_MspInit+0x9e>
    } else if (htim_base->Instance == TIM3) {
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a10      	ldr	r2, [pc, #64]	; (80026ac <HAL_TIM_Base_MspInit+0xb0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d115      	bne.n	800269a <HAL_TIM_Base_MspInit+0x9e>
        __HAL_RCC_TIM3_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a0c      	ldr	r2, [pc, #48]	; (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <HAL_TIM_Base_MspInit+0xac>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
        HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	201d      	movs	r0, #29
 8002690:	f000 ff17 	bl	80034c2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002694:	201d      	movs	r0, #29
 8002696:	f000 ff30 	bl	80034fa <HAL_NVIC_EnableIRQ>
}
 800269a:	bf00      	nop
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40010000 	.word	0x40010000
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40000400 	.word	0x40000400

080026b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 030c 	add.w	r3, r7, #12
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a12      	ldr	r2, [pc, #72]	; (8002718 <HAL_TIM_MspPostInit+0x68>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d11e      	bne.n	8002710 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_TIM_MspPostInit+0x6c>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a10      	ldr	r2, [pc, #64]	; (800271c <HAL_TIM_MspPostInit+0x6c>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <HAL_TIM_MspPostInit+0x6c>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80026ee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80026f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002700:	2301      	movs	r3, #1
 8002702:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	4619      	mov	r1, r3
 800270a:	4805      	ldr	r0, [pc, #20]	; (8002720 <HAL_TIM_MspPostInit+0x70>)
 800270c:	f001 fa8c 	bl	8003c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

      /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002710:	bf00      	nop
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40010000 	.word	0x40010000
 800271c:	40023800 	.word	0x40023800
 8002720:	40020000 	.word	0x40020000

08002724 <HAL_UART_MspInit>:
* @brief UART MSP Initialization
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART1) {
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1d      	ldr	r2, [pc, #116]	; (80027b8 <HAL_UART_MspInit+0x94>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d133      	bne.n	80027ae <HAL_UART_MspInit+0x8a>
        /* USER CODE BEGIN USART1_MspInit 0 */

        /* USER CODE END USART1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <HAL_UART_MspInit+0x98>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <HAL_UART_MspInit+0x98>)
 8002750:	f043 0310 	orr.w	r3, r3, #16
 8002754:	6453      	str	r3, [r2, #68]	; 0x44
 8002756:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_UART_MspInit+0x98>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <HAL_UART_MspInit+0x98>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a14      	ldr	r2, [pc, #80]	; (80027bc <HAL_UART_MspInit+0x98>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_UART_MspInit+0x98>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
        /**USART1 GPIO Configuration
        PB6     ------> USART1_TX
        PB7     ------> USART1_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 800277e:	23c0      	movs	r3, #192	; 0xc0
 8002780:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002782:	2302      	movs	r3, #2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278a:	2303      	movs	r3, #3
 800278c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800278e:	2307      	movs	r3, #7
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002792:	f107 0314 	add.w	r3, r7, #20
 8002796:	4619      	mov	r1, r3
 8002798:	4809      	ldr	r0, [pc, #36]	; (80027c0 <HAL_UART_MspInit+0x9c>)
 800279a:	f001 fa45 	bl	8003c28 <HAL_GPIO_Init>

        /* USART1 interrupt Init */
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2100      	movs	r1, #0
 80027a2:	2025      	movs	r0, #37	; 0x25
 80027a4:	f000 fe8d 	bl	80034c2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027a8:	2025      	movs	r0, #37	; 0x25
 80027aa:	f000 fea6 	bl	80034fa <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USART1_MspInit 1 */

        /* USER CODE END USART1_MspInit 1 */
    }

}
 80027ae:	bf00      	nop
 80027b0:	3728      	adds	r7, #40	; 0x28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40011000 	.word	0x40011000
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40020400 	.word	0x40020400

080027c4 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void) {
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 80027c8:	e7fe      	b.n	80027c8 <NMI_Handler+0x4>

080027ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ce:	e7fe      	b.n	80027ce <HardFault_Handler+0x4>

080027d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <MemManage_Handler+0x4>

080027d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027da:	e7fe      	b.n	80027da <BusFault_Handler+0x4>

080027dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <UsageFault_Handler+0x4>

080027e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002810:	f000 f9ae 	bl	8002b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}

08002818 <TIM2_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void) {
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM2_IRQn 0 */
    /* USER CODE END TIM2_IRQn 0 */
    HAL_TIM_IRQHandler(&htim2);
 800281c:	4807      	ldr	r0, [pc, #28]	; (800283c <TIM2_IRQHandler+0x24>)
 800281e:	f002 fc73 	bl	8005108 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM2_IRQn 1 */
    HAL_ADC_PollForConversion(&hadc1, 100);
 8002822:	2164      	movs	r1, #100	; 0x64
 8002824:	4806      	ldr	r0, [pc, #24]	; (8002840 <TIM2_IRQHandler+0x28>)
 8002826:	f000 fabb 	bl	8002da0 <HAL_ADC_PollForConversion>
    microphoneValue = HAL_ADC_GetValue(&hadc1);
 800282a:	4805      	ldr	r0, [pc, #20]	; (8002840 <TIM2_IRQHandler+0x28>)
 800282c:	f000 fb43 	bl	8002eb6 <HAL_ADC_GetValue>
 8002830:	4603      	mov	r3, r0
 8002832:	b21a      	sxth	r2, r3
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <TIM2_IRQHandler+0x2c>)
 8002836:	801a      	strh	r2, [r3, #0]

    /* USER CODE END TIM2_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000344 	.word	0x20000344
 8002840:	200001fc 	.word	0x200001fc
 8002844:	200001fa 	.word	0x200001fa

08002848 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void) {
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM3_IRQn 0 */
    switch (LedMode) {
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <TIM3_IRQHandler+0x50>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b04      	cmp	r3, #4
 8002852:	d81c      	bhi.n	800288e <TIM3_IRQHandler+0x46>
 8002854:	a201      	add	r2, pc, #4	; (adr r2, 800285c <TIM3_IRQHandler+0x14>)
 8002856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285a:	bf00      	nop
 800285c:	08002871 	.word	0x08002871
 8002860:	08002877 	.word	0x08002877
 8002864:	0800287d 	.word	0x0800287d
 8002868:	08002883 	.word	0x08002883
 800286c:	08002889 	.word	0x08002889
        case 0:
            LED_pulseMode();
 8002870:	f7fe fd9a 	bl	80013a8 <LED_pulseMode>
            break;
 8002874:	e00b      	b.n	800288e <TIM3_IRQHandler+0x46>
        case 1:
            LED_continuousTransformationMode();
 8002876:	f7fe fe37 	bl	80014e8 <LED_continuousTransformationMode>
            break;
 800287a:	e008      	b.n	800288e <TIM3_IRQHandler+0x46>
        case 2:
            LED_continuousColorChangeMode();
 800287c:	f7fe feec 	bl	8001658 <LED_continuousColorChangeMode>
            break;
 8002880:	e005      	b.n	800288e <TIM3_IRQHandler+0x46>
        case 3:
            LED_randomColorMode();
 8002882:	f7fe ff73 	bl	800176c <LED_randomColorMode>
            break;
 8002886:	e002      	b.n	800288e <TIM3_IRQHandler+0x46>
        case 4:
            LED_microphoneMode();
 8002888:	f7fe ffb6 	bl	80017f8 <LED_microphoneMode>
            break;
 800288c:	bf00      	nop
    }
    /* USER CODE END TIM3_IRQn 0 */
    HAL_TIM_IRQHandler(&htim3);
 800288e:	4803      	ldr	r0, [pc, #12]	; (800289c <TIM3_IRQHandler+0x54>)
 8002890:	f002 fc3a 	bl	8005108 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM3_IRQn 1 */

    /* USER CODE END TIM3_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	200001f8 	.word	0x200001f8
 800289c:	2000038c 	.word	0x2000038c

080028a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART1_IRQn 0 */
    /* USER CODE END USART1_IRQn 0 */
    HAL_UART_IRQHandler(&huart1);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <USART1_IRQHandler+0x10>)
 80028a6:	f003 fb11 	bl	8005ecc <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART1_IRQn 1 */

    /* USER CODE END USART1_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200003d4 	.word	0x200003d4

080028b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

    /* USER CODE END DMA2_Stream0_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_adc1);
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <DMA2_Stream0_IRQHandler+0x10>)
 80028ba:	f000 ff79 	bl	80037b0 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

    /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000244 	.word	0x20000244

080028c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return 1;
 80028cc:	2301      	movs	r3, #1
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_kill>:

int _kill(int pid, int sig)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028e2:	f005 fb29 	bl	8007f38 <__errno>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2216      	movs	r2, #22
 80028ea:	601a      	str	r2, [r3, #0]
  return -1;
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_exit>:

void _exit (int status)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ffe7 	bl	80028d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800290a:	e7fe      	b.n	800290a <_exit+0x12>

0800290c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	e00a      	b.n	8002934 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800291e:	f3af 8000 	nop.w
 8002922:	4601      	mov	r1, r0
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	60ba      	str	r2, [r7, #8]
 800292a:	b2ca      	uxtb	r2, r1
 800292c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	dbf0      	blt.n	800291e <_read+0x12>
  }

  return len;
 800293c:	687b      	ldr	r3, [r7, #4]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e009      	b.n	800296c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	60ba      	str	r2, [r7, #8]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	dbf1      	blt.n	8002958 <_write+0x12>
  }
  return len;
 8002974:	687b      	ldr	r3, [r7, #4]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <_close>:

int _close(int file)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a6:	605a      	str	r2, [r3, #4]
  return 0;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <_isatty>:

int _isatty(int file)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029be:	2301      	movs	r3, #1
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029f0:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <_sbrk+0x5c>)
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <_sbrk+0x60>)
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <_sbrk+0x64>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d102      	bne.n	8002a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <_sbrk+0x64>)
 8002a06:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <_sbrk+0x68>)
 8002a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <_sbrk+0x64>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d207      	bcs.n	8002a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a18:	f005 fa8e 	bl	8007f38 <__errno>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	220c      	movs	r2, #12
 8002a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
 8002a26:	e009      	b.n	8002a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <_sbrk+0x64>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <_sbrk+0x64>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	4a05      	ldr	r2, [pc, #20]	; (8002a4c <_sbrk+0x64>)
 8002a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20018000 	.word	0x20018000
 8002a48:	00000400 	.word	0x00000400
 8002a4c:	20000648 	.word	0x20000648
 8002a50:	200007a0 	.word	0x200007a0

08002a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <SystemInit+0x20>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <SystemInit+0x20>)
 8002a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ab0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a7c:	480d      	ldr	r0, [pc, #52]	; (8002ab4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a7e:	490e      	ldr	r1, [pc, #56]	; (8002ab8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a80:	4a0e      	ldr	r2, [pc, #56]	; (8002abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a84:	e002      	b.n	8002a8c <LoopCopyDataInit>

08002a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8a:	3304      	adds	r3, #4

08002a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a90:	d3f9      	bcc.n	8002a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a92:	4a0b      	ldr	r2, [pc, #44]	; (8002ac0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a94:	4c0b      	ldr	r4, [pc, #44]	; (8002ac4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a98:	e001      	b.n	8002a9e <LoopFillZerobss>

08002a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a9c:	3204      	adds	r2, #4

08002a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa0:	d3fb      	bcc.n	8002a9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002aa2:	f7ff ffd7 	bl	8002a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aa6:	f005 fa4d 	bl	8007f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aaa:	f7fe ff8d 	bl	80019c8 <main>
  bx  lr    
 8002aae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ab0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002abc:	0800a778 	.word	0x0800a778
  ldr r2, =_sbss
 8002ac0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002ac4:	2000079c 	.word	0x2000079c

08002ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ac8:	e7fe      	b.n	8002ac8 <ADC_IRQHandler>
	...

08002acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <HAL_Init+0x40>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0d      	ldr	r2, [pc, #52]	; (8002b0c <HAL_Init+0x40>)
 8002ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_Init+0x40>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <HAL_Init+0x40>)
 8002ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_Init+0x40>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <HAL_Init+0x40>)
 8002aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af4:	2003      	movs	r0, #3
 8002af6:	f000 fcd9 	bl	80034ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002afa:	200f      	movs	r0, #15
 8002afc:	f000 f808 	bl	8002b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b00:	f7ff fc94 	bl	800242c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023c00 	.word	0x40023c00

08002b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_InitTick+0x54>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <HAL_InitTick+0x58>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	4619      	mov	r1, r3
 8002b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fcf1 	bl	8003516 <HAL_SYSTICK_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e00e      	b.n	8002b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b0f      	cmp	r3, #15
 8002b42:	d80a      	bhi.n	8002b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b44:	2200      	movs	r2, #0
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4c:	f000 fcb9 	bl	80034c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b50:	4a06      	ldr	r2, [pc, #24]	; (8002b6c <HAL_InitTick+0x5c>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000000 	.word	0x20000000
 8002b68:	20000008 	.word	0x20000008
 8002b6c:	20000004 	.word	0x20000004

08002b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_IncTick+0x20>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_IncTick+0x24>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4413      	add	r3, r2
 8002b80:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <HAL_IncTick+0x24>)
 8002b82:	6013      	str	r3, [r2, #0]
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000008 	.word	0x20000008
 8002b94:	2000064c 	.word	0x2000064c

08002b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <HAL_GetTick+0x14>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	2000064c 	.word	0x2000064c

08002bb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e033      	b.n	8002c2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff fc54 	bl	800247c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d118      	bne.n	8002c20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bf6:	f023 0302 	bic.w	r3, r3, #2
 8002bfa:	f043 0202 	orr.w	r2, r3, #2
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa86 	bl	8003114 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f023 0303 	bic.w	r3, r3, #3
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
 8002c1e:	e001      	b.n	8002c24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_Start+0x1a>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e097      	b.n	8002d82 <HAL_ADC_Start+0x14a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d018      	beq.n	8002c9a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c78:	4b45      	ldr	r3, [pc, #276]	; (8002d90 <HAL_ADC_Start+0x158>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a45      	ldr	r2, [pc, #276]	; (8002d94 <HAL_ADC_Start+0x15c>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	0c9a      	lsrs	r2, r3, #18
 8002c84:	4613      	mov	r3, r2
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4413      	add	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c8c:	e002      	b.n	8002c94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f9      	bne.n	8002c8e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d15f      	bne.n	8002d68 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cd2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce6:	d106      	bne.n	8002cf6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	f023 0206 	bic.w	r2, r3, #6
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	645a      	str	r2, [r3, #68]	; 0x44
 8002cf4:	e002      	b.n	8002cfc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d04:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_ADC_Start+0x160>)
 8002d06:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d10:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10f      	bne.n	8002d3e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d129      	bne.n	8002d80 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	e020      	b.n	8002d80 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <HAL_ADC_Start+0x164>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d11b      	bne.n	8002d80 <HAL_ADC_Start+0x148>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d114      	bne.n	8002d80 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d64:	609a      	str	r2, [r3, #8]
 8002d66:	e00b      	b.n	8002d80 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f043 0210 	orr.w	r2, r3, #16
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	f043 0201 	orr.w	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20000000 	.word	0x20000000
 8002d94:	431bde83 	.word	0x431bde83
 8002d98:	40012300 	.word	0x40012300
 8002d9c:	40012000 	.word	0x40012000

08002da0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dbc:	d113      	bne.n	8002de6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dcc:	d10b      	bne.n	8002de6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f043 0220 	orr.w	r2, r3, #32
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e063      	b.n	8002eae <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002de6:	f7ff fed7 	bl	8002b98 <HAL_GetTick>
 8002dea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002dec:	e021      	b.n	8002e32 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d01d      	beq.n	8002e32 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <HAL_ADC_PollForConversion+0x6c>
 8002dfc:	f7ff fecc 	bl	8002b98 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d212      	bcs.n	8002e32 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d00b      	beq.n	8002e32 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f043 0204 	orr.w	r2, r3, #4
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e03d      	b.n	8002eae <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d1d6      	bne.n	8002dee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0212 	mvn.w	r2, #18
 8002e48:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d123      	bne.n	8002eac <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d11f      	bne.n	8002eac <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d006      	beq.n	8002e88 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d111      	bne.n	8002eac <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d105      	bne.n	8002eac <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f043 0201 	orr.w	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x1c>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e105      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x228>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b09      	cmp	r3, #9
 8002efa:	d925      	bls.n	8002f48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68d9      	ldr	r1, [r3, #12]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	4413      	add	r3, r2
 8002f10:	3b1e      	subs	r3, #30
 8002f12:	2207      	movs	r2, #7
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43da      	mvns	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	400a      	ands	r2, r1
 8002f20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68d9      	ldr	r1, [r3, #12]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	4603      	mov	r3, r0
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4403      	add	r3, r0
 8002f3a:	3b1e      	subs	r3, #30
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	e022      	b.n	8002f8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6919      	ldr	r1, [r3, #16]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	4613      	mov	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	2207      	movs	r2, #7
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43da      	mvns	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	400a      	ands	r2, r1
 8002f6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6919      	ldr	r1, [r3, #16]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	4603      	mov	r3, r0
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4403      	add	r3, r0
 8002f84:	409a      	lsls	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d824      	bhi.n	8002fe0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3b05      	subs	r3, #5
 8002fa8:	221f      	movs	r2, #31
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	3b05      	subs	r3, #5
 8002fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	635a      	str	r2, [r3, #52]	; 0x34
 8002fde:	e04c      	b.n	800307a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b0c      	cmp	r3, #12
 8002fe6:	d824      	bhi.n	8003032 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3b23      	subs	r3, #35	; 0x23
 8002ffa:	221f      	movs	r2, #31
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43da      	mvns	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	400a      	ands	r2, r1
 8003008:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	4618      	mov	r0, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	3b23      	subs	r3, #35	; 0x23
 8003024:	fa00 f203 	lsl.w	r2, r0, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
 8003030:	e023      	b.n	800307a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	3b41      	subs	r3, #65	; 0x41
 8003044:	221f      	movs	r2, #31
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43da      	mvns	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	400a      	ands	r2, r1
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	4618      	mov	r0, r3
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	3b41      	subs	r3, #65	; 0x41
 800306e:	fa00 f203 	lsl.w	r2, r0, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800307a:	4b22      	ldr	r3, [pc, #136]	; (8003104 <HAL_ADC_ConfigChannel+0x234>)
 800307c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a21      	ldr	r2, [pc, #132]	; (8003108 <HAL_ADC_ConfigChannel+0x238>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d109      	bne.n	800309c <HAL_ADC_ConfigChannel+0x1cc>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b12      	cmp	r3, #18
 800308e:	d105      	bne.n	800309c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <HAL_ADC_ConfigChannel+0x238>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d123      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x21e>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	d003      	beq.n	80030b6 <HAL_ADC_ConfigChannel+0x1e6>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b11      	cmp	r3, #17
 80030b4:	d11b      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d111      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <HAL_ADC_ConfigChannel+0x23c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a10      	ldr	r2, [pc, #64]	; (8003110 <HAL_ADC_ConfigChannel+0x240>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	0c9a      	lsrs	r2, r3, #18
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030e0:	e002      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f9      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	40012300 	.word	0x40012300
 8003108:	40012000 	.word	0x40012000
 800310c:	20000000 	.word	0x20000000
 8003110:	431bde83 	.word	0x431bde83

08003114 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800311c:	4b79      	ldr	r3, [pc, #484]	; (8003304 <ADC_Init+0x1f0>)
 800311e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	431a      	orrs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003148:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6859      	ldr	r1, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	021a      	lsls	r2, r3, #8
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800316c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800318e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6899      	ldr	r1, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	4a58      	ldr	r2, [pc, #352]	; (8003308 <ADC_Init+0x1f4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d022      	beq.n	80031f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6899      	ldr	r1, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6899      	ldr	r1, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	e00f      	b.n	8003212 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003200:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003210:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0202 	bic.w	r2, r2, #2
 8003220:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6899      	ldr	r1, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	7e1b      	ldrb	r3, [r3, #24]
 800322c:	005a      	lsls	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01b      	beq.n	8003278 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800324e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800325e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6859      	ldr	r1, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	3b01      	subs	r3, #1
 800326c:	035a      	lsls	r2, r3, #13
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	e007      	b.n	8003288 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003286:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	051a      	lsls	r2, r3, #20
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6899      	ldr	r1, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ca:	025a      	lsls	r2, r3, #9
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6899      	ldr	r1, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	029a      	lsls	r2, r3, #10
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	609a      	str	r2, [r3, #8]
}
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	40012300 	.word	0x40012300
 8003308:	0f000001 	.word	0x0f000001

0800330c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <__NVIC_SetPriorityGrouping+0x44>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003328:	4013      	ands	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800333e:	4a04      	ldr	r2, [pc, #16]	; (8003350 <__NVIC_SetPriorityGrouping+0x44>)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	60d3      	str	r3, [r2, #12]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003358:	4b04      	ldr	r3, [pc, #16]	; (800336c <__NVIC_GetPriorityGrouping+0x18>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	0a1b      	lsrs	r3, r3, #8
 800335e:	f003 0307 	and.w	r3, r3, #7
}
 8003362:	4618      	mov	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	2b00      	cmp	r3, #0
 8003380:	db0b      	blt.n	800339a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	f003 021f 	and.w	r2, r3, #31
 8003388:	4907      	ldr	r1, [pc, #28]	; (80033a8 <__NVIC_EnableIRQ+0x38>)
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	2001      	movs	r0, #1
 8003392:	fa00 f202 	lsl.w	r2, r0, r2
 8003396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	e000e100 	.word	0xe000e100

080033ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	6039      	str	r1, [r7, #0]
 80033b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	db0a      	blt.n	80033d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	490c      	ldr	r1, [pc, #48]	; (80033f8 <__NVIC_SetPriority+0x4c>)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	0112      	lsls	r2, r2, #4
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	440b      	add	r3, r1
 80033d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d4:	e00a      	b.n	80033ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	4908      	ldr	r1, [pc, #32]	; (80033fc <__NVIC_SetPriority+0x50>)
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	3b04      	subs	r3, #4
 80033e4:	0112      	lsls	r2, r2, #4
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	440b      	add	r3, r1
 80033ea:	761a      	strb	r2, [r3, #24]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000e100 	.word	0xe000e100
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f1c3 0307 	rsb	r3, r3, #7
 800341a:	2b04      	cmp	r3, #4
 800341c:	bf28      	it	cs
 800341e:	2304      	movcs	r3, #4
 8003420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3304      	adds	r3, #4
 8003426:	2b06      	cmp	r3, #6
 8003428:	d902      	bls.n	8003430 <NVIC_EncodePriority+0x30>
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3b03      	subs	r3, #3
 800342e:	e000      	b.n	8003432 <NVIC_EncodePriority+0x32>
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003434:	f04f 32ff 	mov.w	r2, #4294967295
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43da      	mvns	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	401a      	ands	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003448:	f04f 31ff 	mov.w	r1, #4294967295
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	43d9      	mvns	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003458:	4313      	orrs	r3, r2
         );
}
 800345a:	4618      	mov	r0, r3
 800345c:	3724      	adds	r7, #36	; 0x24
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003478:	d301      	bcc.n	800347e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800347a:	2301      	movs	r3, #1
 800347c:	e00f      	b.n	800349e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800347e:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <SysTick_Config+0x40>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3b01      	subs	r3, #1
 8003484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003486:	210f      	movs	r1, #15
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	f7ff ff8e 	bl	80033ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003490:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <SysTick_Config+0x40>)
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003496:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <SysTick_Config+0x40>)
 8003498:	2207      	movs	r2, #7
 800349a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	e000e010 	.word	0xe000e010

080034ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff29 	bl	800330c <__NVIC_SetPriorityGrouping>
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	4603      	mov	r3, r0
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034d4:	f7ff ff3e 	bl	8003354 <__NVIC_GetPriorityGrouping>
 80034d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	6978      	ldr	r0, [r7, #20]
 80034e0:	f7ff ff8e 	bl	8003400 <NVIC_EncodePriority>
 80034e4:	4602      	mov	r2, r0
 80034e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ea:	4611      	mov	r1, r2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ff5d 	bl	80033ac <__NVIC_SetPriority>
}
 80034f2:	bf00      	nop
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff ff31 	bl	8003370 <__NVIC_EnableIRQ>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff ffa2 	bl	8003468 <SysTick_Config>
 8003524:	4603      	mov	r3, r0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800353c:	f7ff fb2c 	bl	8002b98 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e099      	b.n	8003680 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800356c:	e00f      	b.n	800358e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800356e:	f7ff fb13 	bl	8002b98 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b05      	cmp	r3, #5
 800357a:	d908      	bls.n	800358e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2203      	movs	r2, #3
 8003586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e078      	b.n	8003680 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e8      	bne.n	800356e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4b38      	ldr	r3, [pc, #224]	; (8003688 <HAL_DMA_Init+0x158>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d107      	bne.n	80035f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	4313      	orrs	r3, r2
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f023 0307 	bic.w	r3, r3, #7
 800360e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	2b04      	cmp	r3, #4
 8003620:	d117      	bne.n	8003652 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00e      	beq.n	8003652 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fa7b 	bl	8003b30 <DMA_CheckFifoParam>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2240      	movs	r2, #64	; 0x40
 8003644:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800364e:	2301      	movs	r3, #1
 8003650:	e016      	b.n	8003680 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fa32 	bl	8003ac4 <DMA_CalcBaseAndBitshift>
 8003660:	4603      	mov	r3, r0
 8003662:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003668:	223f      	movs	r2, #63	; 0x3f
 800366a:	409a      	lsls	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	f010803f 	.word	0xf010803f

0800368c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800369a:	f7ff fa7d 	bl	8002b98 <HAL_GetTick>
 800369e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d008      	beq.n	80036be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2280      	movs	r2, #128	; 0x80
 80036b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e052      	b.n	8003764 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0216 	bic.w	r2, r2, #22
 80036cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695a      	ldr	r2, [r3, #20]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d103      	bne.n	80036ee <HAL_DMA_Abort+0x62>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0208 	bic.w	r2, r2, #8
 80036fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0201 	bic.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800370e:	e013      	b.n	8003738 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003710:	f7ff fa42 	bl	8002b98 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b05      	cmp	r3, #5
 800371c:	d90c      	bls.n	8003738 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2203      	movs	r2, #3
 8003728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e015      	b.n	8003764 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1e4      	bne.n	8003710 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374a:	223f      	movs	r2, #63	; 0x3f
 800374c:	409a      	lsls	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d004      	beq.n	800378a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2280      	movs	r2, #128	; 0x80
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e00c      	b.n	80037a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2205      	movs	r2, #5
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037bc:	4b8e      	ldr	r3, [pc, #568]	; (80039f8 <HAL_DMA_IRQHandler+0x248>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a8e      	ldr	r2, [pc, #568]	; (80039fc <HAL_DMA_IRQHandler+0x24c>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	0a9b      	lsrs	r3, r3, #10
 80037c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037da:	2208      	movs	r2, #8
 80037dc:	409a      	lsls	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01a      	beq.n	800381c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d013      	beq.n	800381c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0204 	bic.w	r2, r2, #4
 8003802:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003808:	2208      	movs	r2, #8
 800380a:	409a      	lsls	r2, r3
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	f043 0201 	orr.w	r2, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003820:	2201      	movs	r2, #1
 8003822:	409a      	lsls	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4013      	ands	r3, r2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d012      	beq.n	8003852 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00b      	beq.n	8003852 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383e:	2201      	movs	r2, #1
 8003840:	409a      	lsls	r2, r3
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384a:	f043 0202 	orr.w	r2, r3, #2
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	2204      	movs	r2, #4
 8003858:	409a      	lsls	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d012      	beq.n	8003888 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00b      	beq.n	8003888 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003874:	2204      	movs	r2, #4
 8003876:	409a      	lsls	r2, r3
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003880:	f043 0204 	orr.w	r2, r3, #4
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	2210      	movs	r2, #16
 800388e:	409a      	lsls	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4013      	ands	r3, r2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d043      	beq.n	8003920 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d03c      	beq.n	8003920 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038aa:	2210      	movs	r2, #16
 80038ac:	409a      	lsls	r2, r3
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d018      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d108      	bne.n	80038e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d024      	beq.n	8003920 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	4798      	blx	r3
 80038de:	e01f      	b.n	8003920 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01b      	beq.n	8003920 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4798      	blx	r3
 80038f0:	e016      	b.n	8003920 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d107      	bne.n	8003910 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0208 	bic.w	r2, r2, #8
 800390e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	2220      	movs	r2, #32
 8003926:	409a      	lsls	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 808f 	beq.w	8003a50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8087 	beq.w	8003a50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003946:	2220      	movs	r2, #32
 8003948:	409a      	lsls	r2, r3
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b05      	cmp	r3, #5
 8003958:	d136      	bne.n	80039c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0216 	bic.w	r2, r2, #22
 8003968:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003978:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d103      	bne.n	800398a <HAL_DMA_IRQHandler+0x1da>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0208 	bic.w	r2, r2, #8
 8003998:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399e:	223f      	movs	r2, #63	; 0x3f
 80039a0:	409a      	lsls	r2, r3
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d07e      	beq.n	8003abc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	4798      	blx	r3
        }
        return;
 80039c6:	e079      	b.n	8003abc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01d      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10d      	bne.n	8003a00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d031      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	4798      	blx	r3
 80039f4:	e02c      	b.n	8003a50 <HAL_DMA_IRQHandler+0x2a0>
 80039f6:	bf00      	nop
 80039f8:	20000000 	.word	0x20000000
 80039fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d023      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4798      	blx	r3
 8003a10:	e01e      	b.n	8003a50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10f      	bne.n	8003a40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0210 	bic.w	r2, r2, #16
 8003a2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d032      	beq.n	8003abe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d022      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2205      	movs	r2, #5
 8003a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d307      	bcc.n	8003a98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f2      	bne.n	8003a7c <HAL_DMA_IRQHandler+0x2cc>
 8003a96:	e000      	b.n	8003a9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	4798      	blx	r3
 8003aba:	e000      	b.n	8003abe <HAL_DMA_IRQHandler+0x30e>
        return;
 8003abc:	bf00      	nop
    }
  }
}
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	3b10      	subs	r3, #16
 8003ad4:	4a14      	ldr	r2, [pc, #80]	; (8003b28 <DMA_CalcBaseAndBitshift+0x64>)
 8003ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ada:	091b      	lsrs	r3, r3, #4
 8003adc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ade:	4a13      	ldr	r2, [pc, #76]	; (8003b2c <DMA_CalcBaseAndBitshift+0x68>)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d909      	bls.n	8003b06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003afa:	f023 0303 	bic.w	r3, r3, #3
 8003afe:	1d1a      	adds	r2, r3, #4
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	659a      	str	r2, [r3, #88]	; 0x58
 8003b04:	e007      	b.n	8003b16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b0e:	f023 0303 	bic.w	r3, r3, #3
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	aaaaaaab 	.word	0xaaaaaaab
 8003b2c:	0800a2ec 	.word	0x0800a2ec

08003b30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d11f      	bne.n	8003b8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d856      	bhi.n	8003bfe <DMA_CheckFifoParam+0xce>
 8003b50:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <DMA_CheckFifoParam+0x28>)
 8003b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b56:	bf00      	nop
 8003b58:	08003b69 	.word	0x08003b69
 8003b5c:	08003b7b 	.word	0x08003b7b
 8003b60:	08003b69 	.word	0x08003b69
 8003b64:	08003bff 	.word	0x08003bff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d046      	beq.n	8003c02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b78:	e043      	b.n	8003c02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b82:	d140      	bne.n	8003c06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b88:	e03d      	b.n	8003c06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b92:	d121      	bne.n	8003bd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d837      	bhi.n	8003c0a <DMA_CheckFifoParam+0xda>
 8003b9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <DMA_CheckFifoParam+0x70>)
 8003b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba0:	08003bb1 	.word	0x08003bb1
 8003ba4:	08003bb7 	.word	0x08003bb7
 8003ba8:	08003bb1 	.word	0x08003bb1
 8003bac:	08003bc9 	.word	0x08003bc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb4:	e030      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d025      	beq.n	8003c0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc6:	e022      	b.n	8003c0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bd0:	d11f      	bne.n	8003c12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bd6:	e01c      	b.n	8003c12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d903      	bls.n	8003be6 <DMA_CheckFifoParam+0xb6>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d003      	beq.n	8003bec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003be4:	e018      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
      break;
 8003bea:	e015      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00e      	beq.n	8003c16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bfc:	e00b      	b.n	8003c16 <DMA_CheckFifoParam+0xe6>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e00a      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
      break;
 8003c02:	bf00      	nop
 8003c04:	e008      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
      break;
 8003c06:	bf00      	nop
 8003c08:	e006      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
      break;
 8003c0a:	bf00      	nop
 8003c0c:	e004      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
      break;
 8003c0e:	bf00      	nop
 8003c10:	e002      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c12:	bf00      	nop
 8003c14:	e000      	b.n	8003c18 <DMA_CheckFifoParam+0xe8>
      break;
 8003c16:	bf00      	nop
    }
  } 
  
  return status; 
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop

08003c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b089      	sub	sp, #36	; 0x24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	e159      	b.n	8003ef8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c44:	2201      	movs	r2, #1
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4013      	ands	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	f040 8148 	bne.w	8003ef2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d005      	beq.n	8003c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d130      	bne.n	8003cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	2203      	movs	r2, #3
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 0201 	and.w	r2, r3, #1
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d017      	beq.n	8003d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d123      	bne.n	8003d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	08da      	lsrs	r2, r3, #3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3208      	adds	r2, #8
 8003d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	220f      	movs	r2, #15
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	08da      	lsrs	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3208      	adds	r2, #8
 8003d66:	69b9      	ldr	r1, [r7, #24]
 8003d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	2203      	movs	r2, #3
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0203 	and.w	r2, r3, #3
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80a2 	beq.w	8003ef2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	4b57      	ldr	r3, [pc, #348]	; (8003f10 <HAL_GPIO_Init+0x2e8>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	4a56      	ldr	r2, [pc, #344]	; (8003f10 <HAL_GPIO_Init+0x2e8>)
 8003db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dbe:	4b54      	ldr	r3, [pc, #336]	; (8003f10 <HAL_GPIO_Init+0x2e8>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dca:	4a52      	ldr	r2, [pc, #328]	; (8003f14 <HAL_GPIO_Init+0x2ec>)
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	089b      	lsrs	r3, r3, #2
 8003dd0:	3302      	adds	r3, #2
 8003dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	220f      	movs	r2, #15
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4013      	ands	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a49      	ldr	r2, [pc, #292]	; (8003f18 <HAL_GPIO_Init+0x2f0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d019      	beq.n	8003e2a <HAL_GPIO_Init+0x202>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a48      	ldr	r2, [pc, #288]	; (8003f1c <HAL_GPIO_Init+0x2f4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <HAL_GPIO_Init+0x1fe>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a47      	ldr	r2, [pc, #284]	; (8003f20 <HAL_GPIO_Init+0x2f8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00d      	beq.n	8003e22 <HAL_GPIO_Init+0x1fa>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a46      	ldr	r2, [pc, #280]	; (8003f24 <HAL_GPIO_Init+0x2fc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <HAL_GPIO_Init+0x1f6>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a45      	ldr	r2, [pc, #276]	; (8003f28 <HAL_GPIO_Init+0x300>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d101      	bne.n	8003e1a <HAL_GPIO_Init+0x1f2>
 8003e16:	2304      	movs	r3, #4
 8003e18:	e008      	b.n	8003e2c <HAL_GPIO_Init+0x204>
 8003e1a:	2307      	movs	r3, #7
 8003e1c:	e006      	b.n	8003e2c <HAL_GPIO_Init+0x204>
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e004      	b.n	8003e2c <HAL_GPIO_Init+0x204>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e002      	b.n	8003e2c <HAL_GPIO_Init+0x204>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_GPIO_Init+0x204>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	f002 0203 	and.w	r2, r2, #3
 8003e32:	0092      	lsls	r2, r2, #2
 8003e34:	4093      	lsls	r3, r2
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e3c:	4935      	ldr	r1, [pc, #212]	; (8003f14 <HAL_GPIO_Init+0x2ec>)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	3302      	adds	r3, #2
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e4a:	4b38      	ldr	r3, [pc, #224]	; (8003f2c <HAL_GPIO_Init+0x304>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4013      	ands	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e6e:	4a2f      	ldr	r2, [pc, #188]	; (8003f2c <HAL_GPIO_Init+0x304>)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e74:	4b2d      	ldr	r3, [pc, #180]	; (8003f2c <HAL_GPIO_Init+0x304>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e98:	4a24      	ldr	r2, [pc, #144]	; (8003f2c <HAL_GPIO_Init+0x304>)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e9e:	4b23      	ldr	r3, [pc, #140]	; (8003f2c <HAL_GPIO_Init+0x304>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ec2:	4a1a      	ldr	r2, [pc, #104]	; (8003f2c <HAL_GPIO_Init+0x304>)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ec8:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <HAL_GPIO_Init+0x304>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eec:	4a0f      	ldr	r2, [pc, #60]	; (8003f2c <HAL_GPIO_Init+0x304>)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	61fb      	str	r3, [r7, #28]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	2b0f      	cmp	r3, #15
 8003efc:	f67f aea2 	bls.w	8003c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f00:	bf00      	nop
 8003f02:	bf00      	nop
 8003f04:	3724      	adds	r7, #36	; 0x24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40013800 	.word	0x40013800
 8003f18:	40020000 	.word	0x40020000
 8003f1c:	40020400 	.word	0x40020400
 8003f20:	40020800 	.word	0x40020800
 8003f24:	40020c00 	.word	0x40020c00
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40013c00 	.word	0x40013c00

08003f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f40:	787b      	ldrb	r3, [r7, #1]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f46:	887a      	ldrh	r2, [r7, #2]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f4c:	e003      	b.n	8003f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f4e:	887b      	ldrh	r3, [r7, #2]
 8003f50:	041a      	lsls	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	619a      	str	r2, [r3, #24]
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e267      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d075      	beq.n	800406e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f82:	4b88      	ldr	r3, [pc, #544]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d00c      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8e:	4b85      	ldr	r3, [pc, #532]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d112      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9a:	4b82      	ldr	r3, [pc, #520]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa8:	4b7e      	ldr	r3, [pc, #504]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d05b      	beq.n	800406c <HAL_RCC_OscConfig+0x108>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d157      	bne.n	800406c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e242      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc8:	d106      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x74>
 8003fca:	4b76      	ldr	r3, [pc, #472]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a75      	ldr	r2, [pc, #468]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e01d      	b.n	8004014 <HAL_RCC_OscConfig+0xb0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x98>
 8003fe2:	4b70      	ldr	r3, [pc, #448]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a6f      	ldr	r2, [pc, #444]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	4b6d      	ldr	r3, [pc, #436]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a6c      	ldr	r2, [pc, #432]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e00b      	b.n	8004014 <HAL_RCC_OscConfig+0xb0>
 8003ffc:	4b69      	ldr	r3, [pc, #420]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a68      	ldr	r2, [pc, #416]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b66      	ldr	r3, [pc, #408]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a65      	ldr	r2, [pc, #404]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 800400e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7fe fdbc 	bl	8002b98 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004024:	f7fe fdb8 	bl	8002b98 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e207      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004036:	4b5b      	ldr	r3, [pc, #364]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0xc0>
 8004042:	e014      	b.n	800406e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004044:	f7fe fda8 	bl	8002b98 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800404c:	f7fe fda4 	bl	8002b98 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	; 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1f3      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405e:	4b51      	ldr	r3, [pc, #324]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0xe8>
 800406a:	e000      	b.n	800406e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d063      	beq.n	8004142 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800407a:	4b4a      	ldr	r3, [pc, #296]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004086:	4b47      	ldr	r3, [pc, #284]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800408e:	2b08      	cmp	r3, #8
 8004090:	d11c      	bne.n	80040cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004092:	4b44      	ldr	r3, [pc, #272]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d116      	bne.n	80040cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409e:	4b41      	ldr	r3, [pc, #260]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <HAL_RCC_OscConfig+0x152>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d001      	beq.n	80040b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e1c7      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b6:	4b3b      	ldr	r3, [pc, #236]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4937      	ldr	r1, [pc, #220]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ca:	e03a      	b.n	8004142 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d4:	4b34      	ldr	r3, [pc, #208]	; (80041a8 <HAL_RCC_OscConfig+0x244>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040da:	f7fe fd5d 	bl	8002b98 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e2:	f7fe fd59 	bl	8002b98 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e1a8      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f4:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f0      	beq.n	80040e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004100:	4b28      	ldr	r3, [pc, #160]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4925      	ldr	r1, [pc, #148]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004110:	4313      	orrs	r3, r2
 8004112:	600b      	str	r3, [r1, #0]
 8004114:	e015      	b.n	8004142 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <HAL_RCC_OscConfig+0x244>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fe fd3c 	bl	8002b98 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004124:	f7fe fd38 	bl	8002b98 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e187      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004136:	4b1b      	ldr	r3, [pc, #108]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d036      	beq.n	80041bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d016      	beq.n	8004184 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004156:	4b15      	ldr	r3, [pc, #84]	; (80041ac <HAL_RCC_OscConfig+0x248>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7fe fd1c 	bl	8002b98 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004164:	f7fe fd18 	bl	8002b98 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e167      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004176:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0x200>
 8004182:	e01b      	b.n	80041bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCC_OscConfig+0x248>)
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418a:	f7fe fd05 	bl	8002b98 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004190:	e00e      	b.n	80041b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004192:	f7fe fd01 	bl	8002b98 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d907      	bls.n	80041b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e150      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
 80041a4:	40023800 	.word	0x40023800
 80041a8:	42470000 	.word	0x42470000
 80041ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b0:	4b88      	ldr	r3, [pc, #544]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1ea      	bne.n	8004192 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8097 	beq.w	80042f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ca:	2300      	movs	r3, #0
 80041cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ce:	4b81      	ldr	r3, [pc, #516]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10f      	bne.n	80041fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	4b7d      	ldr	r3, [pc, #500]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	4a7c      	ldr	r2, [pc, #496]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ea:	4b7a      	ldr	r3, [pc, #488]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f6:	2301      	movs	r3, #1
 80041f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fa:	4b77      	ldr	r3, [pc, #476]	; (80043d8 <HAL_RCC_OscConfig+0x474>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d118      	bne.n	8004238 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004206:	4b74      	ldr	r3, [pc, #464]	; (80043d8 <HAL_RCC_OscConfig+0x474>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a73      	ldr	r2, [pc, #460]	; (80043d8 <HAL_RCC_OscConfig+0x474>)
 800420c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004212:	f7fe fcc1 	bl	8002b98 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421a:	f7fe fcbd 	bl	8002b98 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e10c      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422c:	4b6a      	ldr	r3, [pc, #424]	; (80043d8 <HAL_RCC_OscConfig+0x474>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x2ea>
 8004240:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	4a63      	ldr	r2, [pc, #396]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6713      	str	r3, [r2, #112]	; 0x70
 800424c:	e01c      	b.n	8004288 <HAL_RCC_OscConfig+0x324>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2b05      	cmp	r3, #5
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x30c>
 8004256:	4b5f      	ldr	r3, [pc, #380]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	4a5e      	ldr	r2, [pc, #376]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 800425c:	f043 0304 	orr.w	r3, r3, #4
 8004260:	6713      	str	r3, [r2, #112]	; 0x70
 8004262:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	4a5b      	ldr	r2, [pc, #364]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	6713      	str	r3, [r2, #112]	; 0x70
 800426e:	e00b      	b.n	8004288 <HAL_RCC_OscConfig+0x324>
 8004270:	4b58      	ldr	r3, [pc, #352]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	4a57      	ldr	r2, [pc, #348]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004276:	f023 0301 	bic.w	r3, r3, #1
 800427a:	6713      	str	r3, [r2, #112]	; 0x70
 800427c:	4b55      	ldr	r3, [pc, #340]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	4a54      	ldr	r2, [pc, #336]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004282:	f023 0304 	bic.w	r3, r3, #4
 8004286:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d015      	beq.n	80042bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004290:	f7fe fc82 	bl	8002b98 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004296:	e00a      	b.n	80042ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004298:	f7fe fc7e 	bl	8002b98 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e0cb      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ae:	4b49      	ldr	r3, [pc, #292]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0ee      	beq.n	8004298 <HAL_RCC_OscConfig+0x334>
 80042ba:	e014      	b.n	80042e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042bc:	f7fe fc6c 	bl	8002b98 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c2:	e00a      	b.n	80042da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c4:	f7fe fc68 	bl	8002b98 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e0b5      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042da:	4b3e      	ldr	r3, [pc, #248]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1ee      	bne.n	80042c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d105      	bne.n	80042f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ec:	4b39      	ldr	r3, [pc, #228]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	4a38      	ldr	r2, [pc, #224]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80a1 	beq.w	8004444 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004302:	4b34      	ldr	r3, [pc, #208]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b08      	cmp	r3, #8
 800430c:	d05c      	beq.n	80043c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d141      	bne.n	800439a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004316:	4b31      	ldr	r3, [pc, #196]	; (80043dc <HAL_RCC_OscConfig+0x478>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fe fc3c 	bl	8002b98 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004324:	f7fe fc38 	bl	8002b98 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e087      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004336:	4b27      	ldr	r3, [pc, #156]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69da      	ldr	r2, [r3, #28]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	019b      	lsls	r3, r3, #6
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	085b      	lsrs	r3, r3, #1
 800435a:	3b01      	subs	r3, #1
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	061b      	lsls	r3, r3, #24
 8004366:	491b      	ldr	r1, [pc, #108]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800436c:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <HAL_RCC_OscConfig+0x478>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004372:	f7fe fc11 	bl	8002b98 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437a:	f7fe fc0d 	bl	8002b98 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e05c      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438c:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x416>
 8004398:	e054      	b.n	8004444 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439a:	4b10      	ldr	r3, [pc, #64]	; (80043dc <HAL_RCC_OscConfig+0x478>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fe fbfa 	bl	8002b98 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a8:	f7fe fbf6 	bl	8002b98 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e045      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <HAL_RCC_OscConfig+0x470>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x444>
 80043c6:	e03d      	b.n	8004444 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d107      	bne.n	80043e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e038      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40007000 	.word	0x40007000
 80043dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043e0:	4b1b      	ldr	r3, [pc, #108]	; (8004450 <HAL_RCC_OscConfig+0x4ec>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d028      	beq.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d121      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004406:	429a      	cmp	r2, r3
 8004408:	d11a      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004410:	4013      	ands	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004416:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004418:	4293      	cmp	r3, r2
 800441a:	d111      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	085b      	lsrs	r3, r3, #1
 8004428:	3b01      	subs	r3, #1
 800442a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800442c:	429a      	cmp	r2, r3
 800442e:	d107      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40023800 	.word	0x40023800

08004454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0cc      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004468:	4b68      	ldr	r3, [pc, #416]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d90c      	bls.n	8004490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004476:	4b65      	ldr	r3, [pc, #404]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b63      	ldr	r3, [pc, #396]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0b8      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a8:	4b59      	ldr	r3, [pc, #356]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a58      	ldr	r2, [pc, #352]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c0:	4b53      	ldr	r3, [pc, #332]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4a52      	ldr	r2, [pc, #328]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044cc:	4b50      	ldr	r3, [pc, #320]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	494d      	ldr	r1, [pc, #308]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d044      	beq.n	8004574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	4b47      	ldr	r3, [pc, #284]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d119      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e07f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d003      	beq.n	8004512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450e:	2b03      	cmp	r3, #3
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004512:	4b3f      	ldr	r3, [pc, #252]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e06f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004522:	4b3b      	ldr	r3, [pc, #236]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e067      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004532:	4b37      	ldr	r3, [pc, #220]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f023 0203 	bic.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4934      	ldr	r1, [pc, #208]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	4313      	orrs	r3, r2
 8004542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004544:	f7fe fb28 	bl	8002b98 <HAL_GetTick>
 8004548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	e00a      	b.n	8004562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454c:	f7fe fb24 	bl	8002b98 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e04f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004562:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 020c 	and.w	r2, r3, #12
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	429a      	cmp	r2, r3
 8004572:	d1eb      	bne.n	800454c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d20c      	bcs.n	800459c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b22      	ldr	r3, [pc, #136]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b20      	ldr	r3, [pc, #128]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e032      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4916      	ldr	r1, [pc, #88]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	490e      	ldr	r1, [pc, #56]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045da:	f000 f821 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80045de:	4602      	mov	r2, r0
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	490a      	ldr	r1, [pc, #40]	; (8004614 <HAL_RCC_ClockConfig+0x1c0>)
 80045ec:	5ccb      	ldrb	r3, [r1, r3]
 80045ee:	fa22 f303 	lsr.w	r3, r2, r3
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80045f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_RCC_ClockConfig+0x1c8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe fa88 	bl	8002b10 <HAL_InitTick>

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023c00 	.word	0x40023c00
 8004610:	40023800 	.word	0x40023800
 8004614:	0800a2d4 	.word	0x0800a2d4
 8004618:	20000000 	.word	0x20000000
 800461c:	20000004 	.word	0x20000004

08004620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004624:	b090      	sub	sp, #64	; 0x40
 8004626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
 800462c:	2300      	movs	r3, #0
 800462e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004630:	2300      	movs	r3, #0
 8004632:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004638:	4b59      	ldr	r3, [pc, #356]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b08      	cmp	r3, #8
 8004642:	d00d      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x40>
 8004644:	2b08      	cmp	r3, #8
 8004646:	f200 80a1 	bhi.w	800478c <HAL_RCC_GetSysClockFreq+0x16c>
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x34>
 800464e:	2b04      	cmp	r3, #4
 8004650:	d003      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0x3a>
 8004652:	e09b      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004654:	4b53      	ldr	r3, [pc, #332]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004656:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004658:	e09b      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800465a:	4b53      	ldr	r3, [pc, #332]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800465c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800465e:	e098      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004660:	4b4f      	ldr	r3, [pc, #316]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004668:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800466a:	4b4d      	ldr	r3, [pc, #308]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d028      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004676:	4b4a      	ldr	r3, [pc, #296]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	099b      	lsrs	r3, r3, #6
 800467c:	2200      	movs	r2, #0
 800467e:	623b      	str	r3, [r7, #32]
 8004680:	627a      	str	r2, [r7, #36]	; 0x24
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004688:	2100      	movs	r1, #0
 800468a:	4b47      	ldr	r3, [pc, #284]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800468c:	fb03 f201 	mul.w	r2, r3, r1
 8004690:	2300      	movs	r3, #0
 8004692:	fb00 f303 	mul.w	r3, r0, r3
 8004696:	4413      	add	r3, r2
 8004698:	4a43      	ldr	r2, [pc, #268]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800469a:	fba0 1202 	umull	r1, r2, r0, r2
 800469e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046a0:	460a      	mov	r2, r1
 80046a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80046a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046a6:	4413      	add	r3, r2
 80046a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ac:	2200      	movs	r2, #0
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	61fa      	str	r2, [r7, #28]
 80046b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046ba:	f7fc fabd 	bl	8000c38 <__aeabi_uldivmod>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4613      	mov	r3, r2
 80046c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c6:	e053      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c8:	4b35      	ldr	r3, [pc, #212]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	099b      	lsrs	r3, r3, #6
 80046ce:	2200      	movs	r2, #0
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	617a      	str	r2, [r7, #20]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046da:	f04f 0b00 	mov.w	fp, #0
 80046de:	4652      	mov	r2, sl
 80046e0:	465b      	mov	r3, fp
 80046e2:	f04f 0000 	mov.w	r0, #0
 80046e6:	f04f 0100 	mov.w	r1, #0
 80046ea:	0159      	lsls	r1, r3, #5
 80046ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f0:	0150      	lsls	r0, r2, #5
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	ebb2 080a 	subs.w	r8, r2, sl
 80046fa:	eb63 090b 	sbc.w	r9, r3, fp
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800470a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800470e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004712:	ebb2 0408 	subs.w	r4, r2, r8
 8004716:	eb63 0509 	sbc.w	r5, r3, r9
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	00eb      	lsls	r3, r5, #3
 8004724:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004728:	00e2      	lsls	r2, r4, #3
 800472a:	4614      	mov	r4, r2
 800472c:	461d      	mov	r5, r3
 800472e:	eb14 030a 	adds.w	r3, r4, sl
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	eb45 030b 	adc.w	r3, r5, fp
 8004738:	607b      	str	r3, [r7, #4]
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004746:	4629      	mov	r1, r5
 8004748:	028b      	lsls	r3, r1, #10
 800474a:	4621      	mov	r1, r4
 800474c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004750:	4621      	mov	r1, r4
 8004752:	028a      	lsls	r2, r1, #10
 8004754:	4610      	mov	r0, r2
 8004756:	4619      	mov	r1, r3
 8004758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475a:	2200      	movs	r2, #0
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	60fa      	str	r2, [r7, #12]
 8004760:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004764:	f7fc fa68 	bl	8000c38 <__aeabi_uldivmod>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4613      	mov	r3, r2
 800476e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	3301      	adds	r3, #1
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	fbb2 f3f3 	udiv	r3, r2, r3
 8004788:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800478a:	e002      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800478e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004794:	4618      	mov	r0, r3
 8004796:	3740      	adds	r7, #64	; 0x40
 8004798:	46bd      	mov	sp, r7
 800479a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800479e:	bf00      	nop
 80047a0:	40023800 	.word	0x40023800
 80047a4:	00f42400 	.word	0x00f42400
 80047a8:	017d7840 	.word	0x017d7840

080047ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047b0:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047b2:	681b      	ldr	r3, [r3, #0]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	20000000 	.word	0x20000000

080047c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047c8:	f7ff fff0 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	0a9b      	lsrs	r3, r3, #10
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	4903      	ldr	r1, [pc, #12]	; (80047e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047da:	5ccb      	ldrb	r3, [r1, r3]
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40023800 	.word	0x40023800
 80047e8:	0800a2e4 	.word	0x0800a2e4

080047ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047f0:	f7ff ffdc 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetPCLK2Freq+0x20>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	0b5b      	lsrs	r3, r3, #13
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4903      	ldr	r1, [pc, #12]	; (8004810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004802:	5ccb      	ldrb	r3, [r1, r3]
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40023800 	.word	0x40023800
 8004810:	0800a2e4 	.word	0x0800a2e4

08004814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e07b      	b.n	800491e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	2b00      	cmp	r3, #0
 800482c:	d108      	bne.n	8004840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004836:	d009      	beq.n	800484c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	61da      	str	r2, [r3, #28]
 800483e:	e005      	b.n	800484c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fd fe80 	bl	800256c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004882:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d0:	ea42 0103 	orr.w	r1, r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	0c1b      	lsrs	r3, r3, #16
 80048ea:	f003 0104 	and.w	r1, r3, #4
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	f003 0210 	and.w	r2, r3, #16
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800490c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b088      	sub	sp, #32
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	4613      	mov	r3, r2
 8004934:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_SPI_Transmit+0x22>
 8004944:	2302      	movs	r3, #2
 8004946:	e126      	b.n	8004b96 <HAL_SPI_Transmit+0x270>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004950:	f7fe f922 	bl	8002b98 <HAL_GetTick>
 8004954:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b01      	cmp	r3, #1
 8004964:	d002      	beq.n	800496c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004966:	2302      	movs	r3, #2
 8004968:	77fb      	strb	r3, [r7, #31]
    goto error;
 800496a:	e10b      	b.n	8004b84 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_SPI_Transmit+0x52>
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d102      	bne.n	800497e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800497c:	e102      	b.n	8004b84 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2203      	movs	r2, #3
 8004982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	88fa      	ldrh	r2, [r7, #6]
 8004996:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c4:	d10f      	bne.n	80049e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d007      	beq.n	8004a04 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a0c:	d14b      	bne.n	8004aa6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_SPI_Transmit+0xf6>
 8004a16:	8afb      	ldrh	r3, [r7, #22]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d13e      	bne.n	8004a9a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	881a      	ldrh	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	1c9a      	adds	r2, r3, #2
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a40:	e02b      	b.n	8004a9a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d112      	bne.n	8004a76 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	881a      	ldrh	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	1c9a      	adds	r2, r3, #2
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a74:	e011      	b.n	8004a9a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a76:	f7fe f88f 	bl	8002b98 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d803      	bhi.n	8004a8e <HAL_SPI_Transmit+0x168>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8c:	d102      	bne.n	8004a94 <HAL_SPI_Transmit+0x16e>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d102      	bne.n	8004a9a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a98:	e074      	b.n	8004b84 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1ce      	bne.n	8004a42 <HAL_SPI_Transmit+0x11c>
 8004aa4:	e04c      	b.n	8004b40 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_SPI_Transmit+0x18e>
 8004aae:	8afb      	ldrh	r3, [r7, #22]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d140      	bne.n	8004b36 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	330c      	adds	r3, #12
 8004abe:	7812      	ldrb	r2, [r2, #0]
 8004ac0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ada:	e02c      	b.n	8004b36 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d113      	bne.n	8004b12 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	330c      	adds	r3, #12
 8004af4:	7812      	ldrb	r2, [r2, #0]
 8004af6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b10:	e011      	b.n	8004b36 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b12:	f7fe f841 	bl	8002b98 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d803      	bhi.n	8004b2a <HAL_SPI_Transmit+0x204>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d102      	bne.n	8004b30 <HAL_SPI_Transmit+0x20a>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b34:	e026      	b.n	8004b84 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1cd      	bne.n	8004adc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	6839      	ldr	r1, [r7, #0]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f8b3 	bl	8004cb0 <SPI_EndRxTxTransaction>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10a      	bne.n	8004b74 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b5e:	2300      	movs	r3, #0
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e000      	b.n	8004b84 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b94:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	4613      	mov	r3, r2
 8004bae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bb0:	f7fd fff2 	bl	8002b98 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bc0:	f7fd ffea 	bl	8002b98 <HAL_GetTick>
 8004bc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bc6:	4b39      	ldr	r3, [pc, #228]	; (8004cac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	015b      	lsls	r3, r3, #5
 8004bcc:	0d1b      	lsrs	r3, r3, #20
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	fb02 f303 	mul.w	r3, r2, r3
 8004bd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bd6:	e054      	b.n	8004c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bde:	d050      	beq.n	8004c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004be0:	f7fd ffda 	bl	8002b98 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	69fa      	ldr	r2, [r7, #28]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d902      	bls.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d13d      	bne.n	8004c72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c0e:	d111      	bne.n	8004c34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c18:	d004      	beq.n	8004c24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c22:	d107      	bne.n	8004c34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c3c:	d10f      	bne.n	8004c5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e017      	b.n	8004ca2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	bf0c      	ite	eq
 8004c92:	2301      	moveq	r3, #1
 8004c94:	2300      	movne	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d19b      	bne.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3720      	adds	r7, #32
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000000 	.word	0x20000000

08004cb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <SPI_EndRxTxTransaction+0x7c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1b      	ldr	r2, [pc, #108]	; (8004d30 <SPI_EndRxTxTransaction+0x80>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	0d5b      	lsrs	r3, r3, #21
 8004cc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ccc:	fb02 f303 	mul.w	r3, r2, r3
 8004cd0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cda:	d112      	bne.n	8004d02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2180      	movs	r1, #128	; 0x80
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f7ff ff5a 	bl	8004ba0 <SPI_WaitFlagStateUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d016      	beq.n	8004d20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	f043 0220 	orr.w	r2, r3, #32
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e00f      	b.n	8004d22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d18:	2b80      	cmp	r3, #128	; 0x80
 8004d1a:	d0f2      	beq.n	8004d02 <SPI_EndRxTxTransaction+0x52>
 8004d1c:	e000      	b.n	8004d20 <SPI_EndRxTxTransaction+0x70>
        break;
 8004d1e:	bf00      	nop
  }

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000000 	.word	0x20000000
 8004d30:	165e9f81 	.word	0x165e9f81

08004d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e041      	b.n	8004dca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fd fc4e 	bl	80025fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f000 fc8c 	bl	8005690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d001      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e044      	b.n	8004e76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1e      	ldr	r2, [pc, #120]	; (8004e84 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d018      	beq.n	8004e40 <HAL_TIM_Base_Start_IT+0x6c>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e16:	d013      	beq.n	8004e40 <HAL_TIM_Base_Start_IT+0x6c>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a1a      	ldr	r2, [pc, #104]	; (8004e88 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00e      	beq.n	8004e40 <HAL_TIM_Base_Start_IT+0x6c>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a19      	ldr	r2, [pc, #100]	; (8004e8c <HAL_TIM_Base_Start_IT+0xb8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d009      	beq.n	8004e40 <HAL_TIM_Base_Start_IT+0x6c>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a17      	ldr	r2, [pc, #92]	; (8004e90 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <HAL_TIM_Base_Start_IT+0x6c>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a16      	ldr	r2, [pc, #88]	; (8004e94 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d111      	bne.n	8004e64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b06      	cmp	r3, #6
 8004e50:	d010      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0201 	orr.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e62:	e007      	b.n	8004e74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40010000 	.word	0x40010000
 8004e88:	40000400 	.word	0x40000400
 8004e8c:	40000800 	.word	0x40000800
 8004e90:	40000c00 	.word	0x40000c00
 8004e94:	40014000 	.word	0x40014000

08004e98 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6a1a      	ldr	r2, [r3, #32]
 8004eb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004eba:	4013      	ands	r3, r2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10f      	bne.n	8004ee0 <HAL_TIM_Base_Stop_IT+0x48>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6a1a      	ldr	r2, [r3, #32]
 8004ec6:	f240 4344 	movw	r3, #1092	; 0x444
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d107      	bne.n	8004ee0 <HAL_TIM_Base_Stop_IT+0x48>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0201 	bic.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b082      	sub	sp, #8
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e041      	b.n	8004f8c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d106      	bne.n	8004f22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f839 	bl	8004f94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3304      	adds	r3, #4
 8004f32:	4619      	mov	r1, r3
 8004f34:	4610      	mov	r0, r2
 8004f36:	f000 fbab 	bl	8005690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d109      	bne.n	8004fcc <HAL_TIM_PWM_Start+0x24>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	bf14      	ite	ne
 8004fc4:	2301      	movne	r3, #1
 8004fc6:	2300      	moveq	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	e022      	b.n	8005012 <HAL_TIM_PWM_Start+0x6a>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d109      	bne.n	8004fe6 <HAL_TIM_PWM_Start+0x3e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	bf14      	ite	ne
 8004fde:	2301      	movne	r3, #1
 8004fe0:	2300      	moveq	r3, #0
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	e015      	b.n	8005012 <HAL_TIM_PWM_Start+0x6a>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d109      	bne.n	8005000 <HAL_TIM_PWM_Start+0x58>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	bf14      	ite	ne
 8004ff8:	2301      	movne	r3, #1
 8004ffa:	2300      	moveq	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	e008      	b.n	8005012 <HAL_TIM_PWM_Start+0x6a>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	bf14      	ite	ne
 800500c:	2301      	movne	r3, #1
 800500e:	2300      	moveq	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e068      	b.n	80050ec <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d104      	bne.n	800502a <HAL_TIM_PWM_Start+0x82>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005028:	e013      	b.n	8005052 <HAL_TIM_PWM_Start+0xaa>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b04      	cmp	r3, #4
 800502e:	d104      	bne.n	800503a <HAL_TIM_PWM_Start+0x92>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005038:	e00b      	b.n	8005052 <HAL_TIM_PWM_Start+0xaa>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b08      	cmp	r3, #8
 800503e:	d104      	bne.n	800504a <HAL_TIM_PWM_Start+0xa2>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005048:	e003      	b.n	8005052 <HAL_TIM_PWM_Start+0xaa>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2202      	movs	r2, #2
 800504e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2201      	movs	r2, #1
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fdbe 	bl	8005bdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a23      	ldr	r2, [pc, #140]	; (80050f4 <HAL_TIM_PWM_Start+0x14c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d107      	bne.n	800507a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005078:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <HAL_TIM_PWM_Start+0x14c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d018      	beq.n	80050b6 <HAL_TIM_PWM_Start+0x10e>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508c:	d013      	beq.n	80050b6 <HAL_TIM_PWM_Start+0x10e>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a19      	ldr	r2, [pc, #100]	; (80050f8 <HAL_TIM_PWM_Start+0x150>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00e      	beq.n	80050b6 <HAL_TIM_PWM_Start+0x10e>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a17      	ldr	r2, [pc, #92]	; (80050fc <HAL_TIM_PWM_Start+0x154>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d009      	beq.n	80050b6 <HAL_TIM_PWM_Start+0x10e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a16      	ldr	r2, [pc, #88]	; (8005100 <HAL_TIM_PWM_Start+0x158>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_TIM_PWM_Start+0x10e>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a14      	ldr	r2, [pc, #80]	; (8005104 <HAL_TIM_PWM_Start+0x15c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d111      	bne.n	80050da <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b06      	cmp	r3, #6
 80050c6:	d010      	beq.n	80050ea <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d8:	e007      	b.n	80050ea <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0201 	orr.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40010000 	.word	0x40010000
 80050f8:	40000400 	.word	0x40000400
 80050fc:	40000800 	.word	0x40000800
 8005100:	40000c00 	.word	0x40000c00
 8005104:	40014000 	.word	0x40014000

08005108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b02      	cmp	r3, #2
 800511c:	d122      	bne.n	8005164 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b02      	cmp	r3, #2
 800512a:	d11b      	bne.n	8005164 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0202 	mvn.w	r2, #2
 8005134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fa81 	bl	8005652 <HAL_TIM_IC_CaptureCallback>
 8005150:	e005      	b.n	800515e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fa73 	bl	800563e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fa84 	bl	8005666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b04      	cmp	r3, #4
 8005170:	d122      	bne.n	80051b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b04      	cmp	r3, #4
 800517e:	d11b      	bne.n	80051b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0204 	mvn.w	r2, #4
 8005188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2202      	movs	r2, #2
 800518e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fa57 	bl	8005652 <HAL_TIM_IC_CaptureCallback>
 80051a4:	e005      	b.n	80051b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fa49 	bl	800563e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fa5a 	bl	8005666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d122      	bne.n	800520c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d11b      	bne.n	800520c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0208 	mvn.w	r2, #8
 80051dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2204      	movs	r2, #4
 80051e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fa2d 	bl	8005652 <HAL_TIM_IC_CaptureCallback>
 80051f8:	e005      	b.n	8005206 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fa1f 	bl	800563e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fa30 	bl	8005666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	2b10      	cmp	r3, #16
 8005218:	d122      	bne.n	8005260 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b10      	cmp	r3, #16
 8005226:	d11b      	bne.n	8005260 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0210 	mvn.w	r2, #16
 8005230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2208      	movs	r2, #8
 8005236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa03 	bl	8005652 <HAL_TIM_IC_CaptureCallback>
 800524c:	e005      	b.n	800525a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f9f5 	bl	800563e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fa06 	bl	8005666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b01      	cmp	r3, #1
 800526c:	d10e      	bne.n	800528c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b01      	cmp	r3, #1
 800527a:	d107      	bne.n	800528c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0201 	mvn.w	r2, #1
 8005284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f9cf 	bl	800562a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005296:	2b80      	cmp	r3, #128	; 0x80
 8005298:	d10e      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a4:	2b80      	cmp	r3, #128	; 0x80
 80052a6:	d107      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fd82 	bl	8005dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d10e      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d107      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f9cb 	bl	800567a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d10e      	bne.n	8005310 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d107      	bne.n	8005310 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0220 	mvn.w	r2, #32
 8005308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fd4c 	bl	8005da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005310:	bf00      	nop
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800532e:	2b01      	cmp	r3, #1
 8005330:	d101      	bne.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005332:	2302      	movs	r3, #2
 8005334:	e0ae      	b.n	8005494 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b0c      	cmp	r3, #12
 8005342:	f200 809f 	bhi.w	8005484 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005346:	a201      	add	r2, pc, #4	; (adr r2, 800534c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534c:	08005381 	.word	0x08005381
 8005350:	08005485 	.word	0x08005485
 8005354:	08005485 	.word	0x08005485
 8005358:	08005485 	.word	0x08005485
 800535c:	080053c1 	.word	0x080053c1
 8005360:	08005485 	.word	0x08005485
 8005364:	08005485 	.word	0x08005485
 8005368:	08005485 	.word	0x08005485
 800536c:	08005403 	.word	0x08005403
 8005370:	08005485 	.word	0x08005485
 8005374:	08005485 	.word	0x08005485
 8005378:	08005485 	.word	0x08005485
 800537c:	08005443 	.word	0x08005443
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	4618      	mov	r0, r3
 8005388:	f000 fa02 	bl	8005790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0208 	orr.w	r2, r2, #8
 800539a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0204 	bic.w	r2, r2, #4
 80053aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6999      	ldr	r1, [r3, #24]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	691a      	ldr	r2, [r3, #16]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	619a      	str	r2, [r3, #24]
      break;
 80053be:	e064      	b.n	800548a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fa48 	bl	800585c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6999      	ldr	r1, [r3, #24]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	021a      	lsls	r2, r3, #8
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	619a      	str	r2, [r3, #24]
      break;
 8005400:	e043      	b.n	800548a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fa93 	bl	8005934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69da      	ldr	r2, [r3, #28]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f042 0208 	orr.w	r2, r2, #8
 800541c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0204 	bic.w	r2, r2, #4
 800542c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69d9      	ldr	r1, [r3, #28]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	61da      	str	r2, [r3, #28]
      break;
 8005440:	e023      	b.n	800548a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fadd 	bl	8005a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800545c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69d9      	ldr	r1, [r3, #28]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	021a      	lsls	r2, r3, #8
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	61da      	str	r2, [r3, #28]
      break;
 8005482:	e002      	b.n	800548a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	75fb      	strb	r3, [r7, #23]
      break;
 8005488:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005492:	7dfb      	ldrb	r3, [r7, #23]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIM_ConfigClockSource+0x1c>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e0b4      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x186>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f0:	d03e      	beq.n	8005570 <HAL_TIM_ConfigClockSource+0xd4>
 80054f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f6:	f200 8087 	bhi.w	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	f000 8086 	beq.w	800560e <HAL_TIM_ConfigClockSource+0x172>
 8005502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005506:	d87f      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 8005508:	2b70      	cmp	r3, #112	; 0x70
 800550a:	d01a      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0xa6>
 800550c:	2b70      	cmp	r3, #112	; 0x70
 800550e:	d87b      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 8005510:	2b60      	cmp	r3, #96	; 0x60
 8005512:	d050      	beq.n	80055b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005514:	2b60      	cmp	r3, #96	; 0x60
 8005516:	d877      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 8005518:	2b50      	cmp	r3, #80	; 0x50
 800551a:	d03c      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0xfa>
 800551c:	2b50      	cmp	r3, #80	; 0x50
 800551e:	d873      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 8005520:	2b40      	cmp	r3, #64	; 0x40
 8005522:	d058      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d86f      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 8005528:	2b30      	cmp	r3, #48	; 0x30
 800552a:	d064      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x15a>
 800552c:	2b30      	cmp	r3, #48	; 0x30
 800552e:	d86b      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 8005530:	2b20      	cmp	r3, #32
 8005532:	d060      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005534:	2b20      	cmp	r3, #32
 8005536:	d867      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d05c      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x15a>
 800553c:	2b10      	cmp	r3, #16
 800553e:	d05a      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005540:	e062      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6899      	ldr	r1, [r3, #8]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f000 fb23 	bl	8005b9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005564:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	609a      	str	r2, [r3, #8]
      break;
 800556e:	e04f      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	6899      	ldr	r1, [r3, #8]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f000 fb0c 	bl	8005b9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005592:	609a      	str	r2, [r3, #8]
      break;
 8005594:	e03c      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	6859      	ldr	r1, [r3, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f000 fa80 	bl	8005aa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2150      	movs	r1, #80	; 0x50
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fad9 	bl	8005b66 <TIM_ITRx_SetConfig>
      break;
 80055b4:	e02c      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6859      	ldr	r1, [r3, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f000 fa9f 	bl	8005b06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2160      	movs	r1, #96	; 0x60
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fac9 	bl	8005b66 <TIM_ITRx_SetConfig>
      break;
 80055d4:	e01c      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	6859      	ldr	r1, [r3, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	461a      	mov	r2, r3
 80055e4:	f000 fa60 	bl	8005aa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2140      	movs	r1, #64	; 0x40
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fab9 	bl	8005b66 <TIM_ITRx_SetConfig>
      break;
 80055f4:	e00c      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4619      	mov	r1, r3
 8005600:	4610      	mov	r0, r2
 8005602:	f000 fab0 	bl	8005b66 <TIM_ITRx_SetConfig>
      break;
 8005606:	e003      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	73fb      	strb	r3, [r7, #15]
      break;
 800560c:	e000      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800560e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
	...

08005690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a34      	ldr	r2, [pc, #208]	; (8005774 <TIM_Base_SetConfig+0xe4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00f      	beq.n	80056c8 <TIM_Base_SetConfig+0x38>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ae:	d00b      	beq.n	80056c8 <TIM_Base_SetConfig+0x38>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a31      	ldr	r2, [pc, #196]	; (8005778 <TIM_Base_SetConfig+0xe8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d007      	beq.n	80056c8 <TIM_Base_SetConfig+0x38>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a30      	ldr	r2, [pc, #192]	; (800577c <TIM_Base_SetConfig+0xec>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_Base_SetConfig+0x38>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a2f      	ldr	r2, [pc, #188]	; (8005780 <TIM_Base_SetConfig+0xf0>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d108      	bne.n	80056da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a25      	ldr	r2, [pc, #148]	; (8005774 <TIM_Base_SetConfig+0xe4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d01b      	beq.n	800571a <TIM_Base_SetConfig+0x8a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e8:	d017      	beq.n	800571a <TIM_Base_SetConfig+0x8a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a22      	ldr	r2, [pc, #136]	; (8005778 <TIM_Base_SetConfig+0xe8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d013      	beq.n	800571a <TIM_Base_SetConfig+0x8a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a21      	ldr	r2, [pc, #132]	; (800577c <TIM_Base_SetConfig+0xec>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00f      	beq.n	800571a <TIM_Base_SetConfig+0x8a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a20      	ldr	r2, [pc, #128]	; (8005780 <TIM_Base_SetConfig+0xf0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00b      	beq.n	800571a <TIM_Base_SetConfig+0x8a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1f      	ldr	r2, [pc, #124]	; (8005784 <TIM_Base_SetConfig+0xf4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d007      	beq.n	800571a <TIM_Base_SetConfig+0x8a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a1e      	ldr	r2, [pc, #120]	; (8005788 <TIM_Base_SetConfig+0xf8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d003      	beq.n	800571a <TIM_Base_SetConfig+0x8a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a1d      	ldr	r2, [pc, #116]	; (800578c <TIM_Base_SetConfig+0xfc>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d108      	bne.n	800572c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a08      	ldr	r2, [pc, #32]	; (8005774 <TIM_Base_SetConfig+0xe4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d103      	bne.n	8005760 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	615a      	str	r2, [r3, #20]
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40010000 	.word	0x40010000
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800
 8005780:	40000c00 	.word	0x40000c00
 8005784:	40014000 	.word	0x40014000
 8005788:	40014400 	.word	0x40014400
 800578c:	40014800 	.word	0x40014800

08005790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	f023 0201 	bic.w	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0303 	bic.w	r3, r3, #3
 80057c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f023 0302 	bic.w	r3, r3, #2
 80057d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <TIM_OC1_SetConfig+0xc8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d10c      	bne.n	8005806 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f023 0308 	bic.w	r3, r3, #8
 80057f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f023 0304 	bic.w	r3, r3, #4
 8005804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a13      	ldr	r2, [pc, #76]	; (8005858 <TIM_OC1_SetConfig+0xc8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d111      	bne.n	8005832 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800581c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	621a      	str	r2, [r3, #32]
}
 800584c:	bf00      	nop
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	40010000 	.word	0x40010000

0800585c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f023 0210 	bic.w	r2, r3, #16
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f023 0320 	bic.w	r3, r3, #32
 80058a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a1e      	ldr	r2, [pc, #120]	; (8005930 <TIM_OC2_SetConfig+0xd4>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d10d      	bne.n	80058d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a15      	ldr	r2, [pc, #84]	; (8005930 <TIM_OC2_SetConfig+0xd4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d113      	bne.n	8005908 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	621a      	str	r2, [r3, #32]
}
 8005922:	bf00      	nop
 8005924:	371c      	adds	r7, #28
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	40010000 	.word	0x40010000

08005934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0303 	bic.w	r3, r3, #3
 800596a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800597c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a1d      	ldr	r2, [pc, #116]	; (8005a04 <TIM_OC3_SetConfig+0xd0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d10d      	bne.n	80059ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a14      	ldr	r2, [pc, #80]	; (8005a04 <TIM_OC3_SetConfig+0xd0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d113      	bne.n	80059de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	621a      	str	r2, [r3, #32]
}
 80059f8:	bf00      	nop
 80059fa:	371c      	adds	r7, #28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	40010000 	.word	0x40010000

08005a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	031b      	lsls	r3, r3, #12
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a10      	ldr	r2, [pc, #64]	; (8005aa4 <TIM_OC4_SetConfig+0x9c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d109      	bne.n	8005a7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	019b      	lsls	r3, r3, #6
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	621a      	str	r2, [r3, #32]
}
 8005a96:	bf00      	nop
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40010000 	.word	0x40010000

08005aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f023 0201 	bic.w	r2, r3, #1
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f023 030a 	bic.w	r3, r3, #10
 8005ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	621a      	str	r2, [r3, #32]
}
 8005afa:	bf00      	nop
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b087      	sub	sp, #28
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f023 0210 	bic.w	r2, r3, #16
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	031b      	lsls	r3, r3, #12
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b085      	sub	sp, #20
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f043 0307 	orr.w	r3, r3, #7
 8005b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	609a      	str	r2, [r3, #8]
}
 8005b90:	bf00      	nop
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	021a      	lsls	r2, r3, #8
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	609a      	str	r2, [r3, #8]
}
 8005bd0:	bf00      	nop
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f003 031f 	and.w	r3, r3, #31
 8005bee:	2201      	movs	r2, #1
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a1a      	ldr	r2, [r3, #32]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	401a      	ands	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a1a      	ldr	r2, [r3, #32]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f003 031f 	and.w	r3, r3, #31
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	fa01 f303 	lsl.w	r3, r1, r3
 8005c14:	431a      	orrs	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
	...

08005c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e050      	b.n	8005ce2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1c      	ldr	r2, [pc, #112]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d018      	beq.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8c:	d013      	beq.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a18      	ldr	r2, [pc, #96]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00e      	beq.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a16      	ldr	r2, [pc, #88]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d009      	beq.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a15      	ldr	r2, [pc, #84]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d004      	beq.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a13      	ldr	r2, [pc, #76]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d10c      	bne.n	8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40010000 	.word	0x40010000
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800
 8005cfc:	40000c00 	.word	0x40000c00
 8005d00:	40014000 	.word	0x40014000

08005d04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e03d      	b.n	8005d9c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e03f      	b.n	8005e62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fc fc94 	bl	8002724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2224      	movs	r2, #36	; 0x24
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fcdf 	bl	80067d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691a      	ldr	r2, [r3, #16]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695a      	ldr	r2, [r3, #20]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2220      	movs	r2, #32
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	4613      	mov	r3, r2
 8005e76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d11d      	bne.n	8005ec0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_UART_Receive_IT+0x26>
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e016      	b.n	8005ec2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_UART_Receive_IT+0x38>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e00f      	b.n	8005ec2 <HAL_UART_Receive_IT+0x58>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005eb0:	88fb      	ldrh	r3, [r7, #6]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 fab6 	bl	8006428 <UART_Start_Receive_IT>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	e000      	b.n	8005ec2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ec0:	2302      	movs	r3, #2
  }
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b0ba      	sub	sp, #232	; 0xe8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10f      	bne.n	8005f32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d009      	beq.n	8005f32 <HAL_UART_IRQHandler+0x66>
 8005f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fb99 	bl	8006662 <UART_Receive_IT>
      return;
 8005f30:	e256      	b.n	80063e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 80de 	beq.w	80060f8 <HAL_UART_IRQHandler+0x22c>
 8005f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 80d1 	beq.w	80060f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00b      	beq.n	8005f7a <HAL_UART_IRQHandler+0xae>
 8005f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f043 0201 	orr.w	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <HAL_UART_IRQHandler+0xd2>
 8005f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f043 0202 	orr.w	r2, r3, #2
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00b      	beq.n	8005fc2 <HAL_UART_IRQHandler+0xf6>
 8005faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f043 0204 	orr.w	r2, r3, #4
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d011      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x126>
 8005fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d105      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f043 0208 	orr.w	r2, r3, #8
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 81ed 	beq.w	80063d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b00      	cmp	r3, #0
 8006006:	d008      	beq.n	800601a <HAL_UART_IRQHandler+0x14e>
 8006008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fb24 	bl	8006662 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	bf0c      	ite	eq
 8006028:	2301      	moveq	r3, #1
 800602a:	2300      	movne	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d103      	bne.n	8006046 <HAL_UART_IRQHandler+0x17a>
 800603e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006042:	2b00      	cmp	r3, #0
 8006044:	d04f      	beq.n	80060e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fa2c 	bl	80064a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006056:	2b40      	cmp	r3, #64	; 0x40
 8006058:	d141      	bne.n	80060de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3314      	adds	r3, #20
 8006060:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006070:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3314      	adds	r3, #20
 8006082:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006086:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800608a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006092:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800609e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1d9      	bne.n	800605a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d013      	beq.n	80060d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b2:	4a7d      	ldr	r2, [pc, #500]	; (80062a8 <HAL_UART_IRQHandler+0x3dc>)
 80060b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fd fb56 	bl	800376c <HAL_DMA_Abort_IT>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d016      	beq.n	80060f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060d0:	4610      	mov	r0, r2
 80060d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d4:	e00e      	b.n	80060f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f990 	bl	80063fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060dc:	e00a      	b.n	80060f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f98c 	bl	80063fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e4:	e006      	b.n	80060f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f988 	bl	80063fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80060f2:	e170      	b.n	80063d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f4:	bf00      	nop
    return;
 80060f6:	e16e      	b.n	80063d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	f040 814a 	bne.w	8006396 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006106:	f003 0310 	and.w	r3, r3, #16
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 8143 	beq.w	8006396 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 813c 	beq.w	8006396 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800611e:	2300      	movs	r3, #0
 8006120:	60bb      	str	r3, [r7, #8]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60bb      	str	r3, [r7, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	f040 80b4 	bne.w	80062ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006150:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 8140 	beq.w	80063da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800615e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006162:	429a      	cmp	r2, r3
 8006164:	f080 8139 	bcs.w	80063da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800616e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617a:	f000 8088 	beq.w	800628e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	330c      	adds	r3, #12
 8006184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800619c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	330c      	adds	r3, #12
 80061a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80061aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1d9      	bne.n	800617e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3314      	adds	r3, #20
 80061d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3314      	adds	r3, #20
 80061ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e1      	bne.n	80061ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3314      	adds	r3, #20
 800620c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3314      	adds	r3, #20
 8006226:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800622a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800622c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006230:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e3      	bne.n	8006206 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	330c      	adds	r3, #12
 8006252:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800625c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800625e:	f023 0310 	bic.w	r3, r3, #16
 8006262:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	330c      	adds	r3, #12
 800626c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006270:	65ba      	str	r2, [r7, #88]	; 0x58
 8006272:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006276:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800627e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e3      	bne.n	800624c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	4618      	mov	r0, r3
 800628a:	f7fd f9ff 	bl	800368c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006296:	b29b      	uxth	r3, r3
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	b29b      	uxth	r3, r3
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f8b6 	bl	8006410 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062a4:	e099      	b.n	80063da <HAL_UART_IRQHandler+0x50e>
 80062a6:	bf00      	nop
 80062a8:	0800656b 	.word	0x0800656b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 808b 	beq.w	80063de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80062c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8086 	beq.w	80063de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	330c      	adds	r3, #12
 80062d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	330c      	adds	r3, #12
 80062f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80062f6:	647a      	str	r2, [r7, #68]	; 0x44
 80062f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e3      	bne.n	80062d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3314      	adds	r3, #20
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	623b      	str	r3, [r7, #32]
   return(result);
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3314      	adds	r3, #20
 800632a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800632e:	633a      	str	r2, [r7, #48]	; 0x30
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1e3      	bne.n	800630a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0310 	bic.w	r3, r3, #16
 8006366:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	330c      	adds	r3, #12
 8006370:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006374:	61fa      	str	r2, [r7, #28]
 8006376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	69b9      	ldr	r1, [r7, #24]
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	617b      	str	r3, [r7, #20]
   return(result);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e3      	bne.n	8006350 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800638c:	4619      	mov	r1, r3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f83e 	bl	8006410 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006394:	e023      	b.n	80063de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d009      	beq.n	80063b6 <HAL_UART_IRQHandler+0x4ea>
 80063a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f8ef 	bl	8006592 <UART_Transmit_IT>
    return;
 80063b4:	e014      	b.n	80063e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00e      	beq.n	80063e0 <HAL_UART_IRQHandler+0x514>
 80063c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d008      	beq.n	80063e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f92f 	bl	8006632 <UART_EndTransmit_IT>
    return;
 80063d4:	e004      	b.n	80063e0 <HAL_UART_IRQHandler+0x514>
    return;
 80063d6:	bf00      	nop
 80063d8:	e002      	b.n	80063e0 <HAL_UART_IRQHandler+0x514>
      return;
 80063da:	bf00      	nop
 80063dc:	e000      	b.n	80063e0 <HAL_UART_IRQHandler+0x514>
      return;
 80063de:	bf00      	nop
  }
}
 80063e0:	37e8      	adds	r7, #232	; 0xe8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop

080063e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	4613      	mov	r3, r2
 8006434:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	88fa      	ldrh	r2, [r7, #6]
 8006440:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	88fa      	ldrh	r2, [r7, #6]
 8006446:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2222      	movs	r2, #34	; 0x22
 8006452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d007      	beq.n	8006476 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006474:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695a      	ldr	r2, [r3, #20]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0201 	orr.w	r2, r2, #1
 8006484:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0220 	orr.w	r2, r2, #32
 8006494:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b095      	sub	sp, #84	; 0x54
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330c      	adds	r3, #12
 80064b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	330c      	adds	r3, #12
 80064ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064cc:	643a      	str	r2, [r7, #64]	; 0x40
 80064ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e5      	bne.n	80064ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3314      	adds	r3, #20
 80064e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	e853 3f00 	ldrex	r3, [r3]
 80064ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f023 0301 	bic.w	r3, r3, #1
 80064f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3314      	adds	r3, #20
 80064fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006500:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e5      	bne.n	80064e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	2b01      	cmp	r3, #1
 800651a:	d119      	bne.n	8006550 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	330c      	adds	r3, #12
 8006522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	e853 3f00 	ldrex	r3, [r3]
 800652a:	60bb      	str	r3, [r7, #8]
   return(result);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f023 0310 	bic.w	r3, r3, #16
 8006532:	647b      	str	r3, [r7, #68]	; 0x44
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800653c:	61ba      	str	r2, [r7, #24]
 800653e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6979      	ldr	r1, [r7, #20]
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	613b      	str	r3, [r7, #16]
   return(result);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e5      	bne.n	800651c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800655e:	bf00      	nop
 8006560:	3754      	adds	r7, #84	; 0x54
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b084      	sub	sp, #16
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006576:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f7ff ff39 	bl	80063fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b21      	cmp	r3, #33	; 0x21
 80065a4:	d13e      	bne.n	8006624 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ae:	d114      	bne.n	80065da <UART_Transmit_IT+0x48>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d110      	bne.n	80065da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	1c9a      	adds	r2, r3, #2
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	621a      	str	r2, [r3, #32]
 80065d8:	e008      	b.n	80065ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	1c59      	adds	r1, r3, #1
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6211      	str	r1, [r2, #32]
 80065e4:	781a      	ldrb	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	4619      	mov	r1, r3
 80065fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10f      	bne.n	8006620 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800660e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800661e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	e000      	b.n	8006626 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006624:	2302      	movs	r3, #2
  }
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b082      	sub	sp, #8
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68da      	ldr	r2, [r3, #12]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006648:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2220      	movs	r2, #32
 800664e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff fec8 	bl	80063e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b08c      	sub	sp, #48	; 0x30
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b22      	cmp	r3, #34	; 0x22
 8006674:	f040 80ab 	bne.w	80067ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006680:	d117      	bne.n	80066b2 <UART_Receive_IT+0x50>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d113      	bne.n	80066b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800668a:	2300      	movs	r3, #0
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	b29b      	uxth	r3, r3
 800669c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066aa:	1c9a      	adds	r2, r3, #2
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	629a      	str	r2, [r3, #40]	; 0x28
 80066b0:	e026      	b.n	8006700 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80066b8:	2300      	movs	r3, #0
 80066ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c4:	d007      	beq.n	80066d6 <UART_Receive_IT+0x74>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10a      	bne.n	80066e4 <UART_Receive_IT+0x82>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d106      	bne.n	80066e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	e008      	b.n	80066f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29b      	uxth	r3, r3
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	4619      	mov	r1, r3
 800670e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006710:	2b00      	cmp	r3, #0
 8006712:	d15a      	bne.n	80067ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0220 	bic.w	r2, r2, #32
 8006722:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006732:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695a      	ldr	r2, [r3, #20]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0201 	bic.w	r2, r2, #1
 8006742:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	2b01      	cmp	r3, #1
 8006752:	d135      	bne.n	80067c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	330c      	adds	r3, #12
 8006760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	613b      	str	r3, [r7, #16]
   return(result);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f023 0310 	bic.w	r3, r3, #16
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	330c      	adds	r3, #12
 8006778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677a:	623a      	str	r2, [r7, #32]
 800677c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	69f9      	ldr	r1, [r7, #28]
 8006780:	6a3a      	ldr	r2, [r7, #32]
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	61bb      	str	r3, [r7, #24]
   return(result);
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e5      	bne.n	800675a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0310 	and.w	r3, r3, #16
 8006798:	2b10      	cmp	r3, #16
 800679a:	d10a      	bne.n	80067b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800679c:	2300      	movs	r3, #0
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7ff fe29 	bl	8006410 <HAL_UARTEx_RxEventCallback>
 80067be:	e002      	b.n	80067c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7fb fc61 	bl	8002088 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	e002      	b.n	80067d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	e000      	b.n	80067d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80067ce:	2302      	movs	r3, #2
  }
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3730      	adds	r7, #48	; 0x30
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067dc:	b0c0      	sub	sp, #256	; 0x100
 80067de:	af00      	add	r7, sp, #0
 80067e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f4:	68d9      	ldr	r1, [r3, #12]
 80067f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	ea40 0301 	orr.w	r3, r0, r1
 8006800:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	431a      	orrs	r2, r3
 8006810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	431a      	orrs	r2, r3
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	4313      	orrs	r3, r2
 8006820:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006830:	f021 010c 	bic.w	r1, r1, #12
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800683e:	430b      	orrs	r3, r1
 8006840:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800684e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006852:	6999      	ldr	r1, [r3, #24]
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	ea40 0301 	orr.w	r3, r0, r1
 800685e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	4b8f      	ldr	r3, [pc, #572]	; (8006aa4 <UART_SetConfig+0x2cc>)
 8006868:	429a      	cmp	r2, r3
 800686a:	d005      	beq.n	8006878 <UART_SetConfig+0xa0>
 800686c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	4b8d      	ldr	r3, [pc, #564]	; (8006aa8 <UART_SetConfig+0x2d0>)
 8006874:	429a      	cmp	r2, r3
 8006876:	d104      	bne.n	8006882 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006878:	f7fd ffb8 	bl	80047ec <HAL_RCC_GetPCLK2Freq>
 800687c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006880:	e003      	b.n	800688a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006882:	f7fd ff9f 	bl	80047c4 <HAL_RCC_GetPCLK1Freq>
 8006886:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800688a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006894:	f040 810c 	bne.w	8006ab0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800689c:	2200      	movs	r2, #0
 800689e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80068a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068aa:	4622      	mov	r2, r4
 80068ac:	462b      	mov	r3, r5
 80068ae:	1891      	adds	r1, r2, r2
 80068b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80068b2:	415b      	adcs	r3, r3
 80068b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068ba:	4621      	mov	r1, r4
 80068bc:	eb12 0801 	adds.w	r8, r2, r1
 80068c0:	4629      	mov	r1, r5
 80068c2:	eb43 0901 	adc.w	r9, r3, r1
 80068c6:	f04f 0200 	mov.w	r2, #0
 80068ca:	f04f 0300 	mov.w	r3, #0
 80068ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068da:	4690      	mov	r8, r2
 80068dc:	4699      	mov	r9, r3
 80068de:	4623      	mov	r3, r4
 80068e0:	eb18 0303 	adds.w	r3, r8, r3
 80068e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068e8:	462b      	mov	r3, r5
 80068ea:	eb49 0303 	adc.w	r3, r9, r3
 80068ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006902:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006906:	460b      	mov	r3, r1
 8006908:	18db      	adds	r3, r3, r3
 800690a:	653b      	str	r3, [r7, #80]	; 0x50
 800690c:	4613      	mov	r3, r2
 800690e:	eb42 0303 	adc.w	r3, r2, r3
 8006912:	657b      	str	r3, [r7, #84]	; 0x54
 8006914:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006918:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800691c:	f7fa f98c 	bl	8000c38 <__aeabi_uldivmod>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4b61      	ldr	r3, [pc, #388]	; (8006aac <UART_SetConfig+0x2d4>)
 8006926:	fba3 2302 	umull	r2, r3, r3, r2
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	011c      	lsls	r4, r3, #4
 800692e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006932:	2200      	movs	r2, #0
 8006934:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006938:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800693c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006940:	4642      	mov	r2, r8
 8006942:	464b      	mov	r3, r9
 8006944:	1891      	adds	r1, r2, r2
 8006946:	64b9      	str	r1, [r7, #72]	; 0x48
 8006948:	415b      	adcs	r3, r3
 800694a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800694c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006950:	4641      	mov	r1, r8
 8006952:	eb12 0a01 	adds.w	sl, r2, r1
 8006956:	4649      	mov	r1, r9
 8006958:	eb43 0b01 	adc.w	fp, r3, r1
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006968:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800696c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006970:	4692      	mov	sl, r2
 8006972:	469b      	mov	fp, r3
 8006974:	4643      	mov	r3, r8
 8006976:	eb1a 0303 	adds.w	r3, sl, r3
 800697a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800697e:	464b      	mov	r3, r9
 8006980:	eb4b 0303 	adc.w	r3, fp, r3
 8006984:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006994:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006998:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800699c:	460b      	mov	r3, r1
 800699e:	18db      	adds	r3, r3, r3
 80069a0:	643b      	str	r3, [r7, #64]	; 0x40
 80069a2:	4613      	mov	r3, r2
 80069a4:	eb42 0303 	adc.w	r3, r2, r3
 80069a8:	647b      	str	r3, [r7, #68]	; 0x44
 80069aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069b2:	f7fa f941 	bl	8000c38 <__aeabi_uldivmod>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4611      	mov	r1, r2
 80069bc:	4b3b      	ldr	r3, [pc, #236]	; (8006aac <UART_SetConfig+0x2d4>)
 80069be:	fba3 2301 	umull	r2, r3, r3, r1
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	2264      	movs	r2, #100	; 0x64
 80069c6:	fb02 f303 	mul.w	r3, r2, r3
 80069ca:	1acb      	subs	r3, r1, r3
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069d2:	4b36      	ldr	r3, [pc, #216]	; (8006aac <UART_SetConfig+0x2d4>)
 80069d4:	fba3 2302 	umull	r2, r3, r3, r2
 80069d8:	095b      	lsrs	r3, r3, #5
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069e0:	441c      	add	r4, r3
 80069e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069f4:	4642      	mov	r2, r8
 80069f6:	464b      	mov	r3, r9
 80069f8:	1891      	adds	r1, r2, r2
 80069fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80069fc:	415b      	adcs	r3, r3
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a04:	4641      	mov	r1, r8
 8006a06:	1851      	adds	r1, r2, r1
 8006a08:	6339      	str	r1, [r7, #48]	; 0x30
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	414b      	adcs	r3, r1
 8006a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	f04f 0300 	mov.w	r3, #0
 8006a18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a1c:	4659      	mov	r1, fp
 8006a1e:	00cb      	lsls	r3, r1, #3
 8006a20:	4651      	mov	r1, sl
 8006a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a26:	4651      	mov	r1, sl
 8006a28:	00ca      	lsls	r2, r1, #3
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4603      	mov	r3, r0
 8006a30:	4642      	mov	r2, r8
 8006a32:	189b      	adds	r3, r3, r2
 8006a34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a38:	464b      	mov	r3, r9
 8006a3a:	460a      	mov	r2, r1
 8006a3c:	eb42 0303 	adc.w	r3, r2, r3
 8006a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a58:	460b      	mov	r3, r1
 8006a5a:	18db      	adds	r3, r3, r3
 8006a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a5e:	4613      	mov	r3, r2
 8006a60:	eb42 0303 	adc.w	r3, r2, r3
 8006a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a6e:	f7fa f8e3 	bl	8000c38 <__aeabi_uldivmod>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4b0d      	ldr	r3, [pc, #52]	; (8006aac <UART_SetConfig+0x2d4>)
 8006a78:	fba3 1302 	umull	r1, r3, r3, r2
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	2164      	movs	r1, #100	; 0x64
 8006a80:	fb01 f303 	mul.w	r3, r1, r3
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	3332      	adds	r3, #50	; 0x32
 8006a8a:	4a08      	ldr	r2, [pc, #32]	; (8006aac <UART_SetConfig+0x2d4>)
 8006a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a90:	095b      	lsrs	r3, r3, #5
 8006a92:	f003 0207 	and.w	r2, r3, #7
 8006a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4422      	add	r2, r4
 8006a9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006aa0:	e106      	b.n	8006cb0 <UART_SetConfig+0x4d8>
 8006aa2:	bf00      	nop
 8006aa4:	40011000 	.word	0x40011000
 8006aa8:	40011400 	.word	0x40011400
 8006aac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006aba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006abe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ac2:	4642      	mov	r2, r8
 8006ac4:	464b      	mov	r3, r9
 8006ac6:	1891      	adds	r1, r2, r2
 8006ac8:	6239      	str	r1, [r7, #32]
 8006aca:	415b      	adcs	r3, r3
 8006acc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ace:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ad2:	4641      	mov	r1, r8
 8006ad4:	1854      	adds	r4, r2, r1
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	eb43 0501 	adc.w	r5, r3, r1
 8006adc:	f04f 0200 	mov.w	r2, #0
 8006ae0:	f04f 0300 	mov.w	r3, #0
 8006ae4:	00eb      	lsls	r3, r5, #3
 8006ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aea:	00e2      	lsls	r2, r4, #3
 8006aec:	4614      	mov	r4, r2
 8006aee:	461d      	mov	r5, r3
 8006af0:	4643      	mov	r3, r8
 8006af2:	18e3      	adds	r3, r4, r3
 8006af4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006af8:	464b      	mov	r3, r9
 8006afa:	eb45 0303 	adc.w	r3, r5, r3
 8006afe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b12:	f04f 0200 	mov.w	r2, #0
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b1e:	4629      	mov	r1, r5
 8006b20:	008b      	lsls	r3, r1, #2
 8006b22:	4621      	mov	r1, r4
 8006b24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b28:	4621      	mov	r1, r4
 8006b2a:	008a      	lsls	r2, r1, #2
 8006b2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b30:	f7fa f882 	bl	8000c38 <__aeabi_uldivmod>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4b60      	ldr	r3, [pc, #384]	; (8006cbc <UART_SetConfig+0x4e4>)
 8006b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b3e:	095b      	lsrs	r3, r3, #5
 8006b40:	011c      	lsls	r4, r3, #4
 8006b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b54:	4642      	mov	r2, r8
 8006b56:	464b      	mov	r3, r9
 8006b58:	1891      	adds	r1, r2, r2
 8006b5a:	61b9      	str	r1, [r7, #24]
 8006b5c:	415b      	adcs	r3, r3
 8006b5e:	61fb      	str	r3, [r7, #28]
 8006b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b64:	4641      	mov	r1, r8
 8006b66:	1851      	adds	r1, r2, r1
 8006b68:	6139      	str	r1, [r7, #16]
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	414b      	adcs	r3, r1
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	f04f 0300 	mov.w	r3, #0
 8006b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b7c:	4659      	mov	r1, fp
 8006b7e:	00cb      	lsls	r3, r1, #3
 8006b80:	4651      	mov	r1, sl
 8006b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b86:	4651      	mov	r1, sl
 8006b88:	00ca      	lsls	r2, r1, #3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4603      	mov	r3, r0
 8006b90:	4642      	mov	r2, r8
 8006b92:	189b      	adds	r3, r3, r2
 8006b94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b98:	464b      	mov	r3, r9
 8006b9a:	460a      	mov	r2, r1
 8006b9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006bb0:	f04f 0200 	mov.w	r2, #0
 8006bb4:	f04f 0300 	mov.w	r3, #0
 8006bb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	008b      	lsls	r3, r1, #2
 8006bc0:	4641      	mov	r1, r8
 8006bc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bc6:	4641      	mov	r1, r8
 8006bc8:	008a      	lsls	r2, r1, #2
 8006bca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006bce:	f7fa f833 	bl	8000c38 <__aeabi_uldivmod>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4b38      	ldr	r3, [pc, #224]	; (8006cbc <UART_SetConfig+0x4e4>)
 8006bda:	fba3 2301 	umull	r2, r3, r3, r1
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	2264      	movs	r2, #100	; 0x64
 8006be2:	fb02 f303 	mul.w	r3, r2, r3
 8006be6:	1acb      	subs	r3, r1, r3
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	3332      	adds	r3, #50	; 0x32
 8006bec:	4a33      	ldr	r2, [pc, #204]	; (8006cbc <UART_SetConfig+0x4e4>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bf8:	441c      	add	r4, r3
 8006bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bfe:	2200      	movs	r2, #0
 8006c00:	673b      	str	r3, [r7, #112]	; 0x70
 8006c02:	677a      	str	r2, [r7, #116]	; 0x74
 8006c04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c08:	4642      	mov	r2, r8
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	1891      	adds	r1, r2, r2
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	415b      	adcs	r3, r3
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c18:	4641      	mov	r1, r8
 8006c1a:	1851      	adds	r1, r2, r1
 8006c1c:	6039      	str	r1, [r7, #0]
 8006c1e:	4649      	mov	r1, r9
 8006c20:	414b      	adcs	r3, r1
 8006c22:	607b      	str	r3, [r7, #4]
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c30:	4659      	mov	r1, fp
 8006c32:	00cb      	lsls	r3, r1, #3
 8006c34:	4651      	mov	r1, sl
 8006c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c3a:	4651      	mov	r1, sl
 8006c3c:	00ca      	lsls	r2, r1, #3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	4619      	mov	r1, r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	4642      	mov	r2, r8
 8006c46:	189b      	adds	r3, r3, r2
 8006c48:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c4a:	464b      	mov	r3, r9
 8006c4c:	460a      	mov	r2, r1
 8006c4e:	eb42 0303 	adc.w	r3, r2, r3
 8006c52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c5e:	667a      	str	r2, [r7, #100]	; 0x64
 8006c60:	f04f 0200 	mov.w	r2, #0
 8006c64:	f04f 0300 	mov.w	r3, #0
 8006c68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	008b      	lsls	r3, r1, #2
 8006c70:	4641      	mov	r1, r8
 8006c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c76:	4641      	mov	r1, r8
 8006c78:	008a      	lsls	r2, r1, #2
 8006c7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c7e:	f7f9 ffdb 	bl	8000c38 <__aeabi_uldivmod>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <UART_SetConfig+0x4e4>)
 8006c88:	fba3 1302 	umull	r1, r3, r3, r2
 8006c8c:	095b      	lsrs	r3, r3, #5
 8006c8e:	2164      	movs	r1, #100	; 0x64
 8006c90:	fb01 f303 	mul.w	r3, r1, r3
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	011b      	lsls	r3, r3, #4
 8006c98:	3332      	adds	r3, #50	; 0x32
 8006c9a:	4a08      	ldr	r2, [pc, #32]	; (8006cbc <UART_SetConfig+0x4e4>)
 8006c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca0:	095b      	lsrs	r3, r3, #5
 8006ca2:	f003 020f 	and.w	r2, r3, #15
 8006ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4422      	add	r2, r4
 8006cae:	609a      	str	r2, [r3, #8]
}
 8006cb0:	bf00      	nop
 8006cb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cbc:	51eb851f 	.word	0x51eb851f

08006cc0 <srand>:
 8006cc0:	b538      	push	{r3, r4, r5, lr}
 8006cc2:	4b10      	ldr	r3, [pc, #64]	; (8006d04 <srand+0x44>)
 8006cc4:	681d      	ldr	r5, [r3, #0]
 8006cc6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006cc8:	4604      	mov	r4, r0
 8006cca:	b9b3      	cbnz	r3, 8006cfa <srand+0x3a>
 8006ccc:	2018      	movs	r0, #24
 8006cce:	f001 fd3f 	bl	8008750 <malloc>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	6328      	str	r0, [r5, #48]	; 0x30
 8006cd6:	b920      	cbnz	r0, 8006ce2 <srand+0x22>
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <srand+0x48>)
 8006cda:	480c      	ldr	r0, [pc, #48]	; (8006d0c <srand+0x4c>)
 8006cdc:	2146      	movs	r1, #70	; 0x46
 8006cde:	f001 f975 	bl	8007fcc <__assert_func>
 8006ce2:	490b      	ldr	r1, [pc, #44]	; (8006d10 <srand+0x50>)
 8006ce4:	4b0b      	ldr	r3, [pc, #44]	; (8006d14 <srand+0x54>)
 8006ce6:	e9c0 1300 	strd	r1, r3, [r0]
 8006cea:	4b0b      	ldr	r3, [pc, #44]	; (8006d18 <srand+0x58>)
 8006cec:	6083      	str	r3, [r0, #8]
 8006cee:	230b      	movs	r3, #11
 8006cf0:	8183      	strh	r3, [r0, #12]
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006cfa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	611c      	str	r4, [r3, #16]
 8006d00:	615a      	str	r2, [r3, #20]
 8006d02:	bd38      	pop	{r3, r4, r5, pc}
 8006d04:	200001d0 	.word	0x200001d0
 8006d08:	0800a2f4 	.word	0x0800a2f4
 8006d0c:	0800a30b 	.word	0x0800a30b
 8006d10:	abcd330e 	.word	0xabcd330e
 8006d14:	e66d1234 	.word	0xe66d1234
 8006d18:	0005deec 	.word	0x0005deec

08006d1c <rand>:
 8006d1c:	4b16      	ldr	r3, [pc, #88]	; (8006d78 <rand+0x5c>)
 8006d1e:	b510      	push	{r4, lr}
 8006d20:	681c      	ldr	r4, [r3, #0]
 8006d22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006d24:	b9b3      	cbnz	r3, 8006d54 <rand+0x38>
 8006d26:	2018      	movs	r0, #24
 8006d28:	f001 fd12 	bl	8008750 <malloc>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	6320      	str	r0, [r4, #48]	; 0x30
 8006d30:	b920      	cbnz	r0, 8006d3c <rand+0x20>
 8006d32:	4b12      	ldr	r3, [pc, #72]	; (8006d7c <rand+0x60>)
 8006d34:	4812      	ldr	r0, [pc, #72]	; (8006d80 <rand+0x64>)
 8006d36:	2152      	movs	r1, #82	; 0x52
 8006d38:	f001 f948 	bl	8007fcc <__assert_func>
 8006d3c:	4911      	ldr	r1, [pc, #68]	; (8006d84 <rand+0x68>)
 8006d3e:	4b12      	ldr	r3, [pc, #72]	; (8006d88 <rand+0x6c>)
 8006d40:	e9c0 1300 	strd	r1, r3, [r0]
 8006d44:	4b11      	ldr	r3, [pc, #68]	; (8006d8c <rand+0x70>)
 8006d46:	6083      	str	r3, [r0, #8]
 8006d48:	230b      	movs	r3, #11
 8006d4a:	8183      	strh	r3, [r0, #12]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	2001      	movs	r0, #1
 8006d50:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006d54:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006d56:	480e      	ldr	r0, [pc, #56]	; (8006d90 <rand+0x74>)
 8006d58:	690b      	ldr	r3, [r1, #16]
 8006d5a:	694c      	ldr	r4, [r1, #20]
 8006d5c:	4a0d      	ldr	r2, [pc, #52]	; (8006d94 <rand+0x78>)
 8006d5e:	4358      	muls	r0, r3
 8006d60:	fb02 0004 	mla	r0, r2, r4, r0
 8006d64:	fba3 3202 	umull	r3, r2, r3, r2
 8006d68:	3301      	adds	r3, #1
 8006d6a:	eb40 0002 	adc.w	r0, r0, r2
 8006d6e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006d72:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006d76:	bd10      	pop	{r4, pc}
 8006d78:	200001d0 	.word	0x200001d0
 8006d7c:	0800a2f4 	.word	0x0800a2f4
 8006d80:	0800a30b 	.word	0x0800a30b
 8006d84:	abcd330e 	.word	0xabcd330e
 8006d88:	e66d1234 	.word	0xe66d1234
 8006d8c:	0005deec 	.word	0x0005deec
 8006d90:	5851f42d 	.word	0x5851f42d
 8006d94:	4c957f2d 	.word	0x4c957f2d

08006d98 <sulp>:
 8006d98:	b570      	push	{r4, r5, r6, lr}
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	460d      	mov	r5, r1
 8006d9e:	ec45 4b10 	vmov	d0, r4, r5
 8006da2:	4616      	mov	r6, r2
 8006da4:	f002 f906 	bl	8008fb4 <__ulp>
 8006da8:	ec51 0b10 	vmov	r0, r1, d0
 8006dac:	b17e      	cbz	r6, 8006dce <sulp+0x36>
 8006dae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006db2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	dd09      	ble.n	8006dce <sulp+0x36>
 8006dba:	051b      	lsls	r3, r3, #20
 8006dbc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006dc0:	2400      	movs	r4, #0
 8006dc2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006dc6:	4622      	mov	r2, r4
 8006dc8:	462b      	mov	r3, r5
 8006dca:	f7f9 fc15 	bl	80005f8 <__aeabi_dmul>
 8006dce:	bd70      	pop	{r4, r5, r6, pc}

08006dd0 <_strtod_l>:
 8006dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd4:	ed2d 8b02 	vpush	{d8}
 8006dd8:	b09b      	sub	sp, #108	; 0x6c
 8006dda:	4604      	mov	r4, r0
 8006ddc:	9213      	str	r2, [sp, #76]	; 0x4c
 8006dde:	2200      	movs	r2, #0
 8006de0:	9216      	str	r2, [sp, #88]	; 0x58
 8006de2:	460d      	mov	r5, r1
 8006de4:	f04f 0800 	mov.w	r8, #0
 8006de8:	f04f 0900 	mov.w	r9, #0
 8006dec:	460a      	mov	r2, r1
 8006dee:	9215      	str	r2, [sp, #84]	; 0x54
 8006df0:	7811      	ldrb	r1, [r2, #0]
 8006df2:	292b      	cmp	r1, #43	; 0x2b
 8006df4:	d04c      	beq.n	8006e90 <_strtod_l+0xc0>
 8006df6:	d83a      	bhi.n	8006e6e <_strtod_l+0x9e>
 8006df8:	290d      	cmp	r1, #13
 8006dfa:	d834      	bhi.n	8006e66 <_strtod_l+0x96>
 8006dfc:	2908      	cmp	r1, #8
 8006dfe:	d834      	bhi.n	8006e6a <_strtod_l+0x9a>
 8006e00:	2900      	cmp	r1, #0
 8006e02:	d03d      	beq.n	8006e80 <_strtod_l+0xb0>
 8006e04:	2200      	movs	r2, #0
 8006e06:	920a      	str	r2, [sp, #40]	; 0x28
 8006e08:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006e0a:	7832      	ldrb	r2, [r6, #0]
 8006e0c:	2a30      	cmp	r2, #48	; 0x30
 8006e0e:	f040 80b4 	bne.w	8006f7a <_strtod_l+0x1aa>
 8006e12:	7872      	ldrb	r2, [r6, #1]
 8006e14:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006e18:	2a58      	cmp	r2, #88	; 0x58
 8006e1a:	d170      	bne.n	8006efe <_strtod_l+0x12e>
 8006e1c:	9302      	str	r3, [sp, #8]
 8006e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	ab16      	add	r3, sp, #88	; 0x58
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	4a8e      	ldr	r2, [pc, #568]	; (8007060 <_strtod_l+0x290>)
 8006e28:	ab17      	add	r3, sp, #92	; 0x5c
 8006e2a:	a915      	add	r1, sp, #84	; 0x54
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f001 f99f 	bl	8008170 <__gethex>
 8006e32:	f010 070f 	ands.w	r7, r0, #15
 8006e36:	4605      	mov	r5, r0
 8006e38:	d005      	beq.n	8006e46 <_strtod_l+0x76>
 8006e3a:	2f06      	cmp	r7, #6
 8006e3c:	d12a      	bne.n	8006e94 <_strtod_l+0xc4>
 8006e3e:	3601      	adds	r6, #1
 8006e40:	2300      	movs	r3, #0
 8006e42:	9615      	str	r6, [sp, #84]	; 0x54
 8006e44:	930a      	str	r3, [sp, #40]	; 0x28
 8006e46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f040 857f 	bne.w	800794c <_strtod_l+0xb7c>
 8006e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e50:	b1db      	cbz	r3, 8006e8a <_strtod_l+0xba>
 8006e52:	4642      	mov	r2, r8
 8006e54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e58:	ec43 2b10 	vmov	d0, r2, r3
 8006e5c:	b01b      	add	sp, #108	; 0x6c
 8006e5e:	ecbd 8b02 	vpop	{d8}
 8006e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e66:	2920      	cmp	r1, #32
 8006e68:	d1cc      	bne.n	8006e04 <_strtod_l+0x34>
 8006e6a:	3201      	adds	r2, #1
 8006e6c:	e7bf      	b.n	8006dee <_strtod_l+0x1e>
 8006e6e:	292d      	cmp	r1, #45	; 0x2d
 8006e70:	d1c8      	bne.n	8006e04 <_strtod_l+0x34>
 8006e72:	2101      	movs	r1, #1
 8006e74:	910a      	str	r1, [sp, #40]	; 0x28
 8006e76:	1c51      	adds	r1, r2, #1
 8006e78:	9115      	str	r1, [sp, #84]	; 0x54
 8006e7a:	7852      	ldrb	r2, [r2, #1]
 8006e7c:	2a00      	cmp	r2, #0
 8006e7e:	d1c3      	bne.n	8006e08 <_strtod_l+0x38>
 8006e80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e82:	9515      	str	r5, [sp, #84]	; 0x54
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f040 855f 	bne.w	8007948 <_strtod_l+0xb78>
 8006e8a:	4642      	mov	r2, r8
 8006e8c:	464b      	mov	r3, r9
 8006e8e:	e7e3      	b.n	8006e58 <_strtod_l+0x88>
 8006e90:	2100      	movs	r1, #0
 8006e92:	e7ef      	b.n	8006e74 <_strtod_l+0xa4>
 8006e94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006e96:	b13a      	cbz	r2, 8006ea8 <_strtod_l+0xd8>
 8006e98:	2135      	movs	r1, #53	; 0x35
 8006e9a:	a818      	add	r0, sp, #96	; 0x60
 8006e9c:	f002 f987 	bl	80091ae <__copybits>
 8006ea0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f001 fd5a 	bl	800895c <_Bfree>
 8006ea8:	3f01      	subs	r7, #1
 8006eaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006eac:	2f04      	cmp	r7, #4
 8006eae:	d806      	bhi.n	8006ebe <_strtod_l+0xee>
 8006eb0:	e8df f007 	tbb	[pc, r7]
 8006eb4:	201d0314 	.word	0x201d0314
 8006eb8:	14          	.byte	0x14
 8006eb9:	00          	.byte	0x00
 8006eba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006ebe:	05e9      	lsls	r1, r5, #23
 8006ec0:	bf48      	it	mi
 8006ec2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006ec6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006eca:	0d1b      	lsrs	r3, r3, #20
 8006ecc:	051b      	lsls	r3, r3, #20
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1b9      	bne.n	8006e46 <_strtod_l+0x76>
 8006ed2:	f001 f831 	bl	8007f38 <__errno>
 8006ed6:	2322      	movs	r3, #34	; 0x22
 8006ed8:	6003      	str	r3, [r0, #0]
 8006eda:	e7b4      	b.n	8006e46 <_strtod_l+0x76>
 8006edc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006ee0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006ee4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006ee8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006eec:	e7e7      	b.n	8006ebe <_strtod_l+0xee>
 8006eee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007068 <_strtod_l+0x298>
 8006ef2:	e7e4      	b.n	8006ebe <_strtod_l+0xee>
 8006ef4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006ef8:	f04f 38ff 	mov.w	r8, #4294967295
 8006efc:	e7df      	b.n	8006ebe <_strtod_l+0xee>
 8006efe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	9215      	str	r2, [sp, #84]	; 0x54
 8006f04:	785b      	ldrb	r3, [r3, #1]
 8006f06:	2b30      	cmp	r3, #48	; 0x30
 8006f08:	d0f9      	beq.n	8006efe <_strtod_l+0x12e>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d09b      	beq.n	8006e46 <_strtod_l+0x76>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	f04f 0a00 	mov.w	sl, #0
 8006f14:	9304      	str	r3, [sp, #16]
 8006f16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f18:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f1a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006f1e:	46d3      	mov	fp, sl
 8006f20:	220a      	movs	r2, #10
 8006f22:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006f24:	7806      	ldrb	r6, [r0, #0]
 8006f26:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006f2a:	b2d9      	uxtb	r1, r3
 8006f2c:	2909      	cmp	r1, #9
 8006f2e:	d926      	bls.n	8006f7e <_strtod_l+0x1ae>
 8006f30:	494c      	ldr	r1, [pc, #304]	; (8007064 <_strtod_l+0x294>)
 8006f32:	2201      	movs	r2, #1
 8006f34:	f000 ff4b 	bl	8007dce <strncmp>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d030      	beq.n	8006f9e <_strtod_l+0x1ce>
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	4632      	mov	r2, r6
 8006f40:	9005      	str	r0, [sp, #20]
 8006f42:	465e      	mov	r6, fp
 8006f44:	4603      	mov	r3, r0
 8006f46:	2a65      	cmp	r2, #101	; 0x65
 8006f48:	d001      	beq.n	8006f4e <_strtod_l+0x17e>
 8006f4a:	2a45      	cmp	r2, #69	; 0x45
 8006f4c:	d113      	bne.n	8006f76 <_strtod_l+0x1a6>
 8006f4e:	b91e      	cbnz	r6, 8006f58 <_strtod_l+0x188>
 8006f50:	9a04      	ldr	r2, [sp, #16]
 8006f52:	4302      	orrs	r2, r0
 8006f54:	d094      	beq.n	8006e80 <_strtod_l+0xb0>
 8006f56:	2600      	movs	r6, #0
 8006f58:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006f5a:	1c6a      	adds	r2, r5, #1
 8006f5c:	9215      	str	r2, [sp, #84]	; 0x54
 8006f5e:	786a      	ldrb	r2, [r5, #1]
 8006f60:	2a2b      	cmp	r2, #43	; 0x2b
 8006f62:	d074      	beq.n	800704e <_strtod_l+0x27e>
 8006f64:	2a2d      	cmp	r2, #45	; 0x2d
 8006f66:	d078      	beq.n	800705a <_strtod_l+0x28a>
 8006f68:	f04f 0c00 	mov.w	ip, #0
 8006f6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f70:	2909      	cmp	r1, #9
 8006f72:	d97f      	bls.n	8007074 <_strtod_l+0x2a4>
 8006f74:	9515      	str	r5, [sp, #84]	; 0x54
 8006f76:	2700      	movs	r7, #0
 8006f78:	e09e      	b.n	80070b8 <_strtod_l+0x2e8>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e7c8      	b.n	8006f10 <_strtod_l+0x140>
 8006f7e:	f1bb 0f08 	cmp.w	fp, #8
 8006f82:	bfd8      	it	le
 8006f84:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006f86:	f100 0001 	add.w	r0, r0, #1
 8006f8a:	bfda      	itte	le
 8006f8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f90:	9309      	strle	r3, [sp, #36]	; 0x24
 8006f92:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006f96:	f10b 0b01 	add.w	fp, fp, #1
 8006f9a:	9015      	str	r0, [sp, #84]	; 0x54
 8006f9c:	e7c1      	b.n	8006f22 <_strtod_l+0x152>
 8006f9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	9215      	str	r2, [sp, #84]	; 0x54
 8006fa4:	785a      	ldrb	r2, [r3, #1]
 8006fa6:	f1bb 0f00 	cmp.w	fp, #0
 8006faa:	d037      	beq.n	800701c <_strtod_l+0x24c>
 8006fac:	9005      	str	r0, [sp, #20]
 8006fae:	465e      	mov	r6, fp
 8006fb0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006fb4:	2b09      	cmp	r3, #9
 8006fb6:	d912      	bls.n	8006fde <_strtod_l+0x20e>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e7c4      	b.n	8006f46 <_strtod_l+0x176>
 8006fbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	9215      	str	r2, [sp, #84]	; 0x54
 8006fc2:	785a      	ldrb	r2, [r3, #1]
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	2a30      	cmp	r2, #48	; 0x30
 8006fc8:	d0f8      	beq.n	8006fbc <_strtod_l+0x1ec>
 8006fca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	f200 84c1 	bhi.w	8007956 <_strtod_l+0xb86>
 8006fd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fd6:	9005      	str	r0, [sp, #20]
 8006fd8:	2000      	movs	r0, #0
 8006fda:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fdc:	4606      	mov	r6, r0
 8006fde:	3a30      	subs	r2, #48	; 0x30
 8006fe0:	f100 0301 	add.w	r3, r0, #1
 8006fe4:	d014      	beq.n	8007010 <_strtod_l+0x240>
 8006fe6:	9905      	ldr	r1, [sp, #20]
 8006fe8:	4419      	add	r1, r3
 8006fea:	9105      	str	r1, [sp, #20]
 8006fec:	4633      	mov	r3, r6
 8006fee:	eb00 0c06 	add.w	ip, r0, r6
 8006ff2:	210a      	movs	r1, #10
 8006ff4:	4563      	cmp	r3, ip
 8006ff6:	d113      	bne.n	8007020 <_strtod_l+0x250>
 8006ff8:	1833      	adds	r3, r6, r0
 8006ffa:	2b08      	cmp	r3, #8
 8006ffc:	f106 0601 	add.w	r6, r6, #1
 8007000:	4406      	add	r6, r0
 8007002:	dc1a      	bgt.n	800703a <_strtod_l+0x26a>
 8007004:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007006:	230a      	movs	r3, #10
 8007008:	fb03 2301 	mla	r3, r3, r1, r2
 800700c:	9309      	str	r3, [sp, #36]	; 0x24
 800700e:	2300      	movs	r3, #0
 8007010:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007012:	1c51      	adds	r1, r2, #1
 8007014:	9115      	str	r1, [sp, #84]	; 0x54
 8007016:	7852      	ldrb	r2, [r2, #1]
 8007018:	4618      	mov	r0, r3
 800701a:	e7c9      	b.n	8006fb0 <_strtod_l+0x1e0>
 800701c:	4658      	mov	r0, fp
 800701e:	e7d2      	b.n	8006fc6 <_strtod_l+0x1f6>
 8007020:	2b08      	cmp	r3, #8
 8007022:	f103 0301 	add.w	r3, r3, #1
 8007026:	dc03      	bgt.n	8007030 <_strtod_l+0x260>
 8007028:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800702a:	434f      	muls	r7, r1
 800702c:	9709      	str	r7, [sp, #36]	; 0x24
 800702e:	e7e1      	b.n	8006ff4 <_strtod_l+0x224>
 8007030:	2b10      	cmp	r3, #16
 8007032:	bfd8      	it	le
 8007034:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007038:	e7dc      	b.n	8006ff4 <_strtod_l+0x224>
 800703a:	2e10      	cmp	r6, #16
 800703c:	bfdc      	itt	le
 800703e:	230a      	movle	r3, #10
 8007040:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007044:	e7e3      	b.n	800700e <_strtod_l+0x23e>
 8007046:	2300      	movs	r3, #0
 8007048:	9305      	str	r3, [sp, #20]
 800704a:	2301      	movs	r3, #1
 800704c:	e780      	b.n	8006f50 <_strtod_l+0x180>
 800704e:	f04f 0c00 	mov.w	ip, #0
 8007052:	1caa      	adds	r2, r5, #2
 8007054:	9215      	str	r2, [sp, #84]	; 0x54
 8007056:	78aa      	ldrb	r2, [r5, #2]
 8007058:	e788      	b.n	8006f6c <_strtod_l+0x19c>
 800705a:	f04f 0c01 	mov.w	ip, #1
 800705e:	e7f8      	b.n	8007052 <_strtod_l+0x282>
 8007060:	0800a374 	.word	0x0800a374
 8007064:	0800a363 	.word	0x0800a363
 8007068:	7ff00000 	.word	0x7ff00000
 800706c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800706e:	1c51      	adds	r1, r2, #1
 8007070:	9115      	str	r1, [sp, #84]	; 0x54
 8007072:	7852      	ldrb	r2, [r2, #1]
 8007074:	2a30      	cmp	r2, #48	; 0x30
 8007076:	d0f9      	beq.n	800706c <_strtod_l+0x29c>
 8007078:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800707c:	2908      	cmp	r1, #8
 800707e:	f63f af7a 	bhi.w	8006f76 <_strtod_l+0x1a6>
 8007082:	3a30      	subs	r2, #48	; 0x30
 8007084:	9208      	str	r2, [sp, #32]
 8007086:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007088:	920c      	str	r2, [sp, #48]	; 0x30
 800708a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800708c:	1c57      	adds	r7, r2, #1
 800708e:	9715      	str	r7, [sp, #84]	; 0x54
 8007090:	7852      	ldrb	r2, [r2, #1]
 8007092:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007096:	f1be 0f09 	cmp.w	lr, #9
 800709a:	d938      	bls.n	800710e <_strtod_l+0x33e>
 800709c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800709e:	1a7f      	subs	r7, r7, r1
 80070a0:	2f08      	cmp	r7, #8
 80070a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80070a6:	dc03      	bgt.n	80070b0 <_strtod_l+0x2e0>
 80070a8:	9908      	ldr	r1, [sp, #32]
 80070aa:	428f      	cmp	r7, r1
 80070ac:	bfa8      	it	ge
 80070ae:	460f      	movge	r7, r1
 80070b0:	f1bc 0f00 	cmp.w	ip, #0
 80070b4:	d000      	beq.n	80070b8 <_strtod_l+0x2e8>
 80070b6:	427f      	negs	r7, r7
 80070b8:	2e00      	cmp	r6, #0
 80070ba:	d14f      	bne.n	800715c <_strtod_l+0x38c>
 80070bc:	9904      	ldr	r1, [sp, #16]
 80070be:	4301      	orrs	r1, r0
 80070c0:	f47f aec1 	bne.w	8006e46 <_strtod_l+0x76>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f47f aedb 	bne.w	8006e80 <_strtod_l+0xb0>
 80070ca:	2a69      	cmp	r2, #105	; 0x69
 80070cc:	d029      	beq.n	8007122 <_strtod_l+0x352>
 80070ce:	dc26      	bgt.n	800711e <_strtod_l+0x34e>
 80070d0:	2a49      	cmp	r2, #73	; 0x49
 80070d2:	d026      	beq.n	8007122 <_strtod_l+0x352>
 80070d4:	2a4e      	cmp	r2, #78	; 0x4e
 80070d6:	f47f aed3 	bne.w	8006e80 <_strtod_l+0xb0>
 80070da:	499b      	ldr	r1, [pc, #620]	; (8007348 <_strtod_l+0x578>)
 80070dc:	a815      	add	r0, sp, #84	; 0x54
 80070de:	f001 fa87 	bl	80085f0 <__match>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	f43f aecc 	beq.w	8006e80 <_strtod_l+0xb0>
 80070e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	2b28      	cmp	r3, #40	; 0x28
 80070ee:	d12f      	bne.n	8007150 <_strtod_l+0x380>
 80070f0:	4996      	ldr	r1, [pc, #600]	; (800734c <_strtod_l+0x57c>)
 80070f2:	aa18      	add	r2, sp, #96	; 0x60
 80070f4:	a815      	add	r0, sp, #84	; 0x54
 80070f6:	f001 fa8f 	bl	8008618 <__hexnan>
 80070fa:	2805      	cmp	r0, #5
 80070fc:	d128      	bne.n	8007150 <_strtod_l+0x380>
 80070fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007100:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007104:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007108:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800710c:	e69b      	b.n	8006e46 <_strtod_l+0x76>
 800710e:	9f08      	ldr	r7, [sp, #32]
 8007110:	210a      	movs	r1, #10
 8007112:	fb01 2107 	mla	r1, r1, r7, r2
 8007116:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800711a:	9208      	str	r2, [sp, #32]
 800711c:	e7b5      	b.n	800708a <_strtod_l+0x2ba>
 800711e:	2a6e      	cmp	r2, #110	; 0x6e
 8007120:	e7d9      	b.n	80070d6 <_strtod_l+0x306>
 8007122:	498b      	ldr	r1, [pc, #556]	; (8007350 <_strtod_l+0x580>)
 8007124:	a815      	add	r0, sp, #84	; 0x54
 8007126:	f001 fa63 	bl	80085f0 <__match>
 800712a:	2800      	cmp	r0, #0
 800712c:	f43f aea8 	beq.w	8006e80 <_strtod_l+0xb0>
 8007130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007132:	4988      	ldr	r1, [pc, #544]	; (8007354 <_strtod_l+0x584>)
 8007134:	3b01      	subs	r3, #1
 8007136:	a815      	add	r0, sp, #84	; 0x54
 8007138:	9315      	str	r3, [sp, #84]	; 0x54
 800713a:	f001 fa59 	bl	80085f0 <__match>
 800713e:	b910      	cbnz	r0, 8007146 <_strtod_l+0x376>
 8007140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007142:	3301      	adds	r3, #1
 8007144:	9315      	str	r3, [sp, #84]	; 0x54
 8007146:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007364 <_strtod_l+0x594>
 800714a:	f04f 0800 	mov.w	r8, #0
 800714e:	e67a      	b.n	8006e46 <_strtod_l+0x76>
 8007150:	4881      	ldr	r0, [pc, #516]	; (8007358 <_strtod_l+0x588>)
 8007152:	f000 ff2d 	bl	8007fb0 <nan>
 8007156:	ec59 8b10 	vmov	r8, r9, d0
 800715a:	e674      	b.n	8006e46 <_strtod_l+0x76>
 800715c:	9b05      	ldr	r3, [sp, #20]
 800715e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007160:	1afb      	subs	r3, r7, r3
 8007162:	f1bb 0f00 	cmp.w	fp, #0
 8007166:	bf08      	it	eq
 8007168:	46b3      	moveq	fp, r6
 800716a:	2e10      	cmp	r6, #16
 800716c:	9308      	str	r3, [sp, #32]
 800716e:	4635      	mov	r5, r6
 8007170:	bfa8      	it	ge
 8007172:	2510      	movge	r5, #16
 8007174:	f7f9 f9c6 	bl	8000504 <__aeabi_ui2d>
 8007178:	2e09      	cmp	r6, #9
 800717a:	4680      	mov	r8, r0
 800717c:	4689      	mov	r9, r1
 800717e:	dd13      	ble.n	80071a8 <_strtod_l+0x3d8>
 8007180:	4b76      	ldr	r3, [pc, #472]	; (800735c <_strtod_l+0x58c>)
 8007182:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007186:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800718a:	f7f9 fa35 	bl	80005f8 <__aeabi_dmul>
 800718e:	4680      	mov	r8, r0
 8007190:	4650      	mov	r0, sl
 8007192:	4689      	mov	r9, r1
 8007194:	f7f9 f9b6 	bl	8000504 <__aeabi_ui2d>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	4640      	mov	r0, r8
 800719e:	4649      	mov	r1, r9
 80071a0:	f7f9 f874 	bl	800028c <__adddf3>
 80071a4:	4680      	mov	r8, r0
 80071a6:	4689      	mov	r9, r1
 80071a8:	2e0f      	cmp	r6, #15
 80071aa:	dc38      	bgt.n	800721e <_strtod_l+0x44e>
 80071ac:	9b08      	ldr	r3, [sp, #32]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f43f ae49 	beq.w	8006e46 <_strtod_l+0x76>
 80071b4:	dd24      	ble.n	8007200 <_strtod_l+0x430>
 80071b6:	2b16      	cmp	r3, #22
 80071b8:	dc0b      	bgt.n	80071d2 <_strtod_l+0x402>
 80071ba:	4968      	ldr	r1, [pc, #416]	; (800735c <_strtod_l+0x58c>)
 80071bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071c4:	4642      	mov	r2, r8
 80071c6:	464b      	mov	r3, r9
 80071c8:	f7f9 fa16 	bl	80005f8 <__aeabi_dmul>
 80071cc:	4680      	mov	r8, r0
 80071ce:	4689      	mov	r9, r1
 80071d0:	e639      	b.n	8006e46 <_strtod_l+0x76>
 80071d2:	9a08      	ldr	r2, [sp, #32]
 80071d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80071d8:	4293      	cmp	r3, r2
 80071da:	db20      	blt.n	800721e <_strtod_l+0x44e>
 80071dc:	4c5f      	ldr	r4, [pc, #380]	; (800735c <_strtod_l+0x58c>)
 80071de:	f1c6 060f 	rsb	r6, r6, #15
 80071e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80071e6:	4642      	mov	r2, r8
 80071e8:	464b      	mov	r3, r9
 80071ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ee:	f7f9 fa03 	bl	80005f8 <__aeabi_dmul>
 80071f2:	9b08      	ldr	r3, [sp, #32]
 80071f4:	1b9e      	subs	r6, r3, r6
 80071f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80071fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80071fe:	e7e3      	b.n	80071c8 <_strtod_l+0x3f8>
 8007200:	9b08      	ldr	r3, [sp, #32]
 8007202:	3316      	adds	r3, #22
 8007204:	db0b      	blt.n	800721e <_strtod_l+0x44e>
 8007206:	9b05      	ldr	r3, [sp, #20]
 8007208:	1bdf      	subs	r7, r3, r7
 800720a:	4b54      	ldr	r3, [pc, #336]	; (800735c <_strtod_l+0x58c>)
 800720c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007214:	4640      	mov	r0, r8
 8007216:	4649      	mov	r1, r9
 8007218:	f7f9 fb18 	bl	800084c <__aeabi_ddiv>
 800721c:	e7d6      	b.n	80071cc <_strtod_l+0x3fc>
 800721e:	9b08      	ldr	r3, [sp, #32]
 8007220:	1b75      	subs	r5, r6, r5
 8007222:	441d      	add	r5, r3
 8007224:	2d00      	cmp	r5, #0
 8007226:	dd70      	ble.n	800730a <_strtod_l+0x53a>
 8007228:	f015 030f 	ands.w	r3, r5, #15
 800722c:	d00a      	beq.n	8007244 <_strtod_l+0x474>
 800722e:	494b      	ldr	r1, [pc, #300]	; (800735c <_strtod_l+0x58c>)
 8007230:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007234:	4642      	mov	r2, r8
 8007236:	464b      	mov	r3, r9
 8007238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800723c:	f7f9 f9dc 	bl	80005f8 <__aeabi_dmul>
 8007240:	4680      	mov	r8, r0
 8007242:	4689      	mov	r9, r1
 8007244:	f035 050f 	bics.w	r5, r5, #15
 8007248:	d04d      	beq.n	80072e6 <_strtod_l+0x516>
 800724a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800724e:	dd22      	ble.n	8007296 <_strtod_l+0x4c6>
 8007250:	2500      	movs	r5, #0
 8007252:	46ab      	mov	fp, r5
 8007254:	9509      	str	r5, [sp, #36]	; 0x24
 8007256:	9505      	str	r5, [sp, #20]
 8007258:	2322      	movs	r3, #34	; 0x22
 800725a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007364 <_strtod_l+0x594>
 800725e:	6023      	str	r3, [r4, #0]
 8007260:	f04f 0800 	mov.w	r8, #0
 8007264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007266:	2b00      	cmp	r3, #0
 8007268:	f43f aded 	beq.w	8006e46 <_strtod_l+0x76>
 800726c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800726e:	4620      	mov	r0, r4
 8007270:	f001 fb74 	bl	800895c <_Bfree>
 8007274:	9905      	ldr	r1, [sp, #20]
 8007276:	4620      	mov	r0, r4
 8007278:	f001 fb70 	bl	800895c <_Bfree>
 800727c:	4659      	mov	r1, fp
 800727e:	4620      	mov	r0, r4
 8007280:	f001 fb6c 	bl	800895c <_Bfree>
 8007284:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007286:	4620      	mov	r0, r4
 8007288:	f001 fb68 	bl	800895c <_Bfree>
 800728c:	4629      	mov	r1, r5
 800728e:	4620      	mov	r0, r4
 8007290:	f001 fb64 	bl	800895c <_Bfree>
 8007294:	e5d7      	b.n	8006e46 <_strtod_l+0x76>
 8007296:	4b32      	ldr	r3, [pc, #200]	; (8007360 <_strtod_l+0x590>)
 8007298:	9304      	str	r3, [sp, #16]
 800729a:	2300      	movs	r3, #0
 800729c:	112d      	asrs	r5, r5, #4
 800729e:	4640      	mov	r0, r8
 80072a0:	4649      	mov	r1, r9
 80072a2:	469a      	mov	sl, r3
 80072a4:	2d01      	cmp	r5, #1
 80072a6:	dc21      	bgt.n	80072ec <_strtod_l+0x51c>
 80072a8:	b10b      	cbz	r3, 80072ae <_strtod_l+0x4de>
 80072aa:	4680      	mov	r8, r0
 80072ac:	4689      	mov	r9, r1
 80072ae:	492c      	ldr	r1, [pc, #176]	; (8007360 <_strtod_l+0x590>)
 80072b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80072b4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80072b8:	4642      	mov	r2, r8
 80072ba:	464b      	mov	r3, r9
 80072bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072c0:	f7f9 f99a 	bl	80005f8 <__aeabi_dmul>
 80072c4:	4b27      	ldr	r3, [pc, #156]	; (8007364 <_strtod_l+0x594>)
 80072c6:	460a      	mov	r2, r1
 80072c8:	400b      	ands	r3, r1
 80072ca:	4927      	ldr	r1, [pc, #156]	; (8007368 <_strtod_l+0x598>)
 80072cc:	428b      	cmp	r3, r1
 80072ce:	4680      	mov	r8, r0
 80072d0:	d8be      	bhi.n	8007250 <_strtod_l+0x480>
 80072d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80072d6:	428b      	cmp	r3, r1
 80072d8:	bf86      	itte	hi
 80072da:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800736c <_strtod_l+0x59c>
 80072de:	f04f 38ff 	movhi.w	r8, #4294967295
 80072e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80072e6:	2300      	movs	r3, #0
 80072e8:	9304      	str	r3, [sp, #16]
 80072ea:	e07b      	b.n	80073e4 <_strtod_l+0x614>
 80072ec:	07ea      	lsls	r2, r5, #31
 80072ee:	d505      	bpl.n	80072fc <_strtod_l+0x52c>
 80072f0:	9b04      	ldr	r3, [sp, #16]
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f7f9 f97f 	bl	80005f8 <__aeabi_dmul>
 80072fa:	2301      	movs	r3, #1
 80072fc:	9a04      	ldr	r2, [sp, #16]
 80072fe:	3208      	adds	r2, #8
 8007300:	f10a 0a01 	add.w	sl, sl, #1
 8007304:	106d      	asrs	r5, r5, #1
 8007306:	9204      	str	r2, [sp, #16]
 8007308:	e7cc      	b.n	80072a4 <_strtod_l+0x4d4>
 800730a:	d0ec      	beq.n	80072e6 <_strtod_l+0x516>
 800730c:	426d      	negs	r5, r5
 800730e:	f015 020f 	ands.w	r2, r5, #15
 8007312:	d00a      	beq.n	800732a <_strtod_l+0x55a>
 8007314:	4b11      	ldr	r3, [pc, #68]	; (800735c <_strtod_l+0x58c>)
 8007316:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800731a:	4640      	mov	r0, r8
 800731c:	4649      	mov	r1, r9
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	f7f9 fa93 	bl	800084c <__aeabi_ddiv>
 8007326:	4680      	mov	r8, r0
 8007328:	4689      	mov	r9, r1
 800732a:	112d      	asrs	r5, r5, #4
 800732c:	d0db      	beq.n	80072e6 <_strtod_l+0x516>
 800732e:	2d1f      	cmp	r5, #31
 8007330:	dd1e      	ble.n	8007370 <_strtod_l+0x5a0>
 8007332:	2500      	movs	r5, #0
 8007334:	46ab      	mov	fp, r5
 8007336:	9509      	str	r5, [sp, #36]	; 0x24
 8007338:	9505      	str	r5, [sp, #20]
 800733a:	2322      	movs	r3, #34	; 0x22
 800733c:	f04f 0800 	mov.w	r8, #0
 8007340:	f04f 0900 	mov.w	r9, #0
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	e78d      	b.n	8007264 <_strtod_l+0x494>
 8007348:	0800a36e 	.word	0x0800a36e
 800734c:	0800a388 	.word	0x0800a388
 8007350:	0800a365 	.word	0x0800a365
 8007354:	0800a368 	.word	0x0800a368
 8007358:	0800a566 	.word	0x0800a566
 800735c:	0800a660 	.word	0x0800a660
 8007360:	0800a638 	.word	0x0800a638
 8007364:	7ff00000 	.word	0x7ff00000
 8007368:	7ca00000 	.word	0x7ca00000
 800736c:	7fefffff 	.word	0x7fefffff
 8007370:	f015 0310 	ands.w	r3, r5, #16
 8007374:	bf18      	it	ne
 8007376:	236a      	movne	r3, #106	; 0x6a
 8007378:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800771c <_strtod_l+0x94c>
 800737c:	9304      	str	r3, [sp, #16]
 800737e:	4640      	mov	r0, r8
 8007380:	4649      	mov	r1, r9
 8007382:	2300      	movs	r3, #0
 8007384:	07ea      	lsls	r2, r5, #31
 8007386:	d504      	bpl.n	8007392 <_strtod_l+0x5c2>
 8007388:	e9da 2300 	ldrd	r2, r3, [sl]
 800738c:	f7f9 f934 	bl	80005f8 <__aeabi_dmul>
 8007390:	2301      	movs	r3, #1
 8007392:	106d      	asrs	r5, r5, #1
 8007394:	f10a 0a08 	add.w	sl, sl, #8
 8007398:	d1f4      	bne.n	8007384 <_strtod_l+0x5b4>
 800739a:	b10b      	cbz	r3, 80073a0 <_strtod_l+0x5d0>
 800739c:	4680      	mov	r8, r0
 800739e:	4689      	mov	r9, r1
 80073a0:	9b04      	ldr	r3, [sp, #16]
 80073a2:	b1bb      	cbz	r3, 80073d4 <_strtod_l+0x604>
 80073a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80073a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	4649      	mov	r1, r9
 80073b0:	dd10      	ble.n	80073d4 <_strtod_l+0x604>
 80073b2:	2b1f      	cmp	r3, #31
 80073b4:	f340 811e 	ble.w	80075f4 <_strtod_l+0x824>
 80073b8:	2b34      	cmp	r3, #52	; 0x34
 80073ba:	bfde      	ittt	le
 80073bc:	f04f 33ff 	movle.w	r3, #4294967295
 80073c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80073c4:	4093      	lslle	r3, r2
 80073c6:	f04f 0800 	mov.w	r8, #0
 80073ca:	bfcc      	ite	gt
 80073cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80073d0:	ea03 0901 	andle.w	r9, r3, r1
 80073d4:	2200      	movs	r2, #0
 80073d6:	2300      	movs	r3, #0
 80073d8:	4640      	mov	r0, r8
 80073da:	4649      	mov	r1, r9
 80073dc:	f7f9 fb74 	bl	8000ac8 <__aeabi_dcmpeq>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d1a6      	bne.n	8007332 <_strtod_l+0x562>
 80073e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073ea:	4633      	mov	r3, r6
 80073ec:	465a      	mov	r2, fp
 80073ee:	4620      	mov	r0, r4
 80073f0:	f001 fb1c 	bl	8008a2c <__s2b>
 80073f4:	9009      	str	r0, [sp, #36]	; 0x24
 80073f6:	2800      	cmp	r0, #0
 80073f8:	f43f af2a 	beq.w	8007250 <_strtod_l+0x480>
 80073fc:	9a08      	ldr	r2, [sp, #32]
 80073fe:	9b05      	ldr	r3, [sp, #20]
 8007400:	2a00      	cmp	r2, #0
 8007402:	eba3 0307 	sub.w	r3, r3, r7
 8007406:	bfa8      	it	ge
 8007408:	2300      	movge	r3, #0
 800740a:	930c      	str	r3, [sp, #48]	; 0x30
 800740c:	2500      	movs	r5, #0
 800740e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007412:	9312      	str	r3, [sp, #72]	; 0x48
 8007414:	46ab      	mov	fp, r5
 8007416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007418:	4620      	mov	r0, r4
 800741a:	6859      	ldr	r1, [r3, #4]
 800741c:	f001 fa5e 	bl	80088dc <_Balloc>
 8007420:	9005      	str	r0, [sp, #20]
 8007422:	2800      	cmp	r0, #0
 8007424:	f43f af18 	beq.w	8007258 <_strtod_l+0x488>
 8007428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742a:	691a      	ldr	r2, [r3, #16]
 800742c:	3202      	adds	r2, #2
 800742e:	f103 010c 	add.w	r1, r3, #12
 8007432:	0092      	lsls	r2, r2, #2
 8007434:	300c      	adds	r0, #12
 8007436:	f000 fdac 	bl	8007f92 <memcpy>
 800743a:	ec49 8b10 	vmov	d0, r8, r9
 800743e:	aa18      	add	r2, sp, #96	; 0x60
 8007440:	a917      	add	r1, sp, #92	; 0x5c
 8007442:	4620      	mov	r0, r4
 8007444:	f001 fe26 	bl	8009094 <__d2b>
 8007448:	ec49 8b18 	vmov	d8, r8, r9
 800744c:	9016      	str	r0, [sp, #88]	; 0x58
 800744e:	2800      	cmp	r0, #0
 8007450:	f43f af02 	beq.w	8007258 <_strtod_l+0x488>
 8007454:	2101      	movs	r1, #1
 8007456:	4620      	mov	r0, r4
 8007458:	f001 fb80 	bl	8008b5c <__i2b>
 800745c:	4683      	mov	fp, r0
 800745e:	2800      	cmp	r0, #0
 8007460:	f43f aefa 	beq.w	8007258 <_strtod_l+0x488>
 8007464:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007466:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007468:	2e00      	cmp	r6, #0
 800746a:	bfab      	itete	ge
 800746c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800746e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007470:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007472:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007476:	bfac      	ite	ge
 8007478:	eb06 0a03 	addge.w	sl, r6, r3
 800747c:	1b9f      	sublt	r7, r3, r6
 800747e:	9b04      	ldr	r3, [sp, #16]
 8007480:	1af6      	subs	r6, r6, r3
 8007482:	4416      	add	r6, r2
 8007484:	4ba0      	ldr	r3, [pc, #640]	; (8007708 <_strtod_l+0x938>)
 8007486:	3e01      	subs	r6, #1
 8007488:	429e      	cmp	r6, r3
 800748a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800748e:	f280 80c4 	bge.w	800761a <_strtod_l+0x84a>
 8007492:	1b9b      	subs	r3, r3, r6
 8007494:	2b1f      	cmp	r3, #31
 8007496:	eba2 0203 	sub.w	r2, r2, r3
 800749a:	f04f 0101 	mov.w	r1, #1
 800749e:	f300 80b0 	bgt.w	8007602 <_strtod_l+0x832>
 80074a2:	fa01 f303 	lsl.w	r3, r1, r3
 80074a6:	930e      	str	r3, [sp, #56]	; 0x38
 80074a8:	2300      	movs	r3, #0
 80074aa:	930d      	str	r3, [sp, #52]	; 0x34
 80074ac:	eb0a 0602 	add.w	r6, sl, r2
 80074b0:	9b04      	ldr	r3, [sp, #16]
 80074b2:	45b2      	cmp	sl, r6
 80074b4:	4417      	add	r7, r2
 80074b6:	441f      	add	r7, r3
 80074b8:	4653      	mov	r3, sl
 80074ba:	bfa8      	it	ge
 80074bc:	4633      	movge	r3, r6
 80074be:	42bb      	cmp	r3, r7
 80074c0:	bfa8      	it	ge
 80074c2:	463b      	movge	r3, r7
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	bfc2      	ittt	gt
 80074c8:	1af6      	subgt	r6, r6, r3
 80074ca:	1aff      	subgt	r7, r7, r3
 80074cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80074d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	dd17      	ble.n	8007506 <_strtod_l+0x736>
 80074d6:	4659      	mov	r1, fp
 80074d8:	461a      	mov	r2, r3
 80074da:	4620      	mov	r0, r4
 80074dc:	f001 fbfe 	bl	8008cdc <__pow5mult>
 80074e0:	4683      	mov	fp, r0
 80074e2:	2800      	cmp	r0, #0
 80074e4:	f43f aeb8 	beq.w	8007258 <_strtod_l+0x488>
 80074e8:	4601      	mov	r1, r0
 80074ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80074ec:	4620      	mov	r0, r4
 80074ee:	f001 fb4b 	bl	8008b88 <__multiply>
 80074f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80074f4:	2800      	cmp	r0, #0
 80074f6:	f43f aeaf 	beq.w	8007258 <_strtod_l+0x488>
 80074fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80074fc:	4620      	mov	r0, r4
 80074fe:	f001 fa2d 	bl	800895c <_Bfree>
 8007502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007504:	9316      	str	r3, [sp, #88]	; 0x58
 8007506:	2e00      	cmp	r6, #0
 8007508:	f300 808c 	bgt.w	8007624 <_strtod_l+0x854>
 800750c:	9b08      	ldr	r3, [sp, #32]
 800750e:	2b00      	cmp	r3, #0
 8007510:	dd08      	ble.n	8007524 <_strtod_l+0x754>
 8007512:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007514:	9905      	ldr	r1, [sp, #20]
 8007516:	4620      	mov	r0, r4
 8007518:	f001 fbe0 	bl	8008cdc <__pow5mult>
 800751c:	9005      	str	r0, [sp, #20]
 800751e:	2800      	cmp	r0, #0
 8007520:	f43f ae9a 	beq.w	8007258 <_strtod_l+0x488>
 8007524:	2f00      	cmp	r7, #0
 8007526:	dd08      	ble.n	800753a <_strtod_l+0x76a>
 8007528:	9905      	ldr	r1, [sp, #20]
 800752a:	463a      	mov	r2, r7
 800752c:	4620      	mov	r0, r4
 800752e:	f001 fc2f 	bl	8008d90 <__lshift>
 8007532:	9005      	str	r0, [sp, #20]
 8007534:	2800      	cmp	r0, #0
 8007536:	f43f ae8f 	beq.w	8007258 <_strtod_l+0x488>
 800753a:	f1ba 0f00 	cmp.w	sl, #0
 800753e:	dd08      	ble.n	8007552 <_strtod_l+0x782>
 8007540:	4659      	mov	r1, fp
 8007542:	4652      	mov	r2, sl
 8007544:	4620      	mov	r0, r4
 8007546:	f001 fc23 	bl	8008d90 <__lshift>
 800754a:	4683      	mov	fp, r0
 800754c:	2800      	cmp	r0, #0
 800754e:	f43f ae83 	beq.w	8007258 <_strtod_l+0x488>
 8007552:	9a05      	ldr	r2, [sp, #20]
 8007554:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007556:	4620      	mov	r0, r4
 8007558:	f001 fca2 	bl	8008ea0 <__mdiff>
 800755c:	4605      	mov	r5, r0
 800755e:	2800      	cmp	r0, #0
 8007560:	f43f ae7a 	beq.w	8007258 <_strtod_l+0x488>
 8007564:	68c3      	ldr	r3, [r0, #12]
 8007566:	930b      	str	r3, [sp, #44]	; 0x2c
 8007568:	2300      	movs	r3, #0
 800756a:	60c3      	str	r3, [r0, #12]
 800756c:	4659      	mov	r1, fp
 800756e:	f001 fc7b 	bl	8008e68 <__mcmp>
 8007572:	2800      	cmp	r0, #0
 8007574:	da60      	bge.n	8007638 <_strtod_l+0x868>
 8007576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007578:	ea53 0308 	orrs.w	r3, r3, r8
 800757c:	f040 8084 	bne.w	8007688 <_strtod_l+0x8b8>
 8007580:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007584:	2b00      	cmp	r3, #0
 8007586:	d17f      	bne.n	8007688 <_strtod_l+0x8b8>
 8007588:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800758c:	0d1b      	lsrs	r3, r3, #20
 800758e:	051b      	lsls	r3, r3, #20
 8007590:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007594:	d978      	bls.n	8007688 <_strtod_l+0x8b8>
 8007596:	696b      	ldr	r3, [r5, #20]
 8007598:	b913      	cbnz	r3, 80075a0 <_strtod_l+0x7d0>
 800759a:	692b      	ldr	r3, [r5, #16]
 800759c:	2b01      	cmp	r3, #1
 800759e:	dd73      	ble.n	8007688 <_strtod_l+0x8b8>
 80075a0:	4629      	mov	r1, r5
 80075a2:	2201      	movs	r2, #1
 80075a4:	4620      	mov	r0, r4
 80075a6:	f001 fbf3 	bl	8008d90 <__lshift>
 80075aa:	4659      	mov	r1, fp
 80075ac:	4605      	mov	r5, r0
 80075ae:	f001 fc5b 	bl	8008e68 <__mcmp>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	dd68      	ble.n	8007688 <_strtod_l+0x8b8>
 80075b6:	9904      	ldr	r1, [sp, #16]
 80075b8:	4a54      	ldr	r2, [pc, #336]	; (800770c <_strtod_l+0x93c>)
 80075ba:	464b      	mov	r3, r9
 80075bc:	2900      	cmp	r1, #0
 80075be:	f000 8084 	beq.w	80076ca <_strtod_l+0x8fa>
 80075c2:	ea02 0109 	and.w	r1, r2, r9
 80075c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80075ca:	dc7e      	bgt.n	80076ca <_strtod_l+0x8fa>
 80075cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80075d0:	f77f aeb3 	ble.w	800733a <_strtod_l+0x56a>
 80075d4:	4b4e      	ldr	r3, [pc, #312]	; (8007710 <_strtod_l+0x940>)
 80075d6:	4640      	mov	r0, r8
 80075d8:	4649      	mov	r1, r9
 80075da:	2200      	movs	r2, #0
 80075dc:	f7f9 f80c 	bl	80005f8 <__aeabi_dmul>
 80075e0:	4b4a      	ldr	r3, [pc, #296]	; (800770c <_strtod_l+0x93c>)
 80075e2:	400b      	ands	r3, r1
 80075e4:	4680      	mov	r8, r0
 80075e6:	4689      	mov	r9, r1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f47f ae3f 	bne.w	800726c <_strtod_l+0x49c>
 80075ee:	2322      	movs	r3, #34	; 0x22
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	e63b      	b.n	800726c <_strtod_l+0x49c>
 80075f4:	f04f 32ff 	mov.w	r2, #4294967295
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	ea03 0808 	and.w	r8, r3, r8
 8007600:	e6e8      	b.n	80073d4 <_strtod_l+0x604>
 8007602:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007606:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800760a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800760e:	36e2      	adds	r6, #226	; 0xe2
 8007610:	fa01 f306 	lsl.w	r3, r1, r6
 8007614:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007618:	e748      	b.n	80074ac <_strtod_l+0x6dc>
 800761a:	2100      	movs	r1, #0
 800761c:	2301      	movs	r3, #1
 800761e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007622:	e743      	b.n	80074ac <_strtod_l+0x6dc>
 8007624:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007626:	4632      	mov	r2, r6
 8007628:	4620      	mov	r0, r4
 800762a:	f001 fbb1 	bl	8008d90 <__lshift>
 800762e:	9016      	str	r0, [sp, #88]	; 0x58
 8007630:	2800      	cmp	r0, #0
 8007632:	f47f af6b 	bne.w	800750c <_strtod_l+0x73c>
 8007636:	e60f      	b.n	8007258 <_strtod_l+0x488>
 8007638:	46ca      	mov	sl, r9
 800763a:	d171      	bne.n	8007720 <_strtod_l+0x950>
 800763c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800763e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007642:	b352      	cbz	r2, 800769a <_strtod_l+0x8ca>
 8007644:	4a33      	ldr	r2, [pc, #204]	; (8007714 <_strtod_l+0x944>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d12a      	bne.n	80076a0 <_strtod_l+0x8d0>
 800764a:	9b04      	ldr	r3, [sp, #16]
 800764c:	4641      	mov	r1, r8
 800764e:	b1fb      	cbz	r3, 8007690 <_strtod_l+0x8c0>
 8007650:	4b2e      	ldr	r3, [pc, #184]	; (800770c <_strtod_l+0x93c>)
 8007652:	ea09 0303 	and.w	r3, r9, r3
 8007656:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800765a:	f04f 32ff 	mov.w	r2, #4294967295
 800765e:	d81a      	bhi.n	8007696 <_strtod_l+0x8c6>
 8007660:	0d1b      	lsrs	r3, r3, #20
 8007662:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007666:	fa02 f303 	lsl.w	r3, r2, r3
 800766a:	4299      	cmp	r1, r3
 800766c:	d118      	bne.n	80076a0 <_strtod_l+0x8d0>
 800766e:	4b2a      	ldr	r3, [pc, #168]	; (8007718 <_strtod_l+0x948>)
 8007670:	459a      	cmp	sl, r3
 8007672:	d102      	bne.n	800767a <_strtod_l+0x8aa>
 8007674:	3101      	adds	r1, #1
 8007676:	f43f adef 	beq.w	8007258 <_strtod_l+0x488>
 800767a:	4b24      	ldr	r3, [pc, #144]	; (800770c <_strtod_l+0x93c>)
 800767c:	ea0a 0303 	and.w	r3, sl, r3
 8007680:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007684:	f04f 0800 	mov.w	r8, #0
 8007688:	9b04      	ldr	r3, [sp, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1a2      	bne.n	80075d4 <_strtod_l+0x804>
 800768e:	e5ed      	b.n	800726c <_strtod_l+0x49c>
 8007690:	f04f 33ff 	mov.w	r3, #4294967295
 8007694:	e7e9      	b.n	800766a <_strtod_l+0x89a>
 8007696:	4613      	mov	r3, r2
 8007698:	e7e7      	b.n	800766a <_strtod_l+0x89a>
 800769a:	ea53 0308 	orrs.w	r3, r3, r8
 800769e:	d08a      	beq.n	80075b6 <_strtod_l+0x7e6>
 80076a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076a2:	b1e3      	cbz	r3, 80076de <_strtod_l+0x90e>
 80076a4:	ea13 0f0a 	tst.w	r3, sl
 80076a8:	d0ee      	beq.n	8007688 <_strtod_l+0x8b8>
 80076aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ac:	9a04      	ldr	r2, [sp, #16]
 80076ae:	4640      	mov	r0, r8
 80076b0:	4649      	mov	r1, r9
 80076b2:	b1c3      	cbz	r3, 80076e6 <_strtod_l+0x916>
 80076b4:	f7ff fb70 	bl	8006d98 <sulp>
 80076b8:	4602      	mov	r2, r0
 80076ba:	460b      	mov	r3, r1
 80076bc:	ec51 0b18 	vmov	r0, r1, d8
 80076c0:	f7f8 fde4 	bl	800028c <__adddf3>
 80076c4:	4680      	mov	r8, r0
 80076c6:	4689      	mov	r9, r1
 80076c8:	e7de      	b.n	8007688 <_strtod_l+0x8b8>
 80076ca:	4013      	ands	r3, r2
 80076cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80076d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80076d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80076d8:	f04f 38ff 	mov.w	r8, #4294967295
 80076dc:	e7d4      	b.n	8007688 <_strtod_l+0x8b8>
 80076de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076e0:	ea13 0f08 	tst.w	r3, r8
 80076e4:	e7e0      	b.n	80076a8 <_strtod_l+0x8d8>
 80076e6:	f7ff fb57 	bl	8006d98 <sulp>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	ec51 0b18 	vmov	r0, r1, d8
 80076f2:	f7f8 fdc9 	bl	8000288 <__aeabi_dsub>
 80076f6:	2200      	movs	r2, #0
 80076f8:	2300      	movs	r3, #0
 80076fa:	4680      	mov	r8, r0
 80076fc:	4689      	mov	r9, r1
 80076fe:	f7f9 f9e3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007702:	2800      	cmp	r0, #0
 8007704:	d0c0      	beq.n	8007688 <_strtod_l+0x8b8>
 8007706:	e618      	b.n	800733a <_strtod_l+0x56a>
 8007708:	fffffc02 	.word	0xfffffc02
 800770c:	7ff00000 	.word	0x7ff00000
 8007710:	39500000 	.word	0x39500000
 8007714:	000fffff 	.word	0x000fffff
 8007718:	7fefffff 	.word	0x7fefffff
 800771c:	0800a3a0 	.word	0x0800a3a0
 8007720:	4659      	mov	r1, fp
 8007722:	4628      	mov	r0, r5
 8007724:	f001 fd10 	bl	8009148 <__ratio>
 8007728:	ec57 6b10 	vmov	r6, r7, d0
 800772c:	ee10 0a10 	vmov	r0, s0
 8007730:	2200      	movs	r2, #0
 8007732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007736:	4639      	mov	r1, r7
 8007738:	f7f9 f9da 	bl	8000af0 <__aeabi_dcmple>
 800773c:	2800      	cmp	r0, #0
 800773e:	d071      	beq.n	8007824 <_strtod_l+0xa54>
 8007740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007742:	2b00      	cmp	r3, #0
 8007744:	d17c      	bne.n	8007840 <_strtod_l+0xa70>
 8007746:	f1b8 0f00 	cmp.w	r8, #0
 800774a:	d15a      	bne.n	8007802 <_strtod_l+0xa32>
 800774c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007750:	2b00      	cmp	r3, #0
 8007752:	d15d      	bne.n	8007810 <_strtod_l+0xa40>
 8007754:	4b90      	ldr	r3, [pc, #576]	; (8007998 <_strtod_l+0xbc8>)
 8007756:	2200      	movs	r2, #0
 8007758:	4630      	mov	r0, r6
 800775a:	4639      	mov	r1, r7
 800775c:	f7f9 f9be 	bl	8000adc <__aeabi_dcmplt>
 8007760:	2800      	cmp	r0, #0
 8007762:	d15c      	bne.n	800781e <_strtod_l+0xa4e>
 8007764:	4630      	mov	r0, r6
 8007766:	4639      	mov	r1, r7
 8007768:	4b8c      	ldr	r3, [pc, #560]	; (800799c <_strtod_l+0xbcc>)
 800776a:	2200      	movs	r2, #0
 800776c:	f7f8 ff44 	bl	80005f8 <__aeabi_dmul>
 8007770:	4606      	mov	r6, r0
 8007772:	460f      	mov	r7, r1
 8007774:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007778:	9606      	str	r6, [sp, #24]
 800777a:	9307      	str	r3, [sp, #28]
 800777c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007780:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007784:	4b86      	ldr	r3, [pc, #536]	; (80079a0 <_strtod_l+0xbd0>)
 8007786:	ea0a 0303 	and.w	r3, sl, r3
 800778a:	930d      	str	r3, [sp, #52]	; 0x34
 800778c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800778e:	4b85      	ldr	r3, [pc, #532]	; (80079a4 <_strtod_l+0xbd4>)
 8007790:	429a      	cmp	r2, r3
 8007792:	f040 8090 	bne.w	80078b6 <_strtod_l+0xae6>
 8007796:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800779a:	ec49 8b10 	vmov	d0, r8, r9
 800779e:	f001 fc09 	bl	8008fb4 <__ulp>
 80077a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077a6:	ec51 0b10 	vmov	r0, r1, d0
 80077aa:	f7f8 ff25 	bl	80005f8 <__aeabi_dmul>
 80077ae:	4642      	mov	r2, r8
 80077b0:	464b      	mov	r3, r9
 80077b2:	f7f8 fd6b 	bl	800028c <__adddf3>
 80077b6:	460b      	mov	r3, r1
 80077b8:	4979      	ldr	r1, [pc, #484]	; (80079a0 <_strtod_l+0xbd0>)
 80077ba:	4a7b      	ldr	r2, [pc, #492]	; (80079a8 <_strtod_l+0xbd8>)
 80077bc:	4019      	ands	r1, r3
 80077be:	4291      	cmp	r1, r2
 80077c0:	4680      	mov	r8, r0
 80077c2:	d944      	bls.n	800784e <_strtod_l+0xa7e>
 80077c4:	ee18 2a90 	vmov	r2, s17
 80077c8:	4b78      	ldr	r3, [pc, #480]	; (80079ac <_strtod_l+0xbdc>)
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d104      	bne.n	80077d8 <_strtod_l+0xa08>
 80077ce:	ee18 3a10 	vmov	r3, s16
 80077d2:	3301      	adds	r3, #1
 80077d4:	f43f ad40 	beq.w	8007258 <_strtod_l+0x488>
 80077d8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80079ac <_strtod_l+0xbdc>
 80077dc:	f04f 38ff 	mov.w	r8, #4294967295
 80077e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80077e2:	4620      	mov	r0, r4
 80077e4:	f001 f8ba 	bl	800895c <_Bfree>
 80077e8:	9905      	ldr	r1, [sp, #20]
 80077ea:	4620      	mov	r0, r4
 80077ec:	f001 f8b6 	bl	800895c <_Bfree>
 80077f0:	4659      	mov	r1, fp
 80077f2:	4620      	mov	r0, r4
 80077f4:	f001 f8b2 	bl	800895c <_Bfree>
 80077f8:	4629      	mov	r1, r5
 80077fa:	4620      	mov	r0, r4
 80077fc:	f001 f8ae 	bl	800895c <_Bfree>
 8007800:	e609      	b.n	8007416 <_strtod_l+0x646>
 8007802:	f1b8 0f01 	cmp.w	r8, #1
 8007806:	d103      	bne.n	8007810 <_strtod_l+0xa40>
 8007808:	f1b9 0f00 	cmp.w	r9, #0
 800780c:	f43f ad95 	beq.w	800733a <_strtod_l+0x56a>
 8007810:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007968 <_strtod_l+0xb98>
 8007814:	4f60      	ldr	r7, [pc, #384]	; (8007998 <_strtod_l+0xbc8>)
 8007816:	ed8d 7b06 	vstr	d7, [sp, #24]
 800781a:	2600      	movs	r6, #0
 800781c:	e7ae      	b.n	800777c <_strtod_l+0x9ac>
 800781e:	4f5f      	ldr	r7, [pc, #380]	; (800799c <_strtod_l+0xbcc>)
 8007820:	2600      	movs	r6, #0
 8007822:	e7a7      	b.n	8007774 <_strtod_l+0x9a4>
 8007824:	4b5d      	ldr	r3, [pc, #372]	; (800799c <_strtod_l+0xbcc>)
 8007826:	4630      	mov	r0, r6
 8007828:	4639      	mov	r1, r7
 800782a:	2200      	movs	r2, #0
 800782c:	f7f8 fee4 	bl	80005f8 <__aeabi_dmul>
 8007830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007832:	4606      	mov	r6, r0
 8007834:	460f      	mov	r7, r1
 8007836:	2b00      	cmp	r3, #0
 8007838:	d09c      	beq.n	8007774 <_strtod_l+0x9a4>
 800783a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800783e:	e79d      	b.n	800777c <_strtod_l+0x9ac>
 8007840:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007970 <_strtod_l+0xba0>
 8007844:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007848:	ec57 6b17 	vmov	r6, r7, d7
 800784c:	e796      	b.n	800777c <_strtod_l+0x9ac>
 800784e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007852:	9b04      	ldr	r3, [sp, #16]
 8007854:	46ca      	mov	sl, r9
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1c2      	bne.n	80077e0 <_strtod_l+0xa10>
 800785a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800785e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007860:	0d1b      	lsrs	r3, r3, #20
 8007862:	051b      	lsls	r3, r3, #20
 8007864:	429a      	cmp	r2, r3
 8007866:	d1bb      	bne.n	80077e0 <_strtod_l+0xa10>
 8007868:	4630      	mov	r0, r6
 800786a:	4639      	mov	r1, r7
 800786c:	f7f9 f9fc 	bl	8000c68 <__aeabi_d2lz>
 8007870:	f7f8 fe94 	bl	800059c <__aeabi_l2d>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4630      	mov	r0, r6
 800787a:	4639      	mov	r1, r7
 800787c:	f7f8 fd04 	bl	8000288 <__aeabi_dsub>
 8007880:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007882:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007886:	ea43 0308 	orr.w	r3, r3, r8
 800788a:	4313      	orrs	r3, r2
 800788c:	4606      	mov	r6, r0
 800788e:	460f      	mov	r7, r1
 8007890:	d054      	beq.n	800793c <_strtod_l+0xb6c>
 8007892:	a339      	add	r3, pc, #228	; (adr r3, 8007978 <_strtod_l+0xba8>)
 8007894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007898:	f7f9 f920 	bl	8000adc <__aeabi_dcmplt>
 800789c:	2800      	cmp	r0, #0
 800789e:	f47f ace5 	bne.w	800726c <_strtod_l+0x49c>
 80078a2:	a337      	add	r3, pc, #220	; (adr r3, 8007980 <_strtod_l+0xbb0>)
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	4630      	mov	r0, r6
 80078aa:	4639      	mov	r1, r7
 80078ac:	f7f9 f934 	bl	8000b18 <__aeabi_dcmpgt>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d095      	beq.n	80077e0 <_strtod_l+0xa10>
 80078b4:	e4da      	b.n	800726c <_strtod_l+0x49c>
 80078b6:	9b04      	ldr	r3, [sp, #16]
 80078b8:	b333      	cbz	r3, 8007908 <_strtod_l+0xb38>
 80078ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80078c0:	d822      	bhi.n	8007908 <_strtod_l+0xb38>
 80078c2:	a331      	add	r3, pc, #196	; (adr r3, 8007988 <_strtod_l+0xbb8>)
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	4630      	mov	r0, r6
 80078ca:	4639      	mov	r1, r7
 80078cc:	f7f9 f910 	bl	8000af0 <__aeabi_dcmple>
 80078d0:	b1a0      	cbz	r0, 80078fc <_strtod_l+0xb2c>
 80078d2:	4639      	mov	r1, r7
 80078d4:	4630      	mov	r0, r6
 80078d6:	f7f9 f93f 	bl	8000b58 <__aeabi_d2uiz>
 80078da:	2801      	cmp	r0, #1
 80078dc:	bf38      	it	cc
 80078de:	2001      	movcc	r0, #1
 80078e0:	f7f8 fe10 	bl	8000504 <__aeabi_ui2d>
 80078e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078e6:	4606      	mov	r6, r0
 80078e8:	460f      	mov	r7, r1
 80078ea:	bb23      	cbnz	r3, 8007936 <_strtod_l+0xb66>
 80078ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078f0:	9010      	str	r0, [sp, #64]	; 0x40
 80078f2:	9311      	str	r3, [sp, #68]	; 0x44
 80078f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80078fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007900:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	930f      	str	r3, [sp, #60]	; 0x3c
 8007908:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800790c:	eeb0 0a48 	vmov.f32	s0, s16
 8007910:	eef0 0a68 	vmov.f32	s1, s17
 8007914:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007918:	f001 fb4c 	bl	8008fb4 <__ulp>
 800791c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007920:	ec53 2b10 	vmov	r2, r3, d0
 8007924:	f7f8 fe68 	bl	80005f8 <__aeabi_dmul>
 8007928:	ec53 2b18 	vmov	r2, r3, d8
 800792c:	f7f8 fcae 	bl	800028c <__adddf3>
 8007930:	4680      	mov	r8, r0
 8007932:	4689      	mov	r9, r1
 8007934:	e78d      	b.n	8007852 <_strtod_l+0xa82>
 8007936:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800793a:	e7db      	b.n	80078f4 <_strtod_l+0xb24>
 800793c:	a314      	add	r3, pc, #80	; (adr r3, 8007990 <_strtod_l+0xbc0>)
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	f7f9 f8cb 	bl	8000adc <__aeabi_dcmplt>
 8007946:	e7b3      	b.n	80078b0 <_strtod_l+0xae0>
 8007948:	2300      	movs	r3, #0
 800794a:	930a      	str	r3, [sp, #40]	; 0x28
 800794c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800794e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	f7ff ba7c 	b.w	8006e4e <_strtod_l+0x7e>
 8007956:	2a65      	cmp	r2, #101	; 0x65
 8007958:	f43f ab75 	beq.w	8007046 <_strtod_l+0x276>
 800795c:	2a45      	cmp	r2, #69	; 0x45
 800795e:	f43f ab72 	beq.w	8007046 <_strtod_l+0x276>
 8007962:	2301      	movs	r3, #1
 8007964:	f7ff bbaa 	b.w	80070bc <_strtod_l+0x2ec>
 8007968:	00000000 	.word	0x00000000
 800796c:	bff00000 	.word	0xbff00000
 8007970:	00000000 	.word	0x00000000
 8007974:	3ff00000 	.word	0x3ff00000
 8007978:	94a03595 	.word	0x94a03595
 800797c:	3fdfffff 	.word	0x3fdfffff
 8007980:	35afe535 	.word	0x35afe535
 8007984:	3fe00000 	.word	0x3fe00000
 8007988:	ffc00000 	.word	0xffc00000
 800798c:	41dfffff 	.word	0x41dfffff
 8007990:	94a03595 	.word	0x94a03595
 8007994:	3fcfffff 	.word	0x3fcfffff
 8007998:	3ff00000 	.word	0x3ff00000
 800799c:	3fe00000 	.word	0x3fe00000
 80079a0:	7ff00000 	.word	0x7ff00000
 80079a4:	7fe00000 	.word	0x7fe00000
 80079a8:	7c9fffff 	.word	0x7c9fffff
 80079ac:	7fefffff 	.word	0x7fefffff

080079b0 <strtof>:
 80079b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8007a78 <strtof+0xc8>
 80079b8:	4b2a      	ldr	r3, [pc, #168]	; (8007a64 <strtof+0xb4>)
 80079ba:	460a      	mov	r2, r1
 80079bc:	ed2d 8b02 	vpush	{d8}
 80079c0:	4601      	mov	r1, r0
 80079c2:	f8d8 0000 	ldr.w	r0, [r8]
 80079c6:	f7ff fa03 	bl	8006dd0 <_strtod_l>
 80079ca:	ec55 4b10 	vmov	r4, r5, d0
 80079ce:	ee10 2a10 	vmov	r2, s0
 80079d2:	ee10 0a10 	vmov	r0, s0
 80079d6:	462b      	mov	r3, r5
 80079d8:	4629      	mov	r1, r5
 80079da:	f7f9 f8a7 	bl	8000b2c <__aeabi_dcmpun>
 80079de:	b190      	cbz	r0, 8007a06 <strtof+0x56>
 80079e0:	2d00      	cmp	r5, #0
 80079e2:	4821      	ldr	r0, [pc, #132]	; (8007a68 <strtof+0xb8>)
 80079e4:	da09      	bge.n	80079fa <strtof+0x4a>
 80079e6:	f000 faeb 	bl	8007fc0 <nanf>
 80079ea:	eeb1 8a40 	vneg.f32	s16, s0
 80079ee:	eeb0 0a48 	vmov.f32	s0, s16
 80079f2:	ecbd 8b02 	vpop	{d8}
 80079f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079fa:	ecbd 8b02 	vpop	{d8}
 80079fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a02:	f000 badd 	b.w	8007fc0 <nanf>
 8007a06:	4620      	mov	r0, r4
 8007a08:	4629      	mov	r1, r5
 8007a0a:	f7f9 f8c5 	bl	8000b98 <__aeabi_d2f>
 8007a0e:	ee08 0a10 	vmov	s16, r0
 8007a12:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007a6c <strtof+0xbc>
 8007a16:	eeb0 7ac8 	vabs.f32	s14, s16
 8007a1a:	eeb4 7a67 	vcmp.f32	s14, s15
 8007a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a22:	dd11      	ble.n	8007a48 <strtof+0x98>
 8007a24:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8007a28:	4b11      	ldr	r3, [pc, #68]	; (8007a70 <strtof+0xc0>)
 8007a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2e:	4620      	mov	r0, r4
 8007a30:	4639      	mov	r1, r7
 8007a32:	f7f9 f87b 	bl	8000b2c <__aeabi_dcmpun>
 8007a36:	b980      	cbnz	r0, 8007a5a <strtof+0xaa>
 8007a38:	4b0d      	ldr	r3, [pc, #52]	; (8007a70 <strtof+0xc0>)
 8007a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a3e:	4620      	mov	r0, r4
 8007a40:	4639      	mov	r1, r7
 8007a42:	f7f9 f855 	bl	8000af0 <__aeabi_dcmple>
 8007a46:	b940      	cbnz	r0, 8007a5a <strtof+0xaa>
 8007a48:	ee18 3a10 	vmov	r3, s16
 8007a4c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007a50:	d1cd      	bne.n	80079ee <strtof+0x3e>
 8007a52:	4b08      	ldr	r3, [pc, #32]	; (8007a74 <strtof+0xc4>)
 8007a54:	402b      	ands	r3, r5
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0c9      	beq.n	80079ee <strtof+0x3e>
 8007a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a5e:	2222      	movs	r2, #34	; 0x22
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	e7c4      	b.n	80079ee <strtof+0x3e>
 8007a64:	20000018 	.word	0x20000018
 8007a68:	0800a566 	.word	0x0800a566
 8007a6c:	7f7fffff 	.word	0x7f7fffff
 8007a70:	7fefffff 	.word	0x7fefffff
 8007a74:	7ff00000 	.word	0x7ff00000
 8007a78:	200001d0 	.word	0x200001d0

08007a7c <_strtoul_l.constprop.0>:
 8007a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a80:	4f36      	ldr	r7, [pc, #216]	; (8007b5c <_strtoul_l.constprop.0+0xe0>)
 8007a82:	4686      	mov	lr, r0
 8007a84:	460d      	mov	r5, r1
 8007a86:	4628      	mov	r0, r5
 8007a88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a8c:	5d3e      	ldrb	r6, [r7, r4]
 8007a8e:	f016 0608 	ands.w	r6, r6, #8
 8007a92:	d1f8      	bne.n	8007a86 <_strtoul_l.constprop.0+0xa>
 8007a94:	2c2d      	cmp	r4, #45	; 0x2d
 8007a96:	d130      	bne.n	8007afa <_strtoul_l.constprop.0+0x7e>
 8007a98:	782c      	ldrb	r4, [r5, #0]
 8007a9a:	2601      	movs	r6, #1
 8007a9c:	1c85      	adds	r5, r0, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d057      	beq.n	8007b52 <_strtoul_l.constprop.0+0xd6>
 8007aa2:	2b10      	cmp	r3, #16
 8007aa4:	d109      	bne.n	8007aba <_strtoul_l.constprop.0+0x3e>
 8007aa6:	2c30      	cmp	r4, #48	; 0x30
 8007aa8:	d107      	bne.n	8007aba <_strtoul_l.constprop.0+0x3e>
 8007aaa:	7828      	ldrb	r0, [r5, #0]
 8007aac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007ab0:	2858      	cmp	r0, #88	; 0x58
 8007ab2:	d149      	bne.n	8007b48 <_strtoul_l.constprop.0+0xcc>
 8007ab4:	786c      	ldrb	r4, [r5, #1]
 8007ab6:	2310      	movs	r3, #16
 8007ab8:	3502      	adds	r5, #2
 8007aba:	f04f 38ff 	mov.w	r8, #4294967295
 8007abe:	2700      	movs	r7, #0
 8007ac0:	fbb8 f8f3 	udiv	r8, r8, r3
 8007ac4:	fb03 f908 	mul.w	r9, r3, r8
 8007ac8:	ea6f 0909 	mvn.w	r9, r9
 8007acc:	4638      	mov	r0, r7
 8007ace:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007ad2:	f1bc 0f09 	cmp.w	ip, #9
 8007ad6:	d815      	bhi.n	8007b04 <_strtoul_l.constprop.0+0x88>
 8007ad8:	4664      	mov	r4, ip
 8007ada:	42a3      	cmp	r3, r4
 8007adc:	dd23      	ble.n	8007b26 <_strtoul_l.constprop.0+0xaa>
 8007ade:	f1b7 3fff 	cmp.w	r7, #4294967295
 8007ae2:	d007      	beq.n	8007af4 <_strtoul_l.constprop.0+0x78>
 8007ae4:	4580      	cmp	r8, r0
 8007ae6:	d31b      	bcc.n	8007b20 <_strtoul_l.constprop.0+0xa4>
 8007ae8:	d101      	bne.n	8007aee <_strtoul_l.constprop.0+0x72>
 8007aea:	45a1      	cmp	r9, r4
 8007aec:	db18      	blt.n	8007b20 <_strtoul_l.constprop.0+0xa4>
 8007aee:	fb00 4003 	mla	r0, r0, r3, r4
 8007af2:	2701      	movs	r7, #1
 8007af4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007af8:	e7e9      	b.n	8007ace <_strtoul_l.constprop.0+0x52>
 8007afa:	2c2b      	cmp	r4, #43	; 0x2b
 8007afc:	bf04      	itt	eq
 8007afe:	782c      	ldrbeq	r4, [r5, #0]
 8007b00:	1c85      	addeq	r5, r0, #2
 8007b02:	e7cc      	b.n	8007a9e <_strtoul_l.constprop.0+0x22>
 8007b04:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007b08:	f1bc 0f19 	cmp.w	ip, #25
 8007b0c:	d801      	bhi.n	8007b12 <_strtoul_l.constprop.0+0x96>
 8007b0e:	3c37      	subs	r4, #55	; 0x37
 8007b10:	e7e3      	b.n	8007ada <_strtoul_l.constprop.0+0x5e>
 8007b12:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007b16:	f1bc 0f19 	cmp.w	ip, #25
 8007b1a:	d804      	bhi.n	8007b26 <_strtoul_l.constprop.0+0xaa>
 8007b1c:	3c57      	subs	r4, #87	; 0x57
 8007b1e:	e7dc      	b.n	8007ada <_strtoul_l.constprop.0+0x5e>
 8007b20:	f04f 37ff 	mov.w	r7, #4294967295
 8007b24:	e7e6      	b.n	8007af4 <_strtoul_l.constprop.0+0x78>
 8007b26:	1c7b      	adds	r3, r7, #1
 8007b28:	d106      	bne.n	8007b38 <_strtoul_l.constprop.0+0xbc>
 8007b2a:	2322      	movs	r3, #34	; 0x22
 8007b2c:	f8ce 3000 	str.w	r3, [lr]
 8007b30:	4638      	mov	r0, r7
 8007b32:	b932      	cbnz	r2, 8007b42 <_strtoul_l.constprop.0+0xc6>
 8007b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b38:	b106      	cbz	r6, 8007b3c <_strtoul_l.constprop.0+0xc0>
 8007b3a:	4240      	negs	r0, r0
 8007b3c:	2a00      	cmp	r2, #0
 8007b3e:	d0f9      	beq.n	8007b34 <_strtoul_l.constprop.0+0xb8>
 8007b40:	b107      	cbz	r7, 8007b44 <_strtoul_l.constprop.0+0xc8>
 8007b42:	1e69      	subs	r1, r5, #1
 8007b44:	6011      	str	r1, [r2, #0]
 8007b46:	e7f5      	b.n	8007b34 <_strtoul_l.constprop.0+0xb8>
 8007b48:	2430      	movs	r4, #48	; 0x30
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1b5      	bne.n	8007aba <_strtoul_l.constprop.0+0x3e>
 8007b4e:	2308      	movs	r3, #8
 8007b50:	e7b3      	b.n	8007aba <_strtoul_l.constprop.0+0x3e>
 8007b52:	2c30      	cmp	r4, #48	; 0x30
 8007b54:	d0a9      	beq.n	8007aaa <_strtoul_l.constprop.0+0x2e>
 8007b56:	230a      	movs	r3, #10
 8007b58:	e7af      	b.n	8007aba <_strtoul_l.constprop.0+0x3e>
 8007b5a:	bf00      	nop
 8007b5c:	0800a3c9 	.word	0x0800a3c9

08007b60 <strtoul>:
 8007b60:	4613      	mov	r3, r2
 8007b62:	460a      	mov	r2, r1
 8007b64:	4601      	mov	r1, r0
 8007b66:	4802      	ldr	r0, [pc, #8]	; (8007b70 <strtoul+0x10>)
 8007b68:	6800      	ldr	r0, [r0, #0]
 8007b6a:	f7ff bf87 	b.w	8007a7c <_strtoul_l.constprop.0>
 8007b6e:	bf00      	nop
 8007b70:	200001d0 	.word	0x200001d0

08007b74 <std>:
 8007b74:	2300      	movs	r3, #0
 8007b76:	b510      	push	{r4, lr}
 8007b78:	4604      	mov	r4, r0
 8007b7a:	e9c0 3300 	strd	r3, r3, [r0]
 8007b7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b82:	6083      	str	r3, [r0, #8]
 8007b84:	8181      	strh	r1, [r0, #12]
 8007b86:	6643      	str	r3, [r0, #100]	; 0x64
 8007b88:	81c2      	strh	r2, [r0, #14]
 8007b8a:	6183      	str	r3, [r0, #24]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	2208      	movs	r2, #8
 8007b90:	305c      	adds	r0, #92	; 0x5c
 8007b92:	f000 f914 	bl	8007dbe <memset>
 8007b96:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <std+0x58>)
 8007b98:	6263      	str	r3, [r4, #36]	; 0x24
 8007b9a:	4b0d      	ldr	r3, [pc, #52]	; (8007bd0 <std+0x5c>)
 8007b9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b9e:	4b0d      	ldr	r3, [pc, #52]	; (8007bd4 <std+0x60>)
 8007ba0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ba2:	4b0d      	ldr	r3, [pc, #52]	; (8007bd8 <std+0x64>)
 8007ba4:	6323      	str	r3, [r4, #48]	; 0x30
 8007ba6:	4b0d      	ldr	r3, [pc, #52]	; (8007bdc <std+0x68>)
 8007ba8:	6224      	str	r4, [r4, #32]
 8007baa:	429c      	cmp	r4, r3
 8007bac:	d006      	beq.n	8007bbc <std+0x48>
 8007bae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007bb2:	4294      	cmp	r4, r2
 8007bb4:	d002      	beq.n	8007bbc <std+0x48>
 8007bb6:	33d0      	adds	r3, #208	; 0xd0
 8007bb8:	429c      	cmp	r4, r3
 8007bba:	d105      	bne.n	8007bc8 <std+0x54>
 8007bbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bc4:	f000 b9e2 	b.w	8007f8c <__retarget_lock_init_recursive>
 8007bc8:	bd10      	pop	{r4, pc}
 8007bca:	bf00      	nop
 8007bcc:	08007d39 	.word	0x08007d39
 8007bd0:	08007d5b 	.word	0x08007d5b
 8007bd4:	08007d93 	.word	0x08007d93
 8007bd8:	08007db7 	.word	0x08007db7
 8007bdc:	20000650 	.word	0x20000650

08007be0 <stdio_exit_handler>:
 8007be0:	4a02      	ldr	r2, [pc, #8]	; (8007bec <stdio_exit_handler+0xc>)
 8007be2:	4903      	ldr	r1, [pc, #12]	; (8007bf0 <stdio_exit_handler+0x10>)
 8007be4:	4803      	ldr	r0, [pc, #12]	; (8007bf4 <stdio_exit_handler+0x14>)
 8007be6:	f000 b869 	b.w	8007cbc <_fwalk_sglue>
 8007bea:	bf00      	nop
 8007bec:	2000000c 	.word	0x2000000c
 8007bf0:	0800992d 	.word	0x0800992d
 8007bf4:	20000184 	.word	0x20000184

08007bf8 <cleanup_stdio>:
 8007bf8:	6841      	ldr	r1, [r0, #4]
 8007bfa:	4b0c      	ldr	r3, [pc, #48]	; (8007c2c <cleanup_stdio+0x34>)
 8007bfc:	4299      	cmp	r1, r3
 8007bfe:	b510      	push	{r4, lr}
 8007c00:	4604      	mov	r4, r0
 8007c02:	d001      	beq.n	8007c08 <cleanup_stdio+0x10>
 8007c04:	f001 fe92 	bl	800992c <_fflush_r>
 8007c08:	68a1      	ldr	r1, [r4, #8]
 8007c0a:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <cleanup_stdio+0x38>)
 8007c0c:	4299      	cmp	r1, r3
 8007c0e:	d002      	beq.n	8007c16 <cleanup_stdio+0x1e>
 8007c10:	4620      	mov	r0, r4
 8007c12:	f001 fe8b 	bl	800992c <_fflush_r>
 8007c16:	68e1      	ldr	r1, [r4, #12]
 8007c18:	4b06      	ldr	r3, [pc, #24]	; (8007c34 <cleanup_stdio+0x3c>)
 8007c1a:	4299      	cmp	r1, r3
 8007c1c:	d004      	beq.n	8007c28 <cleanup_stdio+0x30>
 8007c1e:	4620      	mov	r0, r4
 8007c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c24:	f001 be82 	b.w	800992c <_fflush_r>
 8007c28:	bd10      	pop	{r4, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20000650 	.word	0x20000650
 8007c30:	200006b8 	.word	0x200006b8
 8007c34:	20000720 	.word	0x20000720

08007c38 <global_stdio_init.part.0>:
 8007c38:	b510      	push	{r4, lr}
 8007c3a:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <global_stdio_init.part.0+0x30>)
 8007c3c:	4c0b      	ldr	r4, [pc, #44]	; (8007c6c <global_stdio_init.part.0+0x34>)
 8007c3e:	4a0c      	ldr	r2, [pc, #48]	; (8007c70 <global_stdio_init.part.0+0x38>)
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	4620      	mov	r0, r4
 8007c44:	2200      	movs	r2, #0
 8007c46:	2104      	movs	r1, #4
 8007c48:	f7ff ff94 	bl	8007b74 <std>
 8007c4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007c50:	2201      	movs	r2, #1
 8007c52:	2109      	movs	r1, #9
 8007c54:	f7ff ff8e 	bl	8007b74 <std>
 8007c58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c62:	2112      	movs	r1, #18
 8007c64:	f7ff bf86 	b.w	8007b74 <std>
 8007c68:	20000788 	.word	0x20000788
 8007c6c:	20000650 	.word	0x20000650
 8007c70:	08007be1 	.word	0x08007be1

08007c74 <__sfp_lock_acquire>:
 8007c74:	4801      	ldr	r0, [pc, #4]	; (8007c7c <__sfp_lock_acquire+0x8>)
 8007c76:	f000 b98a 	b.w	8007f8e <__retarget_lock_acquire_recursive>
 8007c7a:	bf00      	nop
 8007c7c:	20000791 	.word	0x20000791

08007c80 <__sfp_lock_release>:
 8007c80:	4801      	ldr	r0, [pc, #4]	; (8007c88 <__sfp_lock_release+0x8>)
 8007c82:	f000 b985 	b.w	8007f90 <__retarget_lock_release_recursive>
 8007c86:	bf00      	nop
 8007c88:	20000791 	.word	0x20000791

08007c8c <__sinit>:
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	4604      	mov	r4, r0
 8007c90:	f7ff fff0 	bl	8007c74 <__sfp_lock_acquire>
 8007c94:	6a23      	ldr	r3, [r4, #32]
 8007c96:	b11b      	cbz	r3, 8007ca0 <__sinit+0x14>
 8007c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c9c:	f7ff bff0 	b.w	8007c80 <__sfp_lock_release>
 8007ca0:	4b04      	ldr	r3, [pc, #16]	; (8007cb4 <__sinit+0x28>)
 8007ca2:	6223      	str	r3, [r4, #32]
 8007ca4:	4b04      	ldr	r3, [pc, #16]	; (8007cb8 <__sinit+0x2c>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1f5      	bne.n	8007c98 <__sinit+0xc>
 8007cac:	f7ff ffc4 	bl	8007c38 <global_stdio_init.part.0>
 8007cb0:	e7f2      	b.n	8007c98 <__sinit+0xc>
 8007cb2:	bf00      	nop
 8007cb4:	08007bf9 	.word	0x08007bf9
 8007cb8:	20000788 	.word	0x20000788

08007cbc <_fwalk_sglue>:
 8007cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	4688      	mov	r8, r1
 8007cc4:	4614      	mov	r4, r2
 8007cc6:	2600      	movs	r6, #0
 8007cc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ccc:	f1b9 0901 	subs.w	r9, r9, #1
 8007cd0:	d505      	bpl.n	8007cde <_fwalk_sglue+0x22>
 8007cd2:	6824      	ldr	r4, [r4, #0]
 8007cd4:	2c00      	cmp	r4, #0
 8007cd6:	d1f7      	bne.n	8007cc8 <_fwalk_sglue+0xc>
 8007cd8:	4630      	mov	r0, r6
 8007cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cde:	89ab      	ldrh	r3, [r5, #12]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d907      	bls.n	8007cf4 <_fwalk_sglue+0x38>
 8007ce4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	d003      	beq.n	8007cf4 <_fwalk_sglue+0x38>
 8007cec:	4629      	mov	r1, r5
 8007cee:	4638      	mov	r0, r7
 8007cf0:	47c0      	blx	r8
 8007cf2:	4306      	orrs	r6, r0
 8007cf4:	3568      	adds	r5, #104	; 0x68
 8007cf6:	e7e9      	b.n	8007ccc <_fwalk_sglue+0x10>

08007cf8 <siprintf>:
 8007cf8:	b40e      	push	{r1, r2, r3}
 8007cfa:	b500      	push	{lr}
 8007cfc:	b09c      	sub	sp, #112	; 0x70
 8007cfe:	ab1d      	add	r3, sp, #116	; 0x74
 8007d00:	9002      	str	r0, [sp, #8]
 8007d02:	9006      	str	r0, [sp, #24]
 8007d04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d08:	4809      	ldr	r0, [pc, #36]	; (8007d30 <siprintf+0x38>)
 8007d0a:	9107      	str	r1, [sp, #28]
 8007d0c:	9104      	str	r1, [sp, #16]
 8007d0e:	4909      	ldr	r1, [pc, #36]	; (8007d34 <siprintf+0x3c>)
 8007d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d14:	9105      	str	r1, [sp, #20]
 8007d16:	6800      	ldr	r0, [r0, #0]
 8007d18:	9301      	str	r3, [sp, #4]
 8007d1a:	a902      	add	r1, sp, #8
 8007d1c:	f001 faf2 	bl	8009304 <_svfiprintf_r>
 8007d20:	9b02      	ldr	r3, [sp, #8]
 8007d22:	2200      	movs	r2, #0
 8007d24:	701a      	strb	r2, [r3, #0]
 8007d26:	b01c      	add	sp, #112	; 0x70
 8007d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d2c:	b003      	add	sp, #12
 8007d2e:	4770      	bx	lr
 8007d30:	200001d0 	.word	0x200001d0
 8007d34:	ffff0208 	.word	0xffff0208

08007d38 <__sread>:
 8007d38:	b510      	push	{r4, lr}
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d40:	f000 f8d6 	bl	8007ef0 <_read_r>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	bfab      	itete	ge
 8007d48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d4c:	181b      	addge	r3, r3, r0
 8007d4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d52:	bfac      	ite	ge
 8007d54:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d56:	81a3      	strhlt	r3, [r4, #12]
 8007d58:	bd10      	pop	{r4, pc}

08007d5a <__swrite>:
 8007d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5e:	461f      	mov	r7, r3
 8007d60:	898b      	ldrh	r3, [r1, #12]
 8007d62:	05db      	lsls	r3, r3, #23
 8007d64:	4605      	mov	r5, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	4616      	mov	r6, r2
 8007d6a:	d505      	bpl.n	8007d78 <__swrite+0x1e>
 8007d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d70:	2302      	movs	r3, #2
 8007d72:	2200      	movs	r2, #0
 8007d74:	f000 f8aa 	bl	8007ecc <_lseek_r>
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	4632      	mov	r2, r6
 8007d86:	463b      	mov	r3, r7
 8007d88:	4628      	mov	r0, r5
 8007d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8e:	f000 b8c1 	b.w	8007f14 <_write_r>

08007d92 <__sseek>:
 8007d92:	b510      	push	{r4, lr}
 8007d94:	460c      	mov	r4, r1
 8007d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d9a:	f000 f897 	bl	8007ecc <_lseek_r>
 8007d9e:	1c43      	adds	r3, r0, #1
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	bf15      	itete	ne
 8007da4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007da6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007daa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dae:	81a3      	strheq	r3, [r4, #12]
 8007db0:	bf18      	it	ne
 8007db2:	81a3      	strhne	r3, [r4, #12]
 8007db4:	bd10      	pop	{r4, pc}

08007db6 <__sclose>:
 8007db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dba:	f000 b877 	b.w	8007eac <_close_r>

08007dbe <memset>:
 8007dbe:	4402      	add	r2, r0
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d100      	bne.n	8007dc8 <memset+0xa>
 8007dc6:	4770      	bx	lr
 8007dc8:	f803 1b01 	strb.w	r1, [r3], #1
 8007dcc:	e7f9      	b.n	8007dc2 <memset+0x4>

08007dce <strncmp>:
 8007dce:	b510      	push	{r4, lr}
 8007dd0:	b16a      	cbz	r2, 8007dee <strncmp+0x20>
 8007dd2:	3901      	subs	r1, #1
 8007dd4:	1884      	adds	r4, r0, r2
 8007dd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dda:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d103      	bne.n	8007dea <strncmp+0x1c>
 8007de2:	42a0      	cmp	r0, r4
 8007de4:	d001      	beq.n	8007dea <strncmp+0x1c>
 8007de6:	2a00      	cmp	r2, #0
 8007de8:	d1f5      	bne.n	8007dd6 <strncmp+0x8>
 8007dea:	1ad0      	subs	r0, r2, r3
 8007dec:	bd10      	pop	{r4, pc}
 8007dee:	4610      	mov	r0, r2
 8007df0:	e7fc      	b.n	8007dec <strncmp+0x1e>
	...

08007df4 <strtok>:
 8007df4:	4b16      	ldr	r3, [pc, #88]	; (8007e50 <strtok+0x5c>)
 8007df6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007df8:	681e      	ldr	r6, [r3, #0]
 8007dfa:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	b9fc      	cbnz	r4, 8007e40 <strtok+0x4c>
 8007e00:	2050      	movs	r0, #80	; 0x50
 8007e02:	9101      	str	r1, [sp, #4]
 8007e04:	f000 fca4 	bl	8008750 <malloc>
 8007e08:	9901      	ldr	r1, [sp, #4]
 8007e0a:	6470      	str	r0, [r6, #68]	; 0x44
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	b920      	cbnz	r0, 8007e1a <strtok+0x26>
 8007e10:	4b10      	ldr	r3, [pc, #64]	; (8007e54 <strtok+0x60>)
 8007e12:	4811      	ldr	r0, [pc, #68]	; (8007e58 <strtok+0x64>)
 8007e14:	215b      	movs	r1, #91	; 0x5b
 8007e16:	f000 f8d9 	bl	8007fcc <__assert_func>
 8007e1a:	e9c0 4400 	strd	r4, r4, [r0]
 8007e1e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007e22:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007e26:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007e2a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007e2e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007e32:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007e36:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007e3a:	6184      	str	r4, [r0, #24]
 8007e3c:	7704      	strb	r4, [r0, #28]
 8007e3e:	6244      	str	r4, [r0, #36]	; 0x24
 8007e40:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8007e42:	2301      	movs	r3, #1
 8007e44:	4628      	mov	r0, r5
 8007e46:	b002      	add	sp, #8
 8007e48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e4c:	f000 b806 	b.w	8007e5c <__strtok_r>
 8007e50:	200001d0 	.word	0x200001d0
 8007e54:	0800a2f4 	.word	0x0800a2f4
 8007e58:	0800a4c9 	.word	0x0800a4c9

08007e5c <__strtok_r>:
 8007e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e5e:	b908      	cbnz	r0, 8007e64 <__strtok_r+0x8>
 8007e60:	6810      	ldr	r0, [r2, #0]
 8007e62:	b188      	cbz	r0, 8007e88 <__strtok_r+0x2c>
 8007e64:	4604      	mov	r4, r0
 8007e66:	4620      	mov	r0, r4
 8007e68:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007e6c:	460f      	mov	r7, r1
 8007e6e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007e72:	b91e      	cbnz	r6, 8007e7c <__strtok_r+0x20>
 8007e74:	b965      	cbnz	r5, 8007e90 <__strtok_r+0x34>
 8007e76:	6015      	str	r5, [r2, #0]
 8007e78:	4628      	mov	r0, r5
 8007e7a:	e005      	b.n	8007e88 <__strtok_r+0x2c>
 8007e7c:	42b5      	cmp	r5, r6
 8007e7e:	d1f6      	bne.n	8007e6e <__strtok_r+0x12>
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1f0      	bne.n	8007e66 <__strtok_r+0xa>
 8007e84:	6014      	str	r4, [r2, #0]
 8007e86:	7003      	strb	r3, [r0, #0]
 8007e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e8a:	461c      	mov	r4, r3
 8007e8c:	e00c      	b.n	8007ea8 <__strtok_r+0x4c>
 8007e8e:	b915      	cbnz	r5, 8007e96 <__strtok_r+0x3a>
 8007e90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e94:	460e      	mov	r6, r1
 8007e96:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007e9a:	42ab      	cmp	r3, r5
 8007e9c:	d1f7      	bne.n	8007e8e <__strtok_r+0x32>
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0f3      	beq.n	8007e8a <__strtok_r+0x2e>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007ea8:	6014      	str	r4, [r2, #0]
 8007eaa:	e7ed      	b.n	8007e88 <__strtok_r+0x2c>

08007eac <_close_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4d06      	ldr	r5, [pc, #24]	; (8007ec8 <_close_r+0x1c>)
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	4608      	mov	r0, r1
 8007eb6:	602b      	str	r3, [r5, #0]
 8007eb8:	f7fa fd61 	bl	800297e <_close>
 8007ebc:	1c43      	adds	r3, r0, #1
 8007ebe:	d102      	bne.n	8007ec6 <_close_r+0x1a>
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	b103      	cbz	r3, 8007ec6 <_close_r+0x1a>
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
 8007ec8:	2000078c 	.word	0x2000078c

08007ecc <_lseek_r>:
 8007ecc:	b538      	push	{r3, r4, r5, lr}
 8007ece:	4d07      	ldr	r5, [pc, #28]	; (8007eec <_lseek_r+0x20>)
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	4608      	mov	r0, r1
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	602a      	str	r2, [r5, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	f7fa fd76 	bl	80029cc <_lseek>
 8007ee0:	1c43      	adds	r3, r0, #1
 8007ee2:	d102      	bne.n	8007eea <_lseek_r+0x1e>
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	b103      	cbz	r3, 8007eea <_lseek_r+0x1e>
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
 8007eec:	2000078c 	.word	0x2000078c

08007ef0 <_read_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4d07      	ldr	r5, [pc, #28]	; (8007f10 <_read_r+0x20>)
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	4608      	mov	r0, r1
 8007ef8:	4611      	mov	r1, r2
 8007efa:	2200      	movs	r2, #0
 8007efc:	602a      	str	r2, [r5, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	f7fa fd04 	bl	800290c <_read>
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	d102      	bne.n	8007f0e <_read_r+0x1e>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	b103      	cbz	r3, 8007f0e <_read_r+0x1e>
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	2000078c 	.word	0x2000078c

08007f14 <_write_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d07      	ldr	r5, [pc, #28]	; (8007f34 <_write_r+0x20>)
 8007f18:	4604      	mov	r4, r0
 8007f1a:	4608      	mov	r0, r1
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	2200      	movs	r2, #0
 8007f20:	602a      	str	r2, [r5, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	f7fa fd0f 	bl	8002946 <_write>
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	d102      	bne.n	8007f32 <_write_r+0x1e>
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	b103      	cbz	r3, 8007f32 <_write_r+0x1e>
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	bd38      	pop	{r3, r4, r5, pc}
 8007f34:	2000078c 	.word	0x2000078c

08007f38 <__errno>:
 8007f38:	4b01      	ldr	r3, [pc, #4]	; (8007f40 <__errno+0x8>)
 8007f3a:	6818      	ldr	r0, [r3, #0]
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	200001d0 	.word	0x200001d0

08007f44 <__libc_init_array>:
 8007f44:	b570      	push	{r4, r5, r6, lr}
 8007f46:	4d0d      	ldr	r5, [pc, #52]	; (8007f7c <__libc_init_array+0x38>)
 8007f48:	4c0d      	ldr	r4, [pc, #52]	; (8007f80 <__libc_init_array+0x3c>)
 8007f4a:	1b64      	subs	r4, r4, r5
 8007f4c:	10a4      	asrs	r4, r4, #2
 8007f4e:	2600      	movs	r6, #0
 8007f50:	42a6      	cmp	r6, r4
 8007f52:	d109      	bne.n	8007f68 <__libc_init_array+0x24>
 8007f54:	4d0b      	ldr	r5, [pc, #44]	; (8007f84 <__libc_init_array+0x40>)
 8007f56:	4c0c      	ldr	r4, [pc, #48]	; (8007f88 <__libc_init_array+0x44>)
 8007f58:	f002 f842 	bl	8009fe0 <_init>
 8007f5c:	1b64      	subs	r4, r4, r5
 8007f5e:	10a4      	asrs	r4, r4, #2
 8007f60:	2600      	movs	r6, #0
 8007f62:	42a6      	cmp	r6, r4
 8007f64:	d105      	bne.n	8007f72 <__libc_init_array+0x2e>
 8007f66:	bd70      	pop	{r4, r5, r6, pc}
 8007f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f6c:	4798      	blx	r3
 8007f6e:	3601      	adds	r6, #1
 8007f70:	e7ee      	b.n	8007f50 <__libc_init_array+0xc>
 8007f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f76:	4798      	blx	r3
 8007f78:	3601      	adds	r6, #1
 8007f7a:	e7f2      	b.n	8007f62 <__libc_init_array+0x1e>
 8007f7c:	0800a770 	.word	0x0800a770
 8007f80:	0800a770 	.word	0x0800a770
 8007f84:	0800a770 	.word	0x0800a770
 8007f88:	0800a774 	.word	0x0800a774

08007f8c <__retarget_lock_init_recursive>:
 8007f8c:	4770      	bx	lr

08007f8e <__retarget_lock_acquire_recursive>:
 8007f8e:	4770      	bx	lr

08007f90 <__retarget_lock_release_recursive>:
 8007f90:	4770      	bx	lr

08007f92 <memcpy>:
 8007f92:	440a      	add	r2, r1
 8007f94:	4291      	cmp	r1, r2
 8007f96:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f9a:	d100      	bne.n	8007f9e <memcpy+0xc>
 8007f9c:	4770      	bx	lr
 8007f9e:	b510      	push	{r4, lr}
 8007fa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fa8:	4291      	cmp	r1, r2
 8007faa:	d1f9      	bne.n	8007fa0 <memcpy+0xe>
 8007fac:	bd10      	pop	{r4, pc}
	...

08007fb0 <nan>:
 8007fb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007fb8 <nan+0x8>
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	00000000 	.word	0x00000000
 8007fbc:	7ff80000 	.word	0x7ff80000

08007fc0 <nanf>:
 8007fc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007fc8 <nanf+0x8>
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	7fc00000 	.word	0x7fc00000

08007fcc <__assert_func>:
 8007fcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007fce:	4614      	mov	r4, r2
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	4b09      	ldr	r3, [pc, #36]	; (8007ff8 <__assert_func+0x2c>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	68d8      	ldr	r0, [r3, #12]
 8007fda:	b14c      	cbz	r4, 8007ff0 <__assert_func+0x24>
 8007fdc:	4b07      	ldr	r3, [pc, #28]	; (8007ffc <__assert_func+0x30>)
 8007fde:	9100      	str	r1, [sp, #0]
 8007fe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007fe4:	4906      	ldr	r1, [pc, #24]	; (8008000 <__assert_func+0x34>)
 8007fe6:	462b      	mov	r3, r5
 8007fe8:	f001 fcc8 	bl	800997c <fiprintf>
 8007fec:	f001 fd02 	bl	80099f4 <abort>
 8007ff0:	4b04      	ldr	r3, [pc, #16]	; (8008004 <__assert_func+0x38>)
 8007ff2:	461c      	mov	r4, r3
 8007ff4:	e7f3      	b.n	8007fde <__assert_func+0x12>
 8007ff6:	bf00      	nop
 8007ff8:	200001d0 	.word	0x200001d0
 8007ffc:	0800a52b 	.word	0x0800a52b
 8008000:	0800a538 	.word	0x0800a538
 8008004:	0800a566 	.word	0x0800a566

08008008 <_free_r>:
 8008008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800800a:	2900      	cmp	r1, #0
 800800c:	d044      	beq.n	8008098 <_free_r+0x90>
 800800e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008012:	9001      	str	r0, [sp, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	f1a1 0404 	sub.w	r4, r1, #4
 800801a:	bfb8      	it	lt
 800801c:	18e4      	addlt	r4, r4, r3
 800801e:	f000 fc51 	bl	80088c4 <__malloc_lock>
 8008022:	4a1e      	ldr	r2, [pc, #120]	; (800809c <_free_r+0x94>)
 8008024:	9801      	ldr	r0, [sp, #4]
 8008026:	6813      	ldr	r3, [r2, #0]
 8008028:	b933      	cbnz	r3, 8008038 <_free_r+0x30>
 800802a:	6063      	str	r3, [r4, #4]
 800802c:	6014      	str	r4, [r2, #0]
 800802e:	b003      	add	sp, #12
 8008030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008034:	f000 bc4c 	b.w	80088d0 <__malloc_unlock>
 8008038:	42a3      	cmp	r3, r4
 800803a:	d908      	bls.n	800804e <_free_r+0x46>
 800803c:	6825      	ldr	r5, [r4, #0]
 800803e:	1961      	adds	r1, r4, r5
 8008040:	428b      	cmp	r3, r1
 8008042:	bf01      	itttt	eq
 8008044:	6819      	ldreq	r1, [r3, #0]
 8008046:	685b      	ldreq	r3, [r3, #4]
 8008048:	1949      	addeq	r1, r1, r5
 800804a:	6021      	streq	r1, [r4, #0]
 800804c:	e7ed      	b.n	800802a <_free_r+0x22>
 800804e:	461a      	mov	r2, r3
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	b10b      	cbz	r3, 8008058 <_free_r+0x50>
 8008054:	42a3      	cmp	r3, r4
 8008056:	d9fa      	bls.n	800804e <_free_r+0x46>
 8008058:	6811      	ldr	r1, [r2, #0]
 800805a:	1855      	adds	r5, r2, r1
 800805c:	42a5      	cmp	r5, r4
 800805e:	d10b      	bne.n	8008078 <_free_r+0x70>
 8008060:	6824      	ldr	r4, [r4, #0]
 8008062:	4421      	add	r1, r4
 8008064:	1854      	adds	r4, r2, r1
 8008066:	42a3      	cmp	r3, r4
 8008068:	6011      	str	r1, [r2, #0]
 800806a:	d1e0      	bne.n	800802e <_free_r+0x26>
 800806c:	681c      	ldr	r4, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	6053      	str	r3, [r2, #4]
 8008072:	440c      	add	r4, r1
 8008074:	6014      	str	r4, [r2, #0]
 8008076:	e7da      	b.n	800802e <_free_r+0x26>
 8008078:	d902      	bls.n	8008080 <_free_r+0x78>
 800807a:	230c      	movs	r3, #12
 800807c:	6003      	str	r3, [r0, #0]
 800807e:	e7d6      	b.n	800802e <_free_r+0x26>
 8008080:	6825      	ldr	r5, [r4, #0]
 8008082:	1961      	adds	r1, r4, r5
 8008084:	428b      	cmp	r3, r1
 8008086:	bf04      	itt	eq
 8008088:	6819      	ldreq	r1, [r3, #0]
 800808a:	685b      	ldreq	r3, [r3, #4]
 800808c:	6063      	str	r3, [r4, #4]
 800808e:	bf04      	itt	eq
 8008090:	1949      	addeq	r1, r1, r5
 8008092:	6021      	streq	r1, [r4, #0]
 8008094:	6054      	str	r4, [r2, #4]
 8008096:	e7ca      	b.n	800802e <_free_r+0x26>
 8008098:	b003      	add	sp, #12
 800809a:	bd30      	pop	{r4, r5, pc}
 800809c:	20000794 	.word	0x20000794

080080a0 <rshift>:
 80080a0:	6903      	ldr	r3, [r0, #16]
 80080a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80080a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80080ae:	f100 0414 	add.w	r4, r0, #20
 80080b2:	dd45      	ble.n	8008140 <rshift+0xa0>
 80080b4:	f011 011f 	ands.w	r1, r1, #31
 80080b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80080bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80080c0:	d10c      	bne.n	80080dc <rshift+0x3c>
 80080c2:	f100 0710 	add.w	r7, r0, #16
 80080c6:	4629      	mov	r1, r5
 80080c8:	42b1      	cmp	r1, r6
 80080ca:	d334      	bcc.n	8008136 <rshift+0x96>
 80080cc:	1a9b      	subs	r3, r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	1eea      	subs	r2, r5, #3
 80080d2:	4296      	cmp	r6, r2
 80080d4:	bf38      	it	cc
 80080d6:	2300      	movcc	r3, #0
 80080d8:	4423      	add	r3, r4
 80080da:	e015      	b.n	8008108 <rshift+0x68>
 80080dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80080e0:	f1c1 0820 	rsb	r8, r1, #32
 80080e4:	40cf      	lsrs	r7, r1
 80080e6:	f105 0e04 	add.w	lr, r5, #4
 80080ea:	46a1      	mov	r9, r4
 80080ec:	4576      	cmp	r6, lr
 80080ee:	46f4      	mov	ip, lr
 80080f0:	d815      	bhi.n	800811e <rshift+0x7e>
 80080f2:	1a9a      	subs	r2, r3, r2
 80080f4:	0092      	lsls	r2, r2, #2
 80080f6:	3a04      	subs	r2, #4
 80080f8:	3501      	adds	r5, #1
 80080fa:	42ae      	cmp	r6, r5
 80080fc:	bf38      	it	cc
 80080fe:	2200      	movcc	r2, #0
 8008100:	18a3      	adds	r3, r4, r2
 8008102:	50a7      	str	r7, [r4, r2]
 8008104:	b107      	cbz	r7, 8008108 <rshift+0x68>
 8008106:	3304      	adds	r3, #4
 8008108:	1b1a      	subs	r2, r3, r4
 800810a:	42a3      	cmp	r3, r4
 800810c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008110:	bf08      	it	eq
 8008112:	2300      	moveq	r3, #0
 8008114:	6102      	str	r2, [r0, #16]
 8008116:	bf08      	it	eq
 8008118:	6143      	streq	r3, [r0, #20]
 800811a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800811e:	f8dc c000 	ldr.w	ip, [ip]
 8008122:	fa0c fc08 	lsl.w	ip, ip, r8
 8008126:	ea4c 0707 	orr.w	r7, ip, r7
 800812a:	f849 7b04 	str.w	r7, [r9], #4
 800812e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008132:	40cf      	lsrs	r7, r1
 8008134:	e7da      	b.n	80080ec <rshift+0x4c>
 8008136:	f851 cb04 	ldr.w	ip, [r1], #4
 800813a:	f847 cf04 	str.w	ip, [r7, #4]!
 800813e:	e7c3      	b.n	80080c8 <rshift+0x28>
 8008140:	4623      	mov	r3, r4
 8008142:	e7e1      	b.n	8008108 <rshift+0x68>

08008144 <__hexdig_fun>:
 8008144:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008148:	2b09      	cmp	r3, #9
 800814a:	d802      	bhi.n	8008152 <__hexdig_fun+0xe>
 800814c:	3820      	subs	r0, #32
 800814e:	b2c0      	uxtb	r0, r0
 8008150:	4770      	bx	lr
 8008152:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008156:	2b05      	cmp	r3, #5
 8008158:	d801      	bhi.n	800815e <__hexdig_fun+0x1a>
 800815a:	3847      	subs	r0, #71	; 0x47
 800815c:	e7f7      	b.n	800814e <__hexdig_fun+0xa>
 800815e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008162:	2b05      	cmp	r3, #5
 8008164:	d801      	bhi.n	800816a <__hexdig_fun+0x26>
 8008166:	3827      	subs	r0, #39	; 0x27
 8008168:	e7f1      	b.n	800814e <__hexdig_fun+0xa>
 800816a:	2000      	movs	r0, #0
 800816c:	4770      	bx	lr
	...

08008170 <__gethex>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	4617      	mov	r7, r2
 8008176:	680a      	ldr	r2, [r1, #0]
 8008178:	b085      	sub	sp, #20
 800817a:	f102 0b02 	add.w	fp, r2, #2
 800817e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008182:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008186:	4681      	mov	r9, r0
 8008188:	468a      	mov	sl, r1
 800818a:	9302      	str	r3, [sp, #8]
 800818c:	32fe      	adds	r2, #254	; 0xfe
 800818e:	eb02 030b 	add.w	r3, r2, fp
 8008192:	46d8      	mov	r8, fp
 8008194:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008198:	9301      	str	r3, [sp, #4]
 800819a:	2830      	cmp	r0, #48	; 0x30
 800819c:	d0f7      	beq.n	800818e <__gethex+0x1e>
 800819e:	f7ff ffd1 	bl	8008144 <__hexdig_fun>
 80081a2:	4604      	mov	r4, r0
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d138      	bne.n	800821a <__gethex+0xaa>
 80081a8:	49a7      	ldr	r1, [pc, #668]	; (8008448 <__gethex+0x2d8>)
 80081aa:	2201      	movs	r2, #1
 80081ac:	4640      	mov	r0, r8
 80081ae:	f7ff fe0e 	bl	8007dce <strncmp>
 80081b2:	4606      	mov	r6, r0
 80081b4:	2800      	cmp	r0, #0
 80081b6:	d169      	bne.n	800828c <__gethex+0x11c>
 80081b8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80081bc:	465d      	mov	r5, fp
 80081be:	f7ff ffc1 	bl	8008144 <__hexdig_fun>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d064      	beq.n	8008290 <__gethex+0x120>
 80081c6:	465a      	mov	r2, fp
 80081c8:	7810      	ldrb	r0, [r2, #0]
 80081ca:	2830      	cmp	r0, #48	; 0x30
 80081cc:	4690      	mov	r8, r2
 80081ce:	f102 0201 	add.w	r2, r2, #1
 80081d2:	d0f9      	beq.n	80081c8 <__gethex+0x58>
 80081d4:	f7ff ffb6 	bl	8008144 <__hexdig_fun>
 80081d8:	2301      	movs	r3, #1
 80081da:	fab0 f480 	clz	r4, r0
 80081de:	0964      	lsrs	r4, r4, #5
 80081e0:	465e      	mov	r6, fp
 80081e2:	9301      	str	r3, [sp, #4]
 80081e4:	4642      	mov	r2, r8
 80081e6:	4615      	mov	r5, r2
 80081e8:	3201      	adds	r2, #1
 80081ea:	7828      	ldrb	r0, [r5, #0]
 80081ec:	f7ff ffaa 	bl	8008144 <__hexdig_fun>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d1f8      	bne.n	80081e6 <__gethex+0x76>
 80081f4:	4994      	ldr	r1, [pc, #592]	; (8008448 <__gethex+0x2d8>)
 80081f6:	2201      	movs	r2, #1
 80081f8:	4628      	mov	r0, r5
 80081fa:	f7ff fde8 	bl	8007dce <strncmp>
 80081fe:	b978      	cbnz	r0, 8008220 <__gethex+0xb0>
 8008200:	b946      	cbnz	r6, 8008214 <__gethex+0xa4>
 8008202:	1c6e      	adds	r6, r5, #1
 8008204:	4632      	mov	r2, r6
 8008206:	4615      	mov	r5, r2
 8008208:	3201      	adds	r2, #1
 800820a:	7828      	ldrb	r0, [r5, #0]
 800820c:	f7ff ff9a 	bl	8008144 <__hexdig_fun>
 8008210:	2800      	cmp	r0, #0
 8008212:	d1f8      	bne.n	8008206 <__gethex+0x96>
 8008214:	1b73      	subs	r3, r6, r5
 8008216:	009e      	lsls	r6, r3, #2
 8008218:	e004      	b.n	8008224 <__gethex+0xb4>
 800821a:	2400      	movs	r4, #0
 800821c:	4626      	mov	r6, r4
 800821e:	e7e1      	b.n	80081e4 <__gethex+0x74>
 8008220:	2e00      	cmp	r6, #0
 8008222:	d1f7      	bne.n	8008214 <__gethex+0xa4>
 8008224:	782b      	ldrb	r3, [r5, #0]
 8008226:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800822a:	2b50      	cmp	r3, #80	; 0x50
 800822c:	d13d      	bne.n	80082aa <__gethex+0x13a>
 800822e:	786b      	ldrb	r3, [r5, #1]
 8008230:	2b2b      	cmp	r3, #43	; 0x2b
 8008232:	d02f      	beq.n	8008294 <__gethex+0x124>
 8008234:	2b2d      	cmp	r3, #45	; 0x2d
 8008236:	d031      	beq.n	800829c <__gethex+0x12c>
 8008238:	1c69      	adds	r1, r5, #1
 800823a:	f04f 0b00 	mov.w	fp, #0
 800823e:	7808      	ldrb	r0, [r1, #0]
 8008240:	f7ff ff80 	bl	8008144 <__hexdig_fun>
 8008244:	1e42      	subs	r2, r0, #1
 8008246:	b2d2      	uxtb	r2, r2
 8008248:	2a18      	cmp	r2, #24
 800824a:	d82e      	bhi.n	80082aa <__gethex+0x13a>
 800824c:	f1a0 0210 	sub.w	r2, r0, #16
 8008250:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008254:	f7ff ff76 	bl	8008144 <__hexdig_fun>
 8008258:	f100 3cff 	add.w	ip, r0, #4294967295
 800825c:	fa5f fc8c 	uxtb.w	ip, ip
 8008260:	f1bc 0f18 	cmp.w	ip, #24
 8008264:	d91d      	bls.n	80082a2 <__gethex+0x132>
 8008266:	f1bb 0f00 	cmp.w	fp, #0
 800826a:	d000      	beq.n	800826e <__gethex+0xfe>
 800826c:	4252      	negs	r2, r2
 800826e:	4416      	add	r6, r2
 8008270:	f8ca 1000 	str.w	r1, [sl]
 8008274:	b1dc      	cbz	r4, 80082ae <__gethex+0x13e>
 8008276:	9b01      	ldr	r3, [sp, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	bf14      	ite	ne
 800827c:	f04f 0800 	movne.w	r8, #0
 8008280:	f04f 0806 	moveq.w	r8, #6
 8008284:	4640      	mov	r0, r8
 8008286:	b005      	add	sp, #20
 8008288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828c:	4645      	mov	r5, r8
 800828e:	4626      	mov	r6, r4
 8008290:	2401      	movs	r4, #1
 8008292:	e7c7      	b.n	8008224 <__gethex+0xb4>
 8008294:	f04f 0b00 	mov.w	fp, #0
 8008298:	1ca9      	adds	r1, r5, #2
 800829a:	e7d0      	b.n	800823e <__gethex+0xce>
 800829c:	f04f 0b01 	mov.w	fp, #1
 80082a0:	e7fa      	b.n	8008298 <__gethex+0x128>
 80082a2:	230a      	movs	r3, #10
 80082a4:	fb03 0002 	mla	r0, r3, r2, r0
 80082a8:	e7d0      	b.n	800824c <__gethex+0xdc>
 80082aa:	4629      	mov	r1, r5
 80082ac:	e7e0      	b.n	8008270 <__gethex+0x100>
 80082ae:	eba5 0308 	sub.w	r3, r5, r8
 80082b2:	3b01      	subs	r3, #1
 80082b4:	4621      	mov	r1, r4
 80082b6:	2b07      	cmp	r3, #7
 80082b8:	dc0a      	bgt.n	80082d0 <__gethex+0x160>
 80082ba:	4648      	mov	r0, r9
 80082bc:	f000 fb0e 	bl	80088dc <_Balloc>
 80082c0:	4604      	mov	r4, r0
 80082c2:	b940      	cbnz	r0, 80082d6 <__gethex+0x166>
 80082c4:	4b61      	ldr	r3, [pc, #388]	; (800844c <__gethex+0x2dc>)
 80082c6:	4602      	mov	r2, r0
 80082c8:	21e4      	movs	r1, #228	; 0xe4
 80082ca:	4861      	ldr	r0, [pc, #388]	; (8008450 <__gethex+0x2e0>)
 80082cc:	f7ff fe7e 	bl	8007fcc <__assert_func>
 80082d0:	3101      	adds	r1, #1
 80082d2:	105b      	asrs	r3, r3, #1
 80082d4:	e7ef      	b.n	80082b6 <__gethex+0x146>
 80082d6:	f100 0a14 	add.w	sl, r0, #20
 80082da:	2300      	movs	r3, #0
 80082dc:	495a      	ldr	r1, [pc, #360]	; (8008448 <__gethex+0x2d8>)
 80082de:	f8cd a004 	str.w	sl, [sp, #4]
 80082e2:	469b      	mov	fp, r3
 80082e4:	45a8      	cmp	r8, r5
 80082e6:	d342      	bcc.n	800836e <__gethex+0x1fe>
 80082e8:	9801      	ldr	r0, [sp, #4]
 80082ea:	f840 bb04 	str.w	fp, [r0], #4
 80082ee:	eba0 000a 	sub.w	r0, r0, sl
 80082f2:	1080      	asrs	r0, r0, #2
 80082f4:	6120      	str	r0, [r4, #16]
 80082f6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80082fa:	4658      	mov	r0, fp
 80082fc:	f000 fbe0 	bl	8008ac0 <__hi0bits>
 8008300:	683d      	ldr	r5, [r7, #0]
 8008302:	eba8 0000 	sub.w	r0, r8, r0
 8008306:	42a8      	cmp	r0, r5
 8008308:	dd59      	ble.n	80083be <__gethex+0x24e>
 800830a:	eba0 0805 	sub.w	r8, r0, r5
 800830e:	4641      	mov	r1, r8
 8008310:	4620      	mov	r0, r4
 8008312:	f000 ff6f 	bl	80091f4 <__any_on>
 8008316:	4683      	mov	fp, r0
 8008318:	b1b8      	cbz	r0, 800834a <__gethex+0x1da>
 800831a:	f108 33ff 	add.w	r3, r8, #4294967295
 800831e:	1159      	asrs	r1, r3, #5
 8008320:	f003 021f 	and.w	r2, r3, #31
 8008324:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008328:	f04f 0b01 	mov.w	fp, #1
 800832c:	fa0b f202 	lsl.w	r2, fp, r2
 8008330:	420a      	tst	r2, r1
 8008332:	d00a      	beq.n	800834a <__gethex+0x1da>
 8008334:	455b      	cmp	r3, fp
 8008336:	dd06      	ble.n	8008346 <__gethex+0x1d6>
 8008338:	f1a8 0102 	sub.w	r1, r8, #2
 800833c:	4620      	mov	r0, r4
 800833e:	f000 ff59 	bl	80091f4 <__any_on>
 8008342:	2800      	cmp	r0, #0
 8008344:	d138      	bne.n	80083b8 <__gethex+0x248>
 8008346:	f04f 0b02 	mov.w	fp, #2
 800834a:	4641      	mov	r1, r8
 800834c:	4620      	mov	r0, r4
 800834e:	f7ff fea7 	bl	80080a0 <rshift>
 8008352:	4446      	add	r6, r8
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	42b3      	cmp	r3, r6
 8008358:	da41      	bge.n	80083de <__gethex+0x26e>
 800835a:	4621      	mov	r1, r4
 800835c:	4648      	mov	r0, r9
 800835e:	f000 fafd 	bl	800895c <_Bfree>
 8008362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008364:	2300      	movs	r3, #0
 8008366:	6013      	str	r3, [r2, #0]
 8008368:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800836c:	e78a      	b.n	8008284 <__gethex+0x114>
 800836e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008372:	2a2e      	cmp	r2, #46	; 0x2e
 8008374:	d014      	beq.n	80083a0 <__gethex+0x230>
 8008376:	2b20      	cmp	r3, #32
 8008378:	d106      	bne.n	8008388 <__gethex+0x218>
 800837a:	9b01      	ldr	r3, [sp, #4]
 800837c:	f843 bb04 	str.w	fp, [r3], #4
 8008380:	f04f 0b00 	mov.w	fp, #0
 8008384:	9301      	str	r3, [sp, #4]
 8008386:	465b      	mov	r3, fp
 8008388:	7828      	ldrb	r0, [r5, #0]
 800838a:	9303      	str	r3, [sp, #12]
 800838c:	f7ff feda 	bl	8008144 <__hexdig_fun>
 8008390:	9b03      	ldr	r3, [sp, #12]
 8008392:	f000 000f 	and.w	r0, r0, #15
 8008396:	4098      	lsls	r0, r3
 8008398:	ea4b 0b00 	orr.w	fp, fp, r0
 800839c:	3304      	adds	r3, #4
 800839e:	e7a1      	b.n	80082e4 <__gethex+0x174>
 80083a0:	45a8      	cmp	r8, r5
 80083a2:	d8e8      	bhi.n	8008376 <__gethex+0x206>
 80083a4:	2201      	movs	r2, #1
 80083a6:	4628      	mov	r0, r5
 80083a8:	9303      	str	r3, [sp, #12]
 80083aa:	f7ff fd10 	bl	8007dce <strncmp>
 80083ae:	4926      	ldr	r1, [pc, #152]	; (8008448 <__gethex+0x2d8>)
 80083b0:	9b03      	ldr	r3, [sp, #12]
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d1df      	bne.n	8008376 <__gethex+0x206>
 80083b6:	e795      	b.n	80082e4 <__gethex+0x174>
 80083b8:	f04f 0b03 	mov.w	fp, #3
 80083bc:	e7c5      	b.n	800834a <__gethex+0x1da>
 80083be:	da0b      	bge.n	80083d8 <__gethex+0x268>
 80083c0:	eba5 0800 	sub.w	r8, r5, r0
 80083c4:	4621      	mov	r1, r4
 80083c6:	4642      	mov	r2, r8
 80083c8:	4648      	mov	r0, r9
 80083ca:	f000 fce1 	bl	8008d90 <__lshift>
 80083ce:	eba6 0608 	sub.w	r6, r6, r8
 80083d2:	4604      	mov	r4, r0
 80083d4:	f100 0a14 	add.w	sl, r0, #20
 80083d8:	f04f 0b00 	mov.w	fp, #0
 80083dc:	e7ba      	b.n	8008354 <__gethex+0x1e4>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	42b3      	cmp	r3, r6
 80083e2:	dd73      	ble.n	80084cc <__gethex+0x35c>
 80083e4:	1b9e      	subs	r6, r3, r6
 80083e6:	42b5      	cmp	r5, r6
 80083e8:	dc34      	bgt.n	8008454 <__gethex+0x2e4>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d023      	beq.n	8008438 <__gethex+0x2c8>
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d025      	beq.n	8008440 <__gethex+0x2d0>
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d115      	bne.n	8008424 <__gethex+0x2b4>
 80083f8:	42b5      	cmp	r5, r6
 80083fa:	d113      	bne.n	8008424 <__gethex+0x2b4>
 80083fc:	2d01      	cmp	r5, #1
 80083fe:	d10b      	bne.n	8008418 <__gethex+0x2a8>
 8008400:	9a02      	ldr	r2, [sp, #8]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	2301      	movs	r3, #1
 8008408:	6123      	str	r3, [r4, #16]
 800840a:	f8ca 3000 	str.w	r3, [sl]
 800840e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008410:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008414:	601c      	str	r4, [r3, #0]
 8008416:	e735      	b.n	8008284 <__gethex+0x114>
 8008418:	1e69      	subs	r1, r5, #1
 800841a:	4620      	mov	r0, r4
 800841c:	f000 feea 	bl	80091f4 <__any_on>
 8008420:	2800      	cmp	r0, #0
 8008422:	d1ed      	bne.n	8008400 <__gethex+0x290>
 8008424:	4621      	mov	r1, r4
 8008426:	4648      	mov	r0, r9
 8008428:	f000 fa98 	bl	800895c <_Bfree>
 800842c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800842e:	2300      	movs	r3, #0
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008436:	e725      	b.n	8008284 <__gethex+0x114>
 8008438:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1f2      	bne.n	8008424 <__gethex+0x2b4>
 800843e:	e7df      	b.n	8008400 <__gethex+0x290>
 8008440:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1dc      	bne.n	8008400 <__gethex+0x290>
 8008446:	e7ed      	b.n	8008424 <__gethex+0x2b4>
 8008448:	0800a363 	.word	0x0800a363
 800844c:	0800a567 	.word	0x0800a567
 8008450:	0800a578 	.word	0x0800a578
 8008454:	f106 38ff 	add.w	r8, r6, #4294967295
 8008458:	f1bb 0f00 	cmp.w	fp, #0
 800845c:	d133      	bne.n	80084c6 <__gethex+0x356>
 800845e:	f1b8 0f00 	cmp.w	r8, #0
 8008462:	d004      	beq.n	800846e <__gethex+0x2fe>
 8008464:	4641      	mov	r1, r8
 8008466:	4620      	mov	r0, r4
 8008468:	f000 fec4 	bl	80091f4 <__any_on>
 800846c:	4683      	mov	fp, r0
 800846e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008472:	2301      	movs	r3, #1
 8008474:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008478:	f008 081f 	and.w	r8, r8, #31
 800847c:	fa03 f308 	lsl.w	r3, r3, r8
 8008480:	4213      	tst	r3, r2
 8008482:	4631      	mov	r1, r6
 8008484:	4620      	mov	r0, r4
 8008486:	bf18      	it	ne
 8008488:	f04b 0b02 	orrne.w	fp, fp, #2
 800848c:	1bad      	subs	r5, r5, r6
 800848e:	f7ff fe07 	bl	80080a0 <rshift>
 8008492:	687e      	ldr	r6, [r7, #4]
 8008494:	f04f 0802 	mov.w	r8, #2
 8008498:	f1bb 0f00 	cmp.w	fp, #0
 800849c:	d04a      	beq.n	8008534 <__gethex+0x3c4>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d016      	beq.n	80084d2 <__gethex+0x362>
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d018      	beq.n	80084da <__gethex+0x36a>
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d109      	bne.n	80084c0 <__gethex+0x350>
 80084ac:	f01b 0f02 	tst.w	fp, #2
 80084b0:	d006      	beq.n	80084c0 <__gethex+0x350>
 80084b2:	f8da 3000 	ldr.w	r3, [sl]
 80084b6:	ea4b 0b03 	orr.w	fp, fp, r3
 80084ba:	f01b 0f01 	tst.w	fp, #1
 80084be:	d10f      	bne.n	80084e0 <__gethex+0x370>
 80084c0:	f048 0810 	orr.w	r8, r8, #16
 80084c4:	e036      	b.n	8008534 <__gethex+0x3c4>
 80084c6:	f04f 0b01 	mov.w	fp, #1
 80084ca:	e7d0      	b.n	800846e <__gethex+0x2fe>
 80084cc:	f04f 0801 	mov.w	r8, #1
 80084d0:	e7e2      	b.n	8008498 <__gethex+0x328>
 80084d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084d4:	f1c3 0301 	rsb	r3, r3, #1
 80084d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80084da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d0ef      	beq.n	80084c0 <__gethex+0x350>
 80084e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80084e4:	f104 0214 	add.w	r2, r4, #20
 80084e8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80084f2:	2300      	movs	r3, #0
 80084f4:	4694      	mov	ip, r2
 80084f6:	f852 1b04 	ldr.w	r1, [r2], #4
 80084fa:	f1b1 3fff 	cmp.w	r1, #4294967295
 80084fe:	d01e      	beq.n	800853e <__gethex+0x3ce>
 8008500:	3101      	adds	r1, #1
 8008502:	f8cc 1000 	str.w	r1, [ip]
 8008506:	f1b8 0f02 	cmp.w	r8, #2
 800850a:	f104 0214 	add.w	r2, r4, #20
 800850e:	d13d      	bne.n	800858c <__gethex+0x41c>
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	3b01      	subs	r3, #1
 8008514:	42ab      	cmp	r3, r5
 8008516:	d10b      	bne.n	8008530 <__gethex+0x3c0>
 8008518:	1169      	asrs	r1, r5, #5
 800851a:	2301      	movs	r3, #1
 800851c:	f005 051f 	and.w	r5, r5, #31
 8008520:	fa03 f505 	lsl.w	r5, r3, r5
 8008524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008528:	421d      	tst	r5, r3
 800852a:	bf18      	it	ne
 800852c:	f04f 0801 	movne.w	r8, #1
 8008530:	f048 0820 	orr.w	r8, r8, #32
 8008534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008536:	601c      	str	r4, [r3, #0]
 8008538:	9b02      	ldr	r3, [sp, #8]
 800853a:	601e      	str	r6, [r3, #0]
 800853c:	e6a2      	b.n	8008284 <__gethex+0x114>
 800853e:	4290      	cmp	r0, r2
 8008540:	f842 3c04 	str.w	r3, [r2, #-4]
 8008544:	d8d6      	bhi.n	80084f4 <__gethex+0x384>
 8008546:	68a2      	ldr	r2, [r4, #8]
 8008548:	4593      	cmp	fp, r2
 800854a:	db17      	blt.n	800857c <__gethex+0x40c>
 800854c:	6861      	ldr	r1, [r4, #4]
 800854e:	4648      	mov	r0, r9
 8008550:	3101      	adds	r1, #1
 8008552:	f000 f9c3 	bl	80088dc <_Balloc>
 8008556:	4682      	mov	sl, r0
 8008558:	b918      	cbnz	r0, 8008562 <__gethex+0x3f2>
 800855a:	4b1b      	ldr	r3, [pc, #108]	; (80085c8 <__gethex+0x458>)
 800855c:	4602      	mov	r2, r0
 800855e:	2184      	movs	r1, #132	; 0x84
 8008560:	e6b3      	b.n	80082ca <__gethex+0x15a>
 8008562:	6922      	ldr	r2, [r4, #16]
 8008564:	3202      	adds	r2, #2
 8008566:	f104 010c 	add.w	r1, r4, #12
 800856a:	0092      	lsls	r2, r2, #2
 800856c:	300c      	adds	r0, #12
 800856e:	f7ff fd10 	bl	8007f92 <memcpy>
 8008572:	4621      	mov	r1, r4
 8008574:	4648      	mov	r0, r9
 8008576:	f000 f9f1 	bl	800895c <_Bfree>
 800857a:	4654      	mov	r4, sl
 800857c:	6922      	ldr	r2, [r4, #16]
 800857e:	1c51      	adds	r1, r2, #1
 8008580:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008584:	6121      	str	r1, [r4, #16]
 8008586:	2101      	movs	r1, #1
 8008588:	6151      	str	r1, [r2, #20]
 800858a:	e7bc      	b.n	8008506 <__gethex+0x396>
 800858c:	6921      	ldr	r1, [r4, #16]
 800858e:	4559      	cmp	r1, fp
 8008590:	dd0b      	ble.n	80085aa <__gethex+0x43a>
 8008592:	2101      	movs	r1, #1
 8008594:	4620      	mov	r0, r4
 8008596:	f7ff fd83 	bl	80080a0 <rshift>
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	3601      	adds	r6, #1
 800859e:	42b3      	cmp	r3, r6
 80085a0:	f6ff aedb 	blt.w	800835a <__gethex+0x1ea>
 80085a4:	f04f 0801 	mov.w	r8, #1
 80085a8:	e7c2      	b.n	8008530 <__gethex+0x3c0>
 80085aa:	f015 051f 	ands.w	r5, r5, #31
 80085ae:	d0f9      	beq.n	80085a4 <__gethex+0x434>
 80085b0:	9b01      	ldr	r3, [sp, #4]
 80085b2:	441a      	add	r2, r3
 80085b4:	f1c5 0520 	rsb	r5, r5, #32
 80085b8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80085bc:	f000 fa80 	bl	8008ac0 <__hi0bits>
 80085c0:	42a8      	cmp	r0, r5
 80085c2:	dbe6      	blt.n	8008592 <__gethex+0x422>
 80085c4:	e7ee      	b.n	80085a4 <__gethex+0x434>
 80085c6:	bf00      	nop
 80085c8:	0800a567 	.word	0x0800a567

080085cc <L_shift>:
 80085cc:	f1c2 0208 	rsb	r2, r2, #8
 80085d0:	0092      	lsls	r2, r2, #2
 80085d2:	b570      	push	{r4, r5, r6, lr}
 80085d4:	f1c2 0620 	rsb	r6, r2, #32
 80085d8:	6843      	ldr	r3, [r0, #4]
 80085da:	6804      	ldr	r4, [r0, #0]
 80085dc:	fa03 f506 	lsl.w	r5, r3, r6
 80085e0:	432c      	orrs	r4, r5
 80085e2:	40d3      	lsrs	r3, r2
 80085e4:	6004      	str	r4, [r0, #0]
 80085e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80085ea:	4288      	cmp	r0, r1
 80085ec:	d3f4      	bcc.n	80085d8 <L_shift+0xc>
 80085ee:	bd70      	pop	{r4, r5, r6, pc}

080085f0 <__match>:
 80085f0:	b530      	push	{r4, r5, lr}
 80085f2:	6803      	ldr	r3, [r0, #0]
 80085f4:	3301      	adds	r3, #1
 80085f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085fa:	b914      	cbnz	r4, 8008602 <__match+0x12>
 80085fc:	6003      	str	r3, [r0, #0]
 80085fe:	2001      	movs	r0, #1
 8008600:	bd30      	pop	{r4, r5, pc}
 8008602:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008606:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800860a:	2d19      	cmp	r5, #25
 800860c:	bf98      	it	ls
 800860e:	3220      	addls	r2, #32
 8008610:	42a2      	cmp	r2, r4
 8008612:	d0f0      	beq.n	80085f6 <__match+0x6>
 8008614:	2000      	movs	r0, #0
 8008616:	e7f3      	b.n	8008600 <__match+0x10>

08008618 <__hexnan>:
 8008618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	680b      	ldr	r3, [r1, #0]
 800861e:	6801      	ldr	r1, [r0, #0]
 8008620:	115e      	asrs	r6, r3, #5
 8008622:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008626:	f013 031f 	ands.w	r3, r3, #31
 800862a:	b087      	sub	sp, #28
 800862c:	bf18      	it	ne
 800862e:	3604      	addne	r6, #4
 8008630:	2500      	movs	r5, #0
 8008632:	1f37      	subs	r7, r6, #4
 8008634:	4682      	mov	sl, r0
 8008636:	4690      	mov	r8, r2
 8008638:	9301      	str	r3, [sp, #4]
 800863a:	f846 5c04 	str.w	r5, [r6, #-4]
 800863e:	46b9      	mov	r9, r7
 8008640:	463c      	mov	r4, r7
 8008642:	9502      	str	r5, [sp, #8]
 8008644:	46ab      	mov	fp, r5
 8008646:	784a      	ldrb	r2, [r1, #1]
 8008648:	1c4b      	adds	r3, r1, #1
 800864a:	9303      	str	r3, [sp, #12]
 800864c:	b342      	cbz	r2, 80086a0 <__hexnan+0x88>
 800864e:	4610      	mov	r0, r2
 8008650:	9105      	str	r1, [sp, #20]
 8008652:	9204      	str	r2, [sp, #16]
 8008654:	f7ff fd76 	bl	8008144 <__hexdig_fun>
 8008658:	2800      	cmp	r0, #0
 800865a:	d14f      	bne.n	80086fc <__hexnan+0xe4>
 800865c:	9a04      	ldr	r2, [sp, #16]
 800865e:	9905      	ldr	r1, [sp, #20]
 8008660:	2a20      	cmp	r2, #32
 8008662:	d818      	bhi.n	8008696 <__hexnan+0x7e>
 8008664:	9b02      	ldr	r3, [sp, #8]
 8008666:	459b      	cmp	fp, r3
 8008668:	dd13      	ble.n	8008692 <__hexnan+0x7a>
 800866a:	454c      	cmp	r4, r9
 800866c:	d206      	bcs.n	800867c <__hexnan+0x64>
 800866e:	2d07      	cmp	r5, #7
 8008670:	dc04      	bgt.n	800867c <__hexnan+0x64>
 8008672:	462a      	mov	r2, r5
 8008674:	4649      	mov	r1, r9
 8008676:	4620      	mov	r0, r4
 8008678:	f7ff ffa8 	bl	80085cc <L_shift>
 800867c:	4544      	cmp	r4, r8
 800867e:	d950      	bls.n	8008722 <__hexnan+0x10a>
 8008680:	2300      	movs	r3, #0
 8008682:	f1a4 0904 	sub.w	r9, r4, #4
 8008686:	f844 3c04 	str.w	r3, [r4, #-4]
 800868a:	f8cd b008 	str.w	fp, [sp, #8]
 800868e:	464c      	mov	r4, r9
 8008690:	461d      	mov	r5, r3
 8008692:	9903      	ldr	r1, [sp, #12]
 8008694:	e7d7      	b.n	8008646 <__hexnan+0x2e>
 8008696:	2a29      	cmp	r2, #41	; 0x29
 8008698:	d155      	bne.n	8008746 <__hexnan+0x12e>
 800869a:	3102      	adds	r1, #2
 800869c:	f8ca 1000 	str.w	r1, [sl]
 80086a0:	f1bb 0f00 	cmp.w	fp, #0
 80086a4:	d04f      	beq.n	8008746 <__hexnan+0x12e>
 80086a6:	454c      	cmp	r4, r9
 80086a8:	d206      	bcs.n	80086b8 <__hexnan+0xa0>
 80086aa:	2d07      	cmp	r5, #7
 80086ac:	dc04      	bgt.n	80086b8 <__hexnan+0xa0>
 80086ae:	462a      	mov	r2, r5
 80086b0:	4649      	mov	r1, r9
 80086b2:	4620      	mov	r0, r4
 80086b4:	f7ff ff8a 	bl	80085cc <L_shift>
 80086b8:	4544      	cmp	r4, r8
 80086ba:	d934      	bls.n	8008726 <__hexnan+0x10e>
 80086bc:	f1a8 0204 	sub.w	r2, r8, #4
 80086c0:	4623      	mov	r3, r4
 80086c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80086c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80086ca:	429f      	cmp	r7, r3
 80086cc:	d2f9      	bcs.n	80086c2 <__hexnan+0xaa>
 80086ce:	1b3b      	subs	r3, r7, r4
 80086d0:	f023 0303 	bic.w	r3, r3, #3
 80086d4:	3304      	adds	r3, #4
 80086d6:	3e03      	subs	r6, #3
 80086d8:	3401      	adds	r4, #1
 80086da:	42a6      	cmp	r6, r4
 80086dc:	bf38      	it	cc
 80086de:	2304      	movcc	r3, #4
 80086e0:	4443      	add	r3, r8
 80086e2:	2200      	movs	r2, #0
 80086e4:	f843 2b04 	str.w	r2, [r3], #4
 80086e8:	429f      	cmp	r7, r3
 80086ea:	d2fb      	bcs.n	80086e4 <__hexnan+0xcc>
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	b91b      	cbnz	r3, 80086f8 <__hexnan+0xe0>
 80086f0:	4547      	cmp	r7, r8
 80086f2:	d126      	bne.n	8008742 <__hexnan+0x12a>
 80086f4:	2301      	movs	r3, #1
 80086f6:	603b      	str	r3, [r7, #0]
 80086f8:	2005      	movs	r0, #5
 80086fa:	e025      	b.n	8008748 <__hexnan+0x130>
 80086fc:	3501      	adds	r5, #1
 80086fe:	2d08      	cmp	r5, #8
 8008700:	f10b 0b01 	add.w	fp, fp, #1
 8008704:	dd06      	ble.n	8008714 <__hexnan+0xfc>
 8008706:	4544      	cmp	r4, r8
 8008708:	d9c3      	bls.n	8008692 <__hexnan+0x7a>
 800870a:	2300      	movs	r3, #0
 800870c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008710:	2501      	movs	r5, #1
 8008712:	3c04      	subs	r4, #4
 8008714:	6822      	ldr	r2, [r4, #0]
 8008716:	f000 000f 	and.w	r0, r0, #15
 800871a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800871e:	6020      	str	r0, [r4, #0]
 8008720:	e7b7      	b.n	8008692 <__hexnan+0x7a>
 8008722:	2508      	movs	r5, #8
 8008724:	e7b5      	b.n	8008692 <__hexnan+0x7a>
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d0df      	beq.n	80086ec <__hexnan+0xd4>
 800872c:	f1c3 0320 	rsb	r3, r3, #32
 8008730:	f04f 32ff 	mov.w	r2, #4294967295
 8008734:	40da      	lsrs	r2, r3
 8008736:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800873a:	4013      	ands	r3, r2
 800873c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008740:	e7d4      	b.n	80086ec <__hexnan+0xd4>
 8008742:	3f04      	subs	r7, #4
 8008744:	e7d2      	b.n	80086ec <__hexnan+0xd4>
 8008746:	2004      	movs	r0, #4
 8008748:	b007      	add	sp, #28
 800874a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008750 <malloc>:
 8008750:	4b02      	ldr	r3, [pc, #8]	; (800875c <malloc+0xc>)
 8008752:	4601      	mov	r1, r0
 8008754:	6818      	ldr	r0, [r3, #0]
 8008756:	f000 b823 	b.w	80087a0 <_malloc_r>
 800875a:	bf00      	nop
 800875c:	200001d0 	.word	0x200001d0

08008760 <sbrk_aligned>:
 8008760:	b570      	push	{r4, r5, r6, lr}
 8008762:	4e0e      	ldr	r6, [pc, #56]	; (800879c <sbrk_aligned+0x3c>)
 8008764:	460c      	mov	r4, r1
 8008766:	6831      	ldr	r1, [r6, #0]
 8008768:	4605      	mov	r5, r0
 800876a:	b911      	cbnz	r1, 8008772 <sbrk_aligned+0x12>
 800876c:	f001 f932 	bl	80099d4 <_sbrk_r>
 8008770:	6030      	str	r0, [r6, #0]
 8008772:	4621      	mov	r1, r4
 8008774:	4628      	mov	r0, r5
 8008776:	f001 f92d 	bl	80099d4 <_sbrk_r>
 800877a:	1c43      	adds	r3, r0, #1
 800877c:	d00a      	beq.n	8008794 <sbrk_aligned+0x34>
 800877e:	1cc4      	adds	r4, r0, #3
 8008780:	f024 0403 	bic.w	r4, r4, #3
 8008784:	42a0      	cmp	r0, r4
 8008786:	d007      	beq.n	8008798 <sbrk_aligned+0x38>
 8008788:	1a21      	subs	r1, r4, r0
 800878a:	4628      	mov	r0, r5
 800878c:	f001 f922 	bl	80099d4 <_sbrk_r>
 8008790:	3001      	adds	r0, #1
 8008792:	d101      	bne.n	8008798 <sbrk_aligned+0x38>
 8008794:	f04f 34ff 	mov.w	r4, #4294967295
 8008798:	4620      	mov	r0, r4
 800879a:	bd70      	pop	{r4, r5, r6, pc}
 800879c:	20000798 	.word	0x20000798

080087a0 <_malloc_r>:
 80087a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087a4:	1ccd      	adds	r5, r1, #3
 80087a6:	f025 0503 	bic.w	r5, r5, #3
 80087aa:	3508      	adds	r5, #8
 80087ac:	2d0c      	cmp	r5, #12
 80087ae:	bf38      	it	cc
 80087b0:	250c      	movcc	r5, #12
 80087b2:	2d00      	cmp	r5, #0
 80087b4:	4607      	mov	r7, r0
 80087b6:	db01      	blt.n	80087bc <_malloc_r+0x1c>
 80087b8:	42a9      	cmp	r1, r5
 80087ba:	d905      	bls.n	80087c8 <_malloc_r+0x28>
 80087bc:	230c      	movs	r3, #12
 80087be:	603b      	str	r3, [r7, #0]
 80087c0:	2600      	movs	r6, #0
 80087c2:	4630      	mov	r0, r6
 80087c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800889c <_malloc_r+0xfc>
 80087cc:	f000 f87a 	bl	80088c4 <__malloc_lock>
 80087d0:	f8d8 3000 	ldr.w	r3, [r8]
 80087d4:	461c      	mov	r4, r3
 80087d6:	bb5c      	cbnz	r4, 8008830 <_malloc_r+0x90>
 80087d8:	4629      	mov	r1, r5
 80087da:	4638      	mov	r0, r7
 80087dc:	f7ff ffc0 	bl	8008760 <sbrk_aligned>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	4604      	mov	r4, r0
 80087e4:	d155      	bne.n	8008892 <_malloc_r+0xf2>
 80087e6:	f8d8 4000 	ldr.w	r4, [r8]
 80087ea:	4626      	mov	r6, r4
 80087ec:	2e00      	cmp	r6, #0
 80087ee:	d145      	bne.n	800887c <_malloc_r+0xdc>
 80087f0:	2c00      	cmp	r4, #0
 80087f2:	d048      	beq.n	8008886 <_malloc_r+0xe6>
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	4631      	mov	r1, r6
 80087f8:	4638      	mov	r0, r7
 80087fa:	eb04 0903 	add.w	r9, r4, r3
 80087fe:	f001 f8e9 	bl	80099d4 <_sbrk_r>
 8008802:	4581      	cmp	r9, r0
 8008804:	d13f      	bne.n	8008886 <_malloc_r+0xe6>
 8008806:	6821      	ldr	r1, [r4, #0]
 8008808:	1a6d      	subs	r5, r5, r1
 800880a:	4629      	mov	r1, r5
 800880c:	4638      	mov	r0, r7
 800880e:	f7ff ffa7 	bl	8008760 <sbrk_aligned>
 8008812:	3001      	adds	r0, #1
 8008814:	d037      	beq.n	8008886 <_malloc_r+0xe6>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	442b      	add	r3, r5
 800881a:	6023      	str	r3, [r4, #0]
 800881c:	f8d8 3000 	ldr.w	r3, [r8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d038      	beq.n	8008896 <_malloc_r+0xf6>
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	42a2      	cmp	r2, r4
 8008828:	d12b      	bne.n	8008882 <_malloc_r+0xe2>
 800882a:	2200      	movs	r2, #0
 800882c:	605a      	str	r2, [r3, #4]
 800882e:	e00f      	b.n	8008850 <_malloc_r+0xb0>
 8008830:	6822      	ldr	r2, [r4, #0]
 8008832:	1b52      	subs	r2, r2, r5
 8008834:	d41f      	bmi.n	8008876 <_malloc_r+0xd6>
 8008836:	2a0b      	cmp	r2, #11
 8008838:	d917      	bls.n	800886a <_malloc_r+0xca>
 800883a:	1961      	adds	r1, r4, r5
 800883c:	42a3      	cmp	r3, r4
 800883e:	6025      	str	r5, [r4, #0]
 8008840:	bf18      	it	ne
 8008842:	6059      	strne	r1, [r3, #4]
 8008844:	6863      	ldr	r3, [r4, #4]
 8008846:	bf08      	it	eq
 8008848:	f8c8 1000 	streq.w	r1, [r8]
 800884c:	5162      	str	r2, [r4, r5]
 800884e:	604b      	str	r3, [r1, #4]
 8008850:	4638      	mov	r0, r7
 8008852:	f104 060b 	add.w	r6, r4, #11
 8008856:	f000 f83b 	bl	80088d0 <__malloc_unlock>
 800885a:	f026 0607 	bic.w	r6, r6, #7
 800885e:	1d23      	adds	r3, r4, #4
 8008860:	1af2      	subs	r2, r6, r3
 8008862:	d0ae      	beq.n	80087c2 <_malloc_r+0x22>
 8008864:	1b9b      	subs	r3, r3, r6
 8008866:	50a3      	str	r3, [r4, r2]
 8008868:	e7ab      	b.n	80087c2 <_malloc_r+0x22>
 800886a:	42a3      	cmp	r3, r4
 800886c:	6862      	ldr	r2, [r4, #4]
 800886e:	d1dd      	bne.n	800882c <_malloc_r+0x8c>
 8008870:	f8c8 2000 	str.w	r2, [r8]
 8008874:	e7ec      	b.n	8008850 <_malloc_r+0xb0>
 8008876:	4623      	mov	r3, r4
 8008878:	6864      	ldr	r4, [r4, #4]
 800887a:	e7ac      	b.n	80087d6 <_malloc_r+0x36>
 800887c:	4634      	mov	r4, r6
 800887e:	6876      	ldr	r6, [r6, #4]
 8008880:	e7b4      	b.n	80087ec <_malloc_r+0x4c>
 8008882:	4613      	mov	r3, r2
 8008884:	e7cc      	b.n	8008820 <_malloc_r+0x80>
 8008886:	230c      	movs	r3, #12
 8008888:	603b      	str	r3, [r7, #0]
 800888a:	4638      	mov	r0, r7
 800888c:	f000 f820 	bl	80088d0 <__malloc_unlock>
 8008890:	e797      	b.n	80087c2 <_malloc_r+0x22>
 8008892:	6025      	str	r5, [r4, #0]
 8008894:	e7dc      	b.n	8008850 <_malloc_r+0xb0>
 8008896:	605b      	str	r3, [r3, #4]
 8008898:	deff      	udf	#255	; 0xff
 800889a:	bf00      	nop
 800889c:	20000794 	.word	0x20000794

080088a0 <__ascii_mbtowc>:
 80088a0:	b082      	sub	sp, #8
 80088a2:	b901      	cbnz	r1, 80088a6 <__ascii_mbtowc+0x6>
 80088a4:	a901      	add	r1, sp, #4
 80088a6:	b142      	cbz	r2, 80088ba <__ascii_mbtowc+0x1a>
 80088a8:	b14b      	cbz	r3, 80088be <__ascii_mbtowc+0x1e>
 80088aa:	7813      	ldrb	r3, [r2, #0]
 80088ac:	600b      	str	r3, [r1, #0]
 80088ae:	7812      	ldrb	r2, [r2, #0]
 80088b0:	1e10      	subs	r0, r2, #0
 80088b2:	bf18      	it	ne
 80088b4:	2001      	movne	r0, #1
 80088b6:	b002      	add	sp, #8
 80088b8:	4770      	bx	lr
 80088ba:	4610      	mov	r0, r2
 80088bc:	e7fb      	b.n	80088b6 <__ascii_mbtowc+0x16>
 80088be:	f06f 0001 	mvn.w	r0, #1
 80088c2:	e7f8      	b.n	80088b6 <__ascii_mbtowc+0x16>

080088c4 <__malloc_lock>:
 80088c4:	4801      	ldr	r0, [pc, #4]	; (80088cc <__malloc_lock+0x8>)
 80088c6:	f7ff bb62 	b.w	8007f8e <__retarget_lock_acquire_recursive>
 80088ca:	bf00      	nop
 80088cc:	20000790 	.word	0x20000790

080088d0 <__malloc_unlock>:
 80088d0:	4801      	ldr	r0, [pc, #4]	; (80088d8 <__malloc_unlock+0x8>)
 80088d2:	f7ff bb5d 	b.w	8007f90 <__retarget_lock_release_recursive>
 80088d6:	bf00      	nop
 80088d8:	20000790 	.word	0x20000790

080088dc <_Balloc>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	69c6      	ldr	r6, [r0, #28]
 80088e0:	4604      	mov	r4, r0
 80088e2:	460d      	mov	r5, r1
 80088e4:	b976      	cbnz	r6, 8008904 <_Balloc+0x28>
 80088e6:	2010      	movs	r0, #16
 80088e8:	f7ff ff32 	bl	8008750 <malloc>
 80088ec:	4602      	mov	r2, r0
 80088ee:	61e0      	str	r0, [r4, #28]
 80088f0:	b920      	cbnz	r0, 80088fc <_Balloc+0x20>
 80088f2:	4b18      	ldr	r3, [pc, #96]	; (8008954 <_Balloc+0x78>)
 80088f4:	4818      	ldr	r0, [pc, #96]	; (8008958 <_Balloc+0x7c>)
 80088f6:	216b      	movs	r1, #107	; 0x6b
 80088f8:	f7ff fb68 	bl	8007fcc <__assert_func>
 80088fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008900:	6006      	str	r6, [r0, #0]
 8008902:	60c6      	str	r6, [r0, #12]
 8008904:	69e6      	ldr	r6, [r4, #28]
 8008906:	68f3      	ldr	r3, [r6, #12]
 8008908:	b183      	cbz	r3, 800892c <_Balloc+0x50>
 800890a:	69e3      	ldr	r3, [r4, #28]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008912:	b9b8      	cbnz	r0, 8008944 <_Balloc+0x68>
 8008914:	2101      	movs	r1, #1
 8008916:	fa01 f605 	lsl.w	r6, r1, r5
 800891a:	1d72      	adds	r2, r6, #5
 800891c:	0092      	lsls	r2, r2, #2
 800891e:	4620      	mov	r0, r4
 8008920:	f001 f86f 	bl	8009a02 <_calloc_r>
 8008924:	b160      	cbz	r0, 8008940 <_Balloc+0x64>
 8008926:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800892a:	e00e      	b.n	800894a <_Balloc+0x6e>
 800892c:	2221      	movs	r2, #33	; 0x21
 800892e:	2104      	movs	r1, #4
 8008930:	4620      	mov	r0, r4
 8008932:	f001 f866 	bl	8009a02 <_calloc_r>
 8008936:	69e3      	ldr	r3, [r4, #28]
 8008938:	60f0      	str	r0, [r6, #12]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1e4      	bne.n	800890a <_Balloc+0x2e>
 8008940:	2000      	movs	r0, #0
 8008942:	bd70      	pop	{r4, r5, r6, pc}
 8008944:	6802      	ldr	r2, [r0, #0]
 8008946:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800894a:	2300      	movs	r3, #0
 800894c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008950:	e7f7      	b.n	8008942 <_Balloc+0x66>
 8008952:	bf00      	nop
 8008954:	0800a2f4 	.word	0x0800a2f4
 8008958:	0800a5d8 	.word	0x0800a5d8

0800895c <_Bfree>:
 800895c:	b570      	push	{r4, r5, r6, lr}
 800895e:	69c6      	ldr	r6, [r0, #28]
 8008960:	4605      	mov	r5, r0
 8008962:	460c      	mov	r4, r1
 8008964:	b976      	cbnz	r6, 8008984 <_Bfree+0x28>
 8008966:	2010      	movs	r0, #16
 8008968:	f7ff fef2 	bl	8008750 <malloc>
 800896c:	4602      	mov	r2, r0
 800896e:	61e8      	str	r0, [r5, #28]
 8008970:	b920      	cbnz	r0, 800897c <_Bfree+0x20>
 8008972:	4b09      	ldr	r3, [pc, #36]	; (8008998 <_Bfree+0x3c>)
 8008974:	4809      	ldr	r0, [pc, #36]	; (800899c <_Bfree+0x40>)
 8008976:	218f      	movs	r1, #143	; 0x8f
 8008978:	f7ff fb28 	bl	8007fcc <__assert_func>
 800897c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008980:	6006      	str	r6, [r0, #0]
 8008982:	60c6      	str	r6, [r0, #12]
 8008984:	b13c      	cbz	r4, 8008996 <_Bfree+0x3a>
 8008986:	69eb      	ldr	r3, [r5, #28]
 8008988:	6862      	ldr	r2, [r4, #4]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008990:	6021      	str	r1, [r4, #0]
 8008992:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008996:	bd70      	pop	{r4, r5, r6, pc}
 8008998:	0800a2f4 	.word	0x0800a2f4
 800899c:	0800a5d8 	.word	0x0800a5d8

080089a0 <__multadd>:
 80089a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a4:	690d      	ldr	r5, [r1, #16]
 80089a6:	4607      	mov	r7, r0
 80089a8:	460c      	mov	r4, r1
 80089aa:	461e      	mov	r6, r3
 80089ac:	f101 0c14 	add.w	ip, r1, #20
 80089b0:	2000      	movs	r0, #0
 80089b2:	f8dc 3000 	ldr.w	r3, [ip]
 80089b6:	b299      	uxth	r1, r3
 80089b8:	fb02 6101 	mla	r1, r2, r1, r6
 80089bc:	0c1e      	lsrs	r6, r3, #16
 80089be:	0c0b      	lsrs	r3, r1, #16
 80089c0:	fb02 3306 	mla	r3, r2, r6, r3
 80089c4:	b289      	uxth	r1, r1
 80089c6:	3001      	adds	r0, #1
 80089c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80089cc:	4285      	cmp	r5, r0
 80089ce:	f84c 1b04 	str.w	r1, [ip], #4
 80089d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089d6:	dcec      	bgt.n	80089b2 <__multadd+0x12>
 80089d8:	b30e      	cbz	r6, 8008a1e <__multadd+0x7e>
 80089da:	68a3      	ldr	r3, [r4, #8]
 80089dc:	42ab      	cmp	r3, r5
 80089de:	dc19      	bgt.n	8008a14 <__multadd+0x74>
 80089e0:	6861      	ldr	r1, [r4, #4]
 80089e2:	4638      	mov	r0, r7
 80089e4:	3101      	adds	r1, #1
 80089e6:	f7ff ff79 	bl	80088dc <_Balloc>
 80089ea:	4680      	mov	r8, r0
 80089ec:	b928      	cbnz	r0, 80089fa <__multadd+0x5a>
 80089ee:	4602      	mov	r2, r0
 80089f0:	4b0c      	ldr	r3, [pc, #48]	; (8008a24 <__multadd+0x84>)
 80089f2:	480d      	ldr	r0, [pc, #52]	; (8008a28 <__multadd+0x88>)
 80089f4:	21ba      	movs	r1, #186	; 0xba
 80089f6:	f7ff fae9 	bl	8007fcc <__assert_func>
 80089fa:	6922      	ldr	r2, [r4, #16]
 80089fc:	3202      	adds	r2, #2
 80089fe:	f104 010c 	add.w	r1, r4, #12
 8008a02:	0092      	lsls	r2, r2, #2
 8008a04:	300c      	adds	r0, #12
 8008a06:	f7ff fac4 	bl	8007f92 <memcpy>
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4638      	mov	r0, r7
 8008a0e:	f7ff ffa5 	bl	800895c <_Bfree>
 8008a12:	4644      	mov	r4, r8
 8008a14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a18:	3501      	adds	r5, #1
 8008a1a:	615e      	str	r6, [r3, #20]
 8008a1c:	6125      	str	r5, [r4, #16]
 8008a1e:	4620      	mov	r0, r4
 8008a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a24:	0800a567 	.word	0x0800a567
 8008a28:	0800a5d8 	.word	0x0800a5d8

08008a2c <__s2b>:
 8008a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a30:	460c      	mov	r4, r1
 8008a32:	4615      	mov	r5, r2
 8008a34:	461f      	mov	r7, r3
 8008a36:	2209      	movs	r2, #9
 8008a38:	3308      	adds	r3, #8
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a40:	2100      	movs	r1, #0
 8008a42:	2201      	movs	r2, #1
 8008a44:	429a      	cmp	r2, r3
 8008a46:	db09      	blt.n	8008a5c <__s2b+0x30>
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f7ff ff47 	bl	80088dc <_Balloc>
 8008a4e:	b940      	cbnz	r0, 8008a62 <__s2b+0x36>
 8008a50:	4602      	mov	r2, r0
 8008a52:	4b19      	ldr	r3, [pc, #100]	; (8008ab8 <__s2b+0x8c>)
 8008a54:	4819      	ldr	r0, [pc, #100]	; (8008abc <__s2b+0x90>)
 8008a56:	21d3      	movs	r1, #211	; 0xd3
 8008a58:	f7ff fab8 	bl	8007fcc <__assert_func>
 8008a5c:	0052      	lsls	r2, r2, #1
 8008a5e:	3101      	adds	r1, #1
 8008a60:	e7f0      	b.n	8008a44 <__s2b+0x18>
 8008a62:	9b08      	ldr	r3, [sp, #32]
 8008a64:	6143      	str	r3, [r0, #20]
 8008a66:	2d09      	cmp	r5, #9
 8008a68:	f04f 0301 	mov.w	r3, #1
 8008a6c:	6103      	str	r3, [r0, #16]
 8008a6e:	dd16      	ble.n	8008a9e <__s2b+0x72>
 8008a70:	f104 0909 	add.w	r9, r4, #9
 8008a74:	46c8      	mov	r8, r9
 8008a76:	442c      	add	r4, r5
 8008a78:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008a7c:	4601      	mov	r1, r0
 8008a7e:	3b30      	subs	r3, #48	; 0x30
 8008a80:	220a      	movs	r2, #10
 8008a82:	4630      	mov	r0, r6
 8008a84:	f7ff ff8c 	bl	80089a0 <__multadd>
 8008a88:	45a0      	cmp	r8, r4
 8008a8a:	d1f5      	bne.n	8008a78 <__s2b+0x4c>
 8008a8c:	f1a5 0408 	sub.w	r4, r5, #8
 8008a90:	444c      	add	r4, r9
 8008a92:	1b2d      	subs	r5, r5, r4
 8008a94:	1963      	adds	r3, r4, r5
 8008a96:	42bb      	cmp	r3, r7
 8008a98:	db04      	blt.n	8008aa4 <__s2b+0x78>
 8008a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a9e:	340a      	adds	r4, #10
 8008aa0:	2509      	movs	r5, #9
 8008aa2:	e7f6      	b.n	8008a92 <__s2b+0x66>
 8008aa4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008aa8:	4601      	mov	r1, r0
 8008aaa:	3b30      	subs	r3, #48	; 0x30
 8008aac:	220a      	movs	r2, #10
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f7ff ff76 	bl	80089a0 <__multadd>
 8008ab4:	e7ee      	b.n	8008a94 <__s2b+0x68>
 8008ab6:	bf00      	nop
 8008ab8:	0800a567 	.word	0x0800a567
 8008abc:	0800a5d8 	.word	0x0800a5d8

08008ac0 <__hi0bits>:
 8008ac0:	0c03      	lsrs	r3, r0, #16
 8008ac2:	041b      	lsls	r3, r3, #16
 8008ac4:	b9d3      	cbnz	r3, 8008afc <__hi0bits+0x3c>
 8008ac6:	0400      	lsls	r0, r0, #16
 8008ac8:	2310      	movs	r3, #16
 8008aca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ace:	bf04      	itt	eq
 8008ad0:	0200      	lsleq	r0, r0, #8
 8008ad2:	3308      	addeq	r3, #8
 8008ad4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ad8:	bf04      	itt	eq
 8008ada:	0100      	lsleq	r0, r0, #4
 8008adc:	3304      	addeq	r3, #4
 8008ade:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ae2:	bf04      	itt	eq
 8008ae4:	0080      	lsleq	r0, r0, #2
 8008ae6:	3302      	addeq	r3, #2
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	db05      	blt.n	8008af8 <__hi0bits+0x38>
 8008aec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008af0:	f103 0301 	add.w	r3, r3, #1
 8008af4:	bf08      	it	eq
 8008af6:	2320      	moveq	r3, #32
 8008af8:	4618      	mov	r0, r3
 8008afa:	4770      	bx	lr
 8008afc:	2300      	movs	r3, #0
 8008afe:	e7e4      	b.n	8008aca <__hi0bits+0xa>

08008b00 <__lo0bits>:
 8008b00:	6803      	ldr	r3, [r0, #0]
 8008b02:	f013 0207 	ands.w	r2, r3, #7
 8008b06:	d00c      	beq.n	8008b22 <__lo0bits+0x22>
 8008b08:	07d9      	lsls	r1, r3, #31
 8008b0a:	d422      	bmi.n	8008b52 <__lo0bits+0x52>
 8008b0c:	079a      	lsls	r2, r3, #30
 8008b0e:	bf49      	itett	mi
 8008b10:	085b      	lsrmi	r3, r3, #1
 8008b12:	089b      	lsrpl	r3, r3, #2
 8008b14:	6003      	strmi	r3, [r0, #0]
 8008b16:	2201      	movmi	r2, #1
 8008b18:	bf5c      	itt	pl
 8008b1a:	6003      	strpl	r3, [r0, #0]
 8008b1c:	2202      	movpl	r2, #2
 8008b1e:	4610      	mov	r0, r2
 8008b20:	4770      	bx	lr
 8008b22:	b299      	uxth	r1, r3
 8008b24:	b909      	cbnz	r1, 8008b2a <__lo0bits+0x2a>
 8008b26:	0c1b      	lsrs	r3, r3, #16
 8008b28:	2210      	movs	r2, #16
 8008b2a:	b2d9      	uxtb	r1, r3
 8008b2c:	b909      	cbnz	r1, 8008b32 <__lo0bits+0x32>
 8008b2e:	3208      	adds	r2, #8
 8008b30:	0a1b      	lsrs	r3, r3, #8
 8008b32:	0719      	lsls	r1, r3, #28
 8008b34:	bf04      	itt	eq
 8008b36:	091b      	lsreq	r3, r3, #4
 8008b38:	3204      	addeq	r2, #4
 8008b3a:	0799      	lsls	r1, r3, #30
 8008b3c:	bf04      	itt	eq
 8008b3e:	089b      	lsreq	r3, r3, #2
 8008b40:	3202      	addeq	r2, #2
 8008b42:	07d9      	lsls	r1, r3, #31
 8008b44:	d403      	bmi.n	8008b4e <__lo0bits+0x4e>
 8008b46:	085b      	lsrs	r3, r3, #1
 8008b48:	f102 0201 	add.w	r2, r2, #1
 8008b4c:	d003      	beq.n	8008b56 <__lo0bits+0x56>
 8008b4e:	6003      	str	r3, [r0, #0]
 8008b50:	e7e5      	b.n	8008b1e <__lo0bits+0x1e>
 8008b52:	2200      	movs	r2, #0
 8008b54:	e7e3      	b.n	8008b1e <__lo0bits+0x1e>
 8008b56:	2220      	movs	r2, #32
 8008b58:	e7e1      	b.n	8008b1e <__lo0bits+0x1e>
	...

08008b5c <__i2b>:
 8008b5c:	b510      	push	{r4, lr}
 8008b5e:	460c      	mov	r4, r1
 8008b60:	2101      	movs	r1, #1
 8008b62:	f7ff febb 	bl	80088dc <_Balloc>
 8008b66:	4602      	mov	r2, r0
 8008b68:	b928      	cbnz	r0, 8008b76 <__i2b+0x1a>
 8008b6a:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <__i2b+0x24>)
 8008b6c:	4805      	ldr	r0, [pc, #20]	; (8008b84 <__i2b+0x28>)
 8008b6e:	f240 1145 	movw	r1, #325	; 0x145
 8008b72:	f7ff fa2b 	bl	8007fcc <__assert_func>
 8008b76:	2301      	movs	r3, #1
 8008b78:	6144      	str	r4, [r0, #20]
 8008b7a:	6103      	str	r3, [r0, #16]
 8008b7c:	bd10      	pop	{r4, pc}
 8008b7e:	bf00      	nop
 8008b80:	0800a567 	.word	0x0800a567
 8008b84:	0800a5d8 	.word	0x0800a5d8

08008b88 <__multiply>:
 8008b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8c:	4691      	mov	r9, r2
 8008b8e:	690a      	ldr	r2, [r1, #16]
 8008b90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	bfb8      	it	lt
 8008b98:	460b      	movlt	r3, r1
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	bfbc      	itt	lt
 8008b9e:	464c      	movlt	r4, r9
 8008ba0:	4699      	movlt	r9, r3
 8008ba2:	6927      	ldr	r7, [r4, #16]
 8008ba4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ba8:	68a3      	ldr	r3, [r4, #8]
 8008baa:	6861      	ldr	r1, [r4, #4]
 8008bac:	eb07 060a 	add.w	r6, r7, sl
 8008bb0:	42b3      	cmp	r3, r6
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	bfb8      	it	lt
 8008bb6:	3101      	addlt	r1, #1
 8008bb8:	f7ff fe90 	bl	80088dc <_Balloc>
 8008bbc:	b930      	cbnz	r0, 8008bcc <__multiply+0x44>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	4b44      	ldr	r3, [pc, #272]	; (8008cd4 <__multiply+0x14c>)
 8008bc2:	4845      	ldr	r0, [pc, #276]	; (8008cd8 <__multiply+0x150>)
 8008bc4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008bc8:	f7ff fa00 	bl	8007fcc <__assert_func>
 8008bcc:	f100 0514 	add.w	r5, r0, #20
 8008bd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008bd4:	462b      	mov	r3, r5
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	4543      	cmp	r3, r8
 8008bda:	d321      	bcc.n	8008c20 <__multiply+0x98>
 8008bdc:	f104 0314 	add.w	r3, r4, #20
 8008be0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008be4:	f109 0314 	add.w	r3, r9, #20
 8008be8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008bec:	9202      	str	r2, [sp, #8]
 8008bee:	1b3a      	subs	r2, r7, r4
 8008bf0:	3a15      	subs	r2, #21
 8008bf2:	f022 0203 	bic.w	r2, r2, #3
 8008bf6:	3204      	adds	r2, #4
 8008bf8:	f104 0115 	add.w	r1, r4, #21
 8008bfc:	428f      	cmp	r7, r1
 8008bfe:	bf38      	it	cc
 8008c00:	2204      	movcc	r2, #4
 8008c02:	9201      	str	r2, [sp, #4]
 8008c04:	9a02      	ldr	r2, [sp, #8]
 8008c06:	9303      	str	r3, [sp, #12]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d80c      	bhi.n	8008c26 <__multiply+0x9e>
 8008c0c:	2e00      	cmp	r6, #0
 8008c0e:	dd03      	ble.n	8008c18 <__multiply+0x90>
 8008c10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d05b      	beq.n	8008cd0 <__multiply+0x148>
 8008c18:	6106      	str	r6, [r0, #16]
 8008c1a:	b005      	add	sp, #20
 8008c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c20:	f843 2b04 	str.w	r2, [r3], #4
 8008c24:	e7d8      	b.n	8008bd8 <__multiply+0x50>
 8008c26:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c2a:	f1ba 0f00 	cmp.w	sl, #0
 8008c2e:	d024      	beq.n	8008c7a <__multiply+0xf2>
 8008c30:	f104 0e14 	add.w	lr, r4, #20
 8008c34:	46a9      	mov	r9, r5
 8008c36:	f04f 0c00 	mov.w	ip, #0
 8008c3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c3e:	f8d9 1000 	ldr.w	r1, [r9]
 8008c42:	fa1f fb82 	uxth.w	fp, r2
 8008c46:	b289      	uxth	r1, r1
 8008c48:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c50:	f8d9 2000 	ldr.w	r2, [r9]
 8008c54:	4461      	add	r1, ip
 8008c56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c5a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c62:	b289      	uxth	r1, r1
 8008c64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c68:	4577      	cmp	r7, lr
 8008c6a:	f849 1b04 	str.w	r1, [r9], #4
 8008c6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c72:	d8e2      	bhi.n	8008c3a <__multiply+0xb2>
 8008c74:	9a01      	ldr	r2, [sp, #4]
 8008c76:	f845 c002 	str.w	ip, [r5, r2]
 8008c7a:	9a03      	ldr	r2, [sp, #12]
 8008c7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c80:	3304      	adds	r3, #4
 8008c82:	f1b9 0f00 	cmp.w	r9, #0
 8008c86:	d021      	beq.n	8008ccc <__multiply+0x144>
 8008c88:	6829      	ldr	r1, [r5, #0]
 8008c8a:	f104 0c14 	add.w	ip, r4, #20
 8008c8e:	46ae      	mov	lr, r5
 8008c90:	f04f 0a00 	mov.w	sl, #0
 8008c94:	f8bc b000 	ldrh.w	fp, [ip]
 8008c98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008c9c:	fb09 220b 	mla	r2, r9, fp, r2
 8008ca0:	4452      	add	r2, sl
 8008ca2:	b289      	uxth	r1, r1
 8008ca4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ca8:	f84e 1b04 	str.w	r1, [lr], #4
 8008cac:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008cb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cb4:	f8be 1000 	ldrh.w	r1, [lr]
 8008cb8:	fb09 110a 	mla	r1, r9, sl, r1
 8008cbc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008cc0:	4567      	cmp	r7, ip
 8008cc2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cc6:	d8e5      	bhi.n	8008c94 <__multiply+0x10c>
 8008cc8:	9a01      	ldr	r2, [sp, #4]
 8008cca:	50a9      	str	r1, [r5, r2]
 8008ccc:	3504      	adds	r5, #4
 8008cce:	e799      	b.n	8008c04 <__multiply+0x7c>
 8008cd0:	3e01      	subs	r6, #1
 8008cd2:	e79b      	b.n	8008c0c <__multiply+0x84>
 8008cd4:	0800a567 	.word	0x0800a567
 8008cd8:	0800a5d8 	.word	0x0800a5d8

08008cdc <__pow5mult>:
 8008cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ce0:	4615      	mov	r5, r2
 8008ce2:	f012 0203 	ands.w	r2, r2, #3
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	460f      	mov	r7, r1
 8008cea:	d007      	beq.n	8008cfc <__pow5mult+0x20>
 8008cec:	4c25      	ldr	r4, [pc, #148]	; (8008d84 <__pow5mult+0xa8>)
 8008cee:	3a01      	subs	r2, #1
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cf6:	f7ff fe53 	bl	80089a0 <__multadd>
 8008cfa:	4607      	mov	r7, r0
 8008cfc:	10ad      	asrs	r5, r5, #2
 8008cfe:	d03d      	beq.n	8008d7c <__pow5mult+0xa0>
 8008d00:	69f4      	ldr	r4, [r6, #28]
 8008d02:	b97c      	cbnz	r4, 8008d24 <__pow5mult+0x48>
 8008d04:	2010      	movs	r0, #16
 8008d06:	f7ff fd23 	bl	8008750 <malloc>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	61f0      	str	r0, [r6, #28]
 8008d0e:	b928      	cbnz	r0, 8008d1c <__pow5mult+0x40>
 8008d10:	4b1d      	ldr	r3, [pc, #116]	; (8008d88 <__pow5mult+0xac>)
 8008d12:	481e      	ldr	r0, [pc, #120]	; (8008d8c <__pow5mult+0xb0>)
 8008d14:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008d18:	f7ff f958 	bl	8007fcc <__assert_func>
 8008d1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d20:	6004      	str	r4, [r0, #0]
 8008d22:	60c4      	str	r4, [r0, #12]
 8008d24:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008d28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d2c:	b94c      	cbnz	r4, 8008d42 <__pow5mult+0x66>
 8008d2e:	f240 2171 	movw	r1, #625	; 0x271
 8008d32:	4630      	mov	r0, r6
 8008d34:	f7ff ff12 	bl	8008b5c <__i2b>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d3e:	4604      	mov	r4, r0
 8008d40:	6003      	str	r3, [r0, #0]
 8008d42:	f04f 0900 	mov.w	r9, #0
 8008d46:	07eb      	lsls	r3, r5, #31
 8008d48:	d50a      	bpl.n	8008d60 <__pow5mult+0x84>
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f7ff ff1a 	bl	8008b88 <__multiply>
 8008d54:	4639      	mov	r1, r7
 8008d56:	4680      	mov	r8, r0
 8008d58:	4630      	mov	r0, r6
 8008d5a:	f7ff fdff 	bl	800895c <_Bfree>
 8008d5e:	4647      	mov	r7, r8
 8008d60:	106d      	asrs	r5, r5, #1
 8008d62:	d00b      	beq.n	8008d7c <__pow5mult+0xa0>
 8008d64:	6820      	ldr	r0, [r4, #0]
 8008d66:	b938      	cbnz	r0, 8008d78 <__pow5mult+0x9c>
 8008d68:	4622      	mov	r2, r4
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f7ff ff0b 	bl	8008b88 <__multiply>
 8008d72:	6020      	str	r0, [r4, #0]
 8008d74:	f8c0 9000 	str.w	r9, [r0]
 8008d78:	4604      	mov	r4, r0
 8008d7a:	e7e4      	b.n	8008d46 <__pow5mult+0x6a>
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d82:	bf00      	nop
 8008d84:	0800a728 	.word	0x0800a728
 8008d88:	0800a2f4 	.word	0x0800a2f4
 8008d8c:	0800a5d8 	.word	0x0800a5d8

08008d90 <__lshift>:
 8008d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d94:	460c      	mov	r4, r1
 8008d96:	6849      	ldr	r1, [r1, #4]
 8008d98:	6923      	ldr	r3, [r4, #16]
 8008d9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d9e:	68a3      	ldr	r3, [r4, #8]
 8008da0:	4607      	mov	r7, r0
 8008da2:	4691      	mov	r9, r2
 8008da4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008da8:	f108 0601 	add.w	r6, r8, #1
 8008dac:	42b3      	cmp	r3, r6
 8008dae:	db0b      	blt.n	8008dc8 <__lshift+0x38>
 8008db0:	4638      	mov	r0, r7
 8008db2:	f7ff fd93 	bl	80088dc <_Balloc>
 8008db6:	4605      	mov	r5, r0
 8008db8:	b948      	cbnz	r0, 8008dce <__lshift+0x3e>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	4b28      	ldr	r3, [pc, #160]	; (8008e60 <__lshift+0xd0>)
 8008dbe:	4829      	ldr	r0, [pc, #164]	; (8008e64 <__lshift+0xd4>)
 8008dc0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008dc4:	f7ff f902 	bl	8007fcc <__assert_func>
 8008dc8:	3101      	adds	r1, #1
 8008dca:	005b      	lsls	r3, r3, #1
 8008dcc:	e7ee      	b.n	8008dac <__lshift+0x1c>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f100 0114 	add.w	r1, r0, #20
 8008dd4:	f100 0210 	add.w	r2, r0, #16
 8008dd8:	4618      	mov	r0, r3
 8008dda:	4553      	cmp	r3, sl
 8008ddc:	db33      	blt.n	8008e46 <__lshift+0xb6>
 8008dde:	6920      	ldr	r0, [r4, #16]
 8008de0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008de4:	f104 0314 	add.w	r3, r4, #20
 8008de8:	f019 091f 	ands.w	r9, r9, #31
 8008dec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008df0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008df4:	d02b      	beq.n	8008e4e <__lshift+0xbe>
 8008df6:	f1c9 0e20 	rsb	lr, r9, #32
 8008dfa:	468a      	mov	sl, r1
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	6818      	ldr	r0, [r3, #0]
 8008e00:	fa00 f009 	lsl.w	r0, r0, r9
 8008e04:	4310      	orrs	r0, r2
 8008e06:	f84a 0b04 	str.w	r0, [sl], #4
 8008e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e0e:	459c      	cmp	ip, r3
 8008e10:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e14:	d8f3      	bhi.n	8008dfe <__lshift+0x6e>
 8008e16:	ebac 0304 	sub.w	r3, ip, r4
 8008e1a:	3b15      	subs	r3, #21
 8008e1c:	f023 0303 	bic.w	r3, r3, #3
 8008e20:	3304      	adds	r3, #4
 8008e22:	f104 0015 	add.w	r0, r4, #21
 8008e26:	4584      	cmp	ip, r0
 8008e28:	bf38      	it	cc
 8008e2a:	2304      	movcc	r3, #4
 8008e2c:	50ca      	str	r2, [r1, r3]
 8008e2e:	b10a      	cbz	r2, 8008e34 <__lshift+0xa4>
 8008e30:	f108 0602 	add.w	r6, r8, #2
 8008e34:	3e01      	subs	r6, #1
 8008e36:	4638      	mov	r0, r7
 8008e38:	612e      	str	r6, [r5, #16]
 8008e3a:	4621      	mov	r1, r4
 8008e3c:	f7ff fd8e 	bl	800895c <_Bfree>
 8008e40:	4628      	mov	r0, r5
 8008e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e46:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	e7c5      	b.n	8008dda <__lshift+0x4a>
 8008e4e:	3904      	subs	r1, #4
 8008e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e54:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e58:	459c      	cmp	ip, r3
 8008e5a:	d8f9      	bhi.n	8008e50 <__lshift+0xc0>
 8008e5c:	e7ea      	b.n	8008e34 <__lshift+0xa4>
 8008e5e:	bf00      	nop
 8008e60:	0800a567 	.word	0x0800a567
 8008e64:	0800a5d8 	.word	0x0800a5d8

08008e68 <__mcmp>:
 8008e68:	b530      	push	{r4, r5, lr}
 8008e6a:	6902      	ldr	r2, [r0, #16]
 8008e6c:	690c      	ldr	r4, [r1, #16]
 8008e6e:	1b12      	subs	r2, r2, r4
 8008e70:	d10e      	bne.n	8008e90 <__mcmp+0x28>
 8008e72:	f100 0314 	add.w	r3, r0, #20
 8008e76:	3114      	adds	r1, #20
 8008e78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e88:	42a5      	cmp	r5, r4
 8008e8a:	d003      	beq.n	8008e94 <__mcmp+0x2c>
 8008e8c:	d305      	bcc.n	8008e9a <__mcmp+0x32>
 8008e8e:	2201      	movs	r2, #1
 8008e90:	4610      	mov	r0, r2
 8008e92:	bd30      	pop	{r4, r5, pc}
 8008e94:	4283      	cmp	r3, r0
 8008e96:	d3f3      	bcc.n	8008e80 <__mcmp+0x18>
 8008e98:	e7fa      	b.n	8008e90 <__mcmp+0x28>
 8008e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9e:	e7f7      	b.n	8008e90 <__mcmp+0x28>

08008ea0 <__mdiff>:
 8008ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	4620      	mov	r0, r4
 8008eac:	4690      	mov	r8, r2
 8008eae:	f7ff ffdb 	bl	8008e68 <__mcmp>
 8008eb2:	1e05      	subs	r5, r0, #0
 8008eb4:	d110      	bne.n	8008ed8 <__mdiff+0x38>
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f7ff fd0f 	bl	80088dc <_Balloc>
 8008ebe:	b930      	cbnz	r0, 8008ece <__mdiff+0x2e>
 8008ec0:	4b3a      	ldr	r3, [pc, #232]	; (8008fac <__mdiff+0x10c>)
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	f240 2137 	movw	r1, #567	; 0x237
 8008ec8:	4839      	ldr	r0, [pc, #228]	; (8008fb0 <__mdiff+0x110>)
 8008eca:	f7ff f87f 	bl	8007fcc <__assert_func>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed8:	bfa4      	itt	ge
 8008eda:	4643      	movge	r3, r8
 8008edc:	46a0      	movge	r8, r4
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ee4:	bfa6      	itte	ge
 8008ee6:	461c      	movge	r4, r3
 8008ee8:	2500      	movge	r5, #0
 8008eea:	2501      	movlt	r5, #1
 8008eec:	f7ff fcf6 	bl	80088dc <_Balloc>
 8008ef0:	b920      	cbnz	r0, 8008efc <__mdiff+0x5c>
 8008ef2:	4b2e      	ldr	r3, [pc, #184]	; (8008fac <__mdiff+0x10c>)
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	f240 2145 	movw	r1, #581	; 0x245
 8008efa:	e7e5      	b.n	8008ec8 <__mdiff+0x28>
 8008efc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f00:	6926      	ldr	r6, [r4, #16]
 8008f02:	60c5      	str	r5, [r0, #12]
 8008f04:	f104 0914 	add.w	r9, r4, #20
 8008f08:	f108 0514 	add.w	r5, r8, #20
 8008f0c:	f100 0e14 	add.w	lr, r0, #20
 8008f10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008f14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f18:	f108 0210 	add.w	r2, r8, #16
 8008f1c:	46f2      	mov	sl, lr
 8008f1e:	2100      	movs	r1, #0
 8008f20:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f28:	fa11 f88b 	uxtah	r8, r1, fp
 8008f2c:	b299      	uxth	r1, r3
 8008f2e:	0c1b      	lsrs	r3, r3, #16
 8008f30:	eba8 0801 	sub.w	r8, r8, r1
 8008f34:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f38:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f3c:	fa1f f888 	uxth.w	r8, r8
 8008f40:	1419      	asrs	r1, r3, #16
 8008f42:	454e      	cmp	r6, r9
 8008f44:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f48:	f84a 3b04 	str.w	r3, [sl], #4
 8008f4c:	d8e8      	bhi.n	8008f20 <__mdiff+0x80>
 8008f4e:	1b33      	subs	r3, r6, r4
 8008f50:	3b15      	subs	r3, #21
 8008f52:	f023 0303 	bic.w	r3, r3, #3
 8008f56:	3304      	adds	r3, #4
 8008f58:	3415      	adds	r4, #21
 8008f5a:	42a6      	cmp	r6, r4
 8008f5c:	bf38      	it	cc
 8008f5e:	2304      	movcc	r3, #4
 8008f60:	441d      	add	r5, r3
 8008f62:	4473      	add	r3, lr
 8008f64:	469e      	mov	lr, r3
 8008f66:	462e      	mov	r6, r5
 8008f68:	4566      	cmp	r6, ip
 8008f6a:	d30e      	bcc.n	8008f8a <__mdiff+0xea>
 8008f6c:	f10c 0203 	add.w	r2, ip, #3
 8008f70:	1b52      	subs	r2, r2, r5
 8008f72:	f022 0203 	bic.w	r2, r2, #3
 8008f76:	3d03      	subs	r5, #3
 8008f78:	45ac      	cmp	ip, r5
 8008f7a:	bf38      	it	cc
 8008f7c:	2200      	movcc	r2, #0
 8008f7e:	4413      	add	r3, r2
 8008f80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008f84:	b17a      	cbz	r2, 8008fa6 <__mdiff+0x106>
 8008f86:	6107      	str	r7, [r0, #16]
 8008f88:	e7a4      	b.n	8008ed4 <__mdiff+0x34>
 8008f8a:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f8e:	fa11 f288 	uxtah	r2, r1, r8
 8008f92:	1414      	asrs	r4, r2, #16
 8008f94:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008f98:	b292      	uxth	r2, r2
 8008f9a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f9e:	f84e 2b04 	str.w	r2, [lr], #4
 8008fa2:	1421      	asrs	r1, r4, #16
 8008fa4:	e7e0      	b.n	8008f68 <__mdiff+0xc8>
 8008fa6:	3f01      	subs	r7, #1
 8008fa8:	e7ea      	b.n	8008f80 <__mdiff+0xe0>
 8008faa:	bf00      	nop
 8008fac:	0800a567 	.word	0x0800a567
 8008fb0:	0800a5d8 	.word	0x0800a5d8

08008fb4 <__ulp>:
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	ed8d 0b00 	vstr	d0, [sp]
 8008fba:	9a01      	ldr	r2, [sp, #4]
 8008fbc:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <__ulp+0x48>)
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	dc08      	bgt.n	8008fda <__ulp+0x26>
 8008fc8:	425b      	negs	r3, r3
 8008fca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008fce:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008fd2:	da04      	bge.n	8008fde <__ulp+0x2a>
 8008fd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008fd8:	4113      	asrs	r3, r2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	e008      	b.n	8008ff0 <__ulp+0x3c>
 8008fde:	f1a2 0314 	sub.w	r3, r2, #20
 8008fe2:	2b1e      	cmp	r3, #30
 8008fe4:	bfda      	itte	le
 8008fe6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008fea:	40da      	lsrle	r2, r3
 8008fec:	2201      	movgt	r2, #1
 8008fee:	2300      	movs	r3, #0
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	ec41 0b10 	vmov	d0, r0, r1
 8008ff8:	b002      	add	sp, #8
 8008ffa:	4770      	bx	lr
 8008ffc:	7ff00000 	.word	0x7ff00000

08009000 <__b2d>:
 8009000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009004:	6906      	ldr	r6, [r0, #16]
 8009006:	f100 0814 	add.w	r8, r0, #20
 800900a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800900e:	1f37      	subs	r7, r6, #4
 8009010:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009014:	4610      	mov	r0, r2
 8009016:	f7ff fd53 	bl	8008ac0 <__hi0bits>
 800901a:	f1c0 0320 	rsb	r3, r0, #32
 800901e:	280a      	cmp	r0, #10
 8009020:	600b      	str	r3, [r1, #0]
 8009022:	491b      	ldr	r1, [pc, #108]	; (8009090 <__b2d+0x90>)
 8009024:	dc15      	bgt.n	8009052 <__b2d+0x52>
 8009026:	f1c0 0c0b 	rsb	ip, r0, #11
 800902a:	fa22 f30c 	lsr.w	r3, r2, ip
 800902e:	45b8      	cmp	r8, r7
 8009030:	ea43 0501 	orr.w	r5, r3, r1
 8009034:	bf34      	ite	cc
 8009036:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800903a:	2300      	movcs	r3, #0
 800903c:	3015      	adds	r0, #21
 800903e:	fa02 f000 	lsl.w	r0, r2, r0
 8009042:	fa23 f30c 	lsr.w	r3, r3, ip
 8009046:	4303      	orrs	r3, r0
 8009048:	461c      	mov	r4, r3
 800904a:	ec45 4b10 	vmov	d0, r4, r5
 800904e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009052:	45b8      	cmp	r8, r7
 8009054:	bf3a      	itte	cc
 8009056:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800905a:	f1a6 0708 	subcc.w	r7, r6, #8
 800905e:	2300      	movcs	r3, #0
 8009060:	380b      	subs	r0, #11
 8009062:	d012      	beq.n	800908a <__b2d+0x8a>
 8009064:	f1c0 0120 	rsb	r1, r0, #32
 8009068:	fa23 f401 	lsr.w	r4, r3, r1
 800906c:	4082      	lsls	r2, r0
 800906e:	4322      	orrs	r2, r4
 8009070:	4547      	cmp	r7, r8
 8009072:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009076:	bf8c      	ite	hi
 8009078:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800907c:	2200      	movls	r2, #0
 800907e:	4083      	lsls	r3, r0
 8009080:	40ca      	lsrs	r2, r1
 8009082:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009086:	4313      	orrs	r3, r2
 8009088:	e7de      	b.n	8009048 <__b2d+0x48>
 800908a:	ea42 0501 	orr.w	r5, r2, r1
 800908e:	e7db      	b.n	8009048 <__b2d+0x48>
 8009090:	3ff00000 	.word	0x3ff00000

08009094 <__d2b>:
 8009094:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009098:	460f      	mov	r7, r1
 800909a:	2101      	movs	r1, #1
 800909c:	ec59 8b10 	vmov	r8, r9, d0
 80090a0:	4616      	mov	r6, r2
 80090a2:	f7ff fc1b 	bl	80088dc <_Balloc>
 80090a6:	4604      	mov	r4, r0
 80090a8:	b930      	cbnz	r0, 80090b8 <__d2b+0x24>
 80090aa:	4602      	mov	r2, r0
 80090ac:	4b24      	ldr	r3, [pc, #144]	; (8009140 <__d2b+0xac>)
 80090ae:	4825      	ldr	r0, [pc, #148]	; (8009144 <__d2b+0xb0>)
 80090b0:	f240 310f 	movw	r1, #783	; 0x30f
 80090b4:	f7fe ff8a 	bl	8007fcc <__assert_func>
 80090b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090c0:	bb2d      	cbnz	r5, 800910e <__d2b+0x7a>
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	f1b8 0300 	subs.w	r3, r8, #0
 80090c8:	d026      	beq.n	8009118 <__d2b+0x84>
 80090ca:	4668      	mov	r0, sp
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	f7ff fd17 	bl	8008b00 <__lo0bits>
 80090d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80090d6:	b1e8      	cbz	r0, 8009114 <__d2b+0x80>
 80090d8:	f1c0 0320 	rsb	r3, r0, #32
 80090dc:	fa02 f303 	lsl.w	r3, r2, r3
 80090e0:	430b      	orrs	r3, r1
 80090e2:	40c2      	lsrs	r2, r0
 80090e4:	6163      	str	r3, [r4, #20]
 80090e6:	9201      	str	r2, [sp, #4]
 80090e8:	9b01      	ldr	r3, [sp, #4]
 80090ea:	61a3      	str	r3, [r4, #24]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	bf14      	ite	ne
 80090f0:	2202      	movne	r2, #2
 80090f2:	2201      	moveq	r2, #1
 80090f4:	6122      	str	r2, [r4, #16]
 80090f6:	b1bd      	cbz	r5, 8009128 <__d2b+0x94>
 80090f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80090fc:	4405      	add	r5, r0
 80090fe:	603d      	str	r5, [r7, #0]
 8009100:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009104:	6030      	str	r0, [r6, #0]
 8009106:	4620      	mov	r0, r4
 8009108:	b003      	add	sp, #12
 800910a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800910e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009112:	e7d6      	b.n	80090c2 <__d2b+0x2e>
 8009114:	6161      	str	r1, [r4, #20]
 8009116:	e7e7      	b.n	80090e8 <__d2b+0x54>
 8009118:	a801      	add	r0, sp, #4
 800911a:	f7ff fcf1 	bl	8008b00 <__lo0bits>
 800911e:	9b01      	ldr	r3, [sp, #4]
 8009120:	6163      	str	r3, [r4, #20]
 8009122:	3020      	adds	r0, #32
 8009124:	2201      	movs	r2, #1
 8009126:	e7e5      	b.n	80090f4 <__d2b+0x60>
 8009128:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800912c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009130:	6038      	str	r0, [r7, #0]
 8009132:	6918      	ldr	r0, [r3, #16]
 8009134:	f7ff fcc4 	bl	8008ac0 <__hi0bits>
 8009138:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800913c:	e7e2      	b.n	8009104 <__d2b+0x70>
 800913e:	bf00      	nop
 8009140:	0800a567 	.word	0x0800a567
 8009144:	0800a5d8 	.word	0x0800a5d8

08009148 <__ratio>:
 8009148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	4688      	mov	r8, r1
 800914e:	4669      	mov	r1, sp
 8009150:	4681      	mov	r9, r0
 8009152:	f7ff ff55 	bl	8009000 <__b2d>
 8009156:	a901      	add	r1, sp, #4
 8009158:	4640      	mov	r0, r8
 800915a:	ec55 4b10 	vmov	r4, r5, d0
 800915e:	f7ff ff4f 	bl	8009000 <__b2d>
 8009162:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009166:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800916a:	eba3 0c02 	sub.w	ip, r3, r2
 800916e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009172:	1a9b      	subs	r3, r3, r2
 8009174:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009178:	ec51 0b10 	vmov	r0, r1, d0
 800917c:	2b00      	cmp	r3, #0
 800917e:	bfd6      	itet	le
 8009180:	460a      	movle	r2, r1
 8009182:	462a      	movgt	r2, r5
 8009184:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009188:	468b      	mov	fp, r1
 800918a:	462f      	mov	r7, r5
 800918c:	bfd4      	ite	le
 800918e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009192:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009196:	4620      	mov	r0, r4
 8009198:	ee10 2a10 	vmov	r2, s0
 800919c:	465b      	mov	r3, fp
 800919e:	4639      	mov	r1, r7
 80091a0:	f7f7 fb54 	bl	800084c <__aeabi_ddiv>
 80091a4:	ec41 0b10 	vmov	d0, r0, r1
 80091a8:	b003      	add	sp, #12
 80091aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091ae <__copybits>:
 80091ae:	3901      	subs	r1, #1
 80091b0:	b570      	push	{r4, r5, r6, lr}
 80091b2:	1149      	asrs	r1, r1, #5
 80091b4:	6914      	ldr	r4, [r2, #16]
 80091b6:	3101      	adds	r1, #1
 80091b8:	f102 0314 	add.w	r3, r2, #20
 80091bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80091c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80091c4:	1f05      	subs	r5, r0, #4
 80091c6:	42a3      	cmp	r3, r4
 80091c8:	d30c      	bcc.n	80091e4 <__copybits+0x36>
 80091ca:	1aa3      	subs	r3, r4, r2
 80091cc:	3b11      	subs	r3, #17
 80091ce:	f023 0303 	bic.w	r3, r3, #3
 80091d2:	3211      	adds	r2, #17
 80091d4:	42a2      	cmp	r2, r4
 80091d6:	bf88      	it	hi
 80091d8:	2300      	movhi	r3, #0
 80091da:	4418      	add	r0, r3
 80091dc:	2300      	movs	r3, #0
 80091de:	4288      	cmp	r0, r1
 80091e0:	d305      	bcc.n	80091ee <__copybits+0x40>
 80091e2:	bd70      	pop	{r4, r5, r6, pc}
 80091e4:	f853 6b04 	ldr.w	r6, [r3], #4
 80091e8:	f845 6f04 	str.w	r6, [r5, #4]!
 80091ec:	e7eb      	b.n	80091c6 <__copybits+0x18>
 80091ee:	f840 3b04 	str.w	r3, [r0], #4
 80091f2:	e7f4      	b.n	80091de <__copybits+0x30>

080091f4 <__any_on>:
 80091f4:	f100 0214 	add.w	r2, r0, #20
 80091f8:	6900      	ldr	r0, [r0, #16]
 80091fa:	114b      	asrs	r3, r1, #5
 80091fc:	4298      	cmp	r0, r3
 80091fe:	b510      	push	{r4, lr}
 8009200:	db11      	blt.n	8009226 <__any_on+0x32>
 8009202:	dd0a      	ble.n	800921a <__any_on+0x26>
 8009204:	f011 011f 	ands.w	r1, r1, #31
 8009208:	d007      	beq.n	800921a <__any_on+0x26>
 800920a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800920e:	fa24 f001 	lsr.w	r0, r4, r1
 8009212:	fa00 f101 	lsl.w	r1, r0, r1
 8009216:	428c      	cmp	r4, r1
 8009218:	d10b      	bne.n	8009232 <__any_on+0x3e>
 800921a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800921e:	4293      	cmp	r3, r2
 8009220:	d803      	bhi.n	800922a <__any_on+0x36>
 8009222:	2000      	movs	r0, #0
 8009224:	bd10      	pop	{r4, pc}
 8009226:	4603      	mov	r3, r0
 8009228:	e7f7      	b.n	800921a <__any_on+0x26>
 800922a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800922e:	2900      	cmp	r1, #0
 8009230:	d0f5      	beq.n	800921e <__any_on+0x2a>
 8009232:	2001      	movs	r0, #1
 8009234:	e7f6      	b.n	8009224 <__any_on+0x30>

08009236 <__ascii_wctomb>:
 8009236:	b149      	cbz	r1, 800924c <__ascii_wctomb+0x16>
 8009238:	2aff      	cmp	r2, #255	; 0xff
 800923a:	bf85      	ittet	hi
 800923c:	238a      	movhi	r3, #138	; 0x8a
 800923e:	6003      	strhi	r3, [r0, #0]
 8009240:	700a      	strbls	r2, [r1, #0]
 8009242:	f04f 30ff 	movhi.w	r0, #4294967295
 8009246:	bf98      	it	ls
 8009248:	2001      	movls	r0, #1
 800924a:	4770      	bx	lr
 800924c:	4608      	mov	r0, r1
 800924e:	4770      	bx	lr

08009250 <__ssputs_r>:
 8009250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009254:	688e      	ldr	r6, [r1, #8]
 8009256:	461f      	mov	r7, r3
 8009258:	42be      	cmp	r6, r7
 800925a:	680b      	ldr	r3, [r1, #0]
 800925c:	4682      	mov	sl, r0
 800925e:	460c      	mov	r4, r1
 8009260:	4690      	mov	r8, r2
 8009262:	d82c      	bhi.n	80092be <__ssputs_r+0x6e>
 8009264:	898a      	ldrh	r2, [r1, #12]
 8009266:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800926a:	d026      	beq.n	80092ba <__ssputs_r+0x6a>
 800926c:	6965      	ldr	r5, [r4, #20]
 800926e:	6909      	ldr	r1, [r1, #16]
 8009270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009274:	eba3 0901 	sub.w	r9, r3, r1
 8009278:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800927c:	1c7b      	adds	r3, r7, #1
 800927e:	444b      	add	r3, r9
 8009280:	106d      	asrs	r5, r5, #1
 8009282:	429d      	cmp	r5, r3
 8009284:	bf38      	it	cc
 8009286:	461d      	movcc	r5, r3
 8009288:	0553      	lsls	r3, r2, #21
 800928a:	d527      	bpl.n	80092dc <__ssputs_r+0x8c>
 800928c:	4629      	mov	r1, r5
 800928e:	f7ff fa87 	bl	80087a0 <_malloc_r>
 8009292:	4606      	mov	r6, r0
 8009294:	b360      	cbz	r0, 80092f0 <__ssputs_r+0xa0>
 8009296:	6921      	ldr	r1, [r4, #16]
 8009298:	464a      	mov	r2, r9
 800929a:	f7fe fe7a 	bl	8007f92 <memcpy>
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a8:	81a3      	strh	r3, [r4, #12]
 80092aa:	6126      	str	r6, [r4, #16]
 80092ac:	6165      	str	r5, [r4, #20]
 80092ae:	444e      	add	r6, r9
 80092b0:	eba5 0509 	sub.w	r5, r5, r9
 80092b4:	6026      	str	r6, [r4, #0]
 80092b6:	60a5      	str	r5, [r4, #8]
 80092b8:	463e      	mov	r6, r7
 80092ba:	42be      	cmp	r6, r7
 80092bc:	d900      	bls.n	80092c0 <__ssputs_r+0x70>
 80092be:	463e      	mov	r6, r7
 80092c0:	6820      	ldr	r0, [r4, #0]
 80092c2:	4632      	mov	r2, r6
 80092c4:	4641      	mov	r1, r8
 80092c6:	f000 fb6b 	bl	80099a0 <memmove>
 80092ca:	68a3      	ldr	r3, [r4, #8]
 80092cc:	1b9b      	subs	r3, r3, r6
 80092ce:	60a3      	str	r3, [r4, #8]
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	4433      	add	r3, r6
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	2000      	movs	r0, #0
 80092d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092dc:	462a      	mov	r2, r5
 80092de:	f000 fba6 	bl	8009a2e <_realloc_r>
 80092e2:	4606      	mov	r6, r0
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d1e0      	bne.n	80092aa <__ssputs_r+0x5a>
 80092e8:	6921      	ldr	r1, [r4, #16]
 80092ea:	4650      	mov	r0, sl
 80092ec:	f7fe fe8c 	bl	8008008 <_free_r>
 80092f0:	230c      	movs	r3, #12
 80092f2:	f8ca 3000 	str.w	r3, [sl]
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092fc:	81a3      	strh	r3, [r4, #12]
 80092fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009302:	e7e9      	b.n	80092d8 <__ssputs_r+0x88>

08009304 <_svfiprintf_r>:
 8009304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009308:	4698      	mov	r8, r3
 800930a:	898b      	ldrh	r3, [r1, #12]
 800930c:	061b      	lsls	r3, r3, #24
 800930e:	b09d      	sub	sp, #116	; 0x74
 8009310:	4607      	mov	r7, r0
 8009312:	460d      	mov	r5, r1
 8009314:	4614      	mov	r4, r2
 8009316:	d50e      	bpl.n	8009336 <_svfiprintf_r+0x32>
 8009318:	690b      	ldr	r3, [r1, #16]
 800931a:	b963      	cbnz	r3, 8009336 <_svfiprintf_r+0x32>
 800931c:	2140      	movs	r1, #64	; 0x40
 800931e:	f7ff fa3f 	bl	80087a0 <_malloc_r>
 8009322:	6028      	str	r0, [r5, #0]
 8009324:	6128      	str	r0, [r5, #16]
 8009326:	b920      	cbnz	r0, 8009332 <_svfiprintf_r+0x2e>
 8009328:	230c      	movs	r3, #12
 800932a:	603b      	str	r3, [r7, #0]
 800932c:	f04f 30ff 	mov.w	r0, #4294967295
 8009330:	e0d0      	b.n	80094d4 <_svfiprintf_r+0x1d0>
 8009332:	2340      	movs	r3, #64	; 0x40
 8009334:	616b      	str	r3, [r5, #20]
 8009336:	2300      	movs	r3, #0
 8009338:	9309      	str	r3, [sp, #36]	; 0x24
 800933a:	2320      	movs	r3, #32
 800933c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009340:	f8cd 800c 	str.w	r8, [sp, #12]
 8009344:	2330      	movs	r3, #48	; 0x30
 8009346:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80094ec <_svfiprintf_r+0x1e8>
 800934a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800934e:	f04f 0901 	mov.w	r9, #1
 8009352:	4623      	mov	r3, r4
 8009354:	469a      	mov	sl, r3
 8009356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800935a:	b10a      	cbz	r2, 8009360 <_svfiprintf_r+0x5c>
 800935c:	2a25      	cmp	r2, #37	; 0x25
 800935e:	d1f9      	bne.n	8009354 <_svfiprintf_r+0x50>
 8009360:	ebba 0b04 	subs.w	fp, sl, r4
 8009364:	d00b      	beq.n	800937e <_svfiprintf_r+0x7a>
 8009366:	465b      	mov	r3, fp
 8009368:	4622      	mov	r2, r4
 800936a:	4629      	mov	r1, r5
 800936c:	4638      	mov	r0, r7
 800936e:	f7ff ff6f 	bl	8009250 <__ssputs_r>
 8009372:	3001      	adds	r0, #1
 8009374:	f000 80a9 	beq.w	80094ca <_svfiprintf_r+0x1c6>
 8009378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800937a:	445a      	add	r2, fp
 800937c:	9209      	str	r2, [sp, #36]	; 0x24
 800937e:	f89a 3000 	ldrb.w	r3, [sl]
 8009382:	2b00      	cmp	r3, #0
 8009384:	f000 80a1 	beq.w	80094ca <_svfiprintf_r+0x1c6>
 8009388:	2300      	movs	r3, #0
 800938a:	f04f 32ff 	mov.w	r2, #4294967295
 800938e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009392:	f10a 0a01 	add.w	sl, sl, #1
 8009396:	9304      	str	r3, [sp, #16]
 8009398:	9307      	str	r3, [sp, #28]
 800939a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800939e:	931a      	str	r3, [sp, #104]	; 0x68
 80093a0:	4654      	mov	r4, sl
 80093a2:	2205      	movs	r2, #5
 80093a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a8:	4850      	ldr	r0, [pc, #320]	; (80094ec <_svfiprintf_r+0x1e8>)
 80093aa:	f7f6 ff19 	bl	80001e0 <memchr>
 80093ae:	9a04      	ldr	r2, [sp, #16]
 80093b0:	b9d8      	cbnz	r0, 80093ea <_svfiprintf_r+0xe6>
 80093b2:	06d0      	lsls	r0, r2, #27
 80093b4:	bf44      	itt	mi
 80093b6:	2320      	movmi	r3, #32
 80093b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093bc:	0711      	lsls	r1, r2, #28
 80093be:	bf44      	itt	mi
 80093c0:	232b      	movmi	r3, #43	; 0x2b
 80093c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093c6:	f89a 3000 	ldrb.w	r3, [sl]
 80093ca:	2b2a      	cmp	r3, #42	; 0x2a
 80093cc:	d015      	beq.n	80093fa <_svfiprintf_r+0xf6>
 80093ce:	9a07      	ldr	r2, [sp, #28]
 80093d0:	4654      	mov	r4, sl
 80093d2:	2000      	movs	r0, #0
 80093d4:	f04f 0c0a 	mov.w	ip, #10
 80093d8:	4621      	mov	r1, r4
 80093da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093de:	3b30      	subs	r3, #48	; 0x30
 80093e0:	2b09      	cmp	r3, #9
 80093e2:	d94d      	bls.n	8009480 <_svfiprintf_r+0x17c>
 80093e4:	b1b0      	cbz	r0, 8009414 <_svfiprintf_r+0x110>
 80093e6:	9207      	str	r2, [sp, #28]
 80093e8:	e014      	b.n	8009414 <_svfiprintf_r+0x110>
 80093ea:	eba0 0308 	sub.w	r3, r0, r8
 80093ee:	fa09 f303 	lsl.w	r3, r9, r3
 80093f2:	4313      	orrs	r3, r2
 80093f4:	9304      	str	r3, [sp, #16]
 80093f6:	46a2      	mov	sl, r4
 80093f8:	e7d2      	b.n	80093a0 <_svfiprintf_r+0x9c>
 80093fa:	9b03      	ldr	r3, [sp, #12]
 80093fc:	1d19      	adds	r1, r3, #4
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	9103      	str	r1, [sp, #12]
 8009402:	2b00      	cmp	r3, #0
 8009404:	bfbb      	ittet	lt
 8009406:	425b      	neglt	r3, r3
 8009408:	f042 0202 	orrlt.w	r2, r2, #2
 800940c:	9307      	strge	r3, [sp, #28]
 800940e:	9307      	strlt	r3, [sp, #28]
 8009410:	bfb8      	it	lt
 8009412:	9204      	strlt	r2, [sp, #16]
 8009414:	7823      	ldrb	r3, [r4, #0]
 8009416:	2b2e      	cmp	r3, #46	; 0x2e
 8009418:	d10c      	bne.n	8009434 <_svfiprintf_r+0x130>
 800941a:	7863      	ldrb	r3, [r4, #1]
 800941c:	2b2a      	cmp	r3, #42	; 0x2a
 800941e:	d134      	bne.n	800948a <_svfiprintf_r+0x186>
 8009420:	9b03      	ldr	r3, [sp, #12]
 8009422:	1d1a      	adds	r2, r3, #4
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	9203      	str	r2, [sp, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	bfb8      	it	lt
 800942c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009430:	3402      	adds	r4, #2
 8009432:	9305      	str	r3, [sp, #20]
 8009434:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80094fc <_svfiprintf_r+0x1f8>
 8009438:	7821      	ldrb	r1, [r4, #0]
 800943a:	2203      	movs	r2, #3
 800943c:	4650      	mov	r0, sl
 800943e:	f7f6 fecf 	bl	80001e0 <memchr>
 8009442:	b138      	cbz	r0, 8009454 <_svfiprintf_r+0x150>
 8009444:	9b04      	ldr	r3, [sp, #16]
 8009446:	eba0 000a 	sub.w	r0, r0, sl
 800944a:	2240      	movs	r2, #64	; 0x40
 800944c:	4082      	lsls	r2, r0
 800944e:	4313      	orrs	r3, r2
 8009450:	3401      	adds	r4, #1
 8009452:	9304      	str	r3, [sp, #16]
 8009454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009458:	4825      	ldr	r0, [pc, #148]	; (80094f0 <_svfiprintf_r+0x1ec>)
 800945a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800945e:	2206      	movs	r2, #6
 8009460:	f7f6 febe 	bl	80001e0 <memchr>
 8009464:	2800      	cmp	r0, #0
 8009466:	d038      	beq.n	80094da <_svfiprintf_r+0x1d6>
 8009468:	4b22      	ldr	r3, [pc, #136]	; (80094f4 <_svfiprintf_r+0x1f0>)
 800946a:	bb1b      	cbnz	r3, 80094b4 <_svfiprintf_r+0x1b0>
 800946c:	9b03      	ldr	r3, [sp, #12]
 800946e:	3307      	adds	r3, #7
 8009470:	f023 0307 	bic.w	r3, r3, #7
 8009474:	3308      	adds	r3, #8
 8009476:	9303      	str	r3, [sp, #12]
 8009478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800947a:	4433      	add	r3, r6
 800947c:	9309      	str	r3, [sp, #36]	; 0x24
 800947e:	e768      	b.n	8009352 <_svfiprintf_r+0x4e>
 8009480:	fb0c 3202 	mla	r2, ip, r2, r3
 8009484:	460c      	mov	r4, r1
 8009486:	2001      	movs	r0, #1
 8009488:	e7a6      	b.n	80093d8 <_svfiprintf_r+0xd4>
 800948a:	2300      	movs	r3, #0
 800948c:	3401      	adds	r4, #1
 800948e:	9305      	str	r3, [sp, #20]
 8009490:	4619      	mov	r1, r3
 8009492:	f04f 0c0a 	mov.w	ip, #10
 8009496:	4620      	mov	r0, r4
 8009498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800949c:	3a30      	subs	r2, #48	; 0x30
 800949e:	2a09      	cmp	r2, #9
 80094a0:	d903      	bls.n	80094aa <_svfiprintf_r+0x1a6>
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0c6      	beq.n	8009434 <_svfiprintf_r+0x130>
 80094a6:	9105      	str	r1, [sp, #20]
 80094a8:	e7c4      	b.n	8009434 <_svfiprintf_r+0x130>
 80094aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80094ae:	4604      	mov	r4, r0
 80094b0:	2301      	movs	r3, #1
 80094b2:	e7f0      	b.n	8009496 <_svfiprintf_r+0x192>
 80094b4:	ab03      	add	r3, sp, #12
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	462a      	mov	r2, r5
 80094ba:	4b0f      	ldr	r3, [pc, #60]	; (80094f8 <_svfiprintf_r+0x1f4>)
 80094bc:	a904      	add	r1, sp, #16
 80094be:	4638      	mov	r0, r7
 80094c0:	f3af 8000 	nop.w
 80094c4:	1c42      	adds	r2, r0, #1
 80094c6:	4606      	mov	r6, r0
 80094c8:	d1d6      	bne.n	8009478 <_svfiprintf_r+0x174>
 80094ca:	89ab      	ldrh	r3, [r5, #12]
 80094cc:	065b      	lsls	r3, r3, #25
 80094ce:	f53f af2d 	bmi.w	800932c <_svfiprintf_r+0x28>
 80094d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094d4:	b01d      	add	sp, #116	; 0x74
 80094d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094da:	ab03      	add	r3, sp, #12
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	462a      	mov	r2, r5
 80094e0:	4b05      	ldr	r3, [pc, #20]	; (80094f8 <_svfiprintf_r+0x1f4>)
 80094e2:	a904      	add	r1, sp, #16
 80094e4:	4638      	mov	r0, r7
 80094e6:	f000 f879 	bl	80095dc <_printf_i>
 80094ea:	e7eb      	b.n	80094c4 <_svfiprintf_r+0x1c0>
 80094ec:	0800a734 	.word	0x0800a734
 80094f0:	0800a73e 	.word	0x0800a73e
 80094f4:	00000000 	.word	0x00000000
 80094f8:	08009251 	.word	0x08009251
 80094fc:	0800a73a 	.word	0x0800a73a

08009500 <_printf_common>:
 8009500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009504:	4616      	mov	r6, r2
 8009506:	4699      	mov	r9, r3
 8009508:	688a      	ldr	r2, [r1, #8]
 800950a:	690b      	ldr	r3, [r1, #16]
 800950c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009510:	4293      	cmp	r3, r2
 8009512:	bfb8      	it	lt
 8009514:	4613      	movlt	r3, r2
 8009516:	6033      	str	r3, [r6, #0]
 8009518:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800951c:	4607      	mov	r7, r0
 800951e:	460c      	mov	r4, r1
 8009520:	b10a      	cbz	r2, 8009526 <_printf_common+0x26>
 8009522:	3301      	adds	r3, #1
 8009524:	6033      	str	r3, [r6, #0]
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	0699      	lsls	r1, r3, #26
 800952a:	bf42      	ittt	mi
 800952c:	6833      	ldrmi	r3, [r6, #0]
 800952e:	3302      	addmi	r3, #2
 8009530:	6033      	strmi	r3, [r6, #0]
 8009532:	6825      	ldr	r5, [r4, #0]
 8009534:	f015 0506 	ands.w	r5, r5, #6
 8009538:	d106      	bne.n	8009548 <_printf_common+0x48>
 800953a:	f104 0a19 	add.w	sl, r4, #25
 800953e:	68e3      	ldr	r3, [r4, #12]
 8009540:	6832      	ldr	r2, [r6, #0]
 8009542:	1a9b      	subs	r3, r3, r2
 8009544:	42ab      	cmp	r3, r5
 8009546:	dc26      	bgt.n	8009596 <_printf_common+0x96>
 8009548:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800954c:	1e13      	subs	r3, r2, #0
 800954e:	6822      	ldr	r2, [r4, #0]
 8009550:	bf18      	it	ne
 8009552:	2301      	movne	r3, #1
 8009554:	0692      	lsls	r2, r2, #26
 8009556:	d42b      	bmi.n	80095b0 <_printf_common+0xb0>
 8009558:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800955c:	4649      	mov	r1, r9
 800955e:	4638      	mov	r0, r7
 8009560:	47c0      	blx	r8
 8009562:	3001      	adds	r0, #1
 8009564:	d01e      	beq.n	80095a4 <_printf_common+0xa4>
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	6922      	ldr	r2, [r4, #16]
 800956a:	f003 0306 	and.w	r3, r3, #6
 800956e:	2b04      	cmp	r3, #4
 8009570:	bf02      	ittt	eq
 8009572:	68e5      	ldreq	r5, [r4, #12]
 8009574:	6833      	ldreq	r3, [r6, #0]
 8009576:	1aed      	subeq	r5, r5, r3
 8009578:	68a3      	ldr	r3, [r4, #8]
 800957a:	bf0c      	ite	eq
 800957c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009580:	2500      	movne	r5, #0
 8009582:	4293      	cmp	r3, r2
 8009584:	bfc4      	itt	gt
 8009586:	1a9b      	subgt	r3, r3, r2
 8009588:	18ed      	addgt	r5, r5, r3
 800958a:	2600      	movs	r6, #0
 800958c:	341a      	adds	r4, #26
 800958e:	42b5      	cmp	r5, r6
 8009590:	d11a      	bne.n	80095c8 <_printf_common+0xc8>
 8009592:	2000      	movs	r0, #0
 8009594:	e008      	b.n	80095a8 <_printf_common+0xa8>
 8009596:	2301      	movs	r3, #1
 8009598:	4652      	mov	r2, sl
 800959a:	4649      	mov	r1, r9
 800959c:	4638      	mov	r0, r7
 800959e:	47c0      	blx	r8
 80095a0:	3001      	adds	r0, #1
 80095a2:	d103      	bne.n	80095ac <_printf_common+0xac>
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295
 80095a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ac:	3501      	adds	r5, #1
 80095ae:	e7c6      	b.n	800953e <_printf_common+0x3e>
 80095b0:	18e1      	adds	r1, r4, r3
 80095b2:	1c5a      	adds	r2, r3, #1
 80095b4:	2030      	movs	r0, #48	; 0x30
 80095b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095ba:	4422      	add	r2, r4
 80095bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095c4:	3302      	adds	r3, #2
 80095c6:	e7c7      	b.n	8009558 <_printf_common+0x58>
 80095c8:	2301      	movs	r3, #1
 80095ca:	4622      	mov	r2, r4
 80095cc:	4649      	mov	r1, r9
 80095ce:	4638      	mov	r0, r7
 80095d0:	47c0      	blx	r8
 80095d2:	3001      	adds	r0, #1
 80095d4:	d0e6      	beq.n	80095a4 <_printf_common+0xa4>
 80095d6:	3601      	adds	r6, #1
 80095d8:	e7d9      	b.n	800958e <_printf_common+0x8e>
	...

080095dc <_printf_i>:
 80095dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095e0:	7e0f      	ldrb	r7, [r1, #24]
 80095e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095e4:	2f78      	cmp	r7, #120	; 0x78
 80095e6:	4691      	mov	r9, r2
 80095e8:	4680      	mov	r8, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	469a      	mov	sl, r3
 80095ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095f2:	d807      	bhi.n	8009604 <_printf_i+0x28>
 80095f4:	2f62      	cmp	r7, #98	; 0x62
 80095f6:	d80a      	bhi.n	800960e <_printf_i+0x32>
 80095f8:	2f00      	cmp	r7, #0
 80095fa:	f000 80d4 	beq.w	80097a6 <_printf_i+0x1ca>
 80095fe:	2f58      	cmp	r7, #88	; 0x58
 8009600:	f000 80c0 	beq.w	8009784 <_printf_i+0x1a8>
 8009604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009608:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800960c:	e03a      	b.n	8009684 <_printf_i+0xa8>
 800960e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009612:	2b15      	cmp	r3, #21
 8009614:	d8f6      	bhi.n	8009604 <_printf_i+0x28>
 8009616:	a101      	add	r1, pc, #4	; (adr r1, 800961c <_printf_i+0x40>)
 8009618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800961c:	08009675 	.word	0x08009675
 8009620:	08009689 	.word	0x08009689
 8009624:	08009605 	.word	0x08009605
 8009628:	08009605 	.word	0x08009605
 800962c:	08009605 	.word	0x08009605
 8009630:	08009605 	.word	0x08009605
 8009634:	08009689 	.word	0x08009689
 8009638:	08009605 	.word	0x08009605
 800963c:	08009605 	.word	0x08009605
 8009640:	08009605 	.word	0x08009605
 8009644:	08009605 	.word	0x08009605
 8009648:	0800978d 	.word	0x0800978d
 800964c:	080096b5 	.word	0x080096b5
 8009650:	08009747 	.word	0x08009747
 8009654:	08009605 	.word	0x08009605
 8009658:	08009605 	.word	0x08009605
 800965c:	080097af 	.word	0x080097af
 8009660:	08009605 	.word	0x08009605
 8009664:	080096b5 	.word	0x080096b5
 8009668:	08009605 	.word	0x08009605
 800966c:	08009605 	.word	0x08009605
 8009670:	0800974f 	.word	0x0800974f
 8009674:	682b      	ldr	r3, [r5, #0]
 8009676:	1d1a      	adds	r2, r3, #4
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	602a      	str	r2, [r5, #0]
 800967c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009680:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009684:	2301      	movs	r3, #1
 8009686:	e09f      	b.n	80097c8 <_printf_i+0x1ec>
 8009688:	6820      	ldr	r0, [r4, #0]
 800968a:	682b      	ldr	r3, [r5, #0]
 800968c:	0607      	lsls	r7, r0, #24
 800968e:	f103 0104 	add.w	r1, r3, #4
 8009692:	6029      	str	r1, [r5, #0]
 8009694:	d501      	bpl.n	800969a <_printf_i+0xbe>
 8009696:	681e      	ldr	r6, [r3, #0]
 8009698:	e003      	b.n	80096a2 <_printf_i+0xc6>
 800969a:	0646      	lsls	r6, r0, #25
 800969c:	d5fb      	bpl.n	8009696 <_printf_i+0xba>
 800969e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80096a2:	2e00      	cmp	r6, #0
 80096a4:	da03      	bge.n	80096ae <_printf_i+0xd2>
 80096a6:	232d      	movs	r3, #45	; 0x2d
 80096a8:	4276      	negs	r6, r6
 80096aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ae:	485a      	ldr	r0, [pc, #360]	; (8009818 <_printf_i+0x23c>)
 80096b0:	230a      	movs	r3, #10
 80096b2:	e012      	b.n	80096da <_printf_i+0xfe>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	6820      	ldr	r0, [r4, #0]
 80096b8:	1d19      	adds	r1, r3, #4
 80096ba:	6029      	str	r1, [r5, #0]
 80096bc:	0605      	lsls	r5, r0, #24
 80096be:	d501      	bpl.n	80096c4 <_printf_i+0xe8>
 80096c0:	681e      	ldr	r6, [r3, #0]
 80096c2:	e002      	b.n	80096ca <_printf_i+0xee>
 80096c4:	0641      	lsls	r1, r0, #25
 80096c6:	d5fb      	bpl.n	80096c0 <_printf_i+0xe4>
 80096c8:	881e      	ldrh	r6, [r3, #0]
 80096ca:	4853      	ldr	r0, [pc, #332]	; (8009818 <_printf_i+0x23c>)
 80096cc:	2f6f      	cmp	r7, #111	; 0x6f
 80096ce:	bf0c      	ite	eq
 80096d0:	2308      	moveq	r3, #8
 80096d2:	230a      	movne	r3, #10
 80096d4:	2100      	movs	r1, #0
 80096d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096da:	6865      	ldr	r5, [r4, #4]
 80096dc:	60a5      	str	r5, [r4, #8]
 80096de:	2d00      	cmp	r5, #0
 80096e0:	bfa2      	ittt	ge
 80096e2:	6821      	ldrge	r1, [r4, #0]
 80096e4:	f021 0104 	bicge.w	r1, r1, #4
 80096e8:	6021      	strge	r1, [r4, #0]
 80096ea:	b90e      	cbnz	r6, 80096f0 <_printf_i+0x114>
 80096ec:	2d00      	cmp	r5, #0
 80096ee:	d04b      	beq.n	8009788 <_printf_i+0x1ac>
 80096f0:	4615      	mov	r5, r2
 80096f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80096f6:	fb03 6711 	mls	r7, r3, r1, r6
 80096fa:	5dc7      	ldrb	r7, [r0, r7]
 80096fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009700:	4637      	mov	r7, r6
 8009702:	42bb      	cmp	r3, r7
 8009704:	460e      	mov	r6, r1
 8009706:	d9f4      	bls.n	80096f2 <_printf_i+0x116>
 8009708:	2b08      	cmp	r3, #8
 800970a:	d10b      	bne.n	8009724 <_printf_i+0x148>
 800970c:	6823      	ldr	r3, [r4, #0]
 800970e:	07de      	lsls	r6, r3, #31
 8009710:	d508      	bpl.n	8009724 <_printf_i+0x148>
 8009712:	6923      	ldr	r3, [r4, #16]
 8009714:	6861      	ldr	r1, [r4, #4]
 8009716:	4299      	cmp	r1, r3
 8009718:	bfde      	ittt	le
 800971a:	2330      	movle	r3, #48	; 0x30
 800971c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009720:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009724:	1b52      	subs	r2, r2, r5
 8009726:	6122      	str	r2, [r4, #16]
 8009728:	f8cd a000 	str.w	sl, [sp]
 800972c:	464b      	mov	r3, r9
 800972e:	aa03      	add	r2, sp, #12
 8009730:	4621      	mov	r1, r4
 8009732:	4640      	mov	r0, r8
 8009734:	f7ff fee4 	bl	8009500 <_printf_common>
 8009738:	3001      	adds	r0, #1
 800973a:	d14a      	bne.n	80097d2 <_printf_i+0x1f6>
 800973c:	f04f 30ff 	mov.w	r0, #4294967295
 8009740:	b004      	add	sp, #16
 8009742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009746:	6823      	ldr	r3, [r4, #0]
 8009748:	f043 0320 	orr.w	r3, r3, #32
 800974c:	6023      	str	r3, [r4, #0]
 800974e:	4833      	ldr	r0, [pc, #204]	; (800981c <_printf_i+0x240>)
 8009750:	2778      	movs	r7, #120	; 0x78
 8009752:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	6829      	ldr	r1, [r5, #0]
 800975a:	061f      	lsls	r7, r3, #24
 800975c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009760:	d402      	bmi.n	8009768 <_printf_i+0x18c>
 8009762:	065f      	lsls	r7, r3, #25
 8009764:	bf48      	it	mi
 8009766:	b2b6      	uxthmi	r6, r6
 8009768:	07df      	lsls	r7, r3, #31
 800976a:	bf48      	it	mi
 800976c:	f043 0320 	orrmi.w	r3, r3, #32
 8009770:	6029      	str	r1, [r5, #0]
 8009772:	bf48      	it	mi
 8009774:	6023      	strmi	r3, [r4, #0]
 8009776:	b91e      	cbnz	r6, 8009780 <_printf_i+0x1a4>
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	f023 0320 	bic.w	r3, r3, #32
 800977e:	6023      	str	r3, [r4, #0]
 8009780:	2310      	movs	r3, #16
 8009782:	e7a7      	b.n	80096d4 <_printf_i+0xf8>
 8009784:	4824      	ldr	r0, [pc, #144]	; (8009818 <_printf_i+0x23c>)
 8009786:	e7e4      	b.n	8009752 <_printf_i+0x176>
 8009788:	4615      	mov	r5, r2
 800978a:	e7bd      	b.n	8009708 <_printf_i+0x12c>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	6826      	ldr	r6, [r4, #0]
 8009790:	6961      	ldr	r1, [r4, #20]
 8009792:	1d18      	adds	r0, r3, #4
 8009794:	6028      	str	r0, [r5, #0]
 8009796:	0635      	lsls	r5, r6, #24
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	d501      	bpl.n	80097a0 <_printf_i+0x1c4>
 800979c:	6019      	str	r1, [r3, #0]
 800979e:	e002      	b.n	80097a6 <_printf_i+0x1ca>
 80097a0:	0670      	lsls	r0, r6, #25
 80097a2:	d5fb      	bpl.n	800979c <_printf_i+0x1c0>
 80097a4:	8019      	strh	r1, [r3, #0]
 80097a6:	2300      	movs	r3, #0
 80097a8:	6123      	str	r3, [r4, #16]
 80097aa:	4615      	mov	r5, r2
 80097ac:	e7bc      	b.n	8009728 <_printf_i+0x14c>
 80097ae:	682b      	ldr	r3, [r5, #0]
 80097b0:	1d1a      	adds	r2, r3, #4
 80097b2:	602a      	str	r2, [r5, #0]
 80097b4:	681d      	ldr	r5, [r3, #0]
 80097b6:	6862      	ldr	r2, [r4, #4]
 80097b8:	2100      	movs	r1, #0
 80097ba:	4628      	mov	r0, r5
 80097bc:	f7f6 fd10 	bl	80001e0 <memchr>
 80097c0:	b108      	cbz	r0, 80097c6 <_printf_i+0x1ea>
 80097c2:	1b40      	subs	r0, r0, r5
 80097c4:	6060      	str	r0, [r4, #4]
 80097c6:	6863      	ldr	r3, [r4, #4]
 80097c8:	6123      	str	r3, [r4, #16]
 80097ca:	2300      	movs	r3, #0
 80097cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097d0:	e7aa      	b.n	8009728 <_printf_i+0x14c>
 80097d2:	6923      	ldr	r3, [r4, #16]
 80097d4:	462a      	mov	r2, r5
 80097d6:	4649      	mov	r1, r9
 80097d8:	4640      	mov	r0, r8
 80097da:	47d0      	blx	sl
 80097dc:	3001      	adds	r0, #1
 80097de:	d0ad      	beq.n	800973c <_printf_i+0x160>
 80097e0:	6823      	ldr	r3, [r4, #0]
 80097e2:	079b      	lsls	r3, r3, #30
 80097e4:	d413      	bmi.n	800980e <_printf_i+0x232>
 80097e6:	68e0      	ldr	r0, [r4, #12]
 80097e8:	9b03      	ldr	r3, [sp, #12]
 80097ea:	4298      	cmp	r0, r3
 80097ec:	bfb8      	it	lt
 80097ee:	4618      	movlt	r0, r3
 80097f0:	e7a6      	b.n	8009740 <_printf_i+0x164>
 80097f2:	2301      	movs	r3, #1
 80097f4:	4632      	mov	r2, r6
 80097f6:	4649      	mov	r1, r9
 80097f8:	4640      	mov	r0, r8
 80097fa:	47d0      	blx	sl
 80097fc:	3001      	adds	r0, #1
 80097fe:	d09d      	beq.n	800973c <_printf_i+0x160>
 8009800:	3501      	adds	r5, #1
 8009802:	68e3      	ldr	r3, [r4, #12]
 8009804:	9903      	ldr	r1, [sp, #12]
 8009806:	1a5b      	subs	r3, r3, r1
 8009808:	42ab      	cmp	r3, r5
 800980a:	dcf2      	bgt.n	80097f2 <_printf_i+0x216>
 800980c:	e7eb      	b.n	80097e6 <_printf_i+0x20a>
 800980e:	2500      	movs	r5, #0
 8009810:	f104 0619 	add.w	r6, r4, #25
 8009814:	e7f5      	b.n	8009802 <_printf_i+0x226>
 8009816:	bf00      	nop
 8009818:	0800a745 	.word	0x0800a745
 800981c:	0800a756 	.word	0x0800a756

08009820 <__sflush_r>:
 8009820:	898a      	ldrh	r2, [r1, #12]
 8009822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009826:	4605      	mov	r5, r0
 8009828:	0710      	lsls	r0, r2, #28
 800982a:	460c      	mov	r4, r1
 800982c:	d458      	bmi.n	80098e0 <__sflush_r+0xc0>
 800982e:	684b      	ldr	r3, [r1, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	dc05      	bgt.n	8009840 <__sflush_r+0x20>
 8009834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009836:	2b00      	cmp	r3, #0
 8009838:	dc02      	bgt.n	8009840 <__sflush_r+0x20>
 800983a:	2000      	movs	r0, #0
 800983c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009842:	2e00      	cmp	r6, #0
 8009844:	d0f9      	beq.n	800983a <__sflush_r+0x1a>
 8009846:	2300      	movs	r3, #0
 8009848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800984c:	682f      	ldr	r7, [r5, #0]
 800984e:	6a21      	ldr	r1, [r4, #32]
 8009850:	602b      	str	r3, [r5, #0]
 8009852:	d032      	beq.n	80098ba <__sflush_r+0x9a>
 8009854:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009856:	89a3      	ldrh	r3, [r4, #12]
 8009858:	075a      	lsls	r2, r3, #29
 800985a:	d505      	bpl.n	8009868 <__sflush_r+0x48>
 800985c:	6863      	ldr	r3, [r4, #4]
 800985e:	1ac0      	subs	r0, r0, r3
 8009860:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009862:	b10b      	cbz	r3, 8009868 <__sflush_r+0x48>
 8009864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009866:	1ac0      	subs	r0, r0, r3
 8009868:	2300      	movs	r3, #0
 800986a:	4602      	mov	r2, r0
 800986c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800986e:	6a21      	ldr	r1, [r4, #32]
 8009870:	4628      	mov	r0, r5
 8009872:	47b0      	blx	r6
 8009874:	1c43      	adds	r3, r0, #1
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	d106      	bne.n	8009888 <__sflush_r+0x68>
 800987a:	6829      	ldr	r1, [r5, #0]
 800987c:	291d      	cmp	r1, #29
 800987e:	d82b      	bhi.n	80098d8 <__sflush_r+0xb8>
 8009880:	4a29      	ldr	r2, [pc, #164]	; (8009928 <__sflush_r+0x108>)
 8009882:	410a      	asrs	r2, r1
 8009884:	07d6      	lsls	r6, r2, #31
 8009886:	d427      	bmi.n	80098d8 <__sflush_r+0xb8>
 8009888:	2200      	movs	r2, #0
 800988a:	6062      	str	r2, [r4, #4]
 800988c:	04d9      	lsls	r1, r3, #19
 800988e:	6922      	ldr	r2, [r4, #16]
 8009890:	6022      	str	r2, [r4, #0]
 8009892:	d504      	bpl.n	800989e <__sflush_r+0x7e>
 8009894:	1c42      	adds	r2, r0, #1
 8009896:	d101      	bne.n	800989c <__sflush_r+0x7c>
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	b903      	cbnz	r3, 800989e <__sflush_r+0x7e>
 800989c:	6560      	str	r0, [r4, #84]	; 0x54
 800989e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098a0:	602f      	str	r7, [r5, #0]
 80098a2:	2900      	cmp	r1, #0
 80098a4:	d0c9      	beq.n	800983a <__sflush_r+0x1a>
 80098a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098aa:	4299      	cmp	r1, r3
 80098ac:	d002      	beq.n	80098b4 <__sflush_r+0x94>
 80098ae:	4628      	mov	r0, r5
 80098b0:	f7fe fbaa 	bl	8008008 <_free_r>
 80098b4:	2000      	movs	r0, #0
 80098b6:	6360      	str	r0, [r4, #52]	; 0x34
 80098b8:	e7c0      	b.n	800983c <__sflush_r+0x1c>
 80098ba:	2301      	movs	r3, #1
 80098bc:	4628      	mov	r0, r5
 80098be:	47b0      	blx	r6
 80098c0:	1c41      	adds	r1, r0, #1
 80098c2:	d1c8      	bne.n	8009856 <__sflush_r+0x36>
 80098c4:	682b      	ldr	r3, [r5, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d0c5      	beq.n	8009856 <__sflush_r+0x36>
 80098ca:	2b1d      	cmp	r3, #29
 80098cc:	d001      	beq.n	80098d2 <__sflush_r+0xb2>
 80098ce:	2b16      	cmp	r3, #22
 80098d0:	d101      	bne.n	80098d6 <__sflush_r+0xb6>
 80098d2:	602f      	str	r7, [r5, #0]
 80098d4:	e7b1      	b.n	800983a <__sflush_r+0x1a>
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098dc:	81a3      	strh	r3, [r4, #12]
 80098de:	e7ad      	b.n	800983c <__sflush_r+0x1c>
 80098e0:	690f      	ldr	r7, [r1, #16]
 80098e2:	2f00      	cmp	r7, #0
 80098e4:	d0a9      	beq.n	800983a <__sflush_r+0x1a>
 80098e6:	0793      	lsls	r3, r2, #30
 80098e8:	680e      	ldr	r6, [r1, #0]
 80098ea:	bf08      	it	eq
 80098ec:	694b      	ldreq	r3, [r1, #20]
 80098ee:	600f      	str	r7, [r1, #0]
 80098f0:	bf18      	it	ne
 80098f2:	2300      	movne	r3, #0
 80098f4:	eba6 0807 	sub.w	r8, r6, r7
 80098f8:	608b      	str	r3, [r1, #8]
 80098fa:	f1b8 0f00 	cmp.w	r8, #0
 80098fe:	dd9c      	ble.n	800983a <__sflush_r+0x1a>
 8009900:	6a21      	ldr	r1, [r4, #32]
 8009902:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009904:	4643      	mov	r3, r8
 8009906:	463a      	mov	r2, r7
 8009908:	4628      	mov	r0, r5
 800990a:	47b0      	blx	r6
 800990c:	2800      	cmp	r0, #0
 800990e:	dc06      	bgt.n	800991e <__sflush_r+0xfe>
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009916:	81a3      	strh	r3, [r4, #12]
 8009918:	f04f 30ff 	mov.w	r0, #4294967295
 800991c:	e78e      	b.n	800983c <__sflush_r+0x1c>
 800991e:	4407      	add	r7, r0
 8009920:	eba8 0800 	sub.w	r8, r8, r0
 8009924:	e7e9      	b.n	80098fa <__sflush_r+0xda>
 8009926:	bf00      	nop
 8009928:	dfbffffe 	.word	0xdfbffffe

0800992c <_fflush_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	690b      	ldr	r3, [r1, #16]
 8009930:	4605      	mov	r5, r0
 8009932:	460c      	mov	r4, r1
 8009934:	b913      	cbnz	r3, 800993c <_fflush_r+0x10>
 8009936:	2500      	movs	r5, #0
 8009938:	4628      	mov	r0, r5
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	b118      	cbz	r0, 8009946 <_fflush_r+0x1a>
 800993e:	6a03      	ldr	r3, [r0, #32]
 8009940:	b90b      	cbnz	r3, 8009946 <_fflush_r+0x1a>
 8009942:	f7fe f9a3 	bl	8007c8c <__sinit>
 8009946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0f3      	beq.n	8009936 <_fflush_r+0xa>
 800994e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009950:	07d0      	lsls	r0, r2, #31
 8009952:	d404      	bmi.n	800995e <_fflush_r+0x32>
 8009954:	0599      	lsls	r1, r3, #22
 8009956:	d402      	bmi.n	800995e <_fflush_r+0x32>
 8009958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800995a:	f7fe fb18 	bl	8007f8e <__retarget_lock_acquire_recursive>
 800995e:	4628      	mov	r0, r5
 8009960:	4621      	mov	r1, r4
 8009962:	f7ff ff5d 	bl	8009820 <__sflush_r>
 8009966:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009968:	07da      	lsls	r2, r3, #31
 800996a:	4605      	mov	r5, r0
 800996c:	d4e4      	bmi.n	8009938 <_fflush_r+0xc>
 800996e:	89a3      	ldrh	r3, [r4, #12]
 8009970:	059b      	lsls	r3, r3, #22
 8009972:	d4e1      	bmi.n	8009938 <_fflush_r+0xc>
 8009974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009976:	f7fe fb0b 	bl	8007f90 <__retarget_lock_release_recursive>
 800997a:	e7dd      	b.n	8009938 <_fflush_r+0xc>

0800997c <fiprintf>:
 800997c:	b40e      	push	{r1, r2, r3}
 800997e:	b503      	push	{r0, r1, lr}
 8009980:	4601      	mov	r1, r0
 8009982:	ab03      	add	r3, sp, #12
 8009984:	4805      	ldr	r0, [pc, #20]	; (800999c <fiprintf+0x20>)
 8009986:	f853 2b04 	ldr.w	r2, [r3], #4
 800998a:	6800      	ldr	r0, [r0, #0]
 800998c:	9301      	str	r3, [sp, #4]
 800998e:	f000 f8a7 	bl	8009ae0 <_vfiprintf_r>
 8009992:	b002      	add	sp, #8
 8009994:	f85d eb04 	ldr.w	lr, [sp], #4
 8009998:	b003      	add	sp, #12
 800999a:	4770      	bx	lr
 800999c:	200001d0 	.word	0x200001d0

080099a0 <memmove>:
 80099a0:	4288      	cmp	r0, r1
 80099a2:	b510      	push	{r4, lr}
 80099a4:	eb01 0402 	add.w	r4, r1, r2
 80099a8:	d902      	bls.n	80099b0 <memmove+0x10>
 80099aa:	4284      	cmp	r4, r0
 80099ac:	4623      	mov	r3, r4
 80099ae:	d807      	bhi.n	80099c0 <memmove+0x20>
 80099b0:	1e43      	subs	r3, r0, #1
 80099b2:	42a1      	cmp	r1, r4
 80099b4:	d008      	beq.n	80099c8 <memmove+0x28>
 80099b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099be:	e7f8      	b.n	80099b2 <memmove+0x12>
 80099c0:	4402      	add	r2, r0
 80099c2:	4601      	mov	r1, r0
 80099c4:	428a      	cmp	r2, r1
 80099c6:	d100      	bne.n	80099ca <memmove+0x2a>
 80099c8:	bd10      	pop	{r4, pc}
 80099ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099d2:	e7f7      	b.n	80099c4 <memmove+0x24>

080099d4 <_sbrk_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d06      	ldr	r5, [pc, #24]	; (80099f0 <_sbrk_r+0x1c>)
 80099d8:	2300      	movs	r3, #0
 80099da:	4604      	mov	r4, r0
 80099dc:	4608      	mov	r0, r1
 80099de:	602b      	str	r3, [r5, #0]
 80099e0:	f7f9 f802 	bl	80029e8 <_sbrk>
 80099e4:	1c43      	adds	r3, r0, #1
 80099e6:	d102      	bne.n	80099ee <_sbrk_r+0x1a>
 80099e8:	682b      	ldr	r3, [r5, #0]
 80099ea:	b103      	cbz	r3, 80099ee <_sbrk_r+0x1a>
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	bd38      	pop	{r3, r4, r5, pc}
 80099f0:	2000078c 	.word	0x2000078c

080099f4 <abort>:
 80099f4:	b508      	push	{r3, lr}
 80099f6:	2006      	movs	r0, #6
 80099f8:	f000 fa4a 	bl	8009e90 <raise>
 80099fc:	2001      	movs	r0, #1
 80099fe:	f7f8 ff7b 	bl	80028f8 <_exit>

08009a02 <_calloc_r>:
 8009a02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a04:	fba1 2402 	umull	r2, r4, r1, r2
 8009a08:	b94c      	cbnz	r4, 8009a1e <_calloc_r+0x1c>
 8009a0a:	4611      	mov	r1, r2
 8009a0c:	9201      	str	r2, [sp, #4]
 8009a0e:	f7fe fec7 	bl	80087a0 <_malloc_r>
 8009a12:	9a01      	ldr	r2, [sp, #4]
 8009a14:	4605      	mov	r5, r0
 8009a16:	b930      	cbnz	r0, 8009a26 <_calloc_r+0x24>
 8009a18:	4628      	mov	r0, r5
 8009a1a:	b003      	add	sp, #12
 8009a1c:	bd30      	pop	{r4, r5, pc}
 8009a1e:	220c      	movs	r2, #12
 8009a20:	6002      	str	r2, [r0, #0]
 8009a22:	2500      	movs	r5, #0
 8009a24:	e7f8      	b.n	8009a18 <_calloc_r+0x16>
 8009a26:	4621      	mov	r1, r4
 8009a28:	f7fe f9c9 	bl	8007dbe <memset>
 8009a2c:	e7f4      	b.n	8009a18 <_calloc_r+0x16>

08009a2e <_realloc_r>:
 8009a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a32:	4680      	mov	r8, r0
 8009a34:	4614      	mov	r4, r2
 8009a36:	460e      	mov	r6, r1
 8009a38:	b921      	cbnz	r1, 8009a44 <_realloc_r+0x16>
 8009a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a3e:	4611      	mov	r1, r2
 8009a40:	f7fe beae 	b.w	80087a0 <_malloc_r>
 8009a44:	b92a      	cbnz	r2, 8009a52 <_realloc_r+0x24>
 8009a46:	f7fe fadf 	bl	8008008 <_free_r>
 8009a4a:	4625      	mov	r5, r4
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a52:	f000 fa39 	bl	8009ec8 <_malloc_usable_size_r>
 8009a56:	4284      	cmp	r4, r0
 8009a58:	4607      	mov	r7, r0
 8009a5a:	d802      	bhi.n	8009a62 <_realloc_r+0x34>
 8009a5c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a60:	d812      	bhi.n	8009a88 <_realloc_r+0x5a>
 8009a62:	4621      	mov	r1, r4
 8009a64:	4640      	mov	r0, r8
 8009a66:	f7fe fe9b 	bl	80087a0 <_malloc_r>
 8009a6a:	4605      	mov	r5, r0
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d0ed      	beq.n	8009a4c <_realloc_r+0x1e>
 8009a70:	42bc      	cmp	r4, r7
 8009a72:	4622      	mov	r2, r4
 8009a74:	4631      	mov	r1, r6
 8009a76:	bf28      	it	cs
 8009a78:	463a      	movcs	r2, r7
 8009a7a:	f7fe fa8a 	bl	8007f92 <memcpy>
 8009a7e:	4631      	mov	r1, r6
 8009a80:	4640      	mov	r0, r8
 8009a82:	f7fe fac1 	bl	8008008 <_free_r>
 8009a86:	e7e1      	b.n	8009a4c <_realloc_r+0x1e>
 8009a88:	4635      	mov	r5, r6
 8009a8a:	e7df      	b.n	8009a4c <_realloc_r+0x1e>

08009a8c <__sfputc_r>:
 8009a8c:	6893      	ldr	r3, [r2, #8]
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	b410      	push	{r4}
 8009a94:	6093      	str	r3, [r2, #8]
 8009a96:	da08      	bge.n	8009aaa <__sfputc_r+0x1e>
 8009a98:	6994      	ldr	r4, [r2, #24]
 8009a9a:	42a3      	cmp	r3, r4
 8009a9c:	db01      	blt.n	8009aa2 <__sfputc_r+0x16>
 8009a9e:	290a      	cmp	r1, #10
 8009aa0:	d103      	bne.n	8009aaa <__sfputc_r+0x1e>
 8009aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aa6:	f000 b935 	b.w	8009d14 <__swbuf_r>
 8009aaa:	6813      	ldr	r3, [r2, #0]
 8009aac:	1c58      	adds	r0, r3, #1
 8009aae:	6010      	str	r0, [r2, #0]
 8009ab0:	7019      	strb	r1, [r3, #0]
 8009ab2:	4608      	mov	r0, r1
 8009ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <__sfputs_r>:
 8009aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009abc:	4606      	mov	r6, r0
 8009abe:	460f      	mov	r7, r1
 8009ac0:	4614      	mov	r4, r2
 8009ac2:	18d5      	adds	r5, r2, r3
 8009ac4:	42ac      	cmp	r4, r5
 8009ac6:	d101      	bne.n	8009acc <__sfputs_r+0x12>
 8009ac8:	2000      	movs	r0, #0
 8009aca:	e007      	b.n	8009adc <__sfputs_r+0x22>
 8009acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ad0:	463a      	mov	r2, r7
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	f7ff ffda 	bl	8009a8c <__sfputc_r>
 8009ad8:	1c43      	adds	r3, r0, #1
 8009ada:	d1f3      	bne.n	8009ac4 <__sfputs_r+0xa>
 8009adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ae0 <_vfiprintf_r>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	460d      	mov	r5, r1
 8009ae6:	b09d      	sub	sp, #116	; 0x74
 8009ae8:	4614      	mov	r4, r2
 8009aea:	4698      	mov	r8, r3
 8009aec:	4606      	mov	r6, r0
 8009aee:	b118      	cbz	r0, 8009af8 <_vfiprintf_r+0x18>
 8009af0:	6a03      	ldr	r3, [r0, #32]
 8009af2:	b90b      	cbnz	r3, 8009af8 <_vfiprintf_r+0x18>
 8009af4:	f7fe f8ca 	bl	8007c8c <__sinit>
 8009af8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009afa:	07d9      	lsls	r1, r3, #31
 8009afc:	d405      	bmi.n	8009b0a <_vfiprintf_r+0x2a>
 8009afe:	89ab      	ldrh	r3, [r5, #12]
 8009b00:	059a      	lsls	r2, r3, #22
 8009b02:	d402      	bmi.n	8009b0a <_vfiprintf_r+0x2a>
 8009b04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b06:	f7fe fa42 	bl	8007f8e <__retarget_lock_acquire_recursive>
 8009b0a:	89ab      	ldrh	r3, [r5, #12]
 8009b0c:	071b      	lsls	r3, r3, #28
 8009b0e:	d501      	bpl.n	8009b14 <_vfiprintf_r+0x34>
 8009b10:	692b      	ldr	r3, [r5, #16]
 8009b12:	b99b      	cbnz	r3, 8009b3c <_vfiprintf_r+0x5c>
 8009b14:	4629      	mov	r1, r5
 8009b16:	4630      	mov	r0, r6
 8009b18:	f000 f93a 	bl	8009d90 <__swsetup_r>
 8009b1c:	b170      	cbz	r0, 8009b3c <_vfiprintf_r+0x5c>
 8009b1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b20:	07dc      	lsls	r4, r3, #31
 8009b22:	d504      	bpl.n	8009b2e <_vfiprintf_r+0x4e>
 8009b24:	f04f 30ff 	mov.w	r0, #4294967295
 8009b28:	b01d      	add	sp, #116	; 0x74
 8009b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2e:	89ab      	ldrh	r3, [r5, #12]
 8009b30:	0598      	lsls	r0, r3, #22
 8009b32:	d4f7      	bmi.n	8009b24 <_vfiprintf_r+0x44>
 8009b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b36:	f7fe fa2b 	bl	8007f90 <__retarget_lock_release_recursive>
 8009b3a:	e7f3      	b.n	8009b24 <_vfiprintf_r+0x44>
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b40:	2320      	movs	r3, #32
 8009b42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b4a:	2330      	movs	r3, #48	; 0x30
 8009b4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009d00 <_vfiprintf_r+0x220>
 8009b50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b54:	f04f 0901 	mov.w	r9, #1
 8009b58:	4623      	mov	r3, r4
 8009b5a:	469a      	mov	sl, r3
 8009b5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b60:	b10a      	cbz	r2, 8009b66 <_vfiprintf_r+0x86>
 8009b62:	2a25      	cmp	r2, #37	; 0x25
 8009b64:	d1f9      	bne.n	8009b5a <_vfiprintf_r+0x7a>
 8009b66:	ebba 0b04 	subs.w	fp, sl, r4
 8009b6a:	d00b      	beq.n	8009b84 <_vfiprintf_r+0xa4>
 8009b6c:	465b      	mov	r3, fp
 8009b6e:	4622      	mov	r2, r4
 8009b70:	4629      	mov	r1, r5
 8009b72:	4630      	mov	r0, r6
 8009b74:	f7ff ffa1 	bl	8009aba <__sfputs_r>
 8009b78:	3001      	adds	r0, #1
 8009b7a:	f000 80a9 	beq.w	8009cd0 <_vfiprintf_r+0x1f0>
 8009b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b80:	445a      	add	r2, fp
 8009b82:	9209      	str	r2, [sp, #36]	; 0x24
 8009b84:	f89a 3000 	ldrb.w	r3, [sl]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 80a1 	beq.w	8009cd0 <_vfiprintf_r+0x1f0>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f04f 32ff 	mov.w	r2, #4294967295
 8009b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b98:	f10a 0a01 	add.w	sl, sl, #1
 8009b9c:	9304      	str	r3, [sp, #16]
 8009b9e:	9307      	str	r3, [sp, #28]
 8009ba0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ba4:	931a      	str	r3, [sp, #104]	; 0x68
 8009ba6:	4654      	mov	r4, sl
 8009ba8:	2205      	movs	r2, #5
 8009baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bae:	4854      	ldr	r0, [pc, #336]	; (8009d00 <_vfiprintf_r+0x220>)
 8009bb0:	f7f6 fb16 	bl	80001e0 <memchr>
 8009bb4:	9a04      	ldr	r2, [sp, #16]
 8009bb6:	b9d8      	cbnz	r0, 8009bf0 <_vfiprintf_r+0x110>
 8009bb8:	06d1      	lsls	r1, r2, #27
 8009bba:	bf44      	itt	mi
 8009bbc:	2320      	movmi	r3, #32
 8009bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bc2:	0713      	lsls	r3, r2, #28
 8009bc4:	bf44      	itt	mi
 8009bc6:	232b      	movmi	r3, #43	; 0x2b
 8009bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8009bd2:	d015      	beq.n	8009c00 <_vfiprintf_r+0x120>
 8009bd4:	9a07      	ldr	r2, [sp, #28]
 8009bd6:	4654      	mov	r4, sl
 8009bd8:	2000      	movs	r0, #0
 8009bda:	f04f 0c0a 	mov.w	ip, #10
 8009bde:	4621      	mov	r1, r4
 8009be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009be4:	3b30      	subs	r3, #48	; 0x30
 8009be6:	2b09      	cmp	r3, #9
 8009be8:	d94d      	bls.n	8009c86 <_vfiprintf_r+0x1a6>
 8009bea:	b1b0      	cbz	r0, 8009c1a <_vfiprintf_r+0x13a>
 8009bec:	9207      	str	r2, [sp, #28]
 8009bee:	e014      	b.n	8009c1a <_vfiprintf_r+0x13a>
 8009bf0:	eba0 0308 	sub.w	r3, r0, r8
 8009bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	9304      	str	r3, [sp, #16]
 8009bfc:	46a2      	mov	sl, r4
 8009bfe:	e7d2      	b.n	8009ba6 <_vfiprintf_r+0xc6>
 8009c00:	9b03      	ldr	r3, [sp, #12]
 8009c02:	1d19      	adds	r1, r3, #4
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	9103      	str	r1, [sp, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	bfbb      	ittet	lt
 8009c0c:	425b      	neglt	r3, r3
 8009c0e:	f042 0202 	orrlt.w	r2, r2, #2
 8009c12:	9307      	strge	r3, [sp, #28]
 8009c14:	9307      	strlt	r3, [sp, #28]
 8009c16:	bfb8      	it	lt
 8009c18:	9204      	strlt	r2, [sp, #16]
 8009c1a:	7823      	ldrb	r3, [r4, #0]
 8009c1c:	2b2e      	cmp	r3, #46	; 0x2e
 8009c1e:	d10c      	bne.n	8009c3a <_vfiprintf_r+0x15a>
 8009c20:	7863      	ldrb	r3, [r4, #1]
 8009c22:	2b2a      	cmp	r3, #42	; 0x2a
 8009c24:	d134      	bne.n	8009c90 <_vfiprintf_r+0x1b0>
 8009c26:	9b03      	ldr	r3, [sp, #12]
 8009c28:	1d1a      	adds	r2, r3, #4
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	9203      	str	r2, [sp, #12]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	bfb8      	it	lt
 8009c32:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c36:	3402      	adds	r4, #2
 8009c38:	9305      	str	r3, [sp, #20]
 8009c3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009d10 <_vfiprintf_r+0x230>
 8009c3e:	7821      	ldrb	r1, [r4, #0]
 8009c40:	2203      	movs	r2, #3
 8009c42:	4650      	mov	r0, sl
 8009c44:	f7f6 facc 	bl	80001e0 <memchr>
 8009c48:	b138      	cbz	r0, 8009c5a <_vfiprintf_r+0x17a>
 8009c4a:	9b04      	ldr	r3, [sp, #16]
 8009c4c:	eba0 000a 	sub.w	r0, r0, sl
 8009c50:	2240      	movs	r2, #64	; 0x40
 8009c52:	4082      	lsls	r2, r0
 8009c54:	4313      	orrs	r3, r2
 8009c56:	3401      	adds	r4, #1
 8009c58:	9304      	str	r3, [sp, #16]
 8009c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c5e:	4829      	ldr	r0, [pc, #164]	; (8009d04 <_vfiprintf_r+0x224>)
 8009c60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c64:	2206      	movs	r2, #6
 8009c66:	f7f6 fabb 	bl	80001e0 <memchr>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d03f      	beq.n	8009cee <_vfiprintf_r+0x20e>
 8009c6e:	4b26      	ldr	r3, [pc, #152]	; (8009d08 <_vfiprintf_r+0x228>)
 8009c70:	bb1b      	cbnz	r3, 8009cba <_vfiprintf_r+0x1da>
 8009c72:	9b03      	ldr	r3, [sp, #12]
 8009c74:	3307      	adds	r3, #7
 8009c76:	f023 0307 	bic.w	r3, r3, #7
 8009c7a:	3308      	adds	r3, #8
 8009c7c:	9303      	str	r3, [sp, #12]
 8009c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c80:	443b      	add	r3, r7
 8009c82:	9309      	str	r3, [sp, #36]	; 0x24
 8009c84:	e768      	b.n	8009b58 <_vfiprintf_r+0x78>
 8009c86:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	2001      	movs	r0, #1
 8009c8e:	e7a6      	b.n	8009bde <_vfiprintf_r+0xfe>
 8009c90:	2300      	movs	r3, #0
 8009c92:	3401      	adds	r4, #1
 8009c94:	9305      	str	r3, [sp, #20]
 8009c96:	4619      	mov	r1, r3
 8009c98:	f04f 0c0a 	mov.w	ip, #10
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ca2:	3a30      	subs	r2, #48	; 0x30
 8009ca4:	2a09      	cmp	r2, #9
 8009ca6:	d903      	bls.n	8009cb0 <_vfiprintf_r+0x1d0>
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d0c6      	beq.n	8009c3a <_vfiprintf_r+0x15a>
 8009cac:	9105      	str	r1, [sp, #20]
 8009cae:	e7c4      	b.n	8009c3a <_vfiprintf_r+0x15a>
 8009cb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e7f0      	b.n	8009c9c <_vfiprintf_r+0x1bc>
 8009cba:	ab03      	add	r3, sp, #12
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	462a      	mov	r2, r5
 8009cc0:	4b12      	ldr	r3, [pc, #72]	; (8009d0c <_vfiprintf_r+0x22c>)
 8009cc2:	a904      	add	r1, sp, #16
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	f3af 8000 	nop.w
 8009cca:	4607      	mov	r7, r0
 8009ccc:	1c78      	adds	r0, r7, #1
 8009cce:	d1d6      	bne.n	8009c7e <_vfiprintf_r+0x19e>
 8009cd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cd2:	07d9      	lsls	r1, r3, #31
 8009cd4:	d405      	bmi.n	8009ce2 <_vfiprintf_r+0x202>
 8009cd6:	89ab      	ldrh	r3, [r5, #12]
 8009cd8:	059a      	lsls	r2, r3, #22
 8009cda:	d402      	bmi.n	8009ce2 <_vfiprintf_r+0x202>
 8009cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cde:	f7fe f957 	bl	8007f90 <__retarget_lock_release_recursive>
 8009ce2:	89ab      	ldrh	r3, [r5, #12]
 8009ce4:	065b      	lsls	r3, r3, #25
 8009ce6:	f53f af1d 	bmi.w	8009b24 <_vfiprintf_r+0x44>
 8009cea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cec:	e71c      	b.n	8009b28 <_vfiprintf_r+0x48>
 8009cee:	ab03      	add	r3, sp, #12
 8009cf0:	9300      	str	r3, [sp, #0]
 8009cf2:	462a      	mov	r2, r5
 8009cf4:	4b05      	ldr	r3, [pc, #20]	; (8009d0c <_vfiprintf_r+0x22c>)
 8009cf6:	a904      	add	r1, sp, #16
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f7ff fc6f 	bl	80095dc <_printf_i>
 8009cfe:	e7e4      	b.n	8009cca <_vfiprintf_r+0x1ea>
 8009d00:	0800a734 	.word	0x0800a734
 8009d04:	0800a73e 	.word	0x0800a73e
 8009d08:	00000000 	.word	0x00000000
 8009d0c:	08009abb 	.word	0x08009abb
 8009d10:	0800a73a 	.word	0x0800a73a

08009d14 <__swbuf_r>:
 8009d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d16:	460e      	mov	r6, r1
 8009d18:	4614      	mov	r4, r2
 8009d1a:	4605      	mov	r5, r0
 8009d1c:	b118      	cbz	r0, 8009d26 <__swbuf_r+0x12>
 8009d1e:	6a03      	ldr	r3, [r0, #32]
 8009d20:	b90b      	cbnz	r3, 8009d26 <__swbuf_r+0x12>
 8009d22:	f7fd ffb3 	bl	8007c8c <__sinit>
 8009d26:	69a3      	ldr	r3, [r4, #24]
 8009d28:	60a3      	str	r3, [r4, #8]
 8009d2a:	89a3      	ldrh	r3, [r4, #12]
 8009d2c:	071a      	lsls	r2, r3, #28
 8009d2e:	d525      	bpl.n	8009d7c <__swbuf_r+0x68>
 8009d30:	6923      	ldr	r3, [r4, #16]
 8009d32:	b31b      	cbz	r3, 8009d7c <__swbuf_r+0x68>
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	6922      	ldr	r2, [r4, #16]
 8009d38:	1a98      	subs	r0, r3, r2
 8009d3a:	6963      	ldr	r3, [r4, #20]
 8009d3c:	b2f6      	uxtb	r6, r6
 8009d3e:	4283      	cmp	r3, r0
 8009d40:	4637      	mov	r7, r6
 8009d42:	dc04      	bgt.n	8009d4e <__swbuf_r+0x3a>
 8009d44:	4621      	mov	r1, r4
 8009d46:	4628      	mov	r0, r5
 8009d48:	f7ff fdf0 	bl	800992c <_fflush_r>
 8009d4c:	b9e0      	cbnz	r0, 8009d88 <__swbuf_r+0x74>
 8009d4e:	68a3      	ldr	r3, [r4, #8]
 8009d50:	3b01      	subs	r3, #1
 8009d52:	60a3      	str	r3, [r4, #8]
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	1c5a      	adds	r2, r3, #1
 8009d58:	6022      	str	r2, [r4, #0]
 8009d5a:	701e      	strb	r6, [r3, #0]
 8009d5c:	6962      	ldr	r2, [r4, #20]
 8009d5e:	1c43      	adds	r3, r0, #1
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d004      	beq.n	8009d6e <__swbuf_r+0x5a>
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	07db      	lsls	r3, r3, #31
 8009d68:	d506      	bpl.n	8009d78 <__swbuf_r+0x64>
 8009d6a:	2e0a      	cmp	r6, #10
 8009d6c:	d104      	bne.n	8009d78 <__swbuf_r+0x64>
 8009d6e:	4621      	mov	r1, r4
 8009d70:	4628      	mov	r0, r5
 8009d72:	f7ff fddb 	bl	800992c <_fflush_r>
 8009d76:	b938      	cbnz	r0, 8009d88 <__swbuf_r+0x74>
 8009d78:	4638      	mov	r0, r7
 8009d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f000 f806 	bl	8009d90 <__swsetup_r>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d0d5      	beq.n	8009d34 <__swbuf_r+0x20>
 8009d88:	f04f 37ff 	mov.w	r7, #4294967295
 8009d8c:	e7f4      	b.n	8009d78 <__swbuf_r+0x64>
	...

08009d90 <__swsetup_r>:
 8009d90:	b538      	push	{r3, r4, r5, lr}
 8009d92:	4b2a      	ldr	r3, [pc, #168]	; (8009e3c <__swsetup_r+0xac>)
 8009d94:	4605      	mov	r5, r0
 8009d96:	6818      	ldr	r0, [r3, #0]
 8009d98:	460c      	mov	r4, r1
 8009d9a:	b118      	cbz	r0, 8009da4 <__swsetup_r+0x14>
 8009d9c:	6a03      	ldr	r3, [r0, #32]
 8009d9e:	b90b      	cbnz	r3, 8009da4 <__swsetup_r+0x14>
 8009da0:	f7fd ff74 	bl	8007c8c <__sinit>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009daa:	0718      	lsls	r0, r3, #28
 8009dac:	d422      	bmi.n	8009df4 <__swsetup_r+0x64>
 8009dae:	06d9      	lsls	r1, r3, #27
 8009db0:	d407      	bmi.n	8009dc2 <__swsetup_r+0x32>
 8009db2:	2309      	movs	r3, #9
 8009db4:	602b      	str	r3, [r5, #0]
 8009db6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009dba:	81a3      	strh	r3, [r4, #12]
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc0:	e034      	b.n	8009e2c <__swsetup_r+0x9c>
 8009dc2:	0758      	lsls	r0, r3, #29
 8009dc4:	d512      	bpl.n	8009dec <__swsetup_r+0x5c>
 8009dc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dc8:	b141      	cbz	r1, 8009ddc <__swsetup_r+0x4c>
 8009dca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dce:	4299      	cmp	r1, r3
 8009dd0:	d002      	beq.n	8009dd8 <__swsetup_r+0x48>
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f7fe f918 	bl	8008008 <_free_r>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	6363      	str	r3, [r4, #52]	; 0x34
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009de2:	81a3      	strh	r3, [r4, #12]
 8009de4:	2300      	movs	r3, #0
 8009de6:	6063      	str	r3, [r4, #4]
 8009de8:	6923      	ldr	r3, [r4, #16]
 8009dea:	6023      	str	r3, [r4, #0]
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	f043 0308 	orr.w	r3, r3, #8
 8009df2:	81a3      	strh	r3, [r4, #12]
 8009df4:	6923      	ldr	r3, [r4, #16]
 8009df6:	b94b      	cbnz	r3, 8009e0c <__swsetup_r+0x7c>
 8009df8:	89a3      	ldrh	r3, [r4, #12]
 8009dfa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e02:	d003      	beq.n	8009e0c <__swsetup_r+0x7c>
 8009e04:	4621      	mov	r1, r4
 8009e06:	4628      	mov	r0, r5
 8009e08:	f000 f88c 	bl	8009f24 <__smakebuf_r>
 8009e0c:	89a0      	ldrh	r0, [r4, #12]
 8009e0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e12:	f010 0301 	ands.w	r3, r0, #1
 8009e16:	d00a      	beq.n	8009e2e <__swsetup_r+0x9e>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	60a3      	str	r3, [r4, #8]
 8009e1c:	6963      	ldr	r3, [r4, #20]
 8009e1e:	425b      	negs	r3, r3
 8009e20:	61a3      	str	r3, [r4, #24]
 8009e22:	6923      	ldr	r3, [r4, #16]
 8009e24:	b943      	cbnz	r3, 8009e38 <__swsetup_r+0xa8>
 8009e26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e2a:	d1c4      	bne.n	8009db6 <__swsetup_r+0x26>
 8009e2c:	bd38      	pop	{r3, r4, r5, pc}
 8009e2e:	0781      	lsls	r1, r0, #30
 8009e30:	bf58      	it	pl
 8009e32:	6963      	ldrpl	r3, [r4, #20]
 8009e34:	60a3      	str	r3, [r4, #8]
 8009e36:	e7f4      	b.n	8009e22 <__swsetup_r+0x92>
 8009e38:	2000      	movs	r0, #0
 8009e3a:	e7f7      	b.n	8009e2c <__swsetup_r+0x9c>
 8009e3c:	200001d0 	.word	0x200001d0

08009e40 <_raise_r>:
 8009e40:	291f      	cmp	r1, #31
 8009e42:	b538      	push	{r3, r4, r5, lr}
 8009e44:	4604      	mov	r4, r0
 8009e46:	460d      	mov	r5, r1
 8009e48:	d904      	bls.n	8009e54 <_raise_r+0x14>
 8009e4a:	2316      	movs	r3, #22
 8009e4c:	6003      	str	r3, [r0, #0]
 8009e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009e56:	b112      	cbz	r2, 8009e5e <_raise_r+0x1e>
 8009e58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e5c:	b94b      	cbnz	r3, 8009e72 <_raise_r+0x32>
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f000 f830 	bl	8009ec4 <_getpid_r>
 8009e64:	462a      	mov	r2, r5
 8009e66:	4601      	mov	r1, r0
 8009e68:	4620      	mov	r0, r4
 8009e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e6e:	f000 b817 	b.w	8009ea0 <_kill_r>
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d00a      	beq.n	8009e8c <_raise_r+0x4c>
 8009e76:	1c59      	adds	r1, r3, #1
 8009e78:	d103      	bne.n	8009e82 <_raise_r+0x42>
 8009e7a:	2316      	movs	r3, #22
 8009e7c:	6003      	str	r3, [r0, #0]
 8009e7e:	2001      	movs	r0, #1
 8009e80:	e7e7      	b.n	8009e52 <_raise_r+0x12>
 8009e82:	2400      	movs	r4, #0
 8009e84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e88:	4628      	mov	r0, r5
 8009e8a:	4798      	blx	r3
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	e7e0      	b.n	8009e52 <_raise_r+0x12>

08009e90 <raise>:
 8009e90:	4b02      	ldr	r3, [pc, #8]	; (8009e9c <raise+0xc>)
 8009e92:	4601      	mov	r1, r0
 8009e94:	6818      	ldr	r0, [r3, #0]
 8009e96:	f7ff bfd3 	b.w	8009e40 <_raise_r>
 8009e9a:	bf00      	nop
 8009e9c:	200001d0 	.word	0x200001d0

08009ea0 <_kill_r>:
 8009ea0:	b538      	push	{r3, r4, r5, lr}
 8009ea2:	4d07      	ldr	r5, [pc, #28]	; (8009ec0 <_kill_r+0x20>)
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	4608      	mov	r0, r1
 8009eaa:	4611      	mov	r1, r2
 8009eac:	602b      	str	r3, [r5, #0]
 8009eae:	f7f8 fd13 	bl	80028d8 <_kill>
 8009eb2:	1c43      	adds	r3, r0, #1
 8009eb4:	d102      	bne.n	8009ebc <_kill_r+0x1c>
 8009eb6:	682b      	ldr	r3, [r5, #0]
 8009eb8:	b103      	cbz	r3, 8009ebc <_kill_r+0x1c>
 8009eba:	6023      	str	r3, [r4, #0]
 8009ebc:	bd38      	pop	{r3, r4, r5, pc}
 8009ebe:	bf00      	nop
 8009ec0:	2000078c 	.word	0x2000078c

08009ec4 <_getpid_r>:
 8009ec4:	f7f8 bd00 	b.w	80028c8 <_getpid>

08009ec8 <_malloc_usable_size_r>:
 8009ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ecc:	1f18      	subs	r0, r3, #4
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	bfbc      	itt	lt
 8009ed2:	580b      	ldrlt	r3, [r1, r0]
 8009ed4:	18c0      	addlt	r0, r0, r3
 8009ed6:	4770      	bx	lr

08009ed8 <__swhatbuf_r>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	460c      	mov	r4, r1
 8009edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee0:	2900      	cmp	r1, #0
 8009ee2:	b096      	sub	sp, #88	; 0x58
 8009ee4:	4615      	mov	r5, r2
 8009ee6:	461e      	mov	r6, r3
 8009ee8:	da0d      	bge.n	8009f06 <__swhatbuf_r+0x2e>
 8009eea:	89a3      	ldrh	r3, [r4, #12]
 8009eec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009ef0:	f04f 0100 	mov.w	r1, #0
 8009ef4:	bf0c      	ite	eq
 8009ef6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009efa:	2340      	movne	r3, #64	; 0x40
 8009efc:	2000      	movs	r0, #0
 8009efe:	6031      	str	r1, [r6, #0]
 8009f00:	602b      	str	r3, [r5, #0]
 8009f02:	b016      	add	sp, #88	; 0x58
 8009f04:	bd70      	pop	{r4, r5, r6, pc}
 8009f06:	466a      	mov	r2, sp
 8009f08:	f000 f848 	bl	8009f9c <_fstat_r>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	dbec      	blt.n	8009eea <__swhatbuf_r+0x12>
 8009f10:	9901      	ldr	r1, [sp, #4]
 8009f12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009f16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009f1a:	4259      	negs	r1, r3
 8009f1c:	4159      	adcs	r1, r3
 8009f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f22:	e7eb      	b.n	8009efc <__swhatbuf_r+0x24>

08009f24 <__smakebuf_r>:
 8009f24:	898b      	ldrh	r3, [r1, #12]
 8009f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f28:	079d      	lsls	r5, r3, #30
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	d507      	bpl.n	8009f40 <__smakebuf_r+0x1c>
 8009f30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	6123      	str	r3, [r4, #16]
 8009f38:	2301      	movs	r3, #1
 8009f3a:	6163      	str	r3, [r4, #20]
 8009f3c:	b002      	add	sp, #8
 8009f3e:	bd70      	pop	{r4, r5, r6, pc}
 8009f40:	ab01      	add	r3, sp, #4
 8009f42:	466a      	mov	r2, sp
 8009f44:	f7ff ffc8 	bl	8009ed8 <__swhatbuf_r>
 8009f48:	9900      	ldr	r1, [sp, #0]
 8009f4a:	4605      	mov	r5, r0
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f7fe fc27 	bl	80087a0 <_malloc_r>
 8009f52:	b948      	cbnz	r0, 8009f68 <__smakebuf_r+0x44>
 8009f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f58:	059a      	lsls	r2, r3, #22
 8009f5a:	d4ef      	bmi.n	8009f3c <__smakebuf_r+0x18>
 8009f5c:	f023 0303 	bic.w	r3, r3, #3
 8009f60:	f043 0302 	orr.w	r3, r3, #2
 8009f64:	81a3      	strh	r3, [r4, #12]
 8009f66:	e7e3      	b.n	8009f30 <__smakebuf_r+0xc>
 8009f68:	89a3      	ldrh	r3, [r4, #12]
 8009f6a:	6020      	str	r0, [r4, #0]
 8009f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f70:	81a3      	strh	r3, [r4, #12]
 8009f72:	9b00      	ldr	r3, [sp, #0]
 8009f74:	6163      	str	r3, [r4, #20]
 8009f76:	9b01      	ldr	r3, [sp, #4]
 8009f78:	6120      	str	r0, [r4, #16]
 8009f7a:	b15b      	cbz	r3, 8009f94 <__smakebuf_r+0x70>
 8009f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f80:	4630      	mov	r0, r6
 8009f82:	f000 f81d 	bl	8009fc0 <_isatty_r>
 8009f86:	b128      	cbz	r0, 8009f94 <__smakebuf_r+0x70>
 8009f88:	89a3      	ldrh	r3, [r4, #12]
 8009f8a:	f023 0303 	bic.w	r3, r3, #3
 8009f8e:	f043 0301 	orr.w	r3, r3, #1
 8009f92:	81a3      	strh	r3, [r4, #12]
 8009f94:	89a3      	ldrh	r3, [r4, #12]
 8009f96:	431d      	orrs	r5, r3
 8009f98:	81a5      	strh	r5, [r4, #12]
 8009f9a:	e7cf      	b.n	8009f3c <__smakebuf_r+0x18>

08009f9c <_fstat_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d07      	ldr	r5, [pc, #28]	; (8009fbc <_fstat_r+0x20>)
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	602b      	str	r3, [r5, #0]
 8009faa:	f7f8 fcf4 	bl	8002996 <_fstat>
 8009fae:	1c43      	adds	r3, r0, #1
 8009fb0:	d102      	bne.n	8009fb8 <_fstat_r+0x1c>
 8009fb2:	682b      	ldr	r3, [r5, #0]
 8009fb4:	b103      	cbz	r3, 8009fb8 <_fstat_r+0x1c>
 8009fb6:	6023      	str	r3, [r4, #0]
 8009fb8:	bd38      	pop	{r3, r4, r5, pc}
 8009fba:	bf00      	nop
 8009fbc:	2000078c 	.word	0x2000078c

08009fc0 <_isatty_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4d06      	ldr	r5, [pc, #24]	; (8009fdc <_isatty_r+0x1c>)
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	4608      	mov	r0, r1
 8009fca:	602b      	str	r3, [r5, #0]
 8009fcc:	f7f8 fcf3 	bl	80029b6 <_isatty>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d102      	bne.n	8009fda <_isatty_r+0x1a>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	b103      	cbz	r3, 8009fda <_isatty_r+0x1a>
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	2000078c 	.word	0x2000078c

08009fe0 <_init>:
 8009fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe2:	bf00      	nop
 8009fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fe6:	bc08      	pop	{r3}
 8009fe8:	469e      	mov	lr, r3
 8009fea:	4770      	bx	lr

08009fec <_fini>:
 8009fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fee:	bf00      	nop
 8009ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ff2:	bc08      	pop	{r3}
 8009ff4:	469e      	mov	lr, r3
 8009ff6:	4770      	bx	lr
