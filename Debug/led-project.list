
led-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  08009478  08009478  00019478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009998  08009998  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009998  08009998  00019998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099a0  080099a0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099a0  080099a0  000199a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099a4  080099a4  000199a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080099a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  200001d4  08009b7c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  08009b7c  00020744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010022  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002720  00000000  00000000  00030269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00032990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bda  00000000  00000000  000338b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d7a  00000000  00000000  0003448a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011cc7  00000000  00000000  0004d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b03f  00000000  00000000  0005eecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005230  00000000  00000000  000f9f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ff13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800945c 	.word	0x0800945c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800945c 	.word	0x0800945c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a6 	b.w	8000f9c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9e08      	ldr	r6, [sp, #32]
 8000cda:	460d      	mov	r5, r1
 8000cdc:	4604      	mov	r4, r0
 8000cde:	460f      	mov	r7, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14a      	bne.n	8000d7a <__udivmoddi4+0xa6>
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	4694      	mov	ip, r2
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0xe2>
 8000cea:	fab2 f382 	clz	r3, r2
 8000cee:	b143      	cbz	r3, 8000d02 <__udivmoddi4+0x2e>
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	f1c3 0220 	rsb	r2, r3, #32
 8000cf8:	409f      	lsls	r7, r3
 8000cfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	409c      	lsls	r4, r3
 8000d02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d06:	fa1f f58c 	uxth.w	r5, ip
 8000d0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d0e:	0c22      	lsrs	r2, r4, #16
 8000d10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d18:	fb01 f005 	mul.w	r0, r1, r5
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	d90a      	bls.n	8000d36 <__udivmoddi4+0x62>
 8000d20:	eb1c 0202 	adds.w	r2, ip, r2
 8000d24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d28:	f080 811c 	bcs.w	8000f64 <__udivmoddi4+0x290>
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	f240 8119 	bls.w	8000f64 <__udivmoddi4+0x290>
 8000d32:	3902      	subs	r1, #2
 8000d34:	4462      	add	r2, ip
 8000d36:	1a12      	subs	r2, r2, r0
 8000d38:	b2a4      	uxth	r4, r4
 8000d3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d46:	fb00 f505 	mul.w	r5, r0, r5
 8000d4a:	42a5      	cmp	r5, r4
 8000d4c:	d90a      	bls.n	8000d64 <__udivmoddi4+0x90>
 8000d4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x294>
 8000d5a:	42a5      	cmp	r5, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x294>
 8000d60:	4464      	add	r4, ip
 8000d62:	3802      	subs	r0, #2
 8000d64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d68:	1b64      	subs	r4, r4, r5
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	b11e      	cbz	r6, 8000d76 <__udivmoddi4+0xa2>
 8000d6e:	40dc      	lsrs	r4, r3
 8000d70:	2300      	movs	r3, #0
 8000d72:	e9c6 4300 	strd	r4, r3, [r6]
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0xbc>
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f000 80ed 	beq.w	8000f5e <__udivmoddi4+0x28a>
 8000d84:	2100      	movs	r1, #0
 8000d86:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	fab3 f183 	clz	r1, r3
 8000d94:	2900      	cmp	r1, #0
 8000d96:	d149      	bne.n	8000e2c <__udivmoddi4+0x158>
 8000d98:	42ab      	cmp	r3, r5
 8000d9a:	d302      	bcc.n	8000da2 <__udivmoddi4+0xce>
 8000d9c:	4282      	cmp	r2, r0
 8000d9e:	f200 80f8 	bhi.w	8000f92 <__udivmoddi4+0x2be>
 8000da2:	1a84      	subs	r4, r0, r2
 8000da4:	eb65 0203 	sbc.w	r2, r5, r3
 8000da8:	2001      	movs	r0, #1
 8000daa:	4617      	mov	r7, r2
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d0e2      	beq.n	8000d76 <__udivmoddi4+0xa2>
 8000db0:	e9c6 4700 	strd	r4, r7, [r6]
 8000db4:	e7df      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000db6:	b902      	cbnz	r2, 8000dba <__udivmoddi4+0xe6>
 8000db8:	deff      	udf	#255	; 0xff
 8000dba:	fab2 f382 	clz	r3, r2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f040 8090 	bne.w	8000ee4 <__udivmoddi4+0x210>
 8000dc4:	1a8a      	subs	r2, r1, r2
 8000dc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dca:	fa1f fe8c 	uxth.w	lr, ip
 8000dce:	2101      	movs	r1, #1
 8000dd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000dd8:	0c22      	lsrs	r2, r4, #16
 8000dda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dde:	fb0e f005 	mul.w	r0, lr, r5
 8000de2:	4290      	cmp	r0, r2
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x124>
 8000de6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x122>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f200 80cb 	bhi.w	8000f8c <__udivmoddi4+0x2b8>
 8000df6:	4645      	mov	r5, r8
 8000df8:	1a12      	subs	r2, r2, r0
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e00:	fb07 2210 	mls	r2, r7, r0, r2
 8000e04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e08:	fb0e fe00 	mul.w	lr, lr, r0
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x14e>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e18:	d202      	bcs.n	8000e20 <__udivmoddi4+0x14c>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	f200 80bb 	bhi.w	8000f96 <__udivmoddi4+0x2c2>
 8000e20:	4610      	mov	r0, r2
 8000e22:	eba4 040e 	sub.w	r4, r4, lr
 8000e26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2a:	e79f      	b.n	8000d6c <__udivmoddi4+0x98>
 8000e2c:	f1c1 0720 	rsb	r7, r1, #32
 8000e30:	408b      	lsls	r3, r1
 8000e32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e42:	40fd      	lsrs	r5, r7
 8000e44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e48:	4323      	orrs	r3, r4
 8000e4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	fb09 5518 	mls	r5, r9, r8, r5
 8000e56:	0c1c      	lsrs	r4, r3, #16
 8000e58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e60:	42a5      	cmp	r5, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6a:	d90b      	bls.n	8000e84 <__udivmoddi4+0x1b0>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e74:	f080 8088 	bcs.w	8000f88 <__udivmoddi4+0x2b4>
 8000e78:	42a5      	cmp	r5, r4
 8000e7a:	f240 8085 	bls.w	8000f88 <__udivmoddi4+0x2b4>
 8000e7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e82:	4464      	add	r4, ip
 8000e84:	1b64      	subs	r4, r4, r5
 8000e86:	b29d      	uxth	r5, r3
 8000e88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e98:	45a6      	cmp	lr, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x1da>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea4:	d26c      	bcs.n	8000f80 <__udivmoddi4+0x2ac>
 8000ea6:	45a6      	cmp	lr, r4
 8000ea8:	d96a      	bls.n	8000f80 <__udivmoddi4+0x2ac>
 8000eaa:	3b02      	subs	r3, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000eb6:	eba4 040e 	sub.w	r4, r4, lr
 8000eba:	42ac      	cmp	r4, r5
 8000ebc:	46c8      	mov	r8, r9
 8000ebe:	46ae      	mov	lr, r5
 8000ec0:	d356      	bcc.n	8000f70 <__udivmoddi4+0x29c>
 8000ec2:	d053      	beq.n	8000f6c <__udivmoddi4+0x298>
 8000ec4:	b156      	cbz	r6, 8000edc <__udivmoddi4+0x208>
 8000ec6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eca:	eb64 040e 	sbc.w	r4, r4, lr
 8000ece:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed2:	40ca      	lsrs	r2, r1
 8000ed4:	40cc      	lsrs	r4, r1
 8000ed6:	4317      	orrs	r7, r2
 8000ed8:	e9c6 7400 	strd	r7, r4, [r6]
 8000edc:	4618      	mov	r0, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee4:	f1c3 0120 	rsb	r1, r3, #32
 8000ee8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eec:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef4:	409d      	lsls	r5, r3
 8000ef6:	432a      	orrs	r2, r5
 8000ef8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f04:	fb07 1510 	mls	r5, r7, r0, r1
 8000f08:	0c11      	lsrs	r1, r2, #16
 8000f0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f12:	428d      	cmp	r5, r1
 8000f14:	fa04 f403 	lsl.w	r4, r4, r3
 8000f18:	d908      	bls.n	8000f2c <__udivmoddi4+0x258>
 8000f1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f22:	d22f      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f24:	428d      	cmp	r5, r1
 8000f26:	d92d      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f28:	3802      	subs	r0, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1b49      	subs	r1, r1, r5
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f34:	fb07 1115 	mls	r1, r7, r5, r1
 8000f38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f40:	4291      	cmp	r1, r2
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x282>
 8000f44:	eb1c 0202 	adds.w	r2, ip, r2
 8000f48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f4c:	d216      	bcs.n	8000f7c <__udivmoddi4+0x2a8>
 8000f4e:	4291      	cmp	r1, r2
 8000f50:	d914      	bls.n	8000f7c <__udivmoddi4+0x2a8>
 8000f52:	3d02      	subs	r5, #2
 8000f54:	4462      	add	r2, ip
 8000f56:	1a52      	subs	r2, r2, r1
 8000f58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f5c:	e738      	b.n	8000dd0 <__udivmoddi4+0xfc>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e708      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000f64:	4639      	mov	r1, r7
 8000f66:	e6e6      	b.n	8000d36 <__udivmoddi4+0x62>
 8000f68:	4610      	mov	r0, r2
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x90>
 8000f6c:	4548      	cmp	r0, r9
 8000f6e:	d2a9      	bcs.n	8000ec4 <__udivmoddi4+0x1f0>
 8000f70:	ebb9 0802 	subs.w	r8, r9, r2
 8000f74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	e7a3      	b.n	8000ec4 <__udivmoddi4+0x1f0>
 8000f7c:	4645      	mov	r5, r8
 8000f7e:	e7ea      	b.n	8000f56 <__udivmoddi4+0x282>
 8000f80:	462b      	mov	r3, r5
 8000f82:	e794      	b.n	8000eae <__udivmoddi4+0x1da>
 8000f84:	4640      	mov	r0, r8
 8000f86:	e7d1      	b.n	8000f2c <__udivmoddi4+0x258>
 8000f88:	46d0      	mov	r8, sl
 8000f8a:	e77b      	b.n	8000e84 <__udivmoddi4+0x1b0>
 8000f8c:	3d02      	subs	r5, #2
 8000f8e:	4462      	add	r2, ip
 8000f90:	e732      	b.n	8000df8 <__udivmoddi4+0x124>
 8000f92:	4608      	mov	r0, r1
 8000f94:	e70a      	b.n	8000dac <__udivmoddi4+0xd8>
 8000f96:	4464      	add	r4, ip
 8000f98:	3802      	subs	r0, #2
 8000f9a:	e742      	b.n	8000e22 <__udivmoddi4+0x14e>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <update_arr>:
static uint8_t currentColor;
static float pulseFrequency;
uint8_t LedMode;

//util function to change timer frequency
void update_arr(TIM_HandleTypeDef *htim, uint16_t arr) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
    __HAL_TIM_SET_AUTORELOAD(htim, arr);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	887a      	ldrh	r2, [r7, #2]
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fb4:	887a      	ldrh	r2, [r7, #2]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60da      	str	r2, [r3, #12]
    if (__HAL_TIM_GET_COUNTER(htim) >= __HAL_TIM_GET_AUTORELOAD(htim)) {
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d307      	bcc.n	8000fda <update_arr+0x3a>
        htim->Instance->EGR |= TIM_EGR_UG;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f042 0201 	orr.w	r2, r2, #1
 8000fd8:	615a      	str	r2, [r3, #20]
    }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <parseString>:


void parseString(char *input) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    HAL_TIM_Base_Stop_IT(&htim3);
 8000ff0:	487e      	ldr	r0, [pc, #504]	; (80011ec <parseString+0x204>)
 8000ff2:	f003 fa59 	bl	80044a8 <HAL_TIM_Base_Stop_IT>
    char *token;
    switch (input[0]) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b63      	cmp	r3, #99	; 0x63
 8000ffc:	d002      	beq.n	8001004 <parseString+0x1c>
 8000ffe:	2b6d      	cmp	r3, #109	; 0x6d
 8001000:	d00d      	beq.n	800101e <parseString+0x36>
 8001002:	e0c3      	b.n	800118c <parseString+0x1a4>
        case 'c':
            LED_setColor(strtoul(&input[1], NULL, 10));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3301      	adds	r3, #1
 8001008:	220a      	movs	r2, #10
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f006 f9af 	bl	8007370 <strtoul>
 8001012:	4603      	mov	r3, r0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f90e 	bl	8001238 <LED_setColor>
            break;
 800101c:	e0e1      	b.n	80011e2 <parseString+0x1fa>
        case 'm': {
            token = strtok(input, ";");
 800101e:	4974      	ldr	r1, [pc, #464]	; (80011f0 <parseString+0x208>)
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f006 facf 	bl	80075c4 <strtok>
 8001026:	60f8      	str	r0, [r7, #12]
            LedMode = strtoul(&token[1], NULL, 10);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	220a      	movs	r2, #10
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f006 f99d 	bl	8007370 <strtoul>
 8001036:	4603      	mov	r3, r0
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b6e      	ldr	r3, [pc, #440]	; (80011f4 <parseString+0x20c>)
 800103c:	701a      	strb	r2, [r3, #0]
            switch (LedMode) {
 800103e:	4b6d      	ldr	r3, [pc, #436]	; (80011f4 <parseString+0x20c>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b03      	cmp	r3, #3
 8001044:	f200 80a2 	bhi.w	800118c <parseString+0x1a4>
 8001048:	a201      	add	r2, pc, #4	; (adr r2, 8001050 <parseString+0x68>)
 800104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104e:	bf00      	nop
 8001050:	08001061 	.word	0x08001061
 8001054:	080010c1 	.word	0x080010c1
 8001058:	08001105 	.word	0x08001105
 800105c:	08001149 	.word	0x08001149
                case 0:
                    token = strtok(NULL, ";");
 8001060:	4963      	ldr	r1, [pc, #396]	; (80011f0 <parseString+0x208>)
 8001062:	2000      	movs	r0, #0
 8001064:	f006 faae 	bl	80075c4 <strtok>
 8001068:	60f8      	str	r0, [r7, #12]
                    currentColor = strtoul(token, NULL, 10);
 800106a:	220a      	movs	r2, #10
 800106c:	2100      	movs	r1, #0
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f006 f97e 	bl	8007370 <strtoul>
 8001074:	4603      	mov	r3, r0
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b5f      	ldr	r3, [pc, #380]	; (80011f8 <parseString+0x210>)
 800107a:	701a      	strb	r2, [r3, #0]
                    token = strtok(NULL, ";");
 800107c:	495c      	ldr	r1, [pc, #368]	; (80011f0 <parseString+0x208>)
 800107e:	2000      	movs	r0, #0
 8001080:	f006 faa0 	bl	80075c4 <strtok>
 8001084:	60f8      	str	r0, [r7, #12]
                    pulseFrequency = strtof(token, NULL);
 8001086:	2100      	movs	r1, #0
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f006 f899 	bl	80071c0 <strtof>
 800108e:	eef0 7a40 	vmov.f32	s15, s0
 8001092:	4b5a      	ldr	r3, [pc, #360]	; (80011fc <parseString+0x214>)
 8001094:	edc3 7a00 	vstr	s15, [r3]
                    update_arr(&htim3, pulseFrequency * ARR_1SECOND_VALUE);
 8001098:	4b58      	ldr	r3, [pc, #352]	; (80011fc <parseString+0x214>)
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001200 <parseString+0x218>
 80010a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010aa:	ee17 3a90 	vmov	r3, s15
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4619      	mov	r1, r3
 80010b2:	484e      	ldr	r0, [pc, #312]	; (80011ec <parseString+0x204>)
 80010b4:	f7ff ff74 	bl	8000fa0 <update_arr>
                    HAL_TIM_Base_Start_IT(&htim3);
 80010b8:	484c      	ldr	r0, [pc, #304]	; (80011ec <parseString+0x204>)
 80010ba:	f003 f993 	bl	80043e4 <HAL_TIM_Base_Start_IT>
                    break;
 80010be:	e065      	b.n	800118c <parseString+0x1a4>
                case 1:
                    token = strtok(NULL, ";");
 80010c0:	494b      	ldr	r1, [pc, #300]	; (80011f0 <parseString+0x208>)
 80010c2:	2000      	movs	r0, #0
 80010c4:	f006 fa7e 	bl	80075c4 <strtok>
 80010c8:	60f8      	str	r0, [r7, #12]
                    pulseFrequency = strtof(token, NULL);
 80010ca:	2100      	movs	r1, #0
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f006 f877 	bl	80071c0 <strtof>
 80010d2:	eef0 7a40 	vmov.f32	s15, s0
 80010d6:	4b49      	ldr	r3, [pc, #292]	; (80011fc <parseString+0x214>)
 80010d8:	edc3 7a00 	vstr	s15, [r3]
                    update_arr(&htim3, pulseFrequency * ARR_1SECOND_VALUE);
 80010dc:	4b47      	ldr	r3, [pc, #284]	; (80011fc <parseString+0x214>)
 80010de:	edd3 7a00 	vldr	s15, [r3]
 80010e2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001200 <parseString+0x218>
 80010e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ee:	ee17 3a90 	vmov	r3, s15
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	4619      	mov	r1, r3
 80010f6:	483d      	ldr	r0, [pc, #244]	; (80011ec <parseString+0x204>)
 80010f8:	f7ff ff52 	bl	8000fa0 <update_arr>
                    HAL_TIM_Base_Start_IT(&htim3);
 80010fc:	483b      	ldr	r0, [pc, #236]	; (80011ec <parseString+0x204>)
 80010fe:	f003 f971 	bl	80043e4 <HAL_TIM_Base_Start_IT>
                    break;
 8001102:	e043      	b.n	800118c <parseString+0x1a4>
                case 2:
                    token = strtok(NULL, ";");
 8001104:	493a      	ldr	r1, [pc, #232]	; (80011f0 <parseString+0x208>)
 8001106:	2000      	movs	r0, #0
 8001108:	f006 fa5c 	bl	80075c4 <strtok>
 800110c:	60f8      	str	r0, [r7, #12]
                    pulseFrequency = strtof(token, NULL);
 800110e:	2100      	movs	r1, #0
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f006 f855 	bl	80071c0 <strtof>
 8001116:	eef0 7a40 	vmov.f32	s15, s0
 800111a:	4b38      	ldr	r3, [pc, #224]	; (80011fc <parseString+0x214>)
 800111c:	edc3 7a00 	vstr	s15, [r3]
                    update_arr(&htim3, pulseFrequency * ARR_1SECOND_VALUE);
 8001120:	4b36      	ldr	r3, [pc, #216]	; (80011fc <parseString+0x214>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001200 <parseString+0x218>
 800112a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800112e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001132:	ee17 3a90 	vmov	r3, s15
 8001136:	b29b      	uxth	r3, r3
 8001138:	4619      	mov	r1, r3
 800113a:	482c      	ldr	r0, [pc, #176]	; (80011ec <parseString+0x204>)
 800113c:	f7ff ff30 	bl	8000fa0 <update_arr>
                    HAL_TIM_Base_Start_IT(&htim3);
 8001140:	482a      	ldr	r0, [pc, #168]	; (80011ec <parseString+0x204>)
 8001142:	f003 f94f 	bl	80043e4 <HAL_TIM_Base_Start_IT>
                    break;
 8001146:	e021      	b.n	800118c <parseString+0x1a4>
                case 3:
                    token = strtok(NULL, ";");
 8001148:	4929      	ldr	r1, [pc, #164]	; (80011f0 <parseString+0x208>)
 800114a:	2000      	movs	r0, #0
 800114c:	f006 fa3a 	bl	80075c4 <strtok>
 8001150:	60f8      	str	r0, [r7, #12]
                    pulseFrequency = strtof(token, NULL);
 8001152:	2100      	movs	r1, #0
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f006 f833 	bl	80071c0 <strtof>
 800115a:	eef0 7a40 	vmov.f32	s15, s0
 800115e:	4b27      	ldr	r3, [pc, #156]	; (80011fc <parseString+0x214>)
 8001160:	edc3 7a00 	vstr	s15, [r3]
                    update_arr(&htim3, pulseFrequency * ARR_1SECOND_VALUE);
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <parseString+0x214>)
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001200 <parseString+0x218>
 800116e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001176:	ee17 3a90 	vmov	r3, s15
 800117a:	b29b      	uxth	r3, r3
 800117c:	4619      	mov	r1, r3
 800117e:	481b      	ldr	r0, [pc, #108]	; (80011ec <parseString+0x204>)
 8001180:	f7ff ff0e 	bl	8000fa0 <update_arr>
                    HAL_TIM_Base_Start_IT(&htim3);
 8001184:	4819      	ldr	r0, [pc, #100]	; (80011ec <parseString+0x204>)
 8001186:	f003 f92d 	bl	80043e4 <HAL_TIM_Base_Start_IT>
                    break;
 800118a:	bf00      	nop
            }
        }
        default:
            token = strtok(input, ";");
 800118c:	4918      	ldr	r1, [pc, #96]	; (80011f0 <parseString+0x208>)
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f006 fa18 	bl	80075c4 <strtok>
 8001194:	60f8      	str	r0, [r7, #12]
            uint8_t var1 = strtoul(token, NULL, 10);
 8001196:	220a      	movs	r2, #10
 8001198:	2100      	movs	r1, #0
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f006 f8e8 	bl	8007370 <strtoul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	72fb      	strb	r3, [r7, #11]
            token = strtok(NULL, ";");
 80011a4:	4912      	ldr	r1, [pc, #72]	; (80011f0 <parseString+0x208>)
 80011a6:	2000      	movs	r0, #0
 80011a8:	f006 fa0c 	bl	80075c4 <strtok>
 80011ac:	60f8      	str	r0, [r7, #12]

            uint8_t var2 = strtoul(token, NULL, 10);
 80011ae:	220a      	movs	r2, #10
 80011b0:	2100      	movs	r1, #0
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f006 f8dc 	bl	8007370 <strtoul>
 80011b8:	4603      	mov	r3, r0
 80011ba:	72bb      	strb	r3, [r7, #10]
            token = strtok(NULL, ";");
 80011bc:	490c      	ldr	r1, [pc, #48]	; (80011f0 <parseString+0x208>)
 80011be:	2000      	movs	r0, #0
 80011c0:	f006 fa00 	bl	80075c4 <strtok>
 80011c4:	60f8      	str	r0, [r7, #12]

            uint8_t var3 = strtoul(token, NULL, 10);
 80011c6:	220a      	movs	r2, #10
 80011c8:	2100      	movs	r1, #0
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f006 f8d0 	bl	8007370 <strtoul>
 80011d0:	4603      	mov	r3, r0
 80011d2:	727b      	strb	r3, [r7, #9]
            LED_setColorRGB(var1, var2, var3);
 80011d4:	7a7a      	ldrb	r2, [r7, #9]
 80011d6:	7ab9      	ldrb	r1, [r7, #10]
 80011d8:	7afb      	ldrb	r3, [r7, #11]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f812 	bl	8001204 <LED_setColorRGB>
    }



}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000334 	.word	0x20000334
 80011f0:	08009478 	.word	0x08009478
 80011f4:	200001f8 	.word	0x200001f8
 80011f8:	200001f1 	.word	0x200001f1
 80011fc:	200001f4 	.word	0x200001f4
 8001200:	42c80000 	.word	0x42c80000

08001204 <LED_setColorRGB>:

void LED_setColorRGB(uint8_t R, uint8_t G, uint8_t B) {
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	460b      	mov	r3, r1
 8001210:	71bb      	strb	r3, [r7, #6]
 8001212:	4613      	mov	r3, r2
 8001214:	717b      	strb	r3, [r7, #5]
    TIM1->CCR1 = R;
 8001216:	4a07      	ldr	r2, [pc, #28]	; (8001234 <LED_setColorRGB+0x30>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	6353      	str	r3, [r2, #52]	; 0x34
    TIM1->CCR2 = G;
 800121c:	4a05      	ldr	r2, [pc, #20]	; (8001234 <LED_setColorRGB+0x30>)
 800121e:	79bb      	ldrb	r3, [r7, #6]
 8001220:	6393      	str	r3, [r2, #56]	; 0x38
    TIM1->CCR3 = B;
 8001222:	4a04      	ldr	r2, [pc, #16]	; (8001234 <LED_setColorRGB+0x30>)
 8001224:	797b      	ldrb	r3, [r7, #5]
 8001226:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40010000 	.word	0x40010000

08001238 <LED_setColor>:

void LED_setColor(enum Color color) {
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
    TIM1->CCR1 = colorValues[color].red / ARR_DIV;
 8001242:	79fa      	ldrb	r2, [r7, #7]
 8001244:	492a      	ldr	r1, [pc, #168]	; (80012f0 <LED_setColor+0xb8>)
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f966 	bl	8000524 <__aeabi_i2d>
 8001258:	a323      	add	r3, pc, #140	; (adr r3, 80012e8 <LED_setColor+0xb0>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	f7ff faf5 	bl	800084c <__aeabi_ddiv>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4c23      	ldr	r4, [pc, #140]	; (80012f4 <LED_setColor+0xbc>)
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fc74 	bl	8000b58 <__aeabi_d2uiz>
 8001270:	4603      	mov	r3, r0
 8001272:	6363      	str	r3, [r4, #52]	; 0x34
    TIM1->CCR2 = colorValues[color].green / ARR_DIV;
 8001274:	79fa      	ldrb	r2, [r7, #7]
 8001276:	491e      	ldr	r1, [pc, #120]	; (80012f0 <LED_setColor+0xb8>)
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	3304      	adds	r3, #4
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f94c 	bl	8000524 <__aeabi_i2d>
 800128c:	a316      	add	r3, pc, #88	; (adr r3, 80012e8 <LED_setColor+0xb0>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7ff fadb 	bl	800084c <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4c16      	ldr	r4, [pc, #88]	; (80012f4 <LED_setColor+0xbc>)
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fc5a 	bl	8000b58 <__aeabi_d2uiz>
 80012a4:	4603      	mov	r3, r0
 80012a6:	63a3      	str	r3, [r4, #56]	; 0x38
    TIM1->CCR3 = colorValues[color].blue / ARR_DIV;
 80012a8:	79fa      	ldrb	r2, [r7, #7]
 80012aa:	4911      	ldr	r1, [pc, #68]	; (80012f0 <LED_setColor+0xb8>)
 80012ac:	4613      	mov	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	3308      	adds	r3, #8
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f932 	bl	8000524 <__aeabi_i2d>
 80012c0:	a309      	add	r3, pc, #36	; (adr r3, 80012e8 <LED_setColor+0xb0>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff fac1 	bl	800084c <__aeabi_ddiv>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4c09      	ldr	r4, [pc, #36]	; (80012f4 <LED_setColor+0xbc>)
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fc40 	bl	8000b58 <__aeabi_d2uiz>
 80012d8:	4603      	mov	r3, r0
 80012da:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	f3af 8000 	nop.w
 80012e8:	66666666 	.word	0x66666666
 80012ec:	40046666 	.word	0x40046666
 80012f0:	08009480 	.word	0x08009480
 80012f4:	40010000 	.word	0x40010000

080012f8 <LED_pulseMode>:

void LED_pulseMode() {
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	af00      	add	r7, sp, #0
    TIM1->CCR1 = colorValues[currentColor].red / ARR_DIV - pulseCounter;
 80012fc:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <LED_pulseMode+0x130>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	4a4a      	ldr	r2, [pc, #296]	; (800142c <LED_pulseMode+0x134>)
 8001304:	460b      	mov	r3, r1
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	440b      	add	r3, r1
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f907 	bl	8000524 <__aeabi_i2d>
 8001316:	a342      	add	r3, pc, #264	; (adr r3, 8001420 <LED_pulseMode+0x128>)
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	f7ff fa96 	bl	800084c <__aeabi_ddiv>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4614      	mov	r4, r2
 8001326:	461d      	mov	r5, r3
 8001328:	4b41      	ldr	r3, [pc, #260]	; (8001430 <LED_pulseMode+0x138>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f8f9 	bl	8000524 <__aeabi_i2d>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4620      	mov	r0, r4
 8001338:	4629      	mov	r1, r5
 800133a:	f7fe ffa5 	bl	8000288 <__aeabi_dsub>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4c3c      	ldr	r4, [pc, #240]	; (8001434 <LED_pulseMode+0x13c>)
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc06 	bl	8000b58 <__aeabi_d2uiz>
 800134c:	4603      	mov	r3, r0
 800134e:	6363      	str	r3, [r4, #52]	; 0x34
    TIM1->CCR2 = colorValues[currentColor].green / ARR_DIV - pulseCounter;
 8001350:	4b35      	ldr	r3, [pc, #212]	; (8001428 <LED_pulseMode+0x130>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	4a35      	ldr	r2, [pc, #212]	; (800142c <LED_pulseMode+0x134>)
 8001358:	460b      	mov	r3, r1
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	440b      	add	r3, r1
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	3304      	adds	r3, #4
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f8dc 	bl	8000524 <__aeabi_i2d>
 800136c:	a32c      	add	r3, pc, #176	; (adr r3, 8001420 <LED_pulseMode+0x128>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	f7ff fa6b 	bl	800084c <__aeabi_ddiv>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4614      	mov	r4, r2
 800137c:	461d      	mov	r5, r3
 800137e:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <LED_pulseMode+0x138>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8ce 	bl	8000524 <__aeabi_i2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4620      	mov	r0, r4
 800138e:	4629      	mov	r1, r5
 8001390:	f7fe ff7a 	bl	8000288 <__aeabi_dsub>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4c26      	ldr	r4, [pc, #152]	; (8001434 <LED_pulseMode+0x13c>)
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff fbdb 	bl	8000b58 <__aeabi_d2uiz>
 80013a2:	4603      	mov	r3, r0
 80013a4:	63a3      	str	r3, [r4, #56]	; 0x38
    TIM1->CCR3 = colorValues[currentColor].blue / ARR_DIV - pulseCounter;
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <LED_pulseMode+0x130>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4a1f      	ldr	r2, [pc, #124]	; (800142c <LED_pulseMode+0x134>)
 80013ae:	460b      	mov	r3, r1
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	440b      	add	r3, r1
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	3308      	adds	r3, #8
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8b1 	bl	8000524 <__aeabi_i2d>
 80013c2:	a317      	add	r3, pc, #92	; (adr r3, 8001420 <LED_pulseMode+0x128>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7ff fa40 	bl	800084c <__aeabi_ddiv>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4614      	mov	r4, r2
 80013d2:	461d      	mov	r5, r3
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <LED_pulseMode+0x138>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f8a3 	bl	8000524 <__aeabi_i2d>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4620      	mov	r0, r4
 80013e4:	4629      	mov	r1, r5
 80013e6:	f7fe ff4f 	bl	8000288 <__aeabi_dsub>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4c11      	ldr	r4, [pc, #68]	; (8001434 <LED_pulseMode+0x13c>)
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fbb0 	bl	8000b58 <__aeabi_d2uiz>
 80013f8:	4603      	mov	r3, r0
 80013fa:	63e3      	str	r3, [r4, #60]	; 0x3c
    pulseCounter++;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <LED_pulseMode+0x138>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	b2da      	uxtb	r2, r3
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <LED_pulseMode+0x138>)
 8001406:	701a      	strb	r2, [r3, #0]
    if (pulseCounter >= CCR_MAX_VALUE) {
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <LED_pulseMode+0x138>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b63      	cmp	r3, #99	; 0x63
 800140e:	d902      	bls.n	8001416 <LED_pulseMode+0x11e>
        pulseCounter = 0;
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <LED_pulseMode+0x138>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
    }
}
 8001416:	bf00      	nop
 8001418:	bdb0      	pop	{r4, r5, r7, pc}
 800141a:	bf00      	nop
 800141c:	f3af 8000 	nop.w
 8001420:	66666666 	.word	0x66666666
 8001424:	40046666 	.word	0x40046666
 8001428:	200001f1 	.word	0x200001f1
 800142c:	08009480 	.word	0x08009480
 8001430:	200001f0 	.word	0x200001f0
 8001434:	40010000 	.word	0x40010000

08001438 <LED_continuousTransformationMode>:

void LED_continuousTransformationMode() {
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	af00      	add	r7, sp, #0
    TIM1->CCR1 = colorValues[currentColor].red / ARR_DIV - pulseCounter;
 800143c:	4b54      	ldr	r3, [pc, #336]	; (8001590 <LED_continuousTransformationMode+0x158>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	4a54      	ldr	r2, [pc, #336]	; (8001594 <LED_continuousTransformationMode+0x15c>)
 8001444:	460b      	mov	r3, r1
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	440b      	add	r3, r1
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f867 	bl	8000524 <__aeabi_i2d>
 8001456:	a34c      	add	r3, pc, #304	; (adr r3, 8001588 <LED_continuousTransformationMode+0x150>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7ff f9f6 	bl	800084c <__aeabi_ddiv>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4614      	mov	r4, r2
 8001466:	461d      	mov	r5, r3
 8001468:	4b4b      	ldr	r3, [pc, #300]	; (8001598 <LED_continuousTransformationMode+0x160>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f859 	bl	8000524 <__aeabi_i2d>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4620      	mov	r0, r4
 8001478:	4629      	mov	r1, r5
 800147a:	f7fe ff05 	bl	8000288 <__aeabi_dsub>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4c46      	ldr	r4, [pc, #280]	; (800159c <LED_continuousTransformationMode+0x164>)
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fb66 	bl	8000b58 <__aeabi_d2uiz>
 800148c:	4603      	mov	r3, r0
 800148e:	6363      	str	r3, [r4, #52]	; 0x34
    TIM1->CCR2 = colorValues[currentColor].green / ARR_DIV - pulseCounter;
 8001490:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <LED_continuousTransformationMode+0x158>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	4a3f      	ldr	r2, [pc, #252]	; (8001594 <LED_continuousTransformationMode+0x15c>)
 8001498:	460b      	mov	r3, r1
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	440b      	add	r3, r1
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	3304      	adds	r3, #4
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f83c 	bl	8000524 <__aeabi_i2d>
 80014ac:	a336      	add	r3, pc, #216	; (adr r3, 8001588 <LED_continuousTransformationMode+0x150>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	f7ff f9cb 	bl	800084c <__aeabi_ddiv>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4614      	mov	r4, r2
 80014bc:	461d      	mov	r5, r3
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <LED_continuousTransformationMode+0x160>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f82e 	bl	8000524 <__aeabi_i2d>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4620      	mov	r0, r4
 80014ce:	4629      	mov	r1, r5
 80014d0:	f7fe feda 	bl	8000288 <__aeabi_dsub>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4c30      	ldr	r4, [pc, #192]	; (800159c <LED_continuousTransformationMode+0x164>)
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fb3b 	bl	8000b58 <__aeabi_d2uiz>
 80014e2:	4603      	mov	r3, r0
 80014e4:	63a3      	str	r3, [r4, #56]	; 0x38
    TIM1->CCR3 = colorValues[currentColor].blue / ARR_DIV - pulseCounter;
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <LED_continuousTransformationMode+0x158>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4619      	mov	r1, r3
 80014ec:	4a29      	ldr	r2, [pc, #164]	; (8001594 <LED_continuousTransformationMode+0x15c>)
 80014ee:	460b      	mov	r3, r1
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	440b      	add	r3, r1
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	3308      	adds	r3, #8
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f811 	bl	8000524 <__aeabi_i2d>
 8001502:	a321      	add	r3, pc, #132	; (adr r3, 8001588 <LED_continuousTransformationMode+0x150>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f9a0 	bl	800084c <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4614      	mov	r4, r2
 8001512:	461d      	mov	r5, r3
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <LED_continuousTransformationMode+0x160>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f803 	bl	8000524 <__aeabi_i2d>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4620      	mov	r0, r4
 8001524:	4629      	mov	r1, r5
 8001526:	f7fe feaf 	bl	8000288 <__aeabi_dsub>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4c1b      	ldr	r4, [pc, #108]	; (800159c <LED_continuousTransformationMode+0x164>)
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f7ff fb10 	bl	8000b58 <__aeabi_d2uiz>
 8001538:	4603      	mov	r3, r0
 800153a:	63e3      	str	r3, [r4, #60]	; 0x3c
    pulseCounter++;
 800153c:	4b16      	ldr	r3, [pc, #88]	; (8001598 <LED_continuousTransformationMode+0x160>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <LED_continuousTransformationMode+0x160>)
 8001546:	701a      	strb	r2, [r3, #0]
    if (pulseCounter >= CCR_MAX_VALUE) {
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <LED_continuousTransformationMode+0x160>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b63      	cmp	r3, #99	; 0x63
 800154e:	d917      	bls.n	8001580 <LED_continuousTransformationMode+0x148>
        pulseCounter = 0;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <LED_continuousTransformationMode+0x160>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
        currentColor++;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <LED_continuousTransformationMode+0x158>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <LED_continuousTransformationMode+0x158>)
 8001560:	701a      	strb	r2, [r3, #0]
        currentColor %= 11;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <LED_continuousTransformationMode+0x158>)
 8001564:	7819      	ldrb	r1, [r3, #0]
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <LED_continuousTransformationMode+0x168>)
 8001568:	fba3 2301 	umull	r2, r3, r3, r1
 800156c:	08da      	lsrs	r2, r3, #3
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	1acb      	subs	r3, r1, r3
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <LED_continuousTransformationMode+0x158>)
 800157e:	701a      	strb	r2, [r3, #0]
    }
}
 8001580:	bf00      	nop
 8001582:	bdb0      	pop	{r4, r5, r7, pc}
 8001584:	f3af 8000 	nop.w
 8001588:	66666666 	.word	0x66666666
 800158c:	40046666 	.word	0x40046666
 8001590:	200001f1 	.word	0x200001f1
 8001594:	08009480 	.word	0x08009480
 8001598:	200001f0 	.word	0x200001f0
 800159c:	40010000 	.word	0x40010000
 80015a0:	ba2e8ba3 	.word	0xba2e8ba3
 80015a4:	00000000 	.word	0x00000000

080015a8 <LED_continuousColorChangeMode>:

void LED_continuousColorChangeMode() {
 80015a8:	b598      	push	{r3, r4, r7, lr}
 80015aa:	af00      	add	r7, sp, #0
    TIM1->CCR1 = colorValues[currentColor].red / ARR_DIV;
 80015ac:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <LED_continuousColorChangeMode+0xf8>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	4a3c      	ldr	r2, [pc, #240]	; (80016a4 <LED_continuousColorChangeMode+0xfc>)
 80015b4:	460b      	mov	r3, r1
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	440b      	add	r3, r1
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffaf 	bl	8000524 <__aeabi_i2d>
 80015c6:	a334      	add	r3, pc, #208	; (adr r3, 8001698 <LED_continuousColorChangeMode+0xf0>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f7ff f93e 	bl	800084c <__aeabi_ddiv>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4c34      	ldr	r4, [pc, #208]	; (80016a8 <LED_continuousColorChangeMode+0x100>)
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff fabd 	bl	8000b58 <__aeabi_d2uiz>
 80015de:	4603      	mov	r3, r0
 80015e0:	6363      	str	r3, [r4, #52]	; 0x34
    TIM1->CCR2 = colorValues[currentColor].green / ARR_DIV;
 80015e2:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <LED_continuousColorChangeMode+0xf8>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	4619      	mov	r1, r3
 80015e8:	4a2e      	ldr	r2, [pc, #184]	; (80016a4 <LED_continuousColorChangeMode+0xfc>)
 80015ea:	460b      	mov	r3, r1
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	440b      	add	r3, r1
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	3304      	adds	r3, #4
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ff93 	bl	8000524 <__aeabi_i2d>
 80015fe:	a326      	add	r3, pc, #152	; (adr r3, 8001698 <LED_continuousColorChangeMode+0xf0>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7ff f922 	bl	800084c <__aeabi_ddiv>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4c26      	ldr	r4, [pc, #152]	; (80016a8 <LED_continuousColorChangeMode+0x100>)
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff faa1 	bl	8000b58 <__aeabi_d2uiz>
 8001616:	4603      	mov	r3, r0
 8001618:	63a3      	str	r3, [r4, #56]	; 0x38
    TIM1->CCR3 = colorValues[currentColor].blue / ARR_DIV;
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <LED_continuousColorChangeMode+0xf8>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	4619      	mov	r1, r3
 8001620:	4a20      	ldr	r2, [pc, #128]	; (80016a4 <LED_continuousColorChangeMode+0xfc>)
 8001622:	460b      	mov	r3, r1
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	440b      	add	r3, r1
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	3308      	adds	r3, #8
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff77 	bl	8000524 <__aeabi_i2d>
 8001636:	a318      	add	r3, pc, #96	; (adr r3, 8001698 <LED_continuousColorChangeMode+0xf0>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7ff f906 	bl	800084c <__aeabi_ddiv>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4c18      	ldr	r4, [pc, #96]	; (80016a8 <LED_continuousColorChangeMode+0x100>)
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fa85 	bl	8000b58 <__aeabi_d2uiz>
 800164e:	4603      	mov	r3, r0
 8001650:	63e3      	str	r3, [r4, #60]	; 0x3c
    pulseCounter++;
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <LED_continuousColorChangeMode+0x104>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <LED_continuousColorChangeMode+0x104>)
 800165c:	701a      	strb	r2, [r3, #0]
    if (pulseCounter >= CCR_MAX_VALUE) {
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <LED_continuousColorChangeMode+0x104>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b63      	cmp	r3, #99	; 0x63
 8001664:	d916      	bls.n	8001694 <LED_continuousColorChangeMode+0xec>
        pulseCounter = 0;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <LED_continuousColorChangeMode+0x104>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
        currentColor++;
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <LED_continuousColorChangeMode+0xf8>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <LED_continuousColorChangeMode+0xf8>)
 8001676:	701a      	strb	r2, [r3, #0]
        currentColor %= 12;
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <LED_continuousColorChangeMode+0xf8>)
 800167a:	781a      	ldrb	r2, [r3, #0]
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <LED_continuousColorChangeMode+0x108>)
 800167e:	fba3 1302 	umull	r1, r3, r3, r2
 8001682:	08d9      	lsrs	r1, r3, #3
 8001684:	460b      	mov	r3, r1
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	440b      	add	r3, r1
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <LED_continuousColorChangeMode+0xf8>)
 8001692:	701a      	strb	r2, [r3, #0]
    }
}
 8001694:	bf00      	nop
 8001696:	bd98      	pop	{r3, r4, r7, pc}
 8001698:	66666666 	.word	0x66666666
 800169c:	40046666 	.word	0x40046666
 80016a0:	200001f1 	.word	0x200001f1
 80016a4:	08009480 	.word	0x08009480
 80016a8:	40010000 	.word	0x40010000
 80016ac:	200001f0 	.word	0x200001f0
 80016b0:	aaaaaaab 	.word	0xaaaaaaab

080016b4 <LED_randomColorMode>:
void LED_randomColorMode(){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
    pulseCounter++;
 80016b8:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <LED_randomColorMode+0x7c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <LED_randomColorMode+0x7c>)
 80016c2:	701a      	strb	r2, [r3, #0]
    if (pulseCounter >= CCR_MAX_VALUE) {
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <LED_randomColorMode+0x7c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b63      	cmp	r3, #99	; 0x63
 80016ca:	d92f      	bls.n	800172c <LED_randomColorMode+0x78>
        pulseCounter = 0;
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <LED_randomColorMode+0x7c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
        TIM1->CCR1 = rand()%100;
 80016d2:	f004 ff2b 	bl	800652c <rand>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a16      	ldr	r2, [pc, #88]	; (8001734 <LED_randomColorMode+0x80>)
 80016da:	fb82 1203 	smull	r1, r2, r2, r3
 80016de:	1151      	asrs	r1, r2, #5
 80016e0:	17da      	asrs	r2, r3, #31
 80016e2:	1a8a      	subs	r2, r1, r2
 80016e4:	2164      	movs	r1, #100	; 0x64
 80016e6:	fb01 f202 	mul.w	r2, r1, r2
 80016ea:	1a9a      	subs	r2, r3, r2
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <LED_randomColorMode+0x84>)
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR2 = rand()%100;
 80016f0:	f004 ff1c 	bl	800652c <rand>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a0f      	ldr	r2, [pc, #60]	; (8001734 <LED_randomColorMode+0x80>)
 80016f8:	fb82 1203 	smull	r1, r2, r2, r3
 80016fc:	1151      	asrs	r1, r2, #5
 80016fe:	17da      	asrs	r2, r3, #31
 8001700:	1a8a      	subs	r2, r1, r2
 8001702:	2164      	movs	r1, #100	; 0x64
 8001704:	fb01 f202 	mul.w	r2, r1, r2
 8001708:	1a9a      	subs	r2, r3, r2
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <LED_randomColorMode+0x84>)
 800170c:	639a      	str	r2, [r3, #56]	; 0x38
        TIM1->CCR3 = rand()%100;
 800170e:	f004 ff0d 	bl	800652c <rand>
 8001712:	4603      	mov	r3, r0
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <LED_randomColorMode+0x80>)
 8001716:	fb82 1203 	smull	r1, r2, r2, r3
 800171a:	1151      	asrs	r1, r2, #5
 800171c:	17da      	asrs	r2, r3, #31
 800171e:	1a8a      	subs	r2, r1, r2
 8001720:	2164      	movs	r1, #100	; 0x64
 8001722:	fb01 f202 	mul.w	r2, r1, r2
 8001726:	1a9a      	subs	r2, r3, r2
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <LED_randomColorMode+0x84>)
 800172a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200001f0 	.word	0x200001f0
 8001734:	51eb851f 	.word	0x51eb851f
 8001738:	40010000 	.word	0x40010000

0800173c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001742:	f000 ffcf 	bl	80026e4 <HAL_Init>
  /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001746:	f000 f86b 	bl	8001820 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800174a:	f000 fac3 	bl	8001cd4 <MX_GPIO_Init>
    MX_DMA_Init();
 800174e:	f000 faa1 	bl	8001c94 <MX_DMA_Init>
    MX_ADC1_Init();
 8001752:	f000 f8d1 	bl	80018f8 <MX_ADC1_Init>
    MX_TIM1_Init();
 8001756:	f000 f921 	bl	800199c <MX_TIM1_Init>
    MX_TIM2_Init();
 800175a:	f000 f9d7 	bl	8001b0c <MX_TIM2_Init>
    MX_USART1_UART_Init();
 800175e:	f000 fa6f 	bl	8001c40 <MX_USART1_UART_Init>
    MX_TIM3_Init();
 8001762:	f000 fa1f 	bl	8001ba4 <MX_TIM3_Init>
    /* USER CODE BEGIN 2 */
    HAL_ADC_Start(&hadc1);
 8001766:	4825      	ldr	r0, [pc, #148]	; (80017fc <main+0xc0>)
 8001768:	f001 f896 	bl	8002898 <HAL_ADC_Start>
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &UARTRecieveBuffer[UARTBufIterator++], 1);
 800176c:	4b24      	ldr	r3, [pc, #144]	; (8001800 <main+0xc4>)
 800176e:	f993 2000 	ldrsb.w	r2, [r3]
 8001772:	b2d3      	uxtb	r3, r2
 8001774:	3301      	adds	r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	b259      	sxtb	r1, r3
 800177a:	4b21      	ldr	r3, [pc, #132]	; (8001800 <main+0xc4>)
 800177c:	7019      	strb	r1, [r3, #0]
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <main+0xc8>)
 8001780:	4413      	add	r3, r2
 8001782:	2201      	movs	r2, #1
 8001784:	4619      	mov	r1, r3
 8001786:	4820      	ldr	r0, [pc, #128]	; (8001808 <main+0xcc>)
 8001788:	f003 ff09 	bl	800559e <HAL_UART_Receive_IT>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800178c:	2100      	movs	r1, #0
 800178e:	481f      	ldr	r0, [pc, #124]	; (800180c <main+0xd0>)
 8001790:	f002 ff12 	bl	80045b8 <HAL_TIM_PWM_Start>
    //   HAL_TIM_Base_Start_IT(&htim2);
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001794:	2104      	movs	r1, #4
 8001796:	481d      	ldr	r0, [pc, #116]	; (800180c <main+0xd0>)
 8001798:	f002 ff0e 	bl	80045b8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800179c:	2108      	movs	r1, #8
 800179e:	481b      	ldr	r0, [pc, #108]	; (800180c <main+0xd0>)
 80017a0:	f002 ff0a 	bl	80045b8 <HAL_TIM_PWM_Start>
    LCD_setRST(GPIOC, GPIO_PIN_4);
 80017a4:	2110      	movs	r1, #16
 80017a6:	481a      	ldr	r0, [pc, #104]	; (8001810 <main+0xd4>)
 80017a8:	f000 fb6a 	bl	8001e80 <LCD_setRST>
    LCD_setCE(GPIOC, GPIO_PIN_5);
 80017ac:	2120      	movs	r1, #32
 80017ae:	4818      	ldr	r0, [pc, #96]	; (8001810 <main+0xd4>)
 80017b0:	f000 fb7a 	bl	8001ea8 <LCD_setCE>
    LCD_setDC(GPIOB, GPIO_PIN_0);
 80017b4:	2101      	movs	r1, #1
 80017b6:	4817      	ldr	r0, [pc, #92]	; (8001814 <main+0xd8>)
 80017b8:	f000 fb8a 	bl	8001ed0 <LCD_setDC>
    LCD_setDIN(GPIOA, GPIO_PIN_7);
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	4816      	ldr	r0, [pc, #88]	; (8001818 <main+0xdc>)
 80017c0:	f000 fb9a 	bl	8001ef8 <LCD_setDIN>
    LCD_setCLK(GPIOA, GPIO_PIN_5);
 80017c4:	2120      	movs	r1, #32
 80017c6:	4814      	ldr	r0, [pc, #80]	; (8001818 <main+0xdc>)
 80017c8:	f000 fbaa 	bl	8001f20 <LCD_setCLK>
    LCD_init();
 80017cc:	f000 fc40 	bl	8002050 <LCD_init>
    srand(0);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f004 fe7d 	bl	80064d0 <srand>
//		TIM1->CCR2  = min(tempValue/3, 100); //blue
//		TIM1->CCR3 = min(tempValue/3, 100); //green
//		if(tempValue > 10){
//			HAL_Delay(40);
//		}
        uint8_t buf[] = "AT";
 80017d6:	4a11      	ldr	r2, [pc, #68]	; (800181c <main+0xe0>)
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	4611      	mov	r1, r2
 80017de:	8019      	strh	r1, [r3, #0]
 80017e0:	3302      	adds	r3, #2
 80017e2:	0c12      	lsrs	r2, r2, #16
 80017e4:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t *) buf, sizeof(buf), 100);
 80017e6:	1d39      	adds	r1, r7, #4
 80017e8:	2364      	movs	r3, #100	; 0x64
 80017ea:	2203      	movs	r2, #3
 80017ec:	4806      	ldr	r0, [pc, #24]	; (8001808 <main+0xcc>)
 80017ee:	f003 fe44 	bl	800547a <HAL_UART_Transmit>
        HAL_Delay(1000);
 80017f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017f6:	f000 ffe7 	bl	80027c8 <HAL_Delay>
    while (1) {
 80017fa:	e7ec      	b.n	80017d6 <main+0x9a>
 80017fc:	200001fc 	.word	0x200001fc
 8001800:	200003ca 	.word	0x200003ca
 8001804:	200003c0 	.word	0x200003c0
 8001808:	2000037c 	.word	0x2000037c
 800180c:	200002a4 	.word	0x200002a4
 8001810:	40020800 	.word	0x40020800
 8001814:	40020400 	.word	0x40020400
 8001818:	40020000 	.word	0x40020000
 800181c:	0800947c 	.word	0x0800947c

08001820 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b094      	sub	sp, #80	; 0x50
 8001824:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001826:	f107 0320 	add.w	r3, r7, #32
 800182a:	2230      	movs	r2, #48	; 0x30
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f005 fead 	bl	800758e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <SystemClock_Config+0xd0>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	4a28      	ldr	r2, [pc, #160]	; (80018f0 <SystemClock_Config+0xd0>)
 800184e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001852:	6413      	str	r3, [r2, #64]	; 0x40
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <SystemClock_Config+0xd0>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <SystemClock_Config+0xd4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800186c:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <SystemClock_Config+0xd4>)
 800186e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <SystemClock_Config+0xd4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001880:	2302      	movs	r3, #2
 8001882:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001884:	2301      	movs	r3, #1
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001888:	2310      	movs	r3, #16
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188c:	2302      	movs	r3, #2
 800188e:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001890:	2300      	movs	r3, #0
 8001892:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8001894:	2308      	movs	r3, #8
 8001896:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 84;
 8001898:	2354      	movs	r3, #84	; 0x54
 800189a:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800189c:	2302      	movs	r3, #2
 800189e:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80018a0:	2304      	movs	r3, #4
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018a4:	f107 0320 	add.w	r3, r7, #32
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 f8f3 	bl	8003a94 <HAL_RCC_OscConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0x98>
        Error_Handler();
 80018b4:	f000 fade 	bl	8001e74 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018b8:	230f      	movs	r3, #15
 80018ba:	60fb      	str	r3, [r7, #12]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018bc:	2302      	movs	r3, #2
 80018be:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c8:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ce:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2102      	movs	r1, #2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 fb54 	bl	8003f84 <HAL_RCC_ClockConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <SystemClock_Config+0xc6>
        Error_Handler();
 80018e2:	f000 fac7 	bl	8001e74 <Error_Handler>
    }
}
 80018e6:	bf00      	nop
 80018e8:	3750      	adds	r7, #80	; 0x50
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40007000 	.word	0x40007000

080018f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018fe:	463b      	mov	r3, r7
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
    hadc1.Instance = ADC1;
 800190a:	4b21      	ldr	r3, [pc, #132]	; (8001990 <MX_ADC1_Init+0x98>)
 800190c:	4a21      	ldr	r2, [pc, #132]	; (8001994 <MX_ADC1_Init+0x9c>)
 800190e:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <MX_ADC1_Init+0x98>)
 8001912:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001916:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <MX_ADC1_Init+0x98>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <MX_ADC1_Init+0x98>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <MX_ADC1_Init+0x98>)
 8001926:	2201      	movs	r2, #1
 8001928:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <MX_ADC1_Init+0x98>)
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <MX_ADC1_Init+0x98>)
 8001934:	2200      	movs	r2, #0
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <MX_ADC1_Init+0x98>)
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <MX_ADC1_Init+0xa0>)
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <MX_ADC1_Init+0x98>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <MX_ADC1_Init+0x98>)
 8001946:	2201      	movs	r2, #1
 8001948:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_ADC1_Init+0x98>)
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <MX_ADC1_Init+0x98>)
 8001954:	2201      	movs	r2, #1
 8001956:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <MX_ADC1_Init+0x98>)
 800195a:	f000 ff59 	bl	8002810 <HAL_ADC_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_ADC1_Init+0x70>
        Error_Handler();
 8001964:	f000 fa86 	bl	8001e74 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
    sConfig.Channel = ADC_CHANNEL_0;
 8001968:	2300      	movs	r3, #0
 800196a:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 800196c:	2301      	movs	r3, #1
 800196e:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001974:	463b      	mov	r3, r7
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_ADC1_Init+0x98>)
 800197a:	f001 f841 	bl	8002a00 <HAL_ADC_ConfigChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001984:	f000 fa76 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200001fc 	.word	0x200001fc
 8001994:	40012000 	.word	0x40012000
 8001998:	0f000001 	.word	0x0f000001

0800199c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b096      	sub	sp, #88	; 0x58
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80019ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	2220      	movs	r2, #32
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f005 fdda 	bl	800758e <memset>

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 80019da:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <MX_TIM1_Init+0x168>)
 80019dc:	4a4a      	ldr	r2, [pc, #296]	; (8001b08 <MX_TIM1_Init+0x16c>)
 80019de:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 84 - 1;
 80019e0:	4b48      	ldr	r3, [pc, #288]	; (8001b04 <MX_TIM1_Init+0x168>)
 80019e2:	2253      	movs	r2, #83	; 0x53
 80019e4:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e6:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <MX_TIM1_Init+0x168>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 250 - 1;
 80019ec:	4b45      	ldr	r3, [pc, #276]	; (8001b04 <MX_TIM1_Init+0x168>)
 80019ee:	22f9      	movs	r2, #249	; 0xf9
 80019f0:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f2:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <MX_TIM1_Init+0x168>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 80019f8:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <MX_TIM1_Init+0x168>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001a04:	483f      	ldr	r0, [pc, #252]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001a06:	f002 fc9d 	bl	8004344 <HAL_TIM_Base_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM1_Init+0x78>
        Error_Handler();
 8001a10:	f000 fa30 	bl	8001e74 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a18:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001a1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4838      	ldr	r0, [pc, #224]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001a22:	f003 f843 	bl	8004aac <HAL_TIM_ConfigClockSource>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM1_Init+0x94>
        Error_Handler();
 8001a2c:	f000 fa22 	bl	8001e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a30:	4834      	ldr	r0, [pc, #208]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001a32:	f002 fd68 	bl	8004506 <HAL_TIM_PWM_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001a3c:	f000 fa1a 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	482d      	ldr	r0, [pc, #180]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001a50:	f003 fbf2 	bl	8005238 <HAL_TIMEx_MasterConfigSynchronization>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001a5a:	f000 fa0b 	bl	8001e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a5e:	2360      	movs	r3, #96	; 0x60
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4619      	mov	r1, r3
 8001a82:	4820      	ldr	r0, [pc, #128]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001a84:	f002 ff50 	bl	8004928 <HAL_TIM_PWM_ConfigChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001a8e:	f000 f9f1 	bl	8001e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a96:	2204      	movs	r2, #4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	481a      	ldr	r0, [pc, #104]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001a9c:	f002 ff44 	bl	8004928 <HAL_TIM_PWM_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001aa6:	f000 f9e5 	bl	8001e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aae:	2208      	movs	r2, #8
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4814      	ldr	r0, [pc, #80]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001ab4:	f002 ff38 	bl	8004928 <HAL_TIM_PWM_ConfigChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001abe:	f000 f9d9 	bl	8001e74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ada:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4807      	ldr	r0, [pc, #28]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001ae6:	f003 fc15 	bl	8005314 <HAL_TIMEx_ConfigBreakDeadTime>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001af0:	f000 f9c0 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001af4:	4803      	ldr	r0, [pc, #12]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001af6:	f000 fbf9 	bl	80022ec <HAL_TIM_MspPostInit>

}
 8001afa:	bf00      	nop
 8001afc:	3758      	adds	r7, #88	; 0x58
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200002a4 	.word	0x200002a4
 8001b08:	40010000 	.word	0x40010000

08001b0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b12:	f107 0308 	add.w	r3, r7, #8
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b20:	463b      	mov	r3, r7
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001b28:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b2e:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 840 - 1;
 8001b30:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b32:	f240 3247 	movw	r2, #839	; 0x347
 8001b36:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 1 - 1;
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001b50:	4813      	ldr	r0, [pc, #76]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b52:	f002 fbf7 	bl	8004344 <HAL_TIM_Base_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM2_Init+0x54>
        Error_Handler();
 8001b5c:	f000 f98a 	bl	8001e74 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b64:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001b66:	f107 0308 	add.w	r3, r7, #8
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b6e:	f002 ff9d 	bl	8004aac <HAL_TIM_ConfigClockSource>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM2_Init+0x70>
        Error_Handler();
 8001b78:	f000 f97c 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001b84:	463b      	mov	r3, r7
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_TIM2_Init+0x94>)
 8001b8a:	f003 fb55 	bl	8005238 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM2_Init+0x8c>
        Error_Handler();
 8001b94:	f000 f96e 	bl	8001e74 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200002ec 	.word	0x200002ec

08001ba4 <MX_TIM3_Init>:
/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001baa:	f107 0308 	add.w	r3, r7, #8
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <MX_TIM3_Init+0x94>)
 8001bc2:	4a1e      	ldr	r2, [pc, #120]	; (8001c3c <MX_TIM3_Init+0x98>)
 8001bc4:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 8400 - 1;
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <MX_TIM3_Init+0x94>)
 8001bc8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001bcc:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bce:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <MX_TIM3_Init+0x94>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 100 - 1;
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <MX_TIM3_Init+0x94>)
 8001bd6:	2263      	movs	r2, #99	; 0x63
 8001bd8:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bda:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <MX_TIM3_Init+0x94>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <MX_TIM3_Init+0x94>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001be6:	4814      	ldr	r0, [pc, #80]	; (8001c38 <MX_TIM3_Init+0x94>)
 8001be8:	f002 fbac 	bl	8004344 <HAL_TIM_Base_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM3_Init+0x52>
        Error_Handler();
 8001bf2:	f000 f93f 	bl	8001e74 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfa:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001bfc:	f107 0308 	add.w	r3, r7, #8
 8001c00:	4619      	mov	r1, r3
 8001c02:	480d      	ldr	r0, [pc, #52]	; (8001c38 <MX_TIM3_Init+0x94>)
 8001c04:	f002 ff52 	bl	8004aac <HAL_TIM_ConfigClockSource>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM3_Init+0x6e>
        Error_Handler();
 8001c0e:	f000 f931 	bl	8001e74 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4806      	ldr	r0, [pc, #24]	; (8001c38 <MX_TIM3_Init+0x94>)
 8001c20:	f003 fb0a 	bl	8005238 <HAL_TIMEx_MasterConfigSynchronization>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM3_Init+0x8a>
        Error_Handler();
 8001c2a:	f000 f923 	bl	8001e74 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000334 	.word	0x20000334
 8001c3c:	40000400 	.word	0x40000400

08001c40 <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <MX_USART1_UART_Init+0x50>)
 8001c48:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c50:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c66:	220c      	movs	r2, #12
 8001c68:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_USART1_UART_Init+0x4c>)
 8001c78:	f003 fbb2 	bl	80053e0 <HAL_UART_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_USART1_UART_Init+0x46>
        Error_Handler();
 8001c82:	f000 f8f7 	bl	8001e74 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000037c 	.word	0x2000037c
 8001c90:	40011000 	.word	0x40011000

08001c94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_DMA_Init+0x3c>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <MX_DMA_Init+0x3c>)
 8001ca4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MX_DMA_Init+0x3c>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2038      	movs	r0, #56	; 0x38
 8001cbc:	f001 f999 	bl	8002ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001cc0:	2038      	movs	r0, #56	; 0x38
 8001cc2:	f001 f9b2 	bl	800302a <HAL_NVIC_EnableIRQ>

}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800

08001cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b39      	ldr	r3, [pc, #228]	; (8001dd4 <MX_GPIO_Init+0x100>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a38      	ldr	r2, [pc, #224]	; (8001dd4 <MX_GPIO_Init+0x100>)
 8001cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <MX_GPIO_Init+0x100>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <MX_GPIO_Init+0x100>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a31      	ldr	r2, [pc, #196]	; (8001dd4 <MX_GPIO_Init+0x100>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <MX_GPIO_Init+0x100>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <MX_GPIO_Init+0x100>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a2a      	ldr	r2, [pc, #168]	; (8001dd4 <MX_GPIO_Init+0x100>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <MX_GPIO_Init+0x100>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <MX_GPIO_Init+0x100>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <MX_GPIO_Init+0x100>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <MX_GPIO_Init+0x100>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	21a0      	movs	r1, #160	; 0xa0
 8001d5e:	481e      	ldr	r0, [pc, #120]	; (8001dd8 <MX_GPIO_Init+0x104>)
 8001d60:	f001 fe7e 	bl	8003a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2130      	movs	r1, #48	; 0x30
 8001d68:	481c      	ldr	r0, [pc, #112]	; (8001ddc <MX_GPIO_Init+0x108>)
 8001d6a:	f001 fe79 	bl	8003a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2101      	movs	r1, #1
 8001d72:	481b      	ldr	r0, [pc, #108]	; (8001de0 <MX_GPIO_Init+0x10c>)
 8001d74:	f001 fe74 	bl	8003a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d78:	23a0      	movs	r3, #160	; 0xa0
 8001d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4812      	ldr	r0, [pc, #72]	; (8001dd8 <MX_GPIO_Init+0x104>)
 8001d90:	f001 fce2 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d94:	2330      	movs	r3, #48	; 0x30
 8001d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	480c      	ldr	r0, [pc, #48]	; (8001ddc <MX_GPIO_Init+0x108>)
 8001dac:	f001 fcd4 	bl	8003758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001db0:	2301      	movs	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4806      	ldr	r0, [pc, #24]	; (8001de0 <MX_GPIO_Init+0x10c>)
 8001dc8:	f001 fcc6 	bl	8003758 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	; 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	40020400 	.word	0x40020400

08001de4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_UART_RxCpltCallback+0x80>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d122      	bne.n	8001e3c <HAL_UART_RxCpltCallback+0x58>
        // Process the received data here
        // ...
        if (UARTRecieveBuffer[UARTBufIterator - 1] == '\0' || UARTRecieveBuffer[UARTBufIterator - 1] == '\r' || UARTRecieveBuffer[UARTBufIterator - 1] == '\n') {
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <HAL_UART_RxCpltCallback+0x84>)
 8001df8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <HAL_UART_RxCpltCallback+0x88>)
 8001e00:	5cd3      	ldrb	r3, [r2, r3]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00f      	beq.n	8001e26 <HAL_UART_RxCpltCallback+0x42>
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <HAL_UART_RxCpltCallback+0x84>)
 8001e08:	f993 3000 	ldrsb.w	r3, [r3]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_UART_RxCpltCallback+0x88>)
 8001e10:	5cd3      	ldrb	r3, [r2, r3]
 8001e12:	2b0d      	cmp	r3, #13
 8001e14:	d007      	beq.n	8001e26 <HAL_UART_RxCpltCallback+0x42>
 8001e16:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <HAL_UART_RxCpltCallback+0x84>)
 8001e18:	f993 3000 	ldrsb.w	r3, [r3]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	4a13      	ldr	r2, [pc, #76]	; (8001e6c <HAL_UART_RxCpltCallback+0x88>)
 8001e20:	5cd3      	ldrb	r3, [r2, r3]
 8001e22:	2b0a      	cmp	r3, #10
 8001e24:	d10a      	bne.n	8001e3c <HAL_UART_RxCpltCallback+0x58>
            parseString(UARTRecieveBuffer);
 8001e26:	4811      	ldr	r0, [pc, #68]	; (8001e6c <HAL_UART_RxCpltCallback+0x88>)
 8001e28:	f7ff f8de 	bl	8000fe8 <parseString>
            memset(UARTRecieveBuffer, 0, sizeof(UARTRecieveBuffer));
 8001e2c:	220a      	movs	r2, #10
 8001e2e:	2100      	movs	r1, #0
 8001e30:	480e      	ldr	r0, [pc, #56]	; (8001e6c <HAL_UART_RxCpltCallback+0x88>)
 8001e32:	f005 fbac 	bl	800758e <memset>
            UARTBufIterator = 0;
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_UART_RxCpltCallback+0x84>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
        }
        // Restart reception for the next byte
    }
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &UARTRecieveBuffer[UARTBufIterator++], 1);
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_UART_RxCpltCallback+0x84>)
 8001e3e:	f993 2000 	ldrsb.w	r2, [r3]
 8001e42:	b2d3      	uxtb	r3, r2
 8001e44:	3301      	adds	r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	b259      	sxtb	r1, r3
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <HAL_UART_RxCpltCallback+0x84>)
 8001e4c:	7019      	strb	r1, [r3, #0]
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <HAL_UART_RxCpltCallback+0x88>)
 8001e50:	4413      	add	r3, r2
 8001e52:	2201      	movs	r2, #1
 8001e54:	4619      	mov	r1, r3
 8001e56:	4806      	ldr	r0, [pc, #24]	; (8001e70 <HAL_UART_RxCpltCallback+0x8c>)
 8001e58:	f003 fba1 	bl	800559e <HAL_UART_Receive_IT>

}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40011000 	.word	0x40011000
 8001e68:	200003ca 	.word	0x200003ca
 8001e6c:	200003c0 	.word	0x200003c0
 8001e70:	2000037c 	.word	0x2000037c

08001e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e7c:	e7fe      	b.n	8001e7c <Error_Handler+0x8>
	...

08001e80 <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8001e8c:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <LCD_setRST+0x24>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 8001e92:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <LCD_setRST+0x24>)
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	8093      	strh	r3, [r2, #4]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	200005c8 	.word	0x200005c8

08001ea8 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8001eb4:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <LCD_setCE+0x24>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 8001eba:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <LCD_setCE+0x24>)
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	8193      	strh	r3, [r2, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	200005c8 	.word	0x200005c8

08001ed0 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 8001edc:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <LCD_setDC+0x24>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <LCD_setDC+0x24>)
 8001ee4:	887b      	ldrh	r3, [r7, #2]
 8001ee6:	8293      	strh	r3, [r2, #20]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	200005c8 	.word	0x200005c8

08001ef8 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 8001f04:	4a05      	ldr	r2, [pc, #20]	; (8001f1c <LCD_setDIN+0x24>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 8001f0a:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <LCD_setDIN+0x24>)
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	8393      	strh	r3, [r2, #28]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	200005c8 	.word	0x200005c8

08001f20 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8001f2c:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <LCD_setCLK+0x24>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 8001f32:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <LCD_setCLK+0x24>)
 8001f34:	887b      	ldrh	r3, [r7, #2]
 8001f36:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	200005c8 	.word	0x200005c8

08001f48 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	e026      	b.n	8001fa6 <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <LCD_send+0x70>)
 8001f5a:	6998      	ldr	r0, [r3, #24]
 8001f5c:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <LCD_send+0x70>)
 8001f5e:	8b99      	ldrh	r1, [r3, #28]
 8001f60:	79fa      	ldrb	r2, [r7, #7]
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	f1c3 0307 	rsb	r3, r3, #7
 8001f68:	fa42 f303 	asr.w	r3, r2, r3
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf14      	ite	ne
 8001f74:	2301      	movne	r3, #1
 8001f76:	2300      	moveq	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f001 fd70 	bl	8003a60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <LCD_send+0x70>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <LCD_send+0x70>)
 8001f86:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f001 fd68 	bl	8003a60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <LCD_send+0x70>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <LCD_send+0x70>)
 8001f96:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8001f98:	2200      	movs	r2, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f001 fd60 	bl	8003a60 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	2b07      	cmp	r3, #7
 8001faa:	d9d5      	bls.n	8001f58 <LCD_send+0x10>
  }
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200005c8 	.word	0x200005c8

08001fbc <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	460a      	mov	r2, r1
 8001fc6:	71fb      	strb	r3, [r7, #7]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 8001fcc:	79bb      	ldrb	r3, [r7, #6]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d11c      	bne.n	800200c <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <LCD_write+0x90>)
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	4a1d      	ldr	r2, [pc, #116]	; (800204c <LCD_write+0x90>)
 8001fd8:	8a91      	ldrh	r1, [r2, #20]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 fd3f 	bl	8003a60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <LCD_write+0x90>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4a19      	ldr	r2, [pc, #100]	; (800204c <LCD_write+0x90>)
 8001fe8:	8991      	ldrh	r1, [r2, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f001 fd37 	bl	8003a60 <HAL_GPIO_WritePin>
    LCD_send(data);
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ffa7 	bl	8001f48 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <LCD_write+0x90>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	4a13      	ldr	r2, [pc, #76]	; (800204c <LCD_write+0x90>)
 8002000:	8991      	ldrh	r1, [r2, #12]
 8002002:	2201      	movs	r2, #1
 8002004:	4618      	mov	r0, r3
 8002006:	f001 fd2b 	bl	8003a60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 800200a:	e01b      	b.n	8002044 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <LCD_write+0x90>)
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	4a0e      	ldr	r2, [pc, #56]	; (800204c <LCD_write+0x90>)
 8002012:	8a91      	ldrh	r1, [r2, #20]
 8002014:	2201      	movs	r2, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f001 fd22 	bl	8003a60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <LCD_write+0x90>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a0a      	ldr	r2, [pc, #40]	; (800204c <LCD_write+0x90>)
 8002022:	8991      	ldrh	r1, [r2, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f001 fd1a 	bl	8003a60 <HAL_GPIO_WritePin>
    LCD_send(data);
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff8a 	bl	8001f48 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <LCD_write+0x90>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a04      	ldr	r2, [pc, #16]	; (800204c <LCD_write+0x90>)
 800203a:	8991      	ldrh	r1, [r2, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	4618      	mov	r0, r3
 8002040:	f001 fd0e 	bl	8003a60 <HAL_GPIO_WritePin>
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	200005c8 	.word	0x200005c8

08002050 <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8002054:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <LCD_init+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <LCD_init+0x64>)
 800205a:	8891      	ldrh	r1, [r2, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f001 fcfe 	bl	8003a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <LCD_init+0x64>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <LCD_init+0x64>)
 800206a:	8891      	ldrh	r1, [r2, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f001 fcf6 	bl	8003a60 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8002074:	2100      	movs	r1, #0
 8002076:	2021      	movs	r0, #33	; 0x21
 8002078:	f7ff ffa0 	bl	8001fbc <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 800207c:	2100      	movs	r1, #0
 800207e:	20b8      	movs	r0, #184	; 0xb8
 8002080:	f7ff ff9c 	bl	8001fbc <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8002084:	2100      	movs	r1, #0
 8002086:	2004      	movs	r0, #4
 8002088:	f7ff ff98 	bl	8001fbc <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 800208c:	2100      	movs	r1, #0
 800208e:	2014      	movs	r0, #20
 8002090:	f7ff ff94 	bl	8001fbc <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8002094:	2100      	movs	r1, #0
 8002096:	2020      	movs	r0, #32
 8002098:	f7ff ff90 	bl	8001fbc <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 800209c:	2100      	movs	r1, #0
 800209e:	200c      	movs	r0, #12
 80020a0:	f7ff ff8c 	bl	8001fbc <LCD_write>
  LCD_clrScr();
 80020a4:	f000 f80a 	bl	80020bc <LCD_clrScr>
  lcd.inverttext = false;
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <LCD_init+0x68>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200005c8 	.word	0x200005c8
 80020b8:	200003cc 	.word	0x200003cc

080020bc <LCD_clrScr>:
}

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	e00b      	b.n	80020e0 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 80020c8:	2101      	movs	r1, #1
 80020ca:	2000      	movs	r0, #0
 80020cc:	f7ff ff76 	bl	8001fbc <LCD_write>
    lcd.buffer[i] = 0;
 80020d0:	4a08      	ldr	r2, [pc, #32]	; (80020f4 <LCD_clrScr+0x38>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3301      	adds	r3, #1
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80020e6:	dbef      	blt.n	80020c8 <LCD_clrScr+0xc>
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200003cc 	.word	0x200003cc

080020f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_MspInit+0x4c>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <HAL_MspInit+0x4c>)
 8002108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800210c:	6453      	str	r3, [r2, #68]	; 0x44
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HAL_MspInit+0x4c>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_MspInit+0x4c>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a08      	ldr	r2, [pc, #32]	; (8002144 <HAL_MspInit+0x4c>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_MspInit+0x4c>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a2f      	ldr	r2, [pc, #188]	; (8002224 <HAL_ADC_MspInit+0xdc>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d157      	bne.n	800221a <HAL_ADC_MspInit+0xd2>
  {
      /* USER CODE BEGIN ADC1_MspInit 0 */

      /* USER CODE END ADC1_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_ADC1_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <HAL_ADC_MspInit+0xe0>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a2d      	ldr	r2, [pc, #180]	; (8002228 <HAL_ADC_MspInit+0xe0>)
 8002174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <HAL_ADC_MspInit+0xe0>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_ADC_MspInit+0xe0>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a26      	ldr	r2, [pc, #152]	; (8002228 <HAL_ADC_MspInit+0xe0>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_ADC_MspInit+0xe0>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
      /**ADC1 GPIO Configuration
      PA0-WKUP     ------> ADC1_IN0
      */
      GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021a2:	2301      	movs	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a6:	2303      	movs	r3, #3
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4619      	mov	r1, r3
 80021b4:	481d      	ldr	r0, [pc, #116]	; (800222c <HAL_ADC_MspInit+0xe4>)
 80021b6:	f001 facf 	bl	8003758 <HAL_GPIO_Init>

      /* ADC1 DMA Init */
      /* ADC1 Init */
      hdma_adc1.Instance = DMA2_Stream0;
 80021ba:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_ADC_MspInit+0xe8>)
 80021bc:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <HAL_ADC_MspInit+0xec>)
 80021be:	601a      	str	r2, [r3, #0]
      hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_ADC_MspInit+0xe8>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	605a      	str	r2, [r3, #4]
      hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <HAL_ADC_MspInit+0xe8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
      hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_ADC_MspInit+0xe8>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
      hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <HAL_ADC_MspInit+0xe8>)
 80021d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021d8:	611a      	str	r2, [r3, #16]
      hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_ADC_MspInit+0xe8>)
 80021dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021e0:	615a      	str	r2, [r3, #20]
      hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <HAL_ADC_MspInit+0xe8>)
 80021e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021e8:	619a      	str	r2, [r3, #24]
      hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_ADC_MspInit+0xe8>)
 80021ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021f0:	61da      	str	r2, [r3, #28]
      hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_ADC_MspInit+0xe8>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	621a      	str	r2, [r3, #32]
      hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021f8:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <HAL_ADC_MspInit+0xe8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
      if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 80021fe:	480c      	ldr	r0, [pc, #48]	; (8002230 <HAL_ADC_MspInit+0xe8>)
 8002200:	f000 ff2e 	bl	8003060 <HAL_DMA_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_ADC_MspInit+0xc6>
          Error_Handler();
 800220a:	f7ff fe33 	bl	8001e74 <Error_Handler>
      }

      __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <HAL_ADC_MspInit+0xe8>)
 8002212:	639a      	str	r2, [r3, #56]	; 0x38
 8002214:	4a06      	ldr	r2, [pc, #24]	; (8002230 <HAL_ADC_MspInit+0xe8>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6393      	str	r3, [r2, #56]	; 0x38
      /* USER CODE BEGIN ADC1_MspInit 1 */

      /* USER CODE END ADC1_MspInit 1 */
  }

}
 800221a:	bf00      	nop
 800221c:	3728      	adds	r7, #40	; 0x28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40012000 	.word	0x40012000
 8002228:	40023800 	.word	0x40023800
 800222c:	40020000 	.word	0x40020000
 8002230:	20000244 	.word	0x20000244
 8002234:	40026410 	.word	0x40026410

08002238 <HAL_TIM_Base_MspInit>:
* @brief TIM_Base MSP Initialization
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
    if (htim_base->Instance == TIM1) {
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a26      	ldr	r2, [pc, #152]	; (80022e0 <HAL_TIM_Base_MspInit+0xa8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d10e      	bne.n	8002268 <HAL_TIM_Base_MspInit+0x30>
        /* USER CODE BEGIN TIM1_MspInit 0 */

        /* USER CODE END TIM1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM1_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_TIM_Base_MspInit+0xac>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a24      	ldr	r2, [pc, #144]	; (80022e4 <HAL_TIM_Base_MspInit+0xac>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <HAL_TIM_Base_MspInit+0xac>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697b      	ldr	r3, [r7, #20]
        /* USER CODE BEGIN TIM3_MspInit 1 */

        /* USER CODE END TIM3_MspInit 1 */
    }

}
 8002266:	e036      	b.n	80022d6 <HAL_TIM_Base_MspInit+0x9e>
    } else if (htim_base->Instance == TIM2) {
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002270:	d116      	bne.n	80022a0 <HAL_TIM_Base_MspInit+0x68>
        __HAL_RCC_TIM2_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_TIM_Base_MspInit+0xac>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a1a      	ldr	r2, [pc, #104]	; (80022e4 <HAL_TIM_Base_MspInit+0xac>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <HAL_TIM_Base_MspInit+0xac>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
        HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	201c      	movs	r0, #28
 8002294:	f000 fead 	bl	8002ff2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002298:	201c      	movs	r0, #28
 800229a:	f000 fec6 	bl	800302a <HAL_NVIC_EnableIRQ>
}
 800229e:	e01a      	b.n	80022d6 <HAL_TIM_Base_MspInit+0x9e>
    } else if (htim_base->Instance == TIM3) {
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_TIM_Base_MspInit+0xb0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d115      	bne.n	80022d6 <HAL_TIM_Base_MspInit+0x9e>
        __HAL_RCC_TIM3_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <HAL_TIM_Base_MspInit+0xac>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <HAL_TIM_Base_MspInit+0xac>)
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_TIM_Base_MspInit+0xac>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
        HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	201d      	movs	r0, #29
 80022cc:	f000 fe91 	bl	8002ff2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022d0:	201d      	movs	r0, #29
 80022d2:	f000 feaa 	bl	800302a <HAL_NVIC_EnableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40010000 	.word	0x40010000
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40000400 	.word	0x40000400

080022ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a12      	ldr	r2, [pc, #72]	; (8002354 <HAL_TIM_MspPostInit+0x68>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d11e      	bne.n	800234c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_TIM_MspPostInit+0x6c>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a10      	ldr	r2, [pc, #64]	; (8002358 <HAL_TIM_MspPostInit+0x6c>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <HAL_TIM_MspPostInit+0x6c>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800232a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800232e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800233c:	2301      	movs	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	4619      	mov	r1, r3
 8002346:	4805      	ldr	r0, [pc, #20]	; (800235c <HAL_TIM_MspPostInit+0x70>)
 8002348:	f001 fa06 	bl	8003758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800234c:	bf00      	nop
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40010000 	.word	0x40010000
 8002358:	40023800 	.word	0x40023800
 800235c:	40020000 	.word	0x40020000

08002360 <HAL_UART_MspInit>:
* @brief UART MSP Initialization
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART1) {
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1d      	ldr	r2, [pc, #116]	; (80023f4 <HAL_UART_MspInit+0x94>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d133      	bne.n	80023ea <HAL_UART_MspInit+0x8a>
        /* USER CODE BEGIN USART1_MspInit 0 */

        /* USER CODE END USART1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <HAL_UART_MspInit+0x98>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	4a1b      	ldr	r2, [pc, #108]	; (80023f8 <HAL_UART_MspInit+0x98>)
 800238c:	f043 0310 	orr.w	r3, r3, #16
 8002390:	6453      	str	r3, [r2, #68]	; 0x44
 8002392:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_UART_MspInit+0x98>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOB_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_UART_MspInit+0x98>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <HAL_UART_MspInit+0x98>)
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_UART_MspInit+0x98>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
        /**USART1 GPIO Configuration
        PB6     ------> USART1_TX
        PB7     ------> USART1_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80023ba:	23c0      	movs	r3, #192	; 0xc0
 80023bc:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c6:	2303      	movs	r3, #3
 80023c8:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023ca:	2307      	movs	r3, #7
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	4619      	mov	r1, r3
 80023d4:	4809      	ldr	r0, [pc, #36]	; (80023fc <HAL_UART_MspInit+0x9c>)
 80023d6:	f001 f9bf 	bl	8003758 <HAL_GPIO_Init>

        /* USART1 interrupt Init */
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	2025      	movs	r0, #37	; 0x25
 80023e0:	f000 fe07 	bl	8002ff2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023e4:	2025      	movs	r0, #37	; 0x25
 80023e6:	f000 fe20 	bl	800302a <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USART1_MspInit 1 */

        /* USER CODE END USART1_MspInit 1 */
    }

}
 80023ea:	bf00      	nop
 80023ec:	3728      	adds	r7, #40	; 0x28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40011000 	.word	0x40011000
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020400 	.word	0x40020400

08002400 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void) {
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8002404:	e7fe      	b.n	8002404 <NMI_Handler+0x4>

08002406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240a:	e7fe      	b.n	800240a <HardFault_Handler+0x4>

0800240c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <MemManage_Handler+0x4>

08002412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <BusFault_Handler+0x4>

08002418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <UsageFault_Handler+0x4>

0800241e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800244c:	f000 f99c 	bl	8002788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}

08002454 <TIM2_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void) {
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM2_IRQn 0 */

    /* USER CODE END TIM2_IRQn 0 */
    HAL_TIM_IRQHandler(&htim2);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <TIM2_IRQHandler+0x10>)
 800245a:	f002 f95d 	bl	8004718 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM2_IRQn 1 */

    /* USER CODE END TIM2_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200002ec 	.word	0x200002ec

08002468 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void) {
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM3_IRQn 0 */
    switch (LedMode) {
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <TIM3_IRQHandler+0x48>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d817      	bhi.n	80024a4 <TIM3_IRQHandler+0x3c>
 8002474:	a201      	add	r2, pc, #4	; (adr r2, 800247c <TIM3_IRQHandler+0x14>)
 8002476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247a:	bf00      	nop
 800247c:	0800248d 	.word	0x0800248d
 8002480:	08002493 	.word	0x08002493
 8002484:	08002499 	.word	0x08002499
 8002488:	0800249f 	.word	0x0800249f
        case 0:
            LED_pulseMode();
 800248c:	f7fe ff34 	bl	80012f8 <LED_pulseMode>
            break;
 8002490:	e008      	b.n	80024a4 <TIM3_IRQHandler+0x3c>
        case 1:
            LED_continuousTransformationMode();
 8002492:	f7fe ffd1 	bl	8001438 <LED_continuousTransformationMode>
            break;
 8002496:	e005      	b.n	80024a4 <TIM3_IRQHandler+0x3c>
        case 2:
            LED_continuousColorChangeMode();
 8002498:	f7ff f886 	bl	80015a8 <LED_continuousColorChangeMode>
            break;
 800249c:	e002      	b.n	80024a4 <TIM3_IRQHandler+0x3c>
        case 3:
            LED_randomColorMode();
 800249e:	f7ff f909 	bl	80016b4 <LED_randomColorMode>
            break;
 80024a2:	bf00      	nop
    }
    /* USER CODE END TIM3_IRQn 0 */
    HAL_TIM_IRQHandler(&htim3);
 80024a4:	4803      	ldr	r0, [pc, #12]	; (80024b4 <TIM3_IRQHandler+0x4c>)
 80024a6:	f002 f937 	bl	8004718 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM3_IRQn 1 */

    /* USER CODE END TIM3_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200001f8 	.word	0x200001f8
 80024b4:	20000334 	.word	0x20000334

080024b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART1_IRQn 0 */
    /* USER CODE END USART1_IRQn 0 */
    HAL_UART_IRQHandler(&huart1);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <USART1_IRQHandler+0x10>)
 80024be:	f003 f89f 	bl	8005600 <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART1_IRQn 1 */

    /* USER CODE END USART1_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	2000037c 	.word	0x2000037c

080024cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

    /* USER CODE END DMA2_Stream0_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_adc1);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <DMA2_Stream0_IRQHandler+0x10>)
 80024d2:	f000 ff05 	bl	80032e0 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

    /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000244 	.word	0x20000244

080024e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return 1;
 80024e4:	2301      	movs	r3, #1
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_kill>:

int _kill(int pid, int sig)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024fa:	f005 f905 	bl	8007708 <__errno>
 80024fe:	4603      	mov	r3, r0
 8002500:	2216      	movs	r2, #22
 8002502:	601a      	str	r2, [r3, #0]
  return -1;
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_exit>:

void _exit (int status)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ffe7 	bl	80024f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002522:	e7fe      	b.n	8002522 <_exit+0x12>

08002524 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e00a      	b.n	800254c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002536:	f3af 8000 	nop.w
 800253a:	4601      	mov	r1, r0
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60ba      	str	r2, [r7, #8]
 8002542:	b2ca      	uxtb	r2, r1
 8002544:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3301      	adds	r3, #1
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	dbf0      	blt.n	8002536 <_read+0x12>
  }

  return len;
 8002554:	687b      	ldr	r3, [r7, #4]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	e009      	b.n	8002584 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	60ba      	str	r2, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	dbf1      	blt.n	8002570 <_write+0x12>
  }
  return len;
 800258c:	687b      	ldr	r3, [r7, #4]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <_close>:

int _close(int file)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025be:	605a      	str	r2, [r3, #4]
  return 0;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <_isatty>:

int _isatty(int file)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025d6:	2301      	movs	r3, #1
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <_sbrk+0x5c>)
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <_sbrk+0x60>)
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <_sbrk+0x64>)
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <_sbrk+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d207      	bcs.n	8002640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002630:	f005 f86a 	bl	8007708 <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	e009      	b.n	8002654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	4a05      	ldr	r2, [pc, #20]	; (8002664 <_sbrk+0x64>)
 8002650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20018000 	.word	0x20018000
 8002660:	00000400 	.word	0x00000400
 8002664:	200005f0 	.word	0x200005f0
 8002668:	20000748 	.word	0x20000748

0800266c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <SystemInit+0x20>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <SystemInit+0x20>)
 8002678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800267c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002694:	480d      	ldr	r0, [pc, #52]	; (80026cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002696:	490e      	ldr	r1, [pc, #56]	; (80026d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002698:	4a0e      	ldr	r2, [pc, #56]	; (80026d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800269c:	e002      	b.n	80026a4 <LoopCopyDataInit>

0800269e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800269e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a2:	3304      	adds	r3, #4

080026a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a8:	d3f9      	bcc.n	800269e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026aa:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026ac:	4c0b      	ldr	r4, [pc, #44]	; (80026dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b0:	e001      	b.n	80026b6 <LoopFillZerobss>

080026b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b4:	3204      	adds	r2, #4

080026b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b8:	d3fb      	bcc.n	80026b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026ba:	f7ff ffd7 	bl	800266c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026be:	f005 f829 	bl	8007714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026c2:	f7ff f83b 	bl	800173c <main>
  bx  lr    
 80026c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80026d4:	080099a8 	.word	0x080099a8
  ldr r2, =_sbss
 80026d8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80026dc:	20000744 	.word	0x20000744

080026e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026e0:	e7fe      	b.n	80026e0 <ADC_IRQHandler>
	...

080026e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <HAL_Init+0x40>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <HAL_Init+0x40>)
 80026ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_Init+0x40>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0a      	ldr	r2, [pc, #40]	; (8002724 <HAL_Init+0x40>)
 80026fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <HAL_Init+0x40>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a07      	ldr	r2, [pc, #28]	; (8002724 <HAL_Init+0x40>)
 8002706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800270c:	2003      	movs	r0, #3
 800270e:	f000 fc65 	bl	8002fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002712:	200f      	movs	r0, #15
 8002714:	f000 f808 	bl	8002728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002718:	f7ff fcee 	bl	80020f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40023c00 	.word	0x40023c00

08002728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_InitTick+0x54>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_InitTick+0x58>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	4619      	mov	r1, r3
 800273a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800273e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fc7d 	bl	8003046 <HAL_SYSTICK_Config>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e00e      	b.n	8002774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b0f      	cmp	r3, #15
 800275a:	d80a      	bhi.n	8002772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800275c:	2200      	movs	r2, #0
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	f04f 30ff 	mov.w	r0, #4294967295
 8002764:	f000 fc45 	bl	8002ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002768:	4a06      	ldr	r2, [pc, #24]	; (8002784 <HAL_InitTick+0x5c>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	e000      	b.n	8002774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000000 	.word	0x20000000
 8002780:	20000008 	.word	0x20000008
 8002784:	20000004 	.word	0x20000004

08002788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_IncTick+0x20>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_IncTick+0x24>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4413      	add	r3, r2
 8002798:	4a04      	ldr	r2, [pc, #16]	; (80027ac <HAL_IncTick+0x24>)
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000008 	.word	0x20000008
 80027ac:	200005f4 	.word	0x200005f4

080027b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return uwTick;
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <HAL_GetTick+0x14>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	200005f4 	.word	0x200005f4

080027c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d0:	f7ff ffee 	bl	80027b0 <HAL_GetTick>
 80027d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e0:	d005      	beq.n	80027ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_Delay+0x44>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4413      	add	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027ee:	bf00      	nop
 80027f0:	f7ff ffde 	bl	80027b0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d8f7      	bhi.n	80027f0 <HAL_Delay+0x28>
  {
  }
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000008 	.word	0x20000008

08002810 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e033      	b.n	800288e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff fc8a 	bl	8002148 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	d118      	bne.n	8002880 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002856:	f023 0302 	bic.w	r3, r3, #2
 800285a:	f043 0202 	orr.w	r2, r3, #2
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f9ee 	bl	8002c44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f023 0303 	bic.w	r3, r3, #3
 8002876:	f043 0201 	orr.w	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
 800287e:	e001      	b.n	8002884 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800288c:	7bfb      	ldrb	r3, [r7, #15]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_Start+0x1a>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e097      	b.n	80029e2 <HAL_ADC_Start+0x14a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d018      	beq.n	80028fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028d8:	4b45      	ldr	r3, [pc, #276]	; (80029f0 <HAL_ADC_Start+0x158>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a45      	ldr	r2, [pc, #276]	; (80029f4 <HAL_ADC_Start+0x15c>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0c9a      	lsrs	r2, r3, #18
 80028e4:	4613      	mov	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4413      	add	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028ec:	e002      	b.n	80028f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f9      	bne.n	80028ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b01      	cmp	r3, #1
 8002906:	d15f      	bne.n	80029c8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002932:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002946:	d106      	bne.n	8002956 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	f023 0206 	bic.w	r2, r3, #6
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	645a      	str	r2, [r3, #68]	; 0x44
 8002954:	e002      	b.n	800295c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002964:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_ADC_Start+0x160>)
 8002966:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002970:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10f      	bne.n	800299e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d129      	bne.n	80029e0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	e020      	b.n	80029e0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a16      	ldr	r2, [pc, #88]	; (80029fc <HAL_ADC_Start+0x164>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d11b      	bne.n	80029e0 <HAL_ADC_Start+0x148>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d114      	bne.n	80029e0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	e00b      	b.n	80029e0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f043 0210 	orr.w	r2, r3, #16
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	f043 0201 	orr.w	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000000 	.word	0x20000000
 80029f4:	431bde83 	.word	0x431bde83
 80029f8:	40012300 	.word	0x40012300
 80029fc:	40012000 	.word	0x40012000

08002a00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x1c>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e105      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x228>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b09      	cmp	r3, #9
 8002a2a:	d925      	bls.n	8002a78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68d9      	ldr	r1, [r3, #12]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	3b1e      	subs	r3, #30
 8002a42:	2207      	movs	r2, #7
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43da      	mvns	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	400a      	ands	r2, r1
 8002a50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68d9      	ldr	r1, [r3, #12]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	4618      	mov	r0, r3
 8002a64:	4603      	mov	r3, r0
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4403      	add	r3, r0
 8002a6a:	3b1e      	subs	r3, #30
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	e022      	b.n	8002abe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6919      	ldr	r1, [r3, #16]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	4613      	mov	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43da      	mvns	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	400a      	ands	r2, r1
 8002a9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6919      	ldr	r1, [r3, #16]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	4618      	mov	r0, r3
 8002aae:	4603      	mov	r3, r0
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4403      	add	r3, r0
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d824      	bhi.n	8002b10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3b05      	subs	r3, #5
 8002ad8:	221f      	movs	r2, #31
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	4618      	mov	r0, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	3b05      	subs	r3, #5
 8002b02:	fa00 f203 	lsl.w	r2, r0, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b0e:	e04c      	b.n	8002baa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	d824      	bhi.n	8002b62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	3b23      	subs	r3, #35	; 0x23
 8002b2a:	221f      	movs	r2, #31
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43da      	mvns	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	400a      	ands	r2, r1
 8002b38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	4618      	mov	r0, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	3b23      	subs	r3, #35	; 0x23
 8002b54:	fa00 f203 	lsl.w	r2, r0, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b60:	e023      	b.n	8002baa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	3b41      	subs	r3, #65	; 0x41
 8002b74:	221f      	movs	r2, #31
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	400a      	ands	r2, r1
 8002b82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	4618      	mov	r0, r3
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3b41      	subs	r3, #65	; 0x41
 8002b9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002baa:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <HAL_ADC_ConfigChannel+0x234>)
 8002bac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a21      	ldr	r2, [pc, #132]	; (8002c38 <HAL_ADC_ConfigChannel+0x238>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d109      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x1cc>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b12      	cmp	r3, #18
 8002bbe:	d105      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a19      	ldr	r2, [pc, #100]	; (8002c38 <HAL_ADC_ConfigChannel+0x238>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d123      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x21e>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b10      	cmp	r3, #16
 8002bdc:	d003      	beq.n	8002be6 <HAL_ADC_ConfigChannel+0x1e6>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b11      	cmp	r3, #17
 8002be4:	d11b      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b10      	cmp	r3, #16
 8002bf8:	d111      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <HAL_ADC_ConfigChannel+0x23c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a10      	ldr	r2, [pc, #64]	; (8002c40 <HAL_ADC_ConfigChannel+0x240>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	0c9a      	lsrs	r2, r3, #18
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c10:	e002      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f9      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	40012300 	.word	0x40012300
 8002c38:	40012000 	.word	0x40012000
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	431bde83 	.word	0x431bde83

08002c44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c4c:	4b79      	ldr	r3, [pc, #484]	; (8002e34 <ADC_Init+0x1f0>)
 8002c4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	021a      	lsls	r2, r3, #8
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6859      	ldr	r1, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6899      	ldr	r1, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	4a58      	ldr	r2, [pc, #352]	; (8002e38 <ADC_Init+0x1f4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d022      	beq.n	8002d22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6899      	ldr	r1, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6899      	ldr	r1, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	e00f      	b.n	8002d42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0202 	bic.w	r2, r2, #2
 8002d50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6899      	ldr	r1, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7e1b      	ldrb	r3, [r3, #24]
 8002d5c:	005a      	lsls	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01b      	beq.n	8002da8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6859      	ldr	r1, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	035a      	lsls	r2, r3, #13
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	e007      	b.n	8002db8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002db6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	051a      	lsls	r2, r3, #20
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6899      	ldr	r1, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dfa:	025a      	lsls	r2, r3, #9
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6899      	ldr	r1, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	029a      	lsls	r2, r3, #10
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	609a      	str	r2, [r3, #8]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	40012300 	.word	0x40012300
 8002e38:	0f000001 	.word	0x0f000001

08002e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <__NVIC_SetPriorityGrouping+0x44>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e6e:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <__NVIC_SetPriorityGrouping+0x44>)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	60d3      	str	r3, [r2, #12]
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <__NVIC_GetPriorityGrouping+0x18>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	0a1b      	lsrs	r3, r3, #8
 8002e8e:	f003 0307 	and.w	r3, r3, #7
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	db0b      	blt.n	8002eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	f003 021f 	and.w	r2, r3, #31
 8002eb8:	4907      	ldr	r1, [pc, #28]	; (8002ed8 <__NVIC_EnableIRQ+0x38>)
 8002eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	e000e100 	.word	0xe000e100

08002edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	6039      	str	r1, [r7, #0]
 8002ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	db0a      	blt.n	8002f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	490c      	ldr	r1, [pc, #48]	; (8002f28 <__NVIC_SetPriority+0x4c>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	0112      	lsls	r2, r2, #4
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	440b      	add	r3, r1
 8002f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f04:	e00a      	b.n	8002f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	4908      	ldr	r1, [pc, #32]	; (8002f2c <__NVIC_SetPriority+0x50>)
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	3b04      	subs	r3, #4
 8002f14:	0112      	lsls	r2, r2, #4
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	440b      	add	r3, r1
 8002f1a:	761a      	strb	r2, [r3, #24]
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000e100 	.word	0xe000e100
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	; 0x24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f1c3 0307 	rsb	r3, r3, #7
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	bf28      	it	cs
 8002f4e:	2304      	movcs	r3, #4
 8002f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3304      	adds	r3, #4
 8002f56:	2b06      	cmp	r3, #6
 8002f58:	d902      	bls.n	8002f60 <NVIC_EncodePriority+0x30>
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	3b03      	subs	r3, #3
 8002f5e:	e000      	b.n	8002f62 <NVIC_EncodePriority+0x32>
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f64:	f04f 32ff 	mov.w	r2, #4294967295
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	401a      	ands	r2, r3
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f78:	f04f 31ff 	mov.w	r1, #4294967295
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	43d9      	mvns	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f88:	4313      	orrs	r3, r2
         );
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3724      	adds	r7, #36	; 0x24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa8:	d301      	bcc.n	8002fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002faa:	2301      	movs	r3, #1
 8002fac:	e00f      	b.n	8002fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fae:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <SysTick_Config+0x40>)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fb6:	210f      	movs	r1, #15
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbc:	f7ff ff8e 	bl	8002edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <SysTick_Config+0x40>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fc6:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <SysTick_Config+0x40>)
 8002fc8:	2207      	movs	r2, #7
 8002fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	e000e010 	.word	0xe000e010

08002fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff ff29 	bl	8002e3c <__NVIC_SetPriorityGrouping>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b086      	sub	sp, #24
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003004:	f7ff ff3e 	bl	8002e84 <__NVIC_GetPriorityGrouping>
 8003008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	6978      	ldr	r0, [r7, #20]
 8003010:	f7ff ff8e 	bl	8002f30 <NVIC_EncodePriority>
 8003014:	4602      	mov	r2, r0
 8003016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800301a:	4611      	mov	r1, r2
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff5d 	bl	8002edc <__NVIC_SetPriority>
}
 8003022:	bf00      	nop
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	4603      	mov	r3, r0
 8003032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ff31 	bl	8002ea0 <__NVIC_EnableIRQ>
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff ffa2 	bl	8002f98 <SysTick_Config>
 8003054:	4603      	mov	r3, r0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800306c:	f7ff fba0 	bl	80027b0 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e099      	b.n	80031b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0201 	bic.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800309c:	e00f      	b.n	80030be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800309e:	f7ff fb87 	bl	80027b0 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b05      	cmp	r3, #5
 80030aa:	d908      	bls.n	80030be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2220      	movs	r2, #32
 80030b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2203      	movs	r2, #3
 80030b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e078      	b.n	80031b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e8      	bne.n	800309e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4b38      	ldr	r3, [pc, #224]	; (80031b8 <HAL_DMA_Init+0x158>)
 80030d8:	4013      	ands	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	2b04      	cmp	r3, #4
 8003116:	d107      	bne.n	8003128 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	4313      	orrs	r3, r2
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f023 0307 	bic.w	r3, r3, #7
 800313e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	2b04      	cmp	r3, #4
 8003150:	d117      	bne.n	8003182 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4313      	orrs	r3, r2
 800315a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00e      	beq.n	8003182 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fa7b 	bl	8003660 <DMA_CheckFifoParam>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2240      	movs	r2, #64	; 0x40
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800317e:	2301      	movs	r3, #1
 8003180:	e016      	b.n	80031b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fa32 	bl	80035f4 <DMA_CalcBaseAndBitshift>
 8003190:	4603      	mov	r3, r0
 8003192:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	223f      	movs	r2, #63	; 0x3f
 800319a:	409a      	lsls	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	f010803f 	.word	0xf010803f

080031bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031ca:	f7ff faf1 	bl	80027b0 <HAL_GetTick>
 80031ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d008      	beq.n	80031ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2280      	movs	r2, #128	; 0x80
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e052      	b.n	8003294 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0216 	bic.w	r2, r2, #22
 80031fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800320c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d103      	bne.n	800321e <HAL_DMA_Abort+0x62>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321a:	2b00      	cmp	r3, #0
 800321c:	d007      	beq.n	800322e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0208 	bic.w	r2, r2, #8
 800322c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0201 	bic.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800323e:	e013      	b.n	8003268 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003240:	f7ff fab6 	bl	80027b0 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b05      	cmp	r3, #5
 800324c:	d90c      	bls.n	8003268 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2203      	movs	r2, #3
 8003258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e015      	b.n	8003294 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1e4      	bne.n	8003240 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327a:	223f      	movs	r2, #63	; 0x3f
 800327c:	409a      	lsls	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d004      	beq.n	80032ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2280      	movs	r2, #128	; 0x80
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e00c      	b.n	80032d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2205      	movs	r2, #5
 80032be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032ec:	4b8e      	ldr	r3, [pc, #568]	; (8003528 <HAL_DMA_IRQHandler+0x248>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a8e      	ldr	r2, [pc, #568]	; (800352c <HAL_DMA_IRQHandler+0x24c>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	0a9b      	lsrs	r3, r3, #10
 80032f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330a:	2208      	movs	r2, #8
 800330c:	409a      	lsls	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d01a      	beq.n	800334c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d013      	beq.n	800334c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0204 	bic.w	r2, r2, #4
 8003332:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	2208      	movs	r2, #8
 800333a:	409a      	lsls	r2, r3
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003344:	f043 0201 	orr.w	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003350:	2201      	movs	r2, #1
 8003352:	409a      	lsls	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d012      	beq.n	8003382 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00b      	beq.n	8003382 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336e:	2201      	movs	r2, #1
 8003370:	409a      	lsls	r2, r3
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337a:	f043 0202 	orr.w	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003386:	2204      	movs	r2, #4
 8003388:	409a      	lsls	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4013      	ands	r3, r2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d012      	beq.n	80033b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00b      	beq.n	80033b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	2204      	movs	r2, #4
 80033a6:	409a      	lsls	r2, r3
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b0:	f043 0204 	orr.w	r2, r3, #4
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033bc:	2210      	movs	r2, #16
 80033be:	409a      	lsls	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d043      	beq.n	8003450 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d03c      	beq.n	8003450 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	2210      	movs	r2, #16
 80033dc:	409a      	lsls	r2, r3
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d018      	beq.n	8003422 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d108      	bne.n	8003410 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d024      	beq.n	8003450 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	4798      	blx	r3
 800340e:	e01f      	b.n	8003450 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01b      	beq.n	8003450 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	4798      	blx	r3
 8003420:	e016      	b.n	8003450 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d107      	bne.n	8003440 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0208 	bic.w	r2, r2, #8
 800343e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	2220      	movs	r2, #32
 8003456:	409a      	lsls	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 808f 	beq.w	8003580 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8087 	beq.w	8003580 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003476:	2220      	movs	r2, #32
 8003478:	409a      	lsls	r2, r3
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b05      	cmp	r3, #5
 8003488:	d136      	bne.n	80034f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0216 	bic.w	r2, r2, #22
 8003498:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d103      	bne.n	80034ba <HAL_DMA_IRQHandler+0x1da>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0208 	bic.w	r2, r2, #8
 80034c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ce:	223f      	movs	r2, #63	; 0x3f
 80034d0:	409a      	lsls	r2, r3
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d07e      	beq.n	80035ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	4798      	blx	r3
        }
        return;
 80034f6:	e079      	b.n	80035ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d01d      	beq.n	8003542 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10d      	bne.n	8003530 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	2b00      	cmp	r3, #0
 800351a:	d031      	beq.n	8003580 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	4798      	blx	r3
 8003524:	e02c      	b.n	8003580 <HAL_DMA_IRQHandler+0x2a0>
 8003526:	bf00      	nop
 8003528:	20000000 	.word	0x20000000
 800352c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003534:	2b00      	cmp	r3, #0
 8003536:	d023      	beq.n	8003580 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4798      	blx	r3
 8003540:	e01e      	b.n	8003580 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10f      	bne.n	8003570 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0210 	bic.w	r2, r2, #16
 800355e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	2b00      	cmp	r3, #0
 8003586:	d032      	beq.n	80035ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d022      	beq.n	80035da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2205      	movs	r2, #5
 8003598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	3301      	adds	r3, #1
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d307      	bcc.n	80035c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f2      	bne.n	80035ac <HAL_DMA_IRQHandler+0x2cc>
 80035c6:	e000      	b.n	80035ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	4798      	blx	r3
 80035ea:	e000      	b.n	80035ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80035ec:	bf00      	nop
    }
  }
}
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	3b10      	subs	r3, #16
 8003604:	4a14      	ldr	r2, [pc, #80]	; (8003658 <DMA_CalcBaseAndBitshift+0x64>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800360e:	4a13      	ldr	r2, [pc, #76]	; (800365c <DMA_CalcBaseAndBitshift+0x68>)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b03      	cmp	r3, #3
 8003620:	d909      	bls.n	8003636 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	1d1a      	adds	r2, r3, #4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	659a      	str	r2, [r3, #88]	; 0x58
 8003634:	e007      	b.n	8003646 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800363e:	f023 0303 	bic.w	r3, r3, #3
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	aaaaaaab 	.word	0xaaaaaaab
 800365c:	0800951c 	.word	0x0800951c

08003660 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d11f      	bne.n	80036ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b03      	cmp	r3, #3
 800367e:	d856      	bhi.n	800372e <DMA_CheckFifoParam+0xce>
 8003680:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <DMA_CheckFifoParam+0x28>)
 8003682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003686:	bf00      	nop
 8003688:	08003699 	.word	0x08003699
 800368c:	080036ab 	.word	0x080036ab
 8003690:	08003699 	.word	0x08003699
 8003694:	0800372f 	.word	0x0800372f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d046      	beq.n	8003732 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a8:	e043      	b.n	8003732 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036b2:	d140      	bne.n	8003736 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b8:	e03d      	b.n	8003736 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c2:	d121      	bne.n	8003708 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d837      	bhi.n	800373a <DMA_CheckFifoParam+0xda>
 80036ca:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <DMA_CheckFifoParam+0x70>)
 80036cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d0:	080036e1 	.word	0x080036e1
 80036d4:	080036e7 	.word	0x080036e7
 80036d8:	080036e1 	.word	0x080036e1
 80036dc:	080036f9 	.word	0x080036f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
      break;
 80036e4:	e030      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d025      	beq.n	800373e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f6:	e022      	b.n	800373e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003700:	d11f      	bne.n	8003742 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003706:	e01c      	b.n	8003742 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d903      	bls.n	8003716 <DMA_CheckFifoParam+0xb6>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b03      	cmp	r3, #3
 8003712:	d003      	beq.n	800371c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003714:	e018      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
      break;
 800371a:	e015      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00e      	beq.n	8003746 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      break;
 800372c:	e00b      	b.n	8003746 <DMA_CheckFifoParam+0xe6>
      break;
 800372e:	bf00      	nop
 8003730:	e00a      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
      break;
 8003732:	bf00      	nop
 8003734:	e008      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
      break;
 8003736:	bf00      	nop
 8003738:	e006      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
      break;
 800373a:	bf00      	nop
 800373c:	e004      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
      break;
 800373e:	bf00      	nop
 8003740:	e002      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
      break;   
 8003742:	bf00      	nop
 8003744:	e000      	b.n	8003748 <DMA_CheckFifoParam+0xe8>
      break;
 8003746:	bf00      	nop
    }
  } 
  
  return status; 
 8003748:	7bfb      	ldrb	r3, [r7, #15]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop

08003758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800376a:	2300      	movs	r3, #0
 800376c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	e159      	b.n	8003a28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003774:	2201      	movs	r2, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	429a      	cmp	r2, r3
 800378e:	f040 8148 	bne.w	8003a22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b01      	cmp	r3, #1
 800379c:	d005      	beq.n	80037aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d130      	bne.n	800380c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	2203      	movs	r2, #3
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037e0:	2201      	movs	r2, #1
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	f003 0201 	and.w	r2, r3, #1
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	2b03      	cmp	r3, #3
 8003816:	d017      	beq.n	8003848 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d123      	bne.n	800389c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	08da      	lsrs	r2, r3, #3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3208      	adds	r2, #8
 800385c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	220f      	movs	r2, #15
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	08da      	lsrs	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3208      	adds	r2, #8
 8003896:	69b9      	ldr	r1, [r7, #24]
 8003898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	2203      	movs	r2, #3
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 0203 	and.w	r2, r3, #3
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80a2 	beq.w	8003a22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	4b57      	ldr	r3, [pc, #348]	; (8003a40 <HAL_GPIO_Init+0x2e8>)
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	4a56      	ldr	r2, [pc, #344]	; (8003a40 <HAL_GPIO_Init+0x2e8>)
 80038e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ec:	6453      	str	r3, [r2, #68]	; 0x44
 80038ee:	4b54      	ldr	r3, [pc, #336]	; (8003a40 <HAL_GPIO_Init+0x2e8>)
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038fa:	4a52      	ldr	r2, [pc, #328]	; (8003a44 <HAL_GPIO_Init+0x2ec>)
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	089b      	lsrs	r3, r3, #2
 8003900:	3302      	adds	r3, #2
 8003902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	220f      	movs	r2, #15
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a49      	ldr	r2, [pc, #292]	; (8003a48 <HAL_GPIO_Init+0x2f0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d019      	beq.n	800395a <HAL_GPIO_Init+0x202>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a48      	ldr	r2, [pc, #288]	; (8003a4c <HAL_GPIO_Init+0x2f4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <HAL_GPIO_Init+0x1fe>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a47      	ldr	r2, [pc, #284]	; (8003a50 <HAL_GPIO_Init+0x2f8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00d      	beq.n	8003952 <HAL_GPIO_Init+0x1fa>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a46      	ldr	r2, [pc, #280]	; (8003a54 <HAL_GPIO_Init+0x2fc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <HAL_GPIO_Init+0x1f6>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a45      	ldr	r2, [pc, #276]	; (8003a58 <HAL_GPIO_Init+0x300>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <HAL_GPIO_Init+0x1f2>
 8003946:	2304      	movs	r3, #4
 8003948:	e008      	b.n	800395c <HAL_GPIO_Init+0x204>
 800394a:	2307      	movs	r3, #7
 800394c:	e006      	b.n	800395c <HAL_GPIO_Init+0x204>
 800394e:	2303      	movs	r3, #3
 8003950:	e004      	b.n	800395c <HAL_GPIO_Init+0x204>
 8003952:	2302      	movs	r3, #2
 8003954:	e002      	b.n	800395c <HAL_GPIO_Init+0x204>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <HAL_GPIO_Init+0x204>
 800395a:	2300      	movs	r3, #0
 800395c:	69fa      	ldr	r2, [r7, #28]
 800395e:	f002 0203 	and.w	r2, r2, #3
 8003962:	0092      	lsls	r2, r2, #2
 8003964:	4093      	lsls	r3, r2
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800396c:	4935      	ldr	r1, [pc, #212]	; (8003a44 <HAL_GPIO_Init+0x2ec>)
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	089b      	lsrs	r3, r3, #2
 8003972:	3302      	adds	r3, #2
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800397a:	4b38      	ldr	r3, [pc, #224]	; (8003a5c <HAL_GPIO_Init+0x304>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800399e:	4a2f      	ldr	r2, [pc, #188]	; (8003a5c <HAL_GPIO_Init+0x304>)
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039a4:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <HAL_GPIO_Init+0x304>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039c8:	4a24      	ldr	r2, [pc, #144]	; (8003a5c <HAL_GPIO_Init+0x304>)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039ce:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <HAL_GPIO_Init+0x304>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	43db      	mvns	r3, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4013      	ands	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039f2:	4a1a      	ldr	r2, [pc, #104]	; (8003a5c <HAL_GPIO_Init+0x304>)
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039f8:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <HAL_GPIO_Init+0x304>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	43db      	mvns	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a1c:	4a0f      	ldr	r2, [pc, #60]	; (8003a5c <HAL_GPIO_Init+0x304>)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3301      	adds	r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	2b0f      	cmp	r3, #15
 8003a2c:	f67f aea2 	bls.w	8003774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	3724      	adds	r7, #36	; 0x24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40013800 	.word	0x40013800
 8003a48:	40020000 	.word	0x40020000
 8003a4c:	40020400 	.word	0x40020400
 8003a50:	40020800 	.word	0x40020800
 8003a54:	40020c00 	.word	0x40020c00
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40013c00 	.word	0x40013c00

08003a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	807b      	strh	r3, [r7, #2]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a70:	787b      	ldrb	r3, [r7, #1]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a76:	887a      	ldrh	r2, [r7, #2]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a7c:	e003      	b.n	8003a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a7e:	887b      	ldrh	r3, [r7, #2]
 8003a80:	041a      	lsls	r2, r3, #16
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	619a      	str	r2, [r3, #24]
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e267      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d075      	beq.n	8003b9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ab2:	4b88      	ldr	r3, [pc, #544]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d00c      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003abe:	4b85      	ldr	r3, [pc, #532]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d112      	bne.n	8003af0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aca:	4b82      	ldr	r3, [pc, #520]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad6:	d10b      	bne.n	8003af0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad8:	4b7e      	ldr	r3, [pc, #504]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d05b      	beq.n	8003b9c <HAL_RCC_OscConfig+0x108>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d157      	bne.n	8003b9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e242      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af8:	d106      	bne.n	8003b08 <HAL_RCC_OscConfig+0x74>
 8003afa:	4b76      	ldr	r3, [pc, #472]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a75      	ldr	r2, [pc, #468]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e01d      	b.n	8003b44 <HAL_RCC_OscConfig+0xb0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x98>
 8003b12:	4b70      	ldr	r3, [pc, #448]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a6f      	ldr	r2, [pc, #444]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b6d      	ldr	r3, [pc, #436]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a6c      	ldr	r2, [pc, #432]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e00b      	b.n	8003b44 <HAL_RCC_OscConfig+0xb0>
 8003b2c:	4b69      	ldr	r3, [pc, #420]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a68      	ldr	r2, [pc, #416]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4b66      	ldr	r3, [pc, #408]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a65      	ldr	r2, [pc, #404]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d013      	beq.n	8003b74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7fe fe30 	bl	80027b0 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b54:	f7fe fe2c 	bl	80027b0 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	; 0x64
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e207      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b66:	4b5b      	ldr	r3, [pc, #364]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0xc0>
 8003b72:	e014      	b.n	8003b9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7fe fe1c 	bl	80027b0 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b7c:	f7fe fe18 	bl	80027b0 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	; 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e1f3      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8e:	4b51      	ldr	r3, [pc, #324]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0xe8>
 8003b9a:	e000      	b.n	8003b9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d063      	beq.n	8003c72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003baa:	4b4a      	ldr	r3, [pc, #296]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb6:	4b47      	ldr	r3, [pc, #284]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d11c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bc2:	4b44      	ldr	r3, [pc, #272]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d116      	bne.n	8003bfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bce:	4b41      	ldr	r3, [pc, #260]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_RCC_OscConfig+0x152>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d001      	beq.n	8003be6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e1c7      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be6:	4b3b      	ldr	r3, [pc, #236]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4937      	ldr	r1, [pc, #220]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfa:	e03a      	b.n	8003c72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d020      	beq.n	8003c46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c04:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0a:	f7fe fdd1 	bl	80027b0 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c12:	f7fe fdcd 	bl	80027b0 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e1a8      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c24:	4b2b      	ldr	r3, [pc, #172]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c30:	4b28      	ldr	r3, [pc, #160]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4925      	ldr	r1, [pc, #148]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	600b      	str	r3, [r1, #0]
 8003c44:	e015      	b.n	8003c72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c46:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7fe fdb0 	bl	80027b0 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c54:	f7fe fdac 	bl	80027b0 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e187      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c66:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d036      	beq.n	8003cec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d016      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c86:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <HAL_RCC_OscConfig+0x248>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7fe fd90 	bl	80027b0 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c94:	f7fe fd8c 	bl	80027b0 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e167      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCC_OscConfig+0x200>
 8003cb2:	e01b      	b.n	8003cec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cb4:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <HAL_RCC_OscConfig+0x248>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cba:	f7fe fd79 	bl	80027b0 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc0:	e00e      	b.n	8003ce0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fe fd75 	bl	80027b0 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d907      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e150      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	42470000 	.word	0x42470000
 8003cdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce0:	4b88      	ldr	r3, [pc, #544]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1ea      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 8097 	beq.w	8003e28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cfe:	4b81      	ldr	r3, [pc, #516]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10f      	bne.n	8003d2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	4b7d      	ldr	r3, [pc, #500]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	4a7c      	ldr	r2, [pc, #496]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d18:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1a:	4b7a      	ldr	r3, [pc, #488]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d22:	60bb      	str	r3, [r7, #8]
 8003d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d26:	2301      	movs	r3, #1
 8003d28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2a:	4b77      	ldr	r3, [pc, #476]	; (8003f08 <HAL_RCC_OscConfig+0x474>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d118      	bne.n	8003d68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d36:	4b74      	ldr	r3, [pc, #464]	; (8003f08 <HAL_RCC_OscConfig+0x474>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a73      	ldr	r2, [pc, #460]	; (8003f08 <HAL_RCC_OscConfig+0x474>)
 8003d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d42:	f7fe fd35 	bl	80027b0 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4a:	f7fe fd31 	bl	80027b0 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e10c      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5c:	4b6a      	ldr	r3, [pc, #424]	; (8003f08 <HAL_RCC_OscConfig+0x474>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0f0      	beq.n	8003d4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d106      	bne.n	8003d7e <HAL_RCC_OscConfig+0x2ea>
 8003d70:	4b64      	ldr	r3, [pc, #400]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	4a63      	ldr	r2, [pc, #396]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7c:	e01c      	b.n	8003db8 <HAL_RCC_OscConfig+0x324>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b05      	cmp	r3, #5
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x30c>
 8003d86:	4b5f      	ldr	r3, [pc, #380]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	4a5e      	ldr	r2, [pc, #376]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	f043 0304 	orr.w	r3, r3, #4
 8003d90:	6713      	str	r3, [r2, #112]	; 0x70
 8003d92:	4b5c      	ldr	r3, [pc, #368]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	4a5b      	ldr	r2, [pc, #364]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCC_OscConfig+0x324>
 8003da0:	4b58      	ldr	r3, [pc, #352]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	4a57      	ldr	r2, [pc, #348]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	6713      	str	r3, [r2, #112]	; 0x70
 8003dac:	4b55      	ldr	r3, [pc, #340]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	4a54      	ldr	r2, [pc, #336]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003db2:	f023 0304 	bic.w	r3, r3, #4
 8003db6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d015      	beq.n	8003dec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc0:	f7fe fcf6 	bl	80027b0 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc8:	f7fe fcf2 	bl	80027b0 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e0cb      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dde:	4b49      	ldr	r3, [pc, #292]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0ee      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x334>
 8003dea:	e014      	b.n	8003e16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dec:	f7fe fce0 	bl	80027b0 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df2:	e00a      	b.n	8003e0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df4:	f7fe fcdc 	bl	80027b0 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e0b5      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e0a:	4b3e      	ldr	r3, [pc, #248]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1ee      	bne.n	8003df4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d105      	bne.n	8003e28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e1c:	4b39      	ldr	r3, [pc, #228]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	4a38      	ldr	r2, [pc, #224]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80a1 	beq.w	8003f74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e32:	4b34      	ldr	r3, [pc, #208]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d05c      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d141      	bne.n	8003eca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <HAL_RCC_OscConfig+0x478>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fe fcb0 	bl	80027b0 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fe fcac 	bl	80027b0 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e087      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	019b      	lsls	r3, r3, #6
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	041b      	lsls	r3, r3, #16
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	061b      	lsls	r3, r3, #24
 8003e96:	491b      	ldr	r1, [pc, #108]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e9c:	4b1b      	ldr	r3, [pc, #108]	; (8003f0c <HAL_RCC_OscConfig+0x478>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea2:	f7fe fc85 	bl	80027b0 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eaa:	f7fe fc81 	bl	80027b0 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e05c      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ebc:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x416>
 8003ec8:	e054      	b.n	8003f74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eca:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <HAL_RCC_OscConfig+0x478>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7fe fc6e 	bl	80027b0 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed8:	f7fe fc6a 	bl	80027b0 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e045      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eea:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x444>
 8003ef6:	e03d      	b.n	8003f74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d107      	bne.n	8003f10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e038      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40007000 	.word	0x40007000
 8003f0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <HAL_RCC_OscConfig+0x4ec>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d028      	beq.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d121      	bne.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d11a      	bne.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f40:	4013      	ands	r3, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d111      	bne.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d107      	bne.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800

08003f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0cc      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f98:	4b68      	ldr	r3, [pc, #416]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d90c      	bls.n	8003fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b65      	ldr	r3, [pc, #404]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	4b63      	ldr	r3, [pc, #396]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0b8      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d020      	beq.n	800400e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fd8:	4b59      	ldr	r3, [pc, #356]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4a58      	ldr	r2, [pc, #352]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fe2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff0:	4b53      	ldr	r3, [pc, #332]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4a52      	ldr	r2, [pc, #328]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ffc:	4b50      	ldr	r3, [pc, #320]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	494d      	ldr	r1, [pc, #308]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d044      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d107      	bne.n	8004032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	4b47      	ldr	r3, [pc, #284]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d119      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e07f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d003      	beq.n	8004042 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800403e:	2b03      	cmp	r3, #3
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004042:	4b3f      	ldr	r3, [pc, #252]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e06f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004052:	4b3b      	ldr	r3, [pc, #236]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e067      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004062:	4b37      	ldr	r3, [pc, #220]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f023 0203 	bic.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4934      	ldr	r1, [pc, #208]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	4313      	orrs	r3, r2
 8004072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004074:	f7fe fb9c 	bl	80027b0 <HAL_GetTick>
 8004078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407a:	e00a      	b.n	8004092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407c:	f7fe fb98 	bl	80027b0 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	; 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e04f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004092:	4b2b      	ldr	r3, [pc, #172]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 020c 	and.w	r2, r3, #12
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d1eb      	bne.n	800407c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040a4:	4b25      	ldr	r3, [pc, #148]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d20c      	bcs.n	80040cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b22      	ldr	r3, [pc, #136]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ba:	4b20      	ldr	r3, [pc, #128]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e032      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d8:	4b19      	ldr	r3, [pc, #100]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4916      	ldr	r1, [pc, #88]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	490e      	ldr	r1, [pc, #56]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800410a:	f000 f821 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 800410e:	4602      	mov	r2, r0
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	490a      	ldr	r1, [pc, #40]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	5ccb      	ldrb	r3, [r1, r3]
 800411e:	fa22 f303 	lsr.w	r3, r2, r3
 8004122:	4a09      	ldr	r2, [pc, #36]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe fafc 	bl	8002728 <HAL_InitTick>

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40023c00 	.word	0x40023c00
 8004140:	40023800 	.word	0x40023800
 8004144:	08009504 	.word	0x08009504
 8004148:	20000000 	.word	0x20000000
 800414c:	20000004 	.word	0x20000004

08004150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004154:	b090      	sub	sp, #64	; 0x40
 8004156:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	637b      	str	r3, [r7, #52]	; 0x34
 800415c:	2300      	movs	r3, #0
 800415e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004160:	2300      	movs	r3, #0
 8004162:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004168:	4b59      	ldr	r3, [pc, #356]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 030c 	and.w	r3, r3, #12
 8004170:	2b08      	cmp	r3, #8
 8004172:	d00d      	beq.n	8004190 <HAL_RCC_GetSysClockFreq+0x40>
 8004174:	2b08      	cmp	r3, #8
 8004176:	f200 80a1 	bhi.w	80042bc <HAL_RCC_GetSysClockFreq+0x16c>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x34>
 800417e:	2b04      	cmp	r3, #4
 8004180:	d003      	beq.n	800418a <HAL_RCC_GetSysClockFreq+0x3a>
 8004182:	e09b      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004184:	4b53      	ldr	r3, [pc, #332]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004186:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004188:	e09b      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800418a:	4b53      	ldr	r3, [pc, #332]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800418c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800418e:	e098      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004190:	4b4f      	ldr	r3, [pc, #316]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800419a:	4b4d      	ldr	r3, [pc, #308]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d028      	beq.n	80041f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a6:	4b4a      	ldr	r3, [pc, #296]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	099b      	lsrs	r3, r3, #6
 80041ac:	2200      	movs	r2, #0
 80041ae:	623b      	str	r3, [r7, #32]
 80041b0:	627a      	str	r2, [r7, #36]	; 0x24
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041b8:	2100      	movs	r1, #0
 80041ba:	4b47      	ldr	r3, [pc, #284]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80041bc:	fb03 f201 	mul.w	r2, r3, r1
 80041c0:	2300      	movs	r3, #0
 80041c2:	fb00 f303 	mul.w	r3, r0, r3
 80041c6:	4413      	add	r3, r2
 80041c8:	4a43      	ldr	r2, [pc, #268]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80041ca:	fba0 1202 	umull	r1, r2, r0, r2
 80041ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041d0:	460a      	mov	r2, r1
 80041d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80041d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d6:	4413      	add	r3, r2
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041dc:	2200      	movs	r2, #0
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	61fa      	str	r2, [r7, #28]
 80041e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80041ea:	f7fc fd25 	bl	8000c38 <__aeabi_uldivmod>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4613      	mov	r3, r2
 80041f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f6:	e053      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f8:	4b35      	ldr	r3, [pc, #212]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	099b      	lsrs	r3, r3, #6
 80041fe:	2200      	movs	r2, #0
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	617a      	str	r2, [r7, #20]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800420a:	f04f 0b00 	mov.w	fp, #0
 800420e:	4652      	mov	r2, sl
 8004210:	465b      	mov	r3, fp
 8004212:	f04f 0000 	mov.w	r0, #0
 8004216:	f04f 0100 	mov.w	r1, #0
 800421a:	0159      	lsls	r1, r3, #5
 800421c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004220:	0150      	lsls	r0, r2, #5
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	ebb2 080a 	subs.w	r8, r2, sl
 800422a:	eb63 090b 	sbc.w	r9, r3, fp
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800423a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800423e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004242:	ebb2 0408 	subs.w	r4, r2, r8
 8004246:	eb63 0509 	sbc.w	r5, r3, r9
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	00eb      	lsls	r3, r5, #3
 8004254:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004258:	00e2      	lsls	r2, r4, #3
 800425a:	4614      	mov	r4, r2
 800425c:	461d      	mov	r5, r3
 800425e:	eb14 030a 	adds.w	r3, r4, sl
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	eb45 030b 	adc.w	r3, r5, fp
 8004268:	607b      	str	r3, [r7, #4]
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004276:	4629      	mov	r1, r5
 8004278:	028b      	lsls	r3, r1, #10
 800427a:	4621      	mov	r1, r4
 800427c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004280:	4621      	mov	r1, r4
 8004282:	028a      	lsls	r2, r1, #10
 8004284:	4610      	mov	r0, r2
 8004286:	4619      	mov	r1, r3
 8004288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428a:	2200      	movs	r2, #0
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	60fa      	str	r2, [r7, #12]
 8004290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004294:	f7fc fcd0 	bl	8000c38 <__aeabi_uldivmod>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4613      	mov	r3, r2
 800429e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042a0:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	0c1b      	lsrs	r3, r3, #16
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	3301      	adds	r3, #1
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80042b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042ba:	e002      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80042be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3740      	adds	r7, #64	; 0x40
 80042c8:	46bd      	mov	sp, r7
 80042ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ce:	bf00      	nop
 80042d0:	40023800 	.word	0x40023800
 80042d4:	00f42400 	.word	0x00f42400
 80042d8:	017d7840 	.word	0x017d7840

080042dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042e2:	681b      	ldr	r3, [r3, #0]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20000000 	.word	0x20000000

080042f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042f8:	f7ff fff0 	bl	80042dc <HAL_RCC_GetHCLKFreq>
 80042fc:	4602      	mov	r2, r0
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	0a9b      	lsrs	r3, r3, #10
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	4903      	ldr	r1, [pc, #12]	; (8004318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800430a:	5ccb      	ldrb	r3, [r1, r3]
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40023800 	.word	0x40023800
 8004318:	08009514 	.word	0x08009514

0800431c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004320:	f7ff ffdc 	bl	80042dc <HAL_RCC_GetHCLKFreq>
 8004324:	4602      	mov	r2, r0
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	0b5b      	lsrs	r3, r3, #13
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	4903      	ldr	r1, [pc, #12]	; (8004340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004332:	5ccb      	ldrb	r3, [r1, r3]
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004338:	4618      	mov	r0, r3
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40023800 	.word	0x40023800
 8004340:	08009514 	.word	0x08009514

08004344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e041      	b.n	80043da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fd ff64 	bl	8002238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f000 fc8c 	bl	8004ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d001      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e044      	b.n	8004486 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1e      	ldr	r2, [pc, #120]	; (8004494 <HAL_TIM_Base_Start_IT+0xb0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d018      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x6c>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004426:	d013      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x6c>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a1a      	ldr	r2, [pc, #104]	; (8004498 <HAL_TIM_Base_Start_IT+0xb4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00e      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x6c>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a19      	ldr	r2, [pc, #100]	; (800449c <HAL_TIM_Base_Start_IT+0xb8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x6c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a17      	ldr	r2, [pc, #92]	; (80044a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x6c>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a16      	ldr	r2, [pc, #88]	; (80044a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d111      	bne.n	8004474 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b06      	cmp	r3, #6
 8004460:	d010      	beq.n	8004484 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004472:	e007      	b.n	8004484 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40010000 	.word	0x40010000
 8004498:	40000400 	.word	0x40000400
 800449c:	40000800 	.word	0x40000800
 80044a0:	40000c00 	.word	0x40000c00
 80044a4:	40014000 	.word	0x40014000

080044a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6a1a      	ldr	r2, [r3, #32]
 80044c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10f      	bne.n	80044f0 <HAL_TIM_Base_Stop_IT+0x48>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6a1a      	ldr	r2, [r3, #32]
 80044d6:	f240 4344 	movw	r3, #1092	; 0x444
 80044da:	4013      	ands	r3, r2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d107      	bne.n	80044f0 <HAL_TIM_Base_Stop_IT+0x48>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e041      	b.n	800459c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f839 	bl	80045a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2202      	movs	r2, #2
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3304      	adds	r3, #4
 8004542:	4619      	mov	r1, r3
 8004544:	4610      	mov	r0, r2
 8004546:	f000 fbab 	bl	8004ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d109      	bne.n	80045dc <HAL_TIM_PWM_Start+0x24>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	e022      	b.n	8004622 <HAL_TIM_PWM_Start+0x6a>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d109      	bne.n	80045f6 <HAL_TIM_PWM_Start+0x3e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	bf14      	ite	ne
 80045ee:	2301      	movne	r3, #1
 80045f0:	2300      	moveq	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	e015      	b.n	8004622 <HAL_TIM_PWM_Start+0x6a>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d109      	bne.n	8004610 <HAL_TIM_PWM_Start+0x58>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b01      	cmp	r3, #1
 8004606:	bf14      	ite	ne
 8004608:	2301      	movne	r3, #1
 800460a:	2300      	moveq	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	e008      	b.n	8004622 <HAL_TIM_PWM_Start+0x6a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e068      	b.n	80046fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d104      	bne.n	800463a <HAL_TIM_PWM_Start+0x82>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004638:	e013      	b.n	8004662 <HAL_TIM_PWM_Start+0xaa>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b04      	cmp	r3, #4
 800463e:	d104      	bne.n	800464a <HAL_TIM_PWM_Start+0x92>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004648:	e00b      	b.n	8004662 <HAL_TIM_PWM_Start+0xaa>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b08      	cmp	r3, #8
 800464e:	d104      	bne.n	800465a <HAL_TIM_PWM_Start+0xa2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004658:	e003      	b.n	8004662 <HAL_TIM_PWM_Start+0xaa>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2202      	movs	r2, #2
 800465e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2201      	movs	r2, #1
 8004668:	6839      	ldr	r1, [r7, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fdbe 	bl	80051ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a23      	ldr	r2, [pc, #140]	; (8004704 <HAL_TIM_PWM_Start+0x14c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d107      	bne.n	800468a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004688:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a1d      	ldr	r2, [pc, #116]	; (8004704 <HAL_TIM_PWM_Start+0x14c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d018      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x10e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469c:	d013      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x10e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a19      	ldr	r2, [pc, #100]	; (8004708 <HAL_TIM_PWM_Start+0x150>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00e      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x10e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a17      	ldr	r2, [pc, #92]	; (800470c <HAL_TIM_PWM_Start+0x154>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x10e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a16      	ldr	r2, [pc, #88]	; (8004710 <HAL_TIM_PWM_Start+0x158>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x10e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a14      	ldr	r2, [pc, #80]	; (8004714 <HAL_TIM_PWM_Start+0x15c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d111      	bne.n	80046ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b06      	cmp	r3, #6
 80046d6:	d010      	beq.n	80046fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e8:	e007      	b.n	80046fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0201 	orr.w	r2, r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40010000 	.word	0x40010000
 8004708:	40000400 	.word	0x40000400
 800470c:	40000800 	.word	0x40000800
 8004710:	40000c00 	.word	0x40000c00
 8004714:	40014000 	.word	0x40014000

08004718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b02      	cmp	r3, #2
 800472c:	d122      	bne.n	8004774 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b02      	cmp	r3, #2
 800473a:	d11b      	bne.n	8004774 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0202 	mvn.w	r2, #2
 8004744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fa81 	bl	8004c62 <HAL_TIM_IC_CaptureCallback>
 8004760:	e005      	b.n	800476e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fa73 	bl	8004c4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fa84 	bl	8004c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b04      	cmp	r3, #4
 8004780:	d122      	bne.n	80047c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b04      	cmp	r3, #4
 800478e:	d11b      	bne.n	80047c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0204 	mvn.w	r2, #4
 8004798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2202      	movs	r2, #2
 800479e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fa57 	bl	8004c62 <HAL_TIM_IC_CaptureCallback>
 80047b4:	e005      	b.n	80047c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fa49 	bl	8004c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fa5a 	bl	8004c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d122      	bne.n	800481c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d11b      	bne.n	800481c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0208 	mvn.w	r2, #8
 80047ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2204      	movs	r2, #4
 80047f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fa2d 	bl	8004c62 <HAL_TIM_IC_CaptureCallback>
 8004808:	e005      	b.n	8004816 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fa1f 	bl	8004c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fa30 	bl	8004c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b10      	cmp	r3, #16
 8004828:	d122      	bne.n	8004870 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b10      	cmp	r3, #16
 8004836:	d11b      	bne.n	8004870 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0210 	mvn.w	r2, #16
 8004840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2208      	movs	r2, #8
 8004846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fa03 	bl	8004c62 <HAL_TIM_IC_CaptureCallback>
 800485c:	e005      	b.n	800486a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f9f5 	bl	8004c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fa06 	bl	8004c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b01      	cmp	r3, #1
 800487c:	d10e      	bne.n	800489c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b01      	cmp	r3, #1
 800488a:	d107      	bne.n	800489c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0201 	mvn.w	r2, #1
 8004894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f9cf 	bl	8004c3a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a6:	2b80      	cmp	r3, #128	; 0x80
 80048a8:	d10e      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b4:	2b80      	cmp	r3, #128	; 0x80
 80048b6:	d107      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fd82 	bl	80053cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b40      	cmp	r3, #64	; 0x40
 80048d4:	d10e      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e0:	2b40      	cmp	r3, #64	; 0x40
 80048e2:	d107      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f9cb 	bl	8004c8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d10e      	bne.n	8004920 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b20      	cmp	r3, #32
 800490e:	d107      	bne.n	8004920 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0220 	mvn.w	r2, #32
 8004918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fd4c 	bl	80053b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004942:	2302      	movs	r3, #2
 8004944:	e0ae      	b.n	8004aa4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b0c      	cmp	r3, #12
 8004952:	f200 809f 	bhi.w	8004a94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004956:	a201      	add	r2, pc, #4	; (adr r2, 800495c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495c:	08004991 	.word	0x08004991
 8004960:	08004a95 	.word	0x08004a95
 8004964:	08004a95 	.word	0x08004a95
 8004968:	08004a95 	.word	0x08004a95
 800496c:	080049d1 	.word	0x080049d1
 8004970:	08004a95 	.word	0x08004a95
 8004974:	08004a95 	.word	0x08004a95
 8004978:	08004a95 	.word	0x08004a95
 800497c:	08004a13 	.word	0x08004a13
 8004980:	08004a95 	.word	0x08004a95
 8004984:	08004a95 	.word	0x08004a95
 8004988:	08004a95 	.word	0x08004a95
 800498c:	08004a53 	.word	0x08004a53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68b9      	ldr	r1, [r7, #8]
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fa02 	bl	8004da0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0208 	orr.w	r2, r2, #8
 80049aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0204 	bic.w	r2, r2, #4
 80049ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6999      	ldr	r1, [r3, #24]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	619a      	str	r2, [r3, #24]
      break;
 80049ce:	e064      	b.n	8004a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fa48 	bl	8004e6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6999      	ldr	r1, [r3, #24]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	021a      	lsls	r2, r3, #8
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	619a      	str	r2, [r3, #24]
      break;
 8004a10:	e043      	b.n	8004a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68b9      	ldr	r1, [r7, #8]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fa93 	bl	8004f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69da      	ldr	r2, [r3, #28]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0208 	orr.w	r2, r2, #8
 8004a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0204 	bic.w	r2, r2, #4
 8004a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69d9      	ldr	r1, [r3, #28]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	61da      	str	r2, [r3, #28]
      break;
 8004a50:	e023      	b.n	8004a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fadd 	bl	8005018 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69d9      	ldr	r1, [r3, #28]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	021a      	lsls	r2, r3, #8
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	61da      	str	r2, [r3, #28]
      break;
 8004a92:	e002      	b.n	8004a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	75fb      	strb	r3, [r7, #23]
      break;
 8004a98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e0b4      	b.n	8004c32 <HAL_TIM_ConfigClockSource+0x186>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ae6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b00:	d03e      	beq.n	8004b80 <HAL_TIM_ConfigClockSource+0xd4>
 8004b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b06:	f200 8087 	bhi.w	8004c18 <HAL_TIM_ConfigClockSource+0x16c>
 8004b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0e:	f000 8086 	beq.w	8004c1e <HAL_TIM_ConfigClockSource+0x172>
 8004b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b16:	d87f      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b70      	cmp	r3, #112	; 0x70
 8004b1a:	d01a      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0xa6>
 8004b1c:	2b70      	cmp	r3, #112	; 0x70
 8004b1e:	d87b      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x16c>
 8004b20:	2b60      	cmp	r3, #96	; 0x60
 8004b22:	d050      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0x11a>
 8004b24:	2b60      	cmp	r3, #96	; 0x60
 8004b26:	d877      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x16c>
 8004b28:	2b50      	cmp	r3, #80	; 0x50
 8004b2a:	d03c      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0xfa>
 8004b2c:	2b50      	cmp	r3, #80	; 0x50
 8004b2e:	d873      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x16c>
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d058      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x13a>
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d86f      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x16c>
 8004b38:	2b30      	cmp	r3, #48	; 0x30
 8004b3a:	d064      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x15a>
 8004b3c:	2b30      	cmp	r3, #48	; 0x30
 8004b3e:	d86b      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x16c>
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d060      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x15a>
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	d867      	bhi.n	8004c18 <HAL_TIM_ConfigClockSource+0x16c>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d05c      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x15a>
 8004b4c:	2b10      	cmp	r3, #16
 8004b4e:	d05a      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x15a>
 8004b50:	e062      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6899      	ldr	r1, [r3, #8]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f000 fb23 	bl	80051ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	609a      	str	r2, [r3, #8]
      break;
 8004b7e:	e04f      	b.n	8004c20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6899      	ldr	r1, [r3, #8]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f000 fb0c 	bl	80051ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ba2:	609a      	str	r2, [r3, #8]
      break;
 8004ba4:	e03c      	b.n	8004c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6859      	ldr	r1, [r3, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f000 fa80 	bl	80050b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2150      	movs	r1, #80	; 0x50
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fad9 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 8004bc4:	e02c      	b.n	8004c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6859      	ldr	r1, [r3, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f000 fa9f 	bl	8005116 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2160      	movs	r1, #96	; 0x60
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fac9 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 8004be4:	e01c      	b.n	8004c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6859      	ldr	r1, [r3, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f000 fa60 	bl	80050b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2140      	movs	r1, #64	; 0x40
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fab9 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 8004c04:	e00c      	b.n	8004c20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f000 fab0 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 8004c16:	e003      	b.n	8004c20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c1c:	e000      	b.n	8004c20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a34      	ldr	r2, [pc, #208]	; (8004d84 <TIM_Base_SetConfig+0xe4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00f      	beq.n	8004cd8 <TIM_Base_SetConfig+0x38>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbe:	d00b      	beq.n	8004cd8 <TIM_Base_SetConfig+0x38>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a31      	ldr	r2, [pc, #196]	; (8004d88 <TIM_Base_SetConfig+0xe8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d007      	beq.n	8004cd8 <TIM_Base_SetConfig+0x38>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a30      	ldr	r2, [pc, #192]	; (8004d8c <TIM_Base_SetConfig+0xec>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_Base_SetConfig+0x38>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a2f      	ldr	r2, [pc, #188]	; (8004d90 <TIM_Base_SetConfig+0xf0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d108      	bne.n	8004cea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a25      	ldr	r2, [pc, #148]	; (8004d84 <TIM_Base_SetConfig+0xe4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d01b      	beq.n	8004d2a <TIM_Base_SetConfig+0x8a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf8:	d017      	beq.n	8004d2a <TIM_Base_SetConfig+0x8a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a22      	ldr	r2, [pc, #136]	; (8004d88 <TIM_Base_SetConfig+0xe8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d013      	beq.n	8004d2a <TIM_Base_SetConfig+0x8a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a21      	ldr	r2, [pc, #132]	; (8004d8c <TIM_Base_SetConfig+0xec>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00f      	beq.n	8004d2a <TIM_Base_SetConfig+0x8a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a20      	ldr	r2, [pc, #128]	; (8004d90 <TIM_Base_SetConfig+0xf0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00b      	beq.n	8004d2a <TIM_Base_SetConfig+0x8a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a1f      	ldr	r2, [pc, #124]	; (8004d94 <TIM_Base_SetConfig+0xf4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d007      	beq.n	8004d2a <TIM_Base_SetConfig+0x8a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a1e      	ldr	r2, [pc, #120]	; (8004d98 <TIM_Base_SetConfig+0xf8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d003      	beq.n	8004d2a <TIM_Base_SetConfig+0x8a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a1d      	ldr	r2, [pc, #116]	; (8004d9c <TIM_Base_SetConfig+0xfc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d108      	bne.n	8004d3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a08      	ldr	r2, [pc, #32]	; (8004d84 <TIM_Base_SetConfig+0xe4>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d103      	bne.n	8004d70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	615a      	str	r2, [r3, #20]
}
 8004d76:	bf00      	nop
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40010000 	.word	0x40010000
 8004d88:	40000400 	.word	0x40000400
 8004d8c:	40000800 	.word	0x40000800
 8004d90:	40000c00 	.word	0x40000c00
 8004d94:	40014000 	.word	0x40014000
 8004d98:	40014400 	.word	0x40014400
 8004d9c:	40014800 	.word	0x40014800

08004da0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f023 0201 	bic.w	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f023 0302 	bic.w	r3, r3, #2
 8004de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a1c      	ldr	r2, [pc, #112]	; (8004e68 <TIM_OC1_SetConfig+0xc8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d10c      	bne.n	8004e16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f023 0308 	bic.w	r3, r3, #8
 8004e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f023 0304 	bic.w	r3, r3, #4
 8004e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <TIM_OC1_SetConfig+0xc8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d111      	bne.n	8004e42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	621a      	str	r2, [r3, #32]
}
 8004e5c:	bf00      	nop
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	40010000 	.word	0x40010000

08004e6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	f023 0210 	bic.w	r2, r3, #16
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	021b      	lsls	r3, r3, #8
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f023 0320 	bic.w	r3, r3, #32
 8004eb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a1e      	ldr	r2, [pc, #120]	; (8004f40 <TIM_OC2_SetConfig+0xd4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d10d      	bne.n	8004ee8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ee6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a15      	ldr	r2, [pc, #84]	; (8004f40 <TIM_OC2_SetConfig+0xd4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d113      	bne.n	8004f18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ef6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004efe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	621a      	str	r2, [r3, #32]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40010000 	.word	0x40010000

08004f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0303 	bic.w	r3, r3, #3
 8004f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a1d      	ldr	r2, [pc, #116]	; (8005014 <TIM_OC3_SetConfig+0xd0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d10d      	bne.n	8004fbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	021b      	lsls	r3, r3, #8
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a14      	ldr	r2, [pc, #80]	; (8005014 <TIM_OC3_SetConfig+0xd0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d113      	bne.n	8004fee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	621a      	str	r2, [r3, #32]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40010000 	.word	0x40010000

08005018 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800504e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	031b      	lsls	r3, r3, #12
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a10      	ldr	r2, [pc, #64]	; (80050b4 <TIM_OC4_SetConfig+0x9c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d109      	bne.n	800508c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800507e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	019b      	lsls	r3, r3, #6
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	621a      	str	r2, [r3, #32]
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40010000 	.word	0x40010000

080050b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f023 0201 	bic.w	r2, r3, #1
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f023 030a 	bic.w	r3, r3, #10
 80050f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005116:	b480      	push	{r7}
 8005118:	b087      	sub	sp, #28
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f023 0210 	bic.w	r2, r3, #16
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005140:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	031b      	lsls	r3, r3, #12
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005152:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	621a      	str	r2, [r3, #32]
}
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	f043 0307 	orr.w	r3, r3, #7
 8005198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	609a      	str	r2, [r3, #8]
}
 80051a0:	bf00      	nop
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	021a      	lsls	r2, r3, #8
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	609a      	str	r2, [r3, #8]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	2201      	movs	r2, #1
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a1a      	ldr	r2, [r3, #32]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	43db      	mvns	r3, r3
 800520e:	401a      	ands	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a1a      	ldr	r2, [r3, #32]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 031f 	and.w	r3, r3, #31
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	fa01 f303 	lsl.w	r3, r1, r3
 8005224:	431a      	orrs	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800524c:	2302      	movs	r3, #2
 800524e:	e050      	b.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1c      	ldr	r2, [pc, #112]	; (8005300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d018      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529c:	d013      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a18      	ldr	r2, [pc, #96]	; (8005304 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00e      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a16      	ldr	r2, [pc, #88]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d009      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a15      	ldr	r2, [pc, #84]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d004      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a13      	ldr	r2, [pc, #76]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d10c      	bne.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40010000 	.word	0x40010000
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800
 800530c:	40000c00 	.word	0x40000c00
 8005310:	40014000 	.word	0x40014000

08005314 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800532c:	2302      	movs	r3, #2
 800532e:	e03d      	b.n	80053ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	4313      	orrs	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e03f      	b.n	8005472 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fc ffaa 	bl	8002360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2224      	movs	r2, #36	; 0x24
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fddf 	bl	8005fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695a      	ldr	r2, [r3, #20]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b08a      	sub	sp, #40	; 0x28
 800547e:	af02      	add	r7, sp, #8
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	603b      	str	r3, [r7, #0]
 8005486:	4613      	mov	r3, r2
 8005488:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b20      	cmp	r3, #32
 8005498:	d17c      	bne.n	8005594 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <HAL_UART_Transmit+0x2c>
 80054a0:	88fb      	ldrh	r3, [r7, #6]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e075      	b.n	8005596 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_UART_Transmit+0x3e>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e06e      	b.n	8005596 <HAL_UART_Transmit+0x11c>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2221      	movs	r2, #33	; 0x21
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054ce:	f7fd f96f 	bl	80027b0 <HAL_GetTick>
 80054d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	88fa      	ldrh	r2, [r7, #6]
 80054d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	88fa      	ldrh	r2, [r7, #6]
 80054de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e8:	d108      	bne.n	80054fc <HAL_UART_Transmit+0x82>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d104      	bne.n	80054fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	61bb      	str	r3, [r7, #24]
 80054fa:	e003      	b.n	8005504 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005500:	2300      	movs	r3, #0
 8005502:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800550c:	e02a      	b.n	8005564 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2200      	movs	r2, #0
 8005516:	2180      	movs	r1, #128	; 0x80
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 fb1f 	bl	8005b5c <UART_WaitOnFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e036      	b.n	8005596 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10b      	bne.n	8005546 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800553c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	3302      	adds	r3, #2
 8005542:	61bb      	str	r3, [r7, #24]
 8005544:	e007      	b.n	8005556 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	781a      	ldrb	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	3301      	adds	r3, #1
 8005554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1cf      	bne.n	800550e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2200      	movs	r2, #0
 8005576:	2140      	movs	r1, #64	; 0x40
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 faef 	bl	8005b5c <UART_WaitOnFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e006      	b.n	8005596 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	e000      	b.n	8005596 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
  }
}
 8005596:	4618      	mov	r0, r3
 8005598:	3720      	adds	r7, #32
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	4613      	mov	r3, r2
 80055aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d11d      	bne.n	80055f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_UART_Receive_IT+0x26>
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e016      	b.n	80055f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_UART_Receive_IT+0x38>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e00f      	b.n	80055f6 <HAL_UART_Receive_IT+0x58>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055e4:	88fb      	ldrh	r3, [r7, #6]
 80055e6:	461a      	mov	r2, r3
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 fb24 	bl	8005c38 <UART_Start_Receive_IT>
 80055f0:	4603      	mov	r3, r0
 80055f2:	e000      	b.n	80055f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80055f4:	2302      	movs	r3, #2
  }
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b0ba      	sub	sp, #232	; 0xe8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005626:	2300      	movs	r3, #0
 8005628:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800562c:	2300      	movs	r3, #0
 800562e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800563e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10f      	bne.n	8005666 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b00      	cmp	r3, #0
 8005650:	d009      	beq.n	8005666 <HAL_UART_IRQHandler+0x66>
 8005652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fc07 	bl	8005e72 <UART_Receive_IT>
      return;
 8005664:	e256      	b.n	8005b14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 80de 	beq.w	800582c <HAL_UART_IRQHandler+0x22c>
 8005670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800567c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005680:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80d1 	beq.w	800582c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800568a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <HAL_UART_IRQHandler+0xae>
 8005696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800569a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	f043 0201 	orr.w	r2, r3, #1
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00b      	beq.n	80056d2 <HAL_UART_IRQHandler+0xd2>
 80056ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f043 0202 	orr.w	r2, r3, #2
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <HAL_UART_IRQHandler+0xf6>
 80056de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d005      	beq.n	80056f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f043 0204 	orr.w	r2, r3, #4
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d011      	beq.n	8005726 <HAL_UART_IRQHandler+0x126>
 8005702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b00      	cmp	r3, #0
 800570c:	d105      	bne.n	800571a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800570e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d005      	beq.n	8005726 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f043 0208 	orr.w	r2, r3, #8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 81ed 	beq.w	8005b0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005734:	f003 0320 	and.w	r3, r3, #32
 8005738:	2b00      	cmp	r3, #0
 800573a:	d008      	beq.n	800574e <HAL_UART_IRQHandler+0x14e>
 800573c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005740:	f003 0320 	and.w	r3, r3, #32
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fb92 	bl	8005e72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d103      	bne.n	800577a <HAL_UART_IRQHandler+0x17a>
 8005772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005776:	2b00      	cmp	r3, #0
 8005778:	d04f      	beq.n	800581a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fa9a 	bl	8005cb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d141      	bne.n	8005812 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3314      	adds	r3, #20
 8005794:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3314      	adds	r3, #20
 80057b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1d9      	bne.n	800578e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d013      	beq.n	800580a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	4a7d      	ldr	r2, [pc, #500]	; (80059dc <HAL_UART_IRQHandler+0x3dc>)
 80057e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fd fd54 	bl	800329c <HAL_DMA_Abort_IT>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005804:	4610      	mov	r0, r2
 8005806:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005808:	e00e      	b.n	8005828 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f990 	bl	8005b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005810:	e00a      	b.n	8005828 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f98c 	bl	8005b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005818:	e006      	b.n	8005828 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f988 	bl	8005b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005826:	e170      	b.n	8005b0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005828:	bf00      	nop
    return;
 800582a:	e16e      	b.n	8005b0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	2b01      	cmp	r3, #1
 8005832:	f040 814a 	bne.w	8005aca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800583a:	f003 0310 	and.w	r3, r3, #16
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 8143 	beq.w	8005aca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005848:	f003 0310 	and.w	r3, r3, #16
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 813c 	beq.w	8005aca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005852:	2300      	movs	r3, #0
 8005854:	60bb      	str	r3, [r7, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005872:	2b40      	cmp	r3, #64	; 0x40
 8005874:	f040 80b4 	bne.w	80059e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005884:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8140 	beq.w	8005b0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005896:	429a      	cmp	r2, r3
 8005898:	f080 8139 	bcs.w	8005b0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ae:	f000 8088 	beq.w	80059c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	330c      	adds	r3, #12
 80058b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	330c      	adds	r3, #12
 80058da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80058de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1d9      	bne.n	80058b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3314      	adds	r3, #20
 8005904:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800590e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005910:	f023 0301 	bic.w	r3, r3, #1
 8005914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3314      	adds	r3, #20
 800591e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005922:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005926:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800592a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e1      	bne.n	80058fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3314      	adds	r3, #20
 8005940:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800594a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800594c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3314      	adds	r3, #20
 800595a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800595e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005960:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005964:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800596c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e3      	bne.n	800593a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2220      	movs	r2, #32
 8005976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	330c      	adds	r3, #12
 8005986:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005992:	f023 0310 	bic.w	r3, r3, #16
 8005996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	330c      	adds	r3, #12
 80059a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80059a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059ac:	e841 2300 	strex	r3, r2, [r1]
 80059b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e3      	bne.n	8005980 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fd fbfd 	bl	80031bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f8b6 	bl	8005b44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059d8:	e099      	b.n	8005b0e <HAL_UART_IRQHandler+0x50e>
 80059da:	bf00      	nop
 80059dc:	08005d7b 	.word	0x08005d7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 808b 	beq.w	8005b12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80059fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8086 	beq.w	8005b12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	330c      	adds	r3, #12
 8005a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	330c      	adds	r3, #12
 8005a26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a2a:	647a      	str	r2, [r7, #68]	; 0x44
 8005a2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e3      	bne.n	8005a06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3314      	adds	r3, #20
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	f023 0301 	bic.w	r3, r3, #1
 8005a54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3314      	adds	r3, #20
 8005a5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a62:	633a      	str	r2, [r7, #48]	; 0x30
 8005a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1e3      	bne.n	8005a3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	330c      	adds	r3, #12
 8005a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
 8005a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0310 	bic.w	r3, r3, #16
 8005a9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	330c      	adds	r3, #12
 8005aa4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005aa8:	61fa      	str	r2, [r7, #28]
 8005aaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	69b9      	ldr	r1, [r7, #24]
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e3      	bne.n	8005a84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005abc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f83e 	bl	8005b44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ac8:	e023      	b.n	8005b12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d009      	beq.n	8005aea <HAL_UART_IRQHandler+0x4ea>
 8005ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f95d 	bl	8005da2 <UART_Transmit_IT>
    return;
 8005ae8:	e014      	b.n	8005b14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00e      	beq.n	8005b14 <HAL_UART_IRQHandler+0x514>
 8005af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d008      	beq.n	8005b14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f99d 	bl	8005e42 <UART_EndTransmit_IT>
    return;
 8005b08:	e004      	b.n	8005b14 <HAL_UART_IRQHandler+0x514>
    return;
 8005b0a:	bf00      	nop
 8005b0c:	e002      	b.n	8005b14 <HAL_UART_IRQHandler+0x514>
      return;
 8005b0e:	bf00      	nop
 8005b10:	e000      	b.n	8005b14 <HAL_UART_IRQHandler+0x514>
      return;
 8005b12:	bf00      	nop
  }
}
 8005b14:	37e8      	adds	r7, #232	; 0xe8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop

08005b1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b090      	sub	sp, #64	; 0x40
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b6c:	e050      	b.n	8005c10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b74:	d04c      	beq.n	8005c10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b7c:	f7fc fe18 	bl	80027b0 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d241      	bcs.n	8005c10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bac:	637a      	str	r2, [r7, #52]	; 0x34
 8005bae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e5      	bne.n	8005b8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3314      	adds	r3, #20
 8005bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3314      	adds	r3, #20
 8005bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be0:	623a      	str	r2, [r7, #32]
 8005be2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	69f9      	ldr	r1, [r7, #28]
 8005be6:	6a3a      	ldr	r2, [r7, #32]
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e5      	bne.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e00f      	b.n	8005c30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	bf0c      	ite	eq
 8005c20:	2301      	moveq	r3, #1
 8005c22:	2300      	movne	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	461a      	mov	r2, r3
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d09f      	beq.n	8005b6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3740      	adds	r7, #64	; 0x40
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	4613      	mov	r3, r2
 8005c44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	88fa      	ldrh	r2, [r7, #6]
 8005c50:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	88fa      	ldrh	r2, [r7, #6]
 8005c56:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2222      	movs	r2, #34	; 0x22
 8005c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c84:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695a      	ldr	r2, [r3, #20]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0201 	orr.w	r2, r2, #1
 8005c94:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0220 	orr.w	r2, r2, #32
 8005ca4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b095      	sub	sp, #84	; 0x54
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	330c      	adds	r3, #12
 8005cda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cdc:	643a      	str	r2, [r7, #64]	; 0x40
 8005cde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ce2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e5      	bne.n	8005cbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3314      	adds	r3, #20
 8005cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	e853 3f00 	ldrex	r3, [r3]
 8005cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f023 0301 	bic.w	r3, r3, #1
 8005d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3314      	adds	r3, #20
 8005d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e5      	bne.n	8005cf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d119      	bne.n	8005d60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f023 0310 	bic.w	r3, r3, #16
 8005d42:	647b      	str	r3, [r7, #68]	; 0x44
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	330c      	adds	r3, #12
 8005d4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d4c:	61ba      	str	r2, [r7, #24]
 8005d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	6979      	ldr	r1, [r7, #20]
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e5      	bne.n	8005d2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d6e:	bf00      	nop
 8005d70:	3754      	adds	r7, #84	; 0x54
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f7ff fecb 	bl	8005b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d9a:	bf00      	nop
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b21      	cmp	r3, #33	; 0x21
 8005db4:	d13e      	bne.n	8005e34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dbe:	d114      	bne.n	8005dea <UART_Transmit_IT+0x48>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d110      	bne.n	8005dea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ddc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	1c9a      	adds	r2, r3, #2
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	621a      	str	r2, [r3, #32]
 8005de8:	e008      	b.n	8005dfc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	1c59      	adds	r1, r3, #1
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6211      	str	r1, [r2, #32]
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	4619      	mov	r1, r3
 8005e0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10f      	bne.n	8005e30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	e000      	b.n	8005e36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e34:	2302      	movs	r3, #2
  }
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b082      	sub	sp, #8
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff fe5a 	bl	8005b1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b08c      	sub	sp, #48	; 0x30
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b22      	cmp	r3, #34	; 0x22
 8005e84:	f040 80ab 	bne.w	8005fde <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e90:	d117      	bne.n	8005ec2 <UART_Receive_IT+0x50>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d113      	bne.n	8005ec2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	1c9a      	adds	r2, r3, #2
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	629a      	str	r2, [r3, #40]	; 0x28
 8005ec0:	e026      	b.n	8005f10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed4:	d007      	beq.n	8005ee6 <UART_Receive_IT+0x74>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10a      	bne.n	8005ef4 <UART_Receive_IT+0x82>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	e008      	b.n	8005f06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d15a      	bne.n	8005fda <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0220 	bic.w	r2, r2, #32
 8005f32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	695a      	ldr	r2, [r3, #20]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0201 	bic.w	r2, r2, #1
 8005f52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d135      	bne.n	8005fd0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	330c      	adds	r3, #12
 8005f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f023 0310 	bic.w	r3, r3, #16
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	330c      	adds	r3, #12
 8005f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8a:	623a      	str	r2, [r7, #32]
 8005f8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8e:	69f9      	ldr	r1, [r7, #28]
 8005f90:	6a3a      	ldr	r2, [r7, #32]
 8005f92:	e841 2300 	strex	r3, r2, [r1]
 8005f96:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1e5      	bne.n	8005f6a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0310 	and.w	r3, r3, #16
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d10a      	bne.n	8005fc2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff fdbb 	bl	8005b44 <HAL_UARTEx_RxEventCallback>
 8005fce:	e002      	b.n	8005fd6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7fb ff07 	bl	8001de4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e002      	b.n	8005fe0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e000      	b.n	8005fe0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005fde:	2302      	movs	r3, #2
  }
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3730      	adds	r7, #48	; 0x30
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fec:	b0c0      	sub	sp, #256	; 0x100
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006004:	68d9      	ldr	r1, [r3, #12]
 8006006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	ea40 0301 	orr.w	r3, r0, r1
 8006010:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	431a      	orrs	r2, r3
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	431a      	orrs	r2, r3
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006040:	f021 010c 	bic.w	r1, r1, #12
 8006044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800604e:	430b      	orrs	r3, r1
 8006050:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800605e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006062:	6999      	ldr	r1, [r3, #24]
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	ea40 0301 	orr.w	r3, r0, r1
 800606e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	4b8f      	ldr	r3, [pc, #572]	; (80062b4 <UART_SetConfig+0x2cc>)
 8006078:	429a      	cmp	r2, r3
 800607a:	d005      	beq.n	8006088 <UART_SetConfig+0xa0>
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	4b8d      	ldr	r3, [pc, #564]	; (80062b8 <UART_SetConfig+0x2d0>)
 8006084:	429a      	cmp	r2, r3
 8006086:	d104      	bne.n	8006092 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006088:	f7fe f948 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 800608c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006090:	e003      	b.n	800609a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006092:	f7fe f92f 	bl	80042f4 <HAL_RCC_GetPCLK1Freq>
 8006096:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800609a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a4:	f040 810c 	bne.w	80062c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ac:	2200      	movs	r2, #0
 80060ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060ba:	4622      	mov	r2, r4
 80060bc:	462b      	mov	r3, r5
 80060be:	1891      	adds	r1, r2, r2
 80060c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80060c2:	415b      	adcs	r3, r3
 80060c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060ca:	4621      	mov	r1, r4
 80060cc:	eb12 0801 	adds.w	r8, r2, r1
 80060d0:	4629      	mov	r1, r5
 80060d2:	eb43 0901 	adc.w	r9, r3, r1
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	f04f 0300 	mov.w	r3, #0
 80060de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060ea:	4690      	mov	r8, r2
 80060ec:	4699      	mov	r9, r3
 80060ee:	4623      	mov	r3, r4
 80060f0:	eb18 0303 	adds.w	r3, r8, r3
 80060f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060f8:	462b      	mov	r3, r5
 80060fa:	eb49 0303 	adc.w	r3, r9, r3
 80060fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800610e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006112:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006116:	460b      	mov	r3, r1
 8006118:	18db      	adds	r3, r3, r3
 800611a:	653b      	str	r3, [r7, #80]	; 0x50
 800611c:	4613      	mov	r3, r2
 800611e:	eb42 0303 	adc.w	r3, r2, r3
 8006122:	657b      	str	r3, [r7, #84]	; 0x54
 8006124:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006128:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800612c:	f7fa fd84 	bl	8000c38 <__aeabi_uldivmod>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4b61      	ldr	r3, [pc, #388]	; (80062bc <UART_SetConfig+0x2d4>)
 8006136:	fba3 2302 	umull	r2, r3, r3, r2
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	011c      	lsls	r4, r3, #4
 800613e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006142:	2200      	movs	r2, #0
 8006144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006148:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800614c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006150:	4642      	mov	r2, r8
 8006152:	464b      	mov	r3, r9
 8006154:	1891      	adds	r1, r2, r2
 8006156:	64b9      	str	r1, [r7, #72]	; 0x48
 8006158:	415b      	adcs	r3, r3
 800615a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800615c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006160:	4641      	mov	r1, r8
 8006162:	eb12 0a01 	adds.w	sl, r2, r1
 8006166:	4649      	mov	r1, r9
 8006168:	eb43 0b01 	adc.w	fp, r3, r1
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	f04f 0300 	mov.w	r3, #0
 8006174:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006178:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800617c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006180:	4692      	mov	sl, r2
 8006182:	469b      	mov	fp, r3
 8006184:	4643      	mov	r3, r8
 8006186:	eb1a 0303 	adds.w	r3, sl, r3
 800618a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800618e:	464b      	mov	r3, r9
 8006190:	eb4b 0303 	adc.w	r3, fp, r3
 8006194:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061ac:	460b      	mov	r3, r1
 80061ae:	18db      	adds	r3, r3, r3
 80061b0:	643b      	str	r3, [r7, #64]	; 0x40
 80061b2:	4613      	mov	r3, r2
 80061b4:	eb42 0303 	adc.w	r3, r2, r3
 80061b8:	647b      	str	r3, [r7, #68]	; 0x44
 80061ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061c2:	f7fa fd39 	bl	8000c38 <__aeabi_uldivmod>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	4611      	mov	r1, r2
 80061cc:	4b3b      	ldr	r3, [pc, #236]	; (80062bc <UART_SetConfig+0x2d4>)
 80061ce:	fba3 2301 	umull	r2, r3, r3, r1
 80061d2:	095b      	lsrs	r3, r3, #5
 80061d4:	2264      	movs	r2, #100	; 0x64
 80061d6:	fb02 f303 	mul.w	r3, r2, r3
 80061da:	1acb      	subs	r3, r1, r3
 80061dc:	00db      	lsls	r3, r3, #3
 80061de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061e2:	4b36      	ldr	r3, [pc, #216]	; (80062bc <UART_SetConfig+0x2d4>)
 80061e4:	fba3 2302 	umull	r2, r3, r3, r2
 80061e8:	095b      	lsrs	r3, r3, #5
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061f0:	441c      	add	r4, r3
 80061f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006200:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006204:	4642      	mov	r2, r8
 8006206:	464b      	mov	r3, r9
 8006208:	1891      	adds	r1, r2, r2
 800620a:	63b9      	str	r1, [r7, #56]	; 0x38
 800620c:	415b      	adcs	r3, r3
 800620e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006210:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006214:	4641      	mov	r1, r8
 8006216:	1851      	adds	r1, r2, r1
 8006218:	6339      	str	r1, [r7, #48]	; 0x30
 800621a:	4649      	mov	r1, r9
 800621c:	414b      	adcs	r3, r1
 800621e:	637b      	str	r3, [r7, #52]	; 0x34
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800622c:	4659      	mov	r1, fp
 800622e:	00cb      	lsls	r3, r1, #3
 8006230:	4651      	mov	r1, sl
 8006232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006236:	4651      	mov	r1, sl
 8006238:	00ca      	lsls	r2, r1, #3
 800623a:	4610      	mov	r0, r2
 800623c:	4619      	mov	r1, r3
 800623e:	4603      	mov	r3, r0
 8006240:	4642      	mov	r2, r8
 8006242:	189b      	adds	r3, r3, r2
 8006244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006248:	464b      	mov	r3, r9
 800624a:	460a      	mov	r2, r1
 800624c:	eb42 0303 	adc.w	r3, r2, r3
 8006250:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006260:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006264:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006268:	460b      	mov	r3, r1
 800626a:	18db      	adds	r3, r3, r3
 800626c:	62bb      	str	r3, [r7, #40]	; 0x28
 800626e:	4613      	mov	r3, r2
 8006270:	eb42 0303 	adc.w	r3, r2, r3
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800627a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800627e:	f7fa fcdb 	bl	8000c38 <__aeabi_uldivmod>
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	4b0d      	ldr	r3, [pc, #52]	; (80062bc <UART_SetConfig+0x2d4>)
 8006288:	fba3 1302 	umull	r1, r3, r3, r2
 800628c:	095b      	lsrs	r3, r3, #5
 800628e:	2164      	movs	r1, #100	; 0x64
 8006290:	fb01 f303 	mul.w	r3, r1, r3
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	3332      	adds	r3, #50	; 0x32
 800629a:	4a08      	ldr	r2, [pc, #32]	; (80062bc <UART_SetConfig+0x2d4>)
 800629c:	fba2 2303 	umull	r2, r3, r2, r3
 80062a0:	095b      	lsrs	r3, r3, #5
 80062a2:	f003 0207 	and.w	r2, r3, #7
 80062a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4422      	add	r2, r4
 80062ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062b0:	e106      	b.n	80064c0 <UART_SetConfig+0x4d8>
 80062b2:	bf00      	nop
 80062b4:	40011000 	.word	0x40011000
 80062b8:	40011400 	.word	0x40011400
 80062bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062c4:	2200      	movs	r2, #0
 80062c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062d2:	4642      	mov	r2, r8
 80062d4:	464b      	mov	r3, r9
 80062d6:	1891      	adds	r1, r2, r2
 80062d8:	6239      	str	r1, [r7, #32]
 80062da:	415b      	adcs	r3, r3
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
 80062de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062e2:	4641      	mov	r1, r8
 80062e4:	1854      	adds	r4, r2, r1
 80062e6:	4649      	mov	r1, r9
 80062e8:	eb43 0501 	adc.w	r5, r3, r1
 80062ec:	f04f 0200 	mov.w	r2, #0
 80062f0:	f04f 0300 	mov.w	r3, #0
 80062f4:	00eb      	lsls	r3, r5, #3
 80062f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062fa:	00e2      	lsls	r2, r4, #3
 80062fc:	4614      	mov	r4, r2
 80062fe:	461d      	mov	r5, r3
 8006300:	4643      	mov	r3, r8
 8006302:	18e3      	adds	r3, r4, r3
 8006304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006308:	464b      	mov	r3, r9
 800630a:	eb45 0303 	adc.w	r3, r5, r3
 800630e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800631e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800632e:	4629      	mov	r1, r5
 8006330:	008b      	lsls	r3, r1, #2
 8006332:	4621      	mov	r1, r4
 8006334:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006338:	4621      	mov	r1, r4
 800633a:	008a      	lsls	r2, r1, #2
 800633c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006340:	f7fa fc7a 	bl	8000c38 <__aeabi_uldivmod>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4b60      	ldr	r3, [pc, #384]	; (80064cc <UART_SetConfig+0x4e4>)
 800634a:	fba3 2302 	umull	r2, r3, r3, r2
 800634e:	095b      	lsrs	r3, r3, #5
 8006350:	011c      	lsls	r4, r3, #4
 8006352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006356:	2200      	movs	r2, #0
 8006358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800635c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006360:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006364:	4642      	mov	r2, r8
 8006366:	464b      	mov	r3, r9
 8006368:	1891      	adds	r1, r2, r2
 800636a:	61b9      	str	r1, [r7, #24]
 800636c:	415b      	adcs	r3, r3
 800636e:	61fb      	str	r3, [r7, #28]
 8006370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006374:	4641      	mov	r1, r8
 8006376:	1851      	adds	r1, r2, r1
 8006378:	6139      	str	r1, [r7, #16]
 800637a:	4649      	mov	r1, r9
 800637c:	414b      	adcs	r3, r1
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	f04f 0200 	mov.w	r2, #0
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800638c:	4659      	mov	r1, fp
 800638e:	00cb      	lsls	r3, r1, #3
 8006390:	4651      	mov	r1, sl
 8006392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006396:	4651      	mov	r1, sl
 8006398:	00ca      	lsls	r2, r1, #3
 800639a:	4610      	mov	r0, r2
 800639c:	4619      	mov	r1, r3
 800639e:	4603      	mov	r3, r0
 80063a0:	4642      	mov	r2, r8
 80063a2:	189b      	adds	r3, r3, r2
 80063a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063a8:	464b      	mov	r3, r9
 80063aa:	460a      	mov	r2, r1
 80063ac:	eb42 0303 	adc.w	r3, r2, r3
 80063b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80063be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063cc:	4649      	mov	r1, r9
 80063ce:	008b      	lsls	r3, r1, #2
 80063d0:	4641      	mov	r1, r8
 80063d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063d6:	4641      	mov	r1, r8
 80063d8:	008a      	lsls	r2, r1, #2
 80063da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063de:	f7fa fc2b 	bl	8000c38 <__aeabi_uldivmod>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4611      	mov	r1, r2
 80063e8:	4b38      	ldr	r3, [pc, #224]	; (80064cc <UART_SetConfig+0x4e4>)
 80063ea:	fba3 2301 	umull	r2, r3, r3, r1
 80063ee:	095b      	lsrs	r3, r3, #5
 80063f0:	2264      	movs	r2, #100	; 0x64
 80063f2:	fb02 f303 	mul.w	r3, r2, r3
 80063f6:	1acb      	subs	r3, r1, r3
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	3332      	adds	r3, #50	; 0x32
 80063fc:	4a33      	ldr	r2, [pc, #204]	; (80064cc <UART_SetConfig+0x4e4>)
 80063fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006408:	441c      	add	r4, r3
 800640a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800640e:	2200      	movs	r2, #0
 8006410:	673b      	str	r3, [r7, #112]	; 0x70
 8006412:	677a      	str	r2, [r7, #116]	; 0x74
 8006414:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006418:	4642      	mov	r2, r8
 800641a:	464b      	mov	r3, r9
 800641c:	1891      	adds	r1, r2, r2
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	415b      	adcs	r3, r3
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006428:	4641      	mov	r1, r8
 800642a:	1851      	adds	r1, r2, r1
 800642c:	6039      	str	r1, [r7, #0]
 800642e:	4649      	mov	r1, r9
 8006430:	414b      	adcs	r3, r1
 8006432:	607b      	str	r3, [r7, #4]
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	f04f 0300 	mov.w	r3, #0
 800643c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006440:	4659      	mov	r1, fp
 8006442:	00cb      	lsls	r3, r1, #3
 8006444:	4651      	mov	r1, sl
 8006446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800644a:	4651      	mov	r1, sl
 800644c:	00ca      	lsls	r2, r1, #3
 800644e:	4610      	mov	r0, r2
 8006450:	4619      	mov	r1, r3
 8006452:	4603      	mov	r3, r0
 8006454:	4642      	mov	r2, r8
 8006456:	189b      	adds	r3, r3, r2
 8006458:	66bb      	str	r3, [r7, #104]	; 0x68
 800645a:	464b      	mov	r3, r9
 800645c:	460a      	mov	r2, r1
 800645e:	eb42 0303 	adc.w	r3, r2, r3
 8006462:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	663b      	str	r3, [r7, #96]	; 0x60
 800646e:	667a      	str	r2, [r7, #100]	; 0x64
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800647c:	4649      	mov	r1, r9
 800647e:	008b      	lsls	r3, r1, #2
 8006480:	4641      	mov	r1, r8
 8006482:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006486:	4641      	mov	r1, r8
 8006488:	008a      	lsls	r2, r1, #2
 800648a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800648e:	f7fa fbd3 	bl	8000c38 <__aeabi_uldivmod>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <UART_SetConfig+0x4e4>)
 8006498:	fba3 1302 	umull	r1, r3, r3, r2
 800649c:	095b      	lsrs	r3, r3, #5
 800649e:	2164      	movs	r1, #100	; 0x64
 80064a0:	fb01 f303 	mul.w	r3, r1, r3
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	3332      	adds	r3, #50	; 0x32
 80064aa:	4a08      	ldr	r2, [pc, #32]	; (80064cc <UART_SetConfig+0x4e4>)
 80064ac:	fba2 2303 	umull	r2, r3, r2, r3
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	f003 020f 	and.w	r2, r3, #15
 80064b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4422      	add	r2, r4
 80064be:	609a      	str	r2, [r3, #8]
}
 80064c0:	bf00      	nop
 80064c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064c6:	46bd      	mov	sp, r7
 80064c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064cc:	51eb851f 	.word	0x51eb851f

080064d0 <srand>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4b10      	ldr	r3, [pc, #64]	; (8006514 <srand+0x44>)
 80064d4:	681d      	ldr	r5, [r3, #0]
 80064d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80064d8:	4604      	mov	r4, r0
 80064da:	b9b3      	cbnz	r3, 800650a <srand+0x3a>
 80064dc:	2018      	movs	r0, #24
 80064de:	f001 fd1f 	bl	8007f20 <malloc>
 80064e2:	4602      	mov	r2, r0
 80064e4:	6328      	str	r0, [r5, #48]	; 0x30
 80064e6:	b920      	cbnz	r0, 80064f2 <srand+0x22>
 80064e8:	4b0b      	ldr	r3, [pc, #44]	; (8006518 <srand+0x48>)
 80064ea:	480c      	ldr	r0, [pc, #48]	; (800651c <srand+0x4c>)
 80064ec:	2146      	movs	r1, #70	; 0x46
 80064ee:	f001 f955 	bl	800779c <__assert_func>
 80064f2:	490b      	ldr	r1, [pc, #44]	; (8006520 <srand+0x50>)
 80064f4:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <srand+0x54>)
 80064f6:	e9c0 1300 	strd	r1, r3, [r0]
 80064fa:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <srand+0x58>)
 80064fc:	6083      	str	r3, [r0, #8]
 80064fe:	230b      	movs	r3, #11
 8006500:	8183      	strh	r3, [r0, #12]
 8006502:	2100      	movs	r1, #0
 8006504:	2001      	movs	r0, #1
 8006506:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800650a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800650c:	2200      	movs	r2, #0
 800650e:	611c      	str	r4, [r3, #16]
 8006510:	615a      	str	r2, [r3, #20]
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	200001d0 	.word	0x200001d0
 8006518:	08009524 	.word	0x08009524
 800651c:	0800953b 	.word	0x0800953b
 8006520:	abcd330e 	.word	0xabcd330e
 8006524:	e66d1234 	.word	0xe66d1234
 8006528:	0005deec 	.word	0x0005deec

0800652c <rand>:
 800652c:	4b16      	ldr	r3, [pc, #88]	; (8006588 <rand+0x5c>)
 800652e:	b510      	push	{r4, lr}
 8006530:	681c      	ldr	r4, [r3, #0]
 8006532:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006534:	b9b3      	cbnz	r3, 8006564 <rand+0x38>
 8006536:	2018      	movs	r0, #24
 8006538:	f001 fcf2 	bl	8007f20 <malloc>
 800653c:	4602      	mov	r2, r0
 800653e:	6320      	str	r0, [r4, #48]	; 0x30
 8006540:	b920      	cbnz	r0, 800654c <rand+0x20>
 8006542:	4b12      	ldr	r3, [pc, #72]	; (800658c <rand+0x60>)
 8006544:	4812      	ldr	r0, [pc, #72]	; (8006590 <rand+0x64>)
 8006546:	2152      	movs	r1, #82	; 0x52
 8006548:	f001 f928 	bl	800779c <__assert_func>
 800654c:	4911      	ldr	r1, [pc, #68]	; (8006594 <rand+0x68>)
 800654e:	4b12      	ldr	r3, [pc, #72]	; (8006598 <rand+0x6c>)
 8006550:	e9c0 1300 	strd	r1, r3, [r0]
 8006554:	4b11      	ldr	r3, [pc, #68]	; (800659c <rand+0x70>)
 8006556:	6083      	str	r3, [r0, #8]
 8006558:	230b      	movs	r3, #11
 800655a:	8183      	strh	r3, [r0, #12]
 800655c:	2100      	movs	r1, #0
 800655e:	2001      	movs	r0, #1
 8006560:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006564:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006566:	480e      	ldr	r0, [pc, #56]	; (80065a0 <rand+0x74>)
 8006568:	690b      	ldr	r3, [r1, #16]
 800656a:	694c      	ldr	r4, [r1, #20]
 800656c:	4a0d      	ldr	r2, [pc, #52]	; (80065a4 <rand+0x78>)
 800656e:	4358      	muls	r0, r3
 8006570:	fb02 0004 	mla	r0, r2, r4, r0
 8006574:	fba3 3202 	umull	r3, r2, r3, r2
 8006578:	3301      	adds	r3, #1
 800657a:	eb40 0002 	adc.w	r0, r0, r2
 800657e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006582:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006586:	bd10      	pop	{r4, pc}
 8006588:	200001d0 	.word	0x200001d0
 800658c:	08009524 	.word	0x08009524
 8006590:	0800953b 	.word	0x0800953b
 8006594:	abcd330e 	.word	0xabcd330e
 8006598:	e66d1234 	.word	0xe66d1234
 800659c:	0005deec 	.word	0x0005deec
 80065a0:	5851f42d 	.word	0x5851f42d
 80065a4:	4c957f2d 	.word	0x4c957f2d

080065a8 <sulp>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	4604      	mov	r4, r0
 80065ac:	460d      	mov	r5, r1
 80065ae:	ec45 4b10 	vmov	d0, r4, r5
 80065b2:	4616      	mov	r6, r2
 80065b4:	f002 f8e6 	bl	8008784 <__ulp>
 80065b8:	ec51 0b10 	vmov	r0, r1, d0
 80065bc:	b17e      	cbz	r6, 80065de <sulp+0x36>
 80065be:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80065c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	dd09      	ble.n	80065de <sulp+0x36>
 80065ca:	051b      	lsls	r3, r3, #20
 80065cc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80065d0:	2400      	movs	r4, #0
 80065d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80065d6:	4622      	mov	r2, r4
 80065d8:	462b      	mov	r3, r5
 80065da:	f7fa f80d 	bl	80005f8 <__aeabi_dmul>
 80065de:	bd70      	pop	{r4, r5, r6, pc}

080065e0 <_strtod_l>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	ed2d 8b02 	vpush	{d8}
 80065e8:	b09b      	sub	sp, #108	; 0x6c
 80065ea:	4604      	mov	r4, r0
 80065ec:	9213      	str	r2, [sp, #76]	; 0x4c
 80065ee:	2200      	movs	r2, #0
 80065f0:	9216      	str	r2, [sp, #88]	; 0x58
 80065f2:	460d      	mov	r5, r1
 80065f4:	f04f 0800 	mov.w	r8, #0
 80065f8:	f04f 0900 	mov.w	r9, #0
 80065fc:	460a      	mov	r2, r1
 80065fe:	9215      	str	r2, [sp, #84]	; 0x54
 8006600:	7811      	ldrb	r1, [r2, #0]
 8006602:	292b      	cmp	r1, #43	; 0x2b
 8006604:	d04c      	beq.n	80066a0 <_strtod_l+0xc0>
 8006606:	d83a      	bhi.n	800667e <_strtod_l+0x9e>
 8006608:	290d      	cmp	r1, #13
 800660a:	d834      	bhi.n	8006676 <_strtod_l+0x96>
 800660c:	2908      	cmp	r1, #8
 800660e:	d834      	bhi.n	800667a <_strtod_l+0x9a>
 8006610:	2900      	cmp	r1, #0
 8006612:	d03d      	beq.n	8006690 <_strtod_l+0xb0>
 8006614:	2200      	movs	r2, #0
 8006616:	920a      	str	r2, [sp, #40]	; 0x28
 8006618:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800661a:	7832      	ldrb	r2, [r6, #0]
 800661c:	2a30      	cmp	r2, #48	; 0x30
 800661e:	f040 80b4 	bne.w	800678a <_strtod_l+0x1aa>
 8006622:	7872      	ldrb	r2, [r6, #1]
 8006624:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006628:	2a58      	cmp	r2, #88	; 0x58
 800662a:	d170      	bne.n	800670e <_strtod_l+0x12e>
 800662c:	9302      	str	r3, [sp, #8]
 800662e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	ab16      	add	r3, sp, #88	; 0x58
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	4a8e      	ldr	r2, [pc, #568]	; (8006870 <_strtod_l+0x290>)
 8006638:	ab17      	add	r3, sp, #92	; 0x5c
 800663a:	a915      	add	r1, sp, #84	; 0x54
 800663c:	4620      	mov	r0, r4
 800663e:	f001 f97f 	bl	8007940 <__gethex>
 8006642:	f010 070f 	ands.w	r7, r0, #15
 8006646:	4605      	mov	r5, r0
 8006648:	d005      	beq.n	8006656 <_strtod_l+0x76>
 800664a:	2f06      	cmp	r7, #6
 800664c:	d12a      	bne.n	80066a4 <_strtod_l+0xc4>
 800664e:	3601      	adds	r6, #1
 8006650:	2300      	movs	r3, #0
 8006652:	9615      	str	r6, [sp, #84]	; 0x54
 8006654:	930a      	str	r3, [sp, #40]	; 0x28
 8006656:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006658:	2b00      	cmp	r3, #0
 800665a:	f040 857f 	bne.w	800715c <_strtod_l+0xb7c>
 800665e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006660:	b1db      	cbz	r3, 800669a <_strtod_l+0xba>
 8006662:	4642      	mov	r2, r8
 8006664:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006668:	ec43 2b10 	vmov	d0, r2, r3
 800666c:	b01b      	add	sp, #108	; 0x6c
 800666e:	ecbd 8b02 	vpop	{d8}
 8006672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006676:	2920      	cmp	r1, #32
 8006678:	d1cc      	bne.n	8006614 <_strtod_l+0x34>
 800667a:	3201      	adds	r2, #1
 800667c:	e7bf      	b.n	80065fe <_strtod_l+0x1e>
 800667e:	292d      	cmp	r1, #45	; 0x2d
 8006680:	d1c8      	bne.n	8006614 <_strtod_l+0x34>
 8006682:	2101      	movs	r1, #1
 8006684:	910a      	str	r1, [sp, #40]	; 0x28
 8006686:	1c51      	adds	r1, r2, #1
 8006688:	9115      	str	r1, [sp, #84]	; 0x54
 800668a:	7852      	ldrb	r2, [r2, #1]
 800668c:	2a00      	cmp	r2, #0
 800668e:	d1c3      	bne.n	8006618 <_strtod_l+0x38>
 8006690:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006692:	9515      	str	r5, [sp, #84]	; 0x54
 8006694:	2b00      	cmp	r3, #0
 8006696:	f040 855f 	bne.w	8007158 <_strtod_l+0xb78>
 800669a:	4642      	mov	r2, r8
 800669c:	464b      	mov	r3, r9
 800669e:	e7e3      	b.n	8006668 <_strtod_l+0x88>
 80066a0:	2100      	movs	r1, #0
 80066a2:	e7ef      	b.n	8006684 <_strtod_l+0xa4>
 80066a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80066a6:	b13a      	cbz	r2, 80066b8 <_strtod_l+0xd8>
 80066a8:	2135      	movs	r1, #53	; 0x35
 80066aa:	a818      	add	r0, sp, #96	; 0x60
 80066ac:	f002 f967 	bl	800897e <__copybits>
 80066b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80066b2:	4620      	mov	r0, r4
 80066b4:	f001 fd3a 	bl	800812c <_Bfree>
 80066b8:	3f01      	subs	r7, #1
 80066ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80066bc:	2f04      	cmp	r7, #4
 80066be:	d806      	bhi.n	80066ce <_strtod_l+0xee>
 80066c0:	e8df f007 	tbb	[pc, r7]
 80066c4:	201d0314 	.word	0x201d0314
 80066c8:	14          	.byte	0x14
 80066c9:	00          	.byte	0x00
 80066ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80066ce:	05e9      	lsls	r1, r5, #23
 80066d0:	bf48      	it	mi
 80066d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80066d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066da:	0d1b      	lsrs	r3, r3, #20
 80066dc:	051b      	lsls	r3, r3, #20
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1b9      	bne.n	8006656 <_strtod_l+0x76>
 80066e2:	f001 f811 	bl	8007708 <__errno>
 80066e6:	2322      	movs	r3, #34	; 0x22
 80066e8:	6003      	str	r3, [r0, #0]
 80066ea:	e7b4      	b.n	8006656 <_strtod_l+0x76>
 80066ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80066f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80066f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80066f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80066fc:	e7e7      	b.n	80066ce <_strtod_l+0xee>
 80066fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006878 <_strtod_l+0x298>
 8006702:	e7e4      	b.n	80066ce <_strtod_l+0xee>
 8006704:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006708:	f04f 38ff 	mov.w	r8, #4294967295
 800670c:	e7df      	b.n	80066ce <_strtod_l+0xee>
 800670e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	9215      	str	r2, [sp, #84]	; 0x54
 8006714:	785b      	ldrb	r3, [r3, #1]
 8006716:	2b30      	cmp	r3, #48	; 0x30
 8006718:	d0f9      	beq.n	800670e <_strtod_l+0x12e>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d09b      	beq.n	8006656 <_strtod_l+0x76>
 800671e:	2301      	movs	r3, #1
 8006720:	f04f 0a00 	mov.w	sl, #0
 8006724:	9304      	str	r3, [sp, #16]
 8006726:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006728:	930b      	str	r3, [sp, #44]	; 0x2c
 800672a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800672e:	46d3      	mov	fp, sl
 8006730:	220a      	movs	r2, #10
 8006732:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006734:	7806      	ldrb	r6, [r0, #0]
 8006736:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800673a:	b2d9      	uxtb	r1, r3
 800673c:	2909      	cmp	r1, #9
 800673e:	d926      	bls.n	800678e <_strtod_l+0x1ae>
 8006740:	494c      	ldr	r1, [pc, #304]	; (8006874 <_strtod_l+0x294>)
 8006742:	2201      	movs	r2, #1
 8006744:	f000 ff2b 	bl	800759e <strncmp>
 8006748:	2800      	cmp	r0, #0
 800674a:	d030      	beq.n	80067ae <_strtod_l+0x1ce>
 800674c:	2000      	movs	r0, #0
 800674e:	4632      	mov	r2, r6
 8006750:	9005      	str	r0, [sp, #20]
 8006752:	465e      	mov	r6, fp
 8006754:	4603      	mov	r3, r0
 8006756:	2a65      	cmp	r2, #101	; 0x65
 8006758:	d001      	beq.n	800675e <_strtod_l+0x17e>
 800675a:	2a45      	cmp	r2, #69	; 0x45
 800675c:	d113      	bne.n	8006786 <_strtod_l+0x1a6>
 800675e:	b91e      	cbnz	r6, 8006768 <_strtod_l+0x188>
 8006760:	9a04      	ldr	r2, [sp, #16]
 8006762:	4302      	orrs	r2, r0
 8006764:	d094      	beq.n	8006690 <_strtod_l+0xb0>
 8006766:	2600      	movs	r6, #0
 8006768:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800676a:	1c6a      	adds	r2, r5, #1
 800676c:	9215      	str	r2, [sp, #84]	; 0x54
 800676e:	786a      	ldrb	r2, [r5, #1]
 8006770:	2a2b      	cmp	r2, #43	; 0x2b
 8006772:	d074      	beq.n	800685e <_strtod_l+0x27e>
 8006774:	2a2d      	cmp	r2, #45	; 0x2d
 8006776:	d078      	beq.n	800686a <_strtod_l+0x28a>
 8006778:	f04f 0c00 	mov.w	ip, #0
 800677c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006780:	2909      	cmp	r1, #9
 8006782:	d97f      	bls.n	8006884 <_strtod_l+0x2a4>
 8006784:	9515      	str	r5, [sp, #84]	; 0x54
 8006786:	2700      	movs	r7, #0
 8006788:	e09e      	b.n	80068c8 <_strtod_l+0x2e8>
 800678a:	2300      	movs	r3, #0
 800678c:	e7c8      	b.n	8006720 <_strtod_l+0x140>
 800678e:	f1bb 0f08 	cmp.w	fp, #8
 8006792:	bfd8      	it	le
 8006794:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006796:	f100 0001 	add.w	r0, r0, #1
 800679a:	bfda      	itte	le
 800679c:	fb02 3301 	mlale	r3, r2, r1, r3
 80067a0:	9309      	strle	r3, [sp, #36]	; 0x24
 80067a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80067a6:	f10b 0b01 	add.w	fp, fp, #1
 80067aa:	9015      	str	r0, [sp, #84]	; 0x54
 80067ac:	e7c1      	b.n	8006732 <_strtod_l+0x152>
 80067ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	9215      	str	r2, [sp, #84]	; 0x54
 80067b4:	785a      	ldrb	r2, [r3, #1]
 80067b6:	f1bb 0f00 	cmp.w	fp, #0
 80067ba:	d037      	beq.n	800682c <_strtod_l+0x24c>
 80067bc:	9005      	str	r0, [sp, #20]
 80067be:	465e      	mov	r6, fp
 80067c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80067c4:	2b09      	cmp	r3, #9
 80067c6:	d912      	bls.n	80067ee <_strtod_l+0x20e>
 80067c8:	2301      	movs	r3, #1
 80067ca:	e7c4      	b.n	8006756 <_strtod_l+0x176>
 80067cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	9215      	str	r2, [sp, #84]	; 0x54
 80067d2:	785a      	ldrb	r2, [r3, #1]
 80067d4:	3001      	adds	r0, #1
 80067d6:	2a30      	cmp	r2, #48	; 0x30
 80067d8:	d0f8      	beq.n	80067cc <_strtod_l+0x1ec>
 80067da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80067de:	2b08      	cmp	r3, #8
 80067e0:	f200 84c1 	bhi.w	8007166 <_strtod_l+0xb86>
 80067e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067e6:	9005      	str	r0, [sp, #20]
 80067e8:	2000      	movs	r0, #0
 80067ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80067ec:	4606      	mov	r6, r0
 80067ee:	3a30      	subs	r2, #48	; 0x30
 80067f0:	f100 0301 	add.w	r3, r0, #1
 80067f4:	d014      	beq.n	8006820 <_strtod_l+0x240>
 80067f6:	9905      	ldr	r1, [sp, #20]
 80067f8:	4419      	add	r1, r3
 80067fa:	9105      	str	r1, [sp, #20]
 80067fc:	4633      	mov	r3, r6
 80067fe:	eb00 0c06 	add.w	ip, r0, r6
 8006802:	210a      	movs	r1, #10
 8006804:	4563      	cmp	r3, ip
 8006806:	d113      	bne.n	8006830 <_strtod_l+0x250>
 8006808:	1833      	adds	r3, r6, r0
 800680a:	2b08      	cmp	r3, #8
 800680c:	f106 0601 	add.w	r6, r6, #1
 8006810:	4406      	add	r6, r0
 8006812:	dc1a      	bgt.n	800684a <_strtod_l+0x26a>
 8006814:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006816:	230a      	movs	r3, #10
 8006818:	fb03 2301 	mla	r3, r3, r1, r2
 800681c:	9309      	str	r3, [sp, #36]	; 0x24
 800681e:	2300      	movs	r3, #0
 8006820:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006822:	1c51      	adds	r1, r2, #1
 8006824:	9115      	str	r1, [sp, #84]	; 0x54
 8006826:	7852      	ldrb	r2, [r2, #1]
 8006828:	4618      	mov	r0, r3
 800682a:	e7c9      	b.n	80067c0 <_strtod_l+0x1e0>
 800682c:	4658      	mov	r0, fp
 800682e:	e7d2      	b.n	80067d6 <_strtod_l+0x1f6>
 8006830:	2b08      	cmp	r3, #8
 8006832:	f103 0301 	add.w	r3, r3, #1
 8006836:	dc03      	bgt.n	8006840 <_strtod_l+0x260>
 8006838:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800683a:	434f      	muls	r7, r1
 800683c:	9709      	str	r7, [sp, #36]	; 0x24
 800683e:	e7e1      	b.n	8006804 <_strtod_l+0x224>
 8006840:	2b10      	cmp	r3, #16
 8006842:	bfd8      	it	le
 8006844:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006848:	e7dc      	b.n	8006804 <_strtod_l+0x224>
 800684a:	2e10      	cmp	r6, #16
 800684c:	bfdc      	itt	le
 800684e:	230a      	movle	r3, #10
 8006850:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006854:	e7e3      	b.n	800681e <_strtod_l+0x23e>
 8006856:	2300      	movs	r3, #0
 8006858:	9305      	str	r3, [sp, #20]
 800685a:	2301      	movs	r3, #1
 800685c:	e780      	b.n	8006760 <_strtod_l+0x180>
 800685e:	f04f 0c00 	mov.w	ip, #0
 8006862:	1caa      	adds	r2, r5, #2
 8006864:	9215      	str	r2, [sp, #84]	; 0x54
 8006866:	78aa      	ldrb	r2, [r5, #2]
 8006868:	e788      	b.n	800677c <_strtod_l+0x19c>
 800686a:	f04f 0c01 	mov.w	ip, #1
 800686e:	e7f8      	b.n	8006862 <_strtod_l+0x282>
 8006870:	080095a4 	.word	0x080095a4
 8006874:	08009593 	.word	0x08009593
 8006878:	7ff00000 	.word	0x7ff00000
 800687c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800687e:	1c51      	adds	r1, r2, #1
 8006880:	9115      	str	r1, [sp, #84]	; 0x54
 8006882:	7852      	ldrb	r2, [r2, #1]
 8006884:	2a30      	cmp	r2, #48	; 0x30
 8006886:	d0f9      	beq.n	800687c <_strtod_l+0x29c>
 8006888:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800688c:	2908      	cmp	r1, #8
 800688e:	f63f af7a 	bhi.w	8006786 <_strtod_l+0x1a6>
 8006892:	3a30      	subs	r2, #48	; 0x30
 8006894:	9208      	str	r2, [sp, #32]
 8006896:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006898:	920c      	str	r2, [sp, #48]	; 0x30
 800689a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800689c:	1c57      	adds	r7, r2, #1
 800689e:	9715      	str	r7, [sp, #84]	; 0x54
 80068a0:	7852      	ldrb	r2, [r2, #1]
 80068a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80068a6:	f1be 0f09 	cmp.w	lr, #9
 80068aa:	d938      	bls.n	800691e <_strtod_l+0x33e>
 80068ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068ae:	1a7f      	subs	r7, r7, r1
 80068b0:	2f08      	cmp	r7, #8
 80068b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80068b6:	dc03      	bgt.n	80068c0 <_strtod_l+0x2e0>
 80068b8:	9908      	ldr	r1, [sp, #32]
 80068ba:	428f      	cmp	r7, r1
 80068bc:	bfa8      	it	ge
 80068be:	460f      	movge	r7, r1
 80068c0:	f1bc 0f00 	cmp.w	ip, #0
 80068c4:	d000      	beq.n	80068c8 <_strtod_l+0x2e8>
 80068c6:	427f      	negs	r7, r7
 80068c8:	2e00      	cmp	r6, #0
 80068ca:	d14f      	bne.n	800696c <_strtod_l+0x38c>
 80068cc:	9904      	ldr	r1, [sp, #16]
 80068ce:	4301      	orrs	r1, r0
 80068d0:	f47f aec1 	bne.w	8006656 <_strtod_l+0x76>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f47f aedb 	bne.w	8006690 <_strtod_l+0xb0>
 80068da:	2a69      	cmp	r2, #105	; 0x69
 80068dc:	d029      	beq.n	8006932 <_strtod_l+0x352>
 80068de:	dc26      	bgt.n	800692e <_strtod_l+0x34e>
 80068e0:	2a49      	cmp	r2, #73	; 0x49
 80068e2:	d026      	beq.n	8006932 <_strtod_l+0x352>
 80068e4:	2a4e      	cmp	r2, #78	; 0x4e
 80068e6:	f47f aed3 	bne.w	8006690 <_strtod_l+0xb0>
 80068ea:	499b      	ldr	r1, [pc, #620]	; (8006b58 <_strtod_l+0x578>)
 80068ec:	a815      	add	r0, sp, #84	; 0x54
 80068ee:	f001 fa67 	bl	8007dc0 <__match>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	f43f aecc 	beq.w	8006690 <_strtod_l+0xb0>
 80068f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b28      	cmp	r3, #40	; 0x28
 80068fe:	d12f      	bne.n	8006960 <_strtod_l+0x380>
 8006900:	4996      	ldr	r1, [pc, #600]	; (8006b5c <_strtod_l+0x57c>)
 8006902:	aa18      	add	r2, sp, #96	; 0x60
 8006904:	a815      	add	r0, sp, #84	; 0x54
 8006906:	f001 fa6f 	bl	8007de8 <__hexnan>
 800690a:	2805      	cmp	r0, #5
 800690c:	d128      	bne.n	8006960 <_strtod_l+0x380>
 800690e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006910:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006914:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006918:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800691c:	e69b      	b.n	8006656 <_strtod_l+0x76>
 800691e:	9f08      	ldr	r7, [sp, #32]
 8006920:	210a      	movs	r1, #10
 8006922:	fb01 2107 	mla	r1, r1, r7, r2
 8006926:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800692a:	9208      	str	r2, [sp, #32]
 800692c:	e7b5      	b.n	800689a <_strtod_l+0x2ba>
 800692e:	2a6e      	cmp	r2, #110	; 0x6e
 8006930:	e7d9      	b.n	80068e6 <_strtod_l+0x306>
 8006932:	498b      	ldr	r1, [pc, #556]	; (8006b60 <_strtod_l+0x580>)
 8006934:	a815      	add	r0, sp, #84	; 0x54
 8006936:	f001 fa43 	bl	8007dc0 <__match>
 800693a:	2800      	cmp	r0, #0
 800693c:	f43f aea8 	beq.w	8006690 <_strtod_l+0xb0>
 8006940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006942:	4988      	ldr	r1, [pc, #544]	; (8006b64 <_strtod_l+0x584>)
 8006944:	3b01      	subs	r3, #1
 8006946:	a815      	add	r0, sp, #84	; 0x54
 8006948:	9315      	str	r3, [sp, #84]	; 0x54
 800694a:	f001 fa39 	bl	8007dc0 <__match>
 800694e:	b910      	cbnz	r0, 8006956 <_strtod_l+0x376>
 8006950:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006952:	3301      	adds	r3, #1
 8006954:	9315      	str	r3, [sp, #84]	; 0x54
 8006956:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006b74 <_strtod_l+0x594>
 800695a:	f04f 0800 	mov.w	r8, #0
 800695e:	e67a      	b.n	8006656 <_strtod_l+0x76>
 8006960:	4881      	ldr	r0, [pc, #516]	; (8006b68 <_strtod_l+0x588>)
 8006962:	f000 ff0d 	bl	8007780 <nan>
 8006966:	ec59 8b10 	vmov	r8, r9, d0
 800696a:	e674      	b.n	8006656 <_strtod_l+0x76>
 800696c:	9b05      	ldr	r3, [sp, #20]
 800696e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006970:	1afb      	subs	r3, r7, r3
 8006972:	f1bb 0f00 	cmp.w	fp, #0
 8006976:	bf08      	it	eq
 8006978:	46b3      	moveq	fp, r6
 800697a:	2e10      	cmp	r6, #16
 800697c:	9308      	str	r3, [sp, #32]
 800697e:	4635      	mov	r5, r6
 8006980:	bfa8      	it	ge
 8006982:	2510      	movge	r5, #16
 8006984:	f7f9 fdbe 	bl	8000504 <__aeabi_ui2d>
 8006988:	2e09      	cmp	r6, #9
 800698a:	4680      	mov	r8, r0
 800698c:	4689      	mov	r9, r1
 800698e:	dd13      	ble.n	80069b8 <_strtod_l+0x3d8>
 8006990:	4b76      	ldr	r3, [pc, #472]	; (8006b6c <_strtod_l+0x58c>)
 8006992:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006996:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800699a:	f7f9 fe2d 	bl	80005f8 <__aeabi_dmul>
 800699e:	4680      	mov	r8, r0
 80069a0:	4650      	mov	r0, sl
 80069a2:	4689      	mov	r9, r1
 80069a4:	f7f9 fdae 	bl	8000504 <__aeabi_ui2d>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4640      	mov	r0, r8
 80069ae:	4649      	mov	r1, r9
 80069b0:	f7f9 fc6c 	bl	800028c <__adddf3>
 80069b4:	4680      	mov	r8, r0
 80069b6:	4689      	mov	r9, r1
 80069b8:	2e0f      	cmp	r6, #15
 80069ba:	dc38      	bgt.n	8006a2e <_strtod_l+0x44e>
 80069bc:	9b08      	ldr	r3, [sp, #32]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f43f ae49 	beq.w	8006656 <_strtod_l+0x76>
 80069c4:	dd24      	ble.n	8006a10 <_strtod_l+0x430>
 80069c6:	2b16      	cmp	r3, #22
 80069c8:	dc0b      	bgt.n	80069e2 <_strtod_l+0x402>
 80069ca:	4968      	ldr	r1, [pc, #416]	; (8006b6c <_strtod_l+0x58c>)
 80069cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069d4:	4642      	mov	r2, r8
 80069d6:	464b      	mov	r3, r9
 80069d8:	f7f9 fe0e 	bl	80005f8 <__aeabi_dmul>
 80069dc:	4680      	mov	r8, r0
 80069de:	4689      	mov	r9, r1
 80069e0:	e639      	b.n	8006656 <_strtod_l+0x76>
 80069e2:	9a08      	ldr	r2, [sp, #32]
 80069e4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80069e8:	4293      	cmp	r3, r2
 80069ea:	db20      	blt.n	8006a2e <_strtod_l+0x44e>
 80069ec:	4c5f      	ldr	r4, [pc, #380]	; (8006b6c <_strtod_l+0x58c>)
 80069ee:	f1c6 060f 	rsb	r6, r6, #15
 80069f2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80069f6:	4642      	mov	r2, r8
 80069f8:	464b      	mov	r3, r9
 80069fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069fe:	f7f9 fdfb 	bl	80005f8 <__aeabi_dmul>
 8006a02:	9b08      	ldr	r3, [sp, #32]
 8006a04:	1b9e      	subs	r6, r3, r6
 8006a06:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006a0a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a0e:	e7e3      	b.n	80069d8 <_strtod_l+0x3f8>
 8006a10:	9b08      	ldr	r3, [sp, #32]
 8006a12:	3316      	adds	r3, #22
 8006a14:	db0b      	blt.n	8006a2e <_strtod_l+0x44e>
 8006a16:	9b05      	ldr	r3, [sp, #20]
 8006a18:	1bdf      	subs	r7, r3, r7
 8006a1a:	4b54      	ldr	r3, [pc, #336]	; (8006b6c <_strtod_l+0x58c>)
 8006a1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a24:	4640      	mov	r0, r8
 8006a26:	4649      	mov	r1, r9
 8006a28:	f7f9 ff10 	bl	800084c <__aeabi_ddiv>
 8006a2c:	e7d6      	b.n	80069dc <_strtod_l+0x3fc>
 8006a2e:	9b08      	ldr	r3, [sp, #32]
 8006a30:	1b75      	subs	r5, r6, r5
 8006a32:	441d      	add	r5, r3
 8006a34:	2d00      	cmp	r5, #0
 8006a36:	dd70      	ble.n	8006b1a <_strtod_l+0x53a>
 8006a38:	f015 030f 	ands.w	r3, r5, #15
 8006a3c:	d00a      	beq.n	8006a54 <_strtod_l+0x474>
 8006a3e:	494b      	ldr	r1, [pc, #300]	; (8006b6c <_strtod_l+0x58c>)
 8006a40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a44:	4642      	mov	r2, r8
 8006a46:	464b      	mov	r3, r9
 8006a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a4c:	f7f9 fdd4 	bl	80005f8 <__aeabi_dmul>
 8006a50:	4680      	mov	r8, r0
 8006a52:	4689      	mov	r9, r1
 8006a54:	f035 050f 	bics.w	r5, r5, #15
 8006a58:	d04d      	beq.n	8006af6 <_strtod_l+0x516>
 8006a5a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006a5e:	dd22      	ble.n	8006aa6 <_strtod_l+0x4c6>
 8006a60:	2500      	movs	r5, #0
 8006a62:	46ab      	mov	fp, r5
 8006a64:	9509      	str	r5, [sp, #36]	; 0x24
 8006a66:	9505      	str	r5, [sp, #20]
 8006a68:	2322      	movs	r3, #34	; 0x22
 8006a6a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006b74 <_strtod_l+0x594>
 8006a6e:	6023      	str	r3, [r4, #0]
 8006a70:	f04f 0800 	mov.w	r8, #0
 8006a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f43f aded 	beq.w	8006656 <_strtod_l+0x76>
 8006a7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f001 fb54 	bl	800812c <_Bfree>
 8006a84:	9905      	ldr	r1, [sp, #20]
 8006a86:	4620      	mov	r0, r4
 8006a88:	f001 fb50 	bl	800812c <_Bfree>
 8006a8c:	4659      	mov	r1, fp
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f001 fb4c 	bl	800812c <_Bfree>
 8006a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a96:	4620      	mov	r0, r4
 8006a98:	f001 fb48 	bl	800812c <_Bfree>
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f001 fb44 	bl	800812c <_Bfree>
 8006aa4:	e5d7      	b.n	8006656 <_strtod_l+0x76>
 8006aa6:	4b32      	ldr	r3, [pc, #200]	; (8006b70 <_strtod_l+0x590>)
 8006aa8:	9304      	str	r3, [sp, #16]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	112d      	asrs	r5, r5, #4
 8006aae:	4640      	mov	r0, r8
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	469a      	mov	sl, r3
 8006ab4:	2d01      	cmp	r5, #1
 8006ab6:	dc21      	bgt.n	8006afc <_strtod_l+0x51c>
 8006ab8:	b10b      	cbz	r3, 8006abe <_strtod_l+0x4de>
 8006aba:	4680      	mov	r8, r0
 8006abc:	4689      	mov	r9, r1
 8006abe:	492c      	ldr	r1, [pc, #176]	; (8006b70 <_strtod_l+0x590>)
 8006ac0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006ac4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006ac8:	4642      	mov	r2, r8
 8006aca:	464b      	mov	r3, r9
 8006acc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ad0:	f7f9 fd92 	bl	80005f8 <__aeabi_dmul>
 8006ad4:	4b27      	ldr	r3, [pc, #156]	; (8006b74 <_strtod_l+0x594>)
 8006ad6:	460a      	mov	r2, r1
 8006ad8:	400b      	ands	r3, r1
 8006ada:	4927      	ldr	r1, [pc, #156]	; (8006b78 <_strtod_l+0x598>)
 8006adc:	428b      	cmp	r3, r1
 8006ade:	4680      	mov	r8, r0
 8006ae0:	d8be      	bhi.n	8006a60 <_strtod_l+0x480>
 8006ae2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006ae6:	428b      	cmp	r3, r1
 8006ae8:	bf86      	itte	hi
 8006aea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006b7c <_strtod_l+0x59c>
 8006aee:	f04f 38ff 	movhi.w	r8, #4294967295
 8006af2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006af6:	2300      	movs	r3, #0
 8006af8:	9304      	str	r3, [sp, #16]
 8006afa:	e07b      	b.n	8006bf4 <_strtod_l+0x614>
 8006afc:	07ea      	lsls	r2, r5, #31
 8006afe:	d505      	bpl.n	8006b0c <_strtod_l+0x52c>
 8006b00:	9b04      	ldr	r3, [sp, #16]
 8006b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b06:	f7f9 fd77 	bl	80005f8 <__aeabi_dmul>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	9a04      	ldr	r2, [sp, #16]
 8006b0e:	3208      	adds	r2, #8
 8006b10:	f10a 0a01 	add.w	sl, sl, #1
 8006b14:	106d      	asrs	r5, r5, #1
 8006b16:	9204      	str	r2, [sp, #16]
 8006b18:	e7cc      	b.n	8006ab4 <_strtod_l+0x4d4>
 8006b1a:	d0ec      	beq.n	8006af6 <_strtod_l+0x516>
 8006b1c:	426d      	negs	r5, r5
 8006b1e:	f015 020f 	ands.w	r2, r5, #15
 8006b22:	d00a      	beq.n	8006b3a <_strtod_l+0x55a>
 8006b24:	4b11      	ldr	r3, [pc, #68]	; (8006b6c <_strtod_l+0x58c>)
 8006b26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b32:	f7f9 fe8b 	bl	800084c <__aeabi_ddiv>
 8006b36:	4680      	mov	r8, r0
 8006b38:	4689      	mov	r9, r1
 8006b3a:	112d      	asrs	r5, r5, #4
 8006b3c:	d0db      	beq.n	8006af6 <_strtod_l+0x516>
 8006b3e:	2d1f      	cmp	r5, #31
 8006b40:	dd1e      	ble.n	8006b80 <_strtod_l+0x5a0>
 8006b42:	2500      	movs	r5, #0
 8006b44:	46ab      	mov	fp, r5
 8006b46:	9509      	str	r5, [sp, #36]	; 0x24
 8006b48:	9505      	str	r5, [sp, #20]
 8006b4a:	2322      	movs	r3, #34	; 0x22
 8006b4c:	f04f 0800 	mov.w	r8, #0
 8006b50:	f04f 0900 	mov.w	r9, #0
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	e78d      	b.n	8006a74 <_strtod_l+0x494>
 8006b58:	0800959e 	.word	0x0800959e
 8006b5c:	080095b8 	.word	0x080095b8
 8006b60:	08009595 	.word	0x08009595
 8006b64:	08009598 	.word	0x08009598
 8006b68:	08009796 	.word	0x08009796
 8006b6c:	08009890 	.word	0x08009890
 8006b70:	08009868 	.word	0x08009868
 8006b74:	7ff00000 	.word	0x7ff00000
 8006b78:	7ca00000 	.word	0x7ca00000
 8006b7c:	7fefffff 	.word	0x7fefffff
 8006b80:	f015 0310 	ands.w	r3, r5, #16
 8006b84:	bf18      	it	ne
 8006b86:	236a      	movne	r3, #106	; 0x6a
 8006b88:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8006f2c <_strtod_l+0x94c>
 8006b8c:	9304      	str	r3, [sp, #16]
 8006b8e:	4640      	mov	r0, r8
 8006b90:	4649      	mov	r1, r9
 8006b92:	2300      	movs	r3, #0
 8006b94:	07ea      	lsls	r2, r5, #31
 8006b96:	d504      	bpl.n	8006ba2 <_strtod_l+0x5c2>
 8006b98:	e9da 2300 	ldrd	r2, r3, [sl]
 8006b9c:	f7f9 fd2c 	bl	80005f8 <__aeabi_dmul>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	106d      	asrs	r5, r5, #1
 8006ba4:	f10a 0a08 	add.w	sl, sl, #8
 8006ba8:	d1f4      	bne.n	8006b94 <_strtod_l+0x5b4>
 8006baa:	b10b      	cbz	r3, 8006bb0 <_strtod_l+0x5d0>
 8006bac:	4680      	mov	r8, r0
 8006bae:	4689      	mov	r9, r1
 8006bb0:	9b04      	ldr	r3, [sp, #16]
 8006bb2:	b1bb      	cbz	r3, 8006be4 <_strtod_l+0x604>
 8006bb4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006bb8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	dd10      	ble.n	8006be4 <_strtod_l+0x604>
 8006bc2:	2b1f      	cmp	r3, #31
 8006bc4:	f340 811e 	ble.w	8006e04 <_strtod_l+0x824>
 8006bc8:	2b34      	cmp	r3, #52	; 0x34
 8006bca:	bfde      	ittt	le
 8006bcc:	f04f 33ff 	movle.w	r3, #4294967295
 8006bd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006bd4:	4093      	lslle	r3, r2
 8006bd6:	f04f 0800 	mov.w	r8, #0
 8006bda:	bfcc      	ite	gt
 8006bdc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006be0:	ea03 0901 	andle.w	r9, r3, r1
 8006be4:	2200      	movs	r2, #0
 8006be6:	2300      	movs	r3, #0
 8006be8:	4640      	mov	r0, r8
 8006bea:	4649      	mov	r1, r9
 8006bec:	f7f9 ff6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d1a6      	bne.n	8006b42 <_strtod_l+0x562>
 8006bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bfa:	4633      	mov	r3, r6
 8006bfc:	465a      	mov	r2, fp
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f001 fafc 	bl	80081fc <__s2b>
 8006c04:	9009      	str	r0, [sp, #36]	; 0x24
 8006c06:	2800      	cmp	r0, #0
 8006c08:	f43f af2a 	beq.w	8006a60 <_strtod_l+0x480>
 8006c0c:	9a08      	ldr	r2, [sp, #32]
 8006c0e:	9b05      	ldr	r3, [sp, #20]
 8006c10:	2a00      	cmp	r2, #0
 8006c12:	eba3 0307 	sub.w	r3, r3, r7
 8006c16:	bfa8      	it	ge
 8006c18:	2300      	movge	r3, #0
 8006c1a:	930c      	str	r3, [sp, #48]	; 0x30
 8006c1c:	2500      	movs	r5, #0
 8006c1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006c22:	9312      	str	r3, [sp, #72]	; 0x48
 8006c24:	46ab      	mov	fp, r5
 8006c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c28:	4620      	mov	r0, r4
 8006c2a:	6859      	ldr	r1, [r3, #4]
 8006c2c:	f001 fa3e 	bl	80080ac <_Balloc>
 8006c30:	9005      	str	r0, [sp, #20]
 8006c32:	2800      	cmp	r0, #0
 8006c34:	f43f af18 	beq.w	8006a68 <_strtod_l+0x488>
 8006c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	3202      	adds	r2, #2
 8006c3e:	f103 010c 	add.w	r1, r3, #12
 8006c42:	0092      	lsls	r2, r2, #2
 8006c44:	300c      	adds	r0, #12
 8006c46:	f000 fd8c 	bl	8007762 <memcpy>
 8006c4a:	ec49 8b10 	vmov	d0, r8, r9
 8006c4e:	aa18      	add	r2, sp, #96	; 0x60
 8006c50:	a917      	add	r1, sp, #92	; 0x5c
 8006c52:	4620      	mov	r0, r4
 8006c54:	f001 fe06 	bl	8008864 <__d2b>
 8006c58:	ec49 8b18 	vmov	d8, r8, r9
 8006c5c:	9016      	str	r0, [sp, #88]	; 0x58
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	f43f af02 	beq.w	8006a68 <_strtod_l+0x488>
 8006c64:	2101      	movs	r1, #1
 8006c66:	4620      	mov	r0, r4
 8006c68:	f001 fb60 	bl	800832c <__i2b>
 8006c6c:	4683      	mov	fp, r0
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	f43f aefa 	beq.w	8006a68 <_strtod_l+0x488>
 8006c74:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006c76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006c78:	2e00      	cmp	r6, #0
 8006c7a:	bfab      	itete	ge
 8006c7c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006c7e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006c80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006c82:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006c86:	bfac      	ite	ge
 8006c88:	eb06 0a03 	addge.w	sl, r6, r3
 8006c8c:	1b9f      	sublt	r7, r3, r6
 8006c8e:	9b04      	ldr	r3, [sp, #16]
 8006c90:	1af6      	subs	r6, r6, r3
 8006c92:	4416      	add	r6, r2
 8006c94:	4ba0      	ldr	r3, [pc, #640]	; (8006f18 <_strtod_l+0x938>)
 8006c96:	3e01      	subs	r6, #1
 8006c98:	429e      	cmp	r6, r3
 8006c9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006c9e:	f280 80c4 	bge.w	8006e2a <_strtod_l+0x84a>
 8006ca2:	1b9b      	subs	r3, r3, r6
 8006ca4:	2b1f      	cmp	r3, #31
 8006ca6:	eba2 0203 	sub.w	r2, r2, r3
 8006caa:	f04f 0101 	mov.w	r1, #1
 8006cae:	f300 80b0 	bgt.w	8006e12 <_strtod_l+0x832>
 8006cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb6:	930e      	str	r3, [sp, #56]	; 0x38
 8006cb8:	2300      	movs	r3, #0
 8006cba:	930d      	str	r3, [sp, #52]	; 0x34
 8006cbc:	eb0a 0602 	add.w	r6, sl, r2
 8006cc0:	9b04      	ldr	r3, [sp, #16]
 8006cc2:	45b2      	cmp	sl, r6
 8006cc4:	4417      	add	r7, r2
 8006cc6:	441f      	add	r7, r3
 8006cc8:	4653      	mov	r3, sl
 8006cca:	bfa8      	it	ge
 8006ccc:	4633      	movge	r3, r6
 8006cce:	42bb      	cmp	r3, r7
 8006cd0:	bfa8      	it	ge
 8006cd2:	463b      	movge	r3, r7
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	bfc2      	ittt	gt
 8006cd8:	1af6      	subgt	r6, r6, r3
 8006cda:	1aff      	subgt	r7, r7, r3
 8006cdc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dd17      	ble.n	8006d16 <_strtod_l+0x736>
 8006ce6:	4659      	mov	r1, fp
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4620      	mov	r0, r4
 8006cec:	f001 fbde 	bl	80084ac <__pow5mult>
 8006cf0:	4683      	mov	fp, r0
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	f43f aeb8 	beq.w	8006a68 <_strtod_l+0x488>
 8006cf8:	4601      	mov	r1, r0
 8006cfa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f001 fb2b 	bl	8008358 <__multiply>
 8006d02:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d04:	2800      	cmp	r0, #0
 8006d06:	f43f aeaf 	beq.w	8006a68 <_strtod_l+0x488>
 8006d0a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f001 fa0d 	bl	800812c <_Bfree>
 8006d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d14:	9316      	str	r3, [sp, #88]	; 0x58
 8006d16:	2e00      	cmp	r6, #0
 8006d18:	f300 808c 	bgt.w	8006e34 <_strtod_l+0x854>
 8006d1c:	9b08      	ldr	r3, [sp, #32]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	dd08      	ble.n	8006d34 <_strtod_l+0x754>
 8006d22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d24:	9905      	ldr	r1, [sp, #20]
 8006d26:	4620      	mov	r0, r4
 8006d28:	f001 fbc0 	bl	80084ac <__pow5mult>
 8006d2c:	9005      	str	r0, [sp, #20]
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	f43f ae9a 	beq.w	8006a68 <_strtod_l+0x488>
 8006d34:	2f00      	cmp	r7, #0
 8006d36:	dd08      	ble.n	8006d4a <_strtod_l+0x76a>
 8006d38:	9905      	ldr	r1, [sp, #20]
 8006d3a:	463a      	mov	r2, r7
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f001 fc0f 	bl	8008560 <__lshift>
 8006d42:	9005      	str	r0, [sp, #20]
 8006d44:	2800      	cmp	r0, #0
 8006d46:	f43f ae8f 	beq.w	8006a68 <_strtod_l+0x488>
 8006d4a:	f1ba 0f00 	cmp.w	sl, #0
 8006d4e:	dd08      	ble.n	8006d62 <_strtod_l+0x782>
 8006d50:	4659      	mov	r1, fp
 8006d52:	4652      	mov	r2, sl
 8006d54:	4620      	mov	r0, r4
 8006d56:	f001 fc03 	bl	8008560 <__lshift>
 8006d5a:	4683      	mov	fp, r0
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	f43f ae83 	beq.w	8006a68 <_strtod_l+0x488>
 8006d62:	9a05      	ldr	r2, [sp, #20]
 8006d64:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006d66:	4620      	mov	r0, r4
 8006d68:	f001 fc82 	bl	8008670 <__mdiff>
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	f43f ae7a 	beq.w	8006a68 <_strtod_l+0x488>
 8006d74:	68c3      	ldr	r3, [r0, #12]
 8006d76:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d78:	2300      	movs	r3, #0
 8006d7a:	60c3      	str	r3, [r0, #12]
 8006d7c:	4659      	mov	r1, fp
 8006d7e:	f001 fc5b 	bl	8008638 <__mcmp>
 8006d82:	2800      	cmp	r0, #0
 8006d84:	da60      	bge.n	8006e48 <_strtod_l+0x868>
 8006d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d88:	ea53 0308 	orrs.w	r3, r3, r8
 8006d8c:	f040 8084 	bne.w	8006e98 <_strtod_l+0x8b8>
 8006d90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d17f      	bne.n	8006e98 <_strtod_l+0x8b8>
 8006d98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d9c:	0d1b      	lsrs	r3, r3, #20
 8006d9e:	051b      	lsls	r3, r3, #20
 8006da0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006da4:	d978      	bls.n	8006e98 <_strtod_l+0x8b8>
 8006da6:	696b      	ldr	r3, [r5, #20]
 8006da8:	b913      	cbnz	r3, 8006db0 <_strtod_l+0x7d0>
 8006daa:	692b      	ldr	r3, [r5, #16]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	dd73      	ble.n	8006e98 <_strtod_l+0x8b8>
 8006db0:	4629      	mov	r1, r5
 8006db2:	2201      	movs	r2, #1
 8006db4:	4620      	mov	r0, r4
 8006db6:	f001 fbd3 	bl	8008560 <__lshift>
 8006dba:	4659      	mov	r1, fp
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	f001 fc3b 	bl	8008638 <__mcmp>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	dd68      	ble.n	8006e98 <_strtod_l+0x8b8>
 8006dc6:	9904      	ldr	r1, [sp, #16]
 8006dc8:	4a54      	ldr	r2, [pc, #336]	; (8006f1c <_strtod_l+0x93c>)
 8006dca:	464b      	mov	r3, r9
 8006dcc:	2900      	cmp	r1, #0
 8006dce:	f000 8084 	beq.w	8006eda <_strtod_l+0x8fa>
 8006dd2:	ea02 0109 	and.w	r1, r2, r9
 8006dd6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006dda:	dc7e      	bgt.n	8006eda <_strtod_l+0x8fa>
 8006ddc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006de0:	f77f aeb3 	ble.w	8006b4a <_strtod_l+0x56a>
 8006de4:	4b4e      	ldr	r3, [pc, #312]	; (8006f20 <_strtod_l+0x940>)
 8006de6:	4640      	mov	r0, r8
 8006de8:	4649      	mov	r1, r9
 8006dea:	2200      	movs	r2, #0
 8006dec:	f7f9 fc04 	bl	80005f8 <__aeabi_dmul>
 8006df0:	4b4a      	ldr	r3, [pc, #296]	; (8006f1c <_strtod_l+0x93c>)
 8006df2:	400b      	ands	r3, r1
 8006df4:	4680      	mov	r8, r0
 8006df6:	4689      	mov	r9, r1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f47f ae3f 	bne.w	8006a7c <_strtod_l+0x49c>
 8006dfe:	2322      	movs	r3, #34	; 0x22
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	e63b      	b.n	8006a7c <_strtod_l+0x49c>
 8006e04:	f04f 32ff 	mov.w	r2, #4294967295
 8006e08:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0c:	ea03 0808 	and.w	r8, r3, r8
 8006e10:	e6e8      	b.n	8006be4 <_strtod_l+0x604>
 8006e12:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006e16:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006e1a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006e1e:	36e2      	adds	r6, #226	; 0xe2
 8006e20:	fa01 f306 	lsl.w	r3, r1, r6
 8006e24:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8006e28:	e748      	b.n	8006cbc <_strtod_l+0x6dc>
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8006e32:	e743      	b.n	8006cbc <_strtod_l+0x6dc>
 8006e34:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006e36:	4632      	mov	r2, r6
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f001 fb91 	bl	8008560 <__lshift>
 8006e3e:	9016      	str	r0, [sp, #88]	; 0x58
 8006e40:	2800      	cmp	r0, #0
 8006e42:	f47f af6b 	bne.w	8006d1c <_strtod_l+0x73c>
 8006e46:	e60f      	b.n	8006a68 <_strtod_l+0x488>
 8006e48:	46ca      	mov	sl, r9
 8006e4a:	d171      	bne.n	8006f30 <_strtod_l+0x950>
 8006e4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e52:	b352      	cbz	r2, 8006eaa <_strtod_l+0x8ca>
 8006e54:	4a33      	ldr	r2, [pc, #204]	; (8006f24 <_strtod_l+0x944>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d12a      	bne.n	8006eb0 <_strtod_l+0x8d0>
 8006e5a:	9b04      	ldr	r3, [sp, #16]
 8006e5c:	4641      	mov	r1, r8
 8006e5e:	b1fb      	cbz	r3, 8006ea0 <_strtod_l+0x8c0>
 8006e60:	4b2e      	ldr	r3, [pc, #184]	; (8006f1c <_strtod_l+0x93c>)
 8006e62:	ea09 0303 	and.w	r3, r9, r3
 8006e66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e6e:	d81a      	bhi.n	8006ea6 <_strtod_l+0x8c6>
 8006e70:	0d1b      	lsrs	r3, r3, #20
 8006e72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e76:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7a:	4299      	cmp	r1, r3
 8006e7c:	d118      	bne.n	8006eb0 <_strtod_l+0x8d0>
 8006e7e:	4b2a      	ldr	r3, [pc, #168]	; (8006f28 <_strtod_l+0x948>)
 8006e80:	459a      	cmp	sl, r3
 8006e82:	d102      	bne.n	8006e8a <_strtod_l+0x8aa>
 8006e84:	3101      	adds	r1, #1
 8006e86:	f43f adef 	beq.w	8006a68 <_strtod_l+0x488>
 8006e8a:	4b24      	ldr	r3, [pc, #144]	; (8006f1c <_strtod_l+0x93c>)
 8006e8c:	ea0a 0303 	and.w	r3, sl, r3
 8006e90:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006e94:	f04f 0800 	mov.w	r8, #0
 8006e98:	9b04      	ldr	r3, [sp, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1a2      	bne.n	8006de4 <_strtod_l+0x804>
 8006e9e:	e5ed      	b.n	8006a7c <_strtod_l+0x49c>
 8006ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea4:	e7e9      	b.n	8006e7a <_strtod_l+0x89a>
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	e7e7      	b.n	8006e7a <_strtod_l+0x89a>
 8006eaa:	ea53 0308 	orrs.w	r3, r3, r8
 8006eae:	d08a      	beq.n	8006dc6 <_strtod_l+0x7e6>
 8006eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eb2:	b1e3      	cbz	r3, 8006eee <_strtod_l+0x90e>
 8006eb4:	ea13 0f0a 	tst.w	r3, sl
 8006eb8:	d0ee      	beq.n	8006e98 <_strtod_l+0x8b8>
 8006eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ebc:	9a04      	ldr	r2, [sp, #16]
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	b1c3      	cbz	r3, 8006ef6 <_strtod_l+0x916>
 8006ec4:	f7ff fb70 	bl	80065a8 <sulp>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	ec51 0b18 	vmov	r0, r1, d8
 8006ed0:	f7f9 f9dc 	bl	800028c <__adddf3>
 8006ed4:	4680      	mov	r8, r0
 8006ed6:	4689      	mov	r9, r1
 8006ed8:	e7de      	b.n	8006e98 <_strtod_l+0x8b8>
 8006eda:	4013      	ands	r3, r2
 8006edc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006ee0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006ee4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006ee8:	f04f 38ff 	mov.w	r8, #4294967295
 8006eec:	e7d4      	b.n	8006e98 <_strtod_l+0x8b8>
 8006eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ef0:	ea13 0f08 	tst.w	r3, r8
 8006ef4:	e7e0      	b.n	8006eb8 <_strtod_l+0x8d8>
 8006ef6:	f7ff fb57 	bl	80065a8 <sulp>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	ec51 0b18 	vmov	r0, r1, d8
 8006f02:	f7f9 f9c1 	bl	8000288 <__aeabi_dsub>
 8006f06:	2200      	movs	r2, #0
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4680      	mov	r8, r0
 8006f0c:	4689      	mov	r9, r1
 8006f0e:	f7f9 fddb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	d0c0      	beq.n	8006e98 <_strtod_l+0x8b8>
 8006f16:	e618      	b.n	8006b4a <_strtod_l+0x56a>
 8006f18:	fffffc02 	.word	0xfffffc02
 8006f1c:	7ff00000 	.word	0x7ff00000
 8006f20:	39500000 	.word	0x39500000
 8006f24:	000fffff 	.word	0x000fffff
 8006f28:	7fefffff 	.word	0x7fefffff
 8006f2c:	080095d0 	.word	0x080095d0
 8006f30:	4659      	mov	r1, fp
 8006f32:	4628      	mov	r0, r5
 8006f34:	f001 fcf0 	bl	8008918 <__ratio>
 8006f38:	ec57 6b10 	vmov	r6, r7, d0
 8006f3c:	ee10 0a10 	vmov	r0, s0
 8006f40:	2200      	movs	r2, #0
 8006f42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f46:	4639      	mov	r1, r7
 8006f48:	f7f9 fdd2 	bl	8000af0 <__aeabi_dcmple>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d071      	beq.n	8007034 <_strtod_l+0xa54>
 8006f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d17c      	bne.n	8007050 <_strtod_l+0xa70>
 8006f56:	f1b8 0f00 	cmp.w	r8, #0
 8006f5a:	d15a      	bne.n	8007012 <_strtod_l+0xa32>
 8006f5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d15d      	bne.n	8007020 <_strtod_l+0xa40>
 8006f64:	4b90      	ldr	r3, [pc, #576]	; (80071a8 <_strtod_l+0xbc8>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	4630      	mov	r0, r6
 8006f6a:	4639      	mov	r1, r7
 8006f6c:	f7f9 fdb6 	bl	8000adc <__aeabi_dcmplt>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d15c      	bne.n	800702e <_strtod_l+0xa4e>
 8006f74:	4630      	mov	r0, r6
 8006f76:	4639      	mov	r1, r7
 8006f78:	4b8c      	ldr	r3, [pc, #560]	; (80071ac <_strtod_l+0xbcc>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f7f9 fb3c 	bl	80005f8 <__aeabi_dmul>
 8006f80:	4606      	mov	r6, r0
 8006f82:	460f      	mov	r7, r1
 8006f84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006f88:	9606      	str	r6, [sp, #24]
 8006f8a:	9307      	str	r3, [sp, #28]
 8006f8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006f94:	4b86      	ldr	r3, [pc, #536]	; (80071b0 <_strtod_l+0xbd0>)
 8006f96:	ea0a 0303 	and.w	r3, sl, r3
 8006f9a:	930d      	str	r3, [sp, #52]	; 0x34
 8006f9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f9e:	4b85      	ldr	r3, [pc, #532]	; (80071b4 <_strtod_l+0xbd4>)
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	f040 8090 	bne.w	80070c6 <_strtod_l+0xae6>
 8006fa6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006faa:	ec49 8b10 	vmov	d0, r8, r9
 8006fae:	f001 fbe9 	bl	8008784 <__ulp>
 8006fb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fb6:	ec51 0b10 	vmov	r0, r1, d0
 8006fba:	f7f9 fb1d 	bl	80005f8 <__aeabi_dmul>
 8006fbe:	4642      	mov	r2, r8
 8006fc0:	464b      	mov	r3, r9
 8006fc2:	f7f9 f963 	bl	800028c <__adddf3>
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4979      	ldr	r1, [pc, #484]	; (80071b0 <_strtod_l+0xbd0>)
 8006fca:	4a7b      	ldr	r2, [pc, #492]	; (80071b8 <_strtod_l+0xbd8>)
 8006fcc:	4019      	ands	r1, r3
 8006fce:	4291      	cmp	r1, r2
 8006fd0:	4680      	mov	r8, r0
 8006fd2:	d944      	bls.n	800705e <_strtod_l+0xa7e>
 8006fd4:	ee18 2a90 	vmov	r2, s17
 8006fd8:	4b78      	ldr	r3, [pc, #480]	; (80071bc <_strtod_l+0xbdc>)
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d104      	bne.n	8006fe8 <_strtod_l+0xa08>
 8006fde:	ee18 3a10 	vmov	r3, s16
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	f43f ad40 	beq.w	8006a68 <_strtod_l+0x488>
 8006fe8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80071bc <_strtod_l+0xbdc>
 8006fec:	f04f 38ff 	mov.w	r8, #4294967295
 8006ff0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f001 f89a 	bl	800812c <_Bfree>
 8006ff8:	9905      	ldr	r1, [sp, #20]
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f001 f896 	bl	800812c <_Bfree>
 8007000:	4659      	mov	r1, fp
 8007002:	4620      	mov	r0, r4
 8007004:	f001 f892 	bl	800812c <_Bfree>
 8007008:	4629      	mov	r1, r5
 800700a:	4620      	mov	r0, r4
 800700c:	f001 f88e 	bl	800812c <_Bfree>
 8007010:	e609      	b.n	8006c26 <_strtod_l+0x646>
 8007012:	f1b8 0f01 	cmp.w	r8, #1
 8007016:	d103      	bne.n	8007020 <_strtod_l+0xa40>
 8007018:	f1b9 0f00 	cmp.w	r9, #0
 800701c:	f43f ad95 	beq.w	8006b4a <_strtod_l+0x56a>
 8007020:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007178 <_strtod_l+0xb98>
 8007024:	4f60      	ldr	r7, [pc, #384]	; (80071a8 <_strtod_l+0xbc8>)
 8007026:	ed8d 7b06 	vstr	d7, [sp, #24]
 800702a:	2600      	movs	r6, #0
 800702c:	e7ae      	b.n	8006f8c <_strtod_l+0x9ac>
 800702e:	4f5f      	ldr	r7, [pc, #380]	; (80071ac <_strtod_l+0xbcc>)
 8007030:	2600      	movs	r6, #0
 8007032:	e7a7      	b.n	8006f84 <_strtod_l+0x9a4>
 8007034:	4b5d      	ldr	r3, [pc, #372]	; (80071ac <_strtod_l+0xbcc>)
 8007036:	4630      	mov	r0, r6
 8007038:	4639      	mov	r1, r7
 800703a:	2200      	movs	r2, #0
 800703c:	f7f9 fadc 	bl	80005f8 <__aeabi_dmul>
 8007040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007042:	4606      	mov	r6, r0
 8007044:	460f      	mov	r7, r1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d09c      	beq.n	8006f84 <_strtod_l+0x9a4>
 800704a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800704e:	e79d      	b.n	8006f8c <_strtod_l+0x9ac>
 8007050:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007180 <_strtod_l+0xba0>
 8007054:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007058:	ec57 6b17 	vmov	r6, r7, d7
 800705c:	e796      	b.n	8006f8c <_strtod_l+0x9ac>
 800705e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007062:	9b04      	ldr	r3, [sp, #16]
 8007064:	46ca      	mov	sl, r9
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1c2      	bne.n	8006ff0 <_strtod_l+0xa10>
 800706a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800706e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007070:	0d1b      	lsrs	r3, r3, #20
 8007072:	051b      	lsls	r3, r3, #20
 8007074:	429a      	cmp	r2, r3
 8007076:	d1bb      	bne.n	8006ff0 <_strtod_l+0xa10>
 8007078:	4630      	mov	r0, r6
 800707a:	4639      	mov	r1, r7
 800707c:	f7f9 fdf4 	bl	8000c68 <__aeabi_d2lz>
 8007080:	f7f9 fa8c 	bl	800059c <__aeabi_l2d>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4630      	mov	r0, r6
 800708a:	4639      	mov	r1, r7
 800708c:	f7f9 f8fc 	bl	8000288 <__aeabi_dsub>
 8007090:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007092:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007096:	ea43 0308 	orr.w	r3, r3, r8
 800709a:	4313      	orrs	r3, r2
 800709c:	4606      	mov	r6, r0
 800709e:	460f      	mov	r7, r1
 80070a0:	d054      	beq.n	800714c <_strtod_l+0xb6c>
 80070a2:	a339      	add	r3, pc, #228	; (adr r3, 8007188 <_strtod_l+0xba8>)
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	f7f9 fd18 	bl	8000adc <__aeabi_dcmplt>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	f47f ace5 	bne.w	8006a7c <_strtod_l+0x49c>
 80070b2:	a337      	add	r3, pc, #220	; (adr r3, 8007190 <_strtod_l+0xbb0>)
 80070b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b8:	4630      	mov	r0, r6
 80070ba:	4639      	mov	r1, r7
 80070bc:	f7f9 fd2c 	bl	8000b18 <__aeabi_dcmpgt>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d095      	beq.n	8006ff0 <_strtod_l+0xa10>
 80070c4:	e4da      	b.n	8006a7c <_strtod_l+0x49c>
 80070c6:	9b04      	ldr	r3, [sp, #16]
 80070c8:	b333      	cbz	r3, 8007118 <_strtod_l+0xb38>
 80070ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80070d0:	d822      	bhi.n	8007118 <_strtod_l+0xb38>
 80070d2:	a331      	add	r3, pc, #196	; (adr r3, 8007198 <_strtod_l+0xbb8>)
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	4630      	mov	r0, r6
 80070da:	4639      	mov	r1, r7
 80070dc:	f7f9 fd08 	bl	8000af0 <__aeabi_dcmple>
 80070e0:	b1a0      	cbz	r0, 800710c <_strtod_l+0xb2c>
 80070e2:	4639      	mov	r1, r7
 80070e4:	4630      	mov	r0, r6
 80070e6:	f7f9 fd37 	bl	8000b58 <__aeabi_d2uiz>
 80070ea:	2801      	cmp	r0, #1
 80070ec:	bf38      	it	cc
 80070ee:	2001      	movcc	r0, #1
 80070f0:	f7f9 fa08 	bl	8000504 <__aeabi_ui2d>
 80070f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070f6:	4606      	mov	r6, r0
 80070f8:	460f      	mov	r7, r1
 80070fa:	bb23      	cbnz	r3, 8007146 <_strtod_l+0xb66>
 80070fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007100:	9010      	str	r0, [sp, #64]	; 0x40
 8007102:	9311      	str	r3, [sp, #68]	; 0x44
 8007104:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007108:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800710c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800710e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007110:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007114:	1a9b      	subs	r3, r3, r2
 8007116:	930f      	str	r3, [sp, #60]	; 0x3c
 8007118:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800711c:	eeb0 0a48 	vmov.f32	s0, s16
 8007120:	eef0 0a68 	vmov.f32	s1, s17
 8007124:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007128:	f001 fb2c 	bl	8008784 <__ulp>
 800712c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007130:	ec53 2b10 	vmov	r2, r3, d0
 8007134:	f7f9 fa60 	bl	80005f8 <__aeabi_dmul>
 8007138:	ec53 2b18 	vmov	r2, r3, d8
 800713c:	f7f9 f8a6 	bl	800028c <__adddf3>
 8007140:	4680      	mov	r8, r0
 8007142:	4689      	mov	r9, r1
 8007144:	e78d      	b.n	8007062 <_strtod_l+0xa82>
 8007146:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800714a:	e7db      	b.n	8007104 <_strtod_l+0xb24>
 800714c:	a314      	add	r3, pc, #80	; (adr r3, 80071a0 <_strtod_l+0xbc0>)
 800714e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007152:	f7f9 fcc3 	bl	8000adc <__aeabi_dcmplt>
 8007156:	e7b3      	b.n	80070c0 <_strtod_l+0xae0>
 8007158:	2300      	movs	r3, #0
 800715a:	930a      	str	r3, [sp, #40]	; 0x28
 800715c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800715e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	f7ff ba7c 	b.w	800665e <_strtod_l+0x7e>
 8007166:	2a65      	cmp	r2, #101	; 0x65
 8007168:	f43f ab75 	beq.w	8006856 <_strtod_l+0x276>
 800716c:	2a45      	cmp	r2, #69	; 0x45
 800716e:	f43f ab72 	beq.w	8006856 <_strtod_l+0x276>
 8007172:	2301      	movs	r3, #1
 8007174:	f7ff bbaa 	b.w	80068cc <_strtod_l+0x2ec>
 8007178:	00000000 	.word	0x00000000
 800717c:	bff00000 	.word	0xbff00000
 8007180:	00000000 	.word	0x00000000
 8007184:	3ff00000 	.word	0x3ff00000
 8007188:	94a03595 	.word	0x94a03595
 800718c:	3fdfffff 	.word	0x3fdfffff
 8007190:	35afe535 	.word	0x35afe535
 8007194:	3fe00000 	.word	0x3fe00000
 8007198:	ffc00000 	.word	0xffc00000
 800719c:	41dfffff 	.word	0x41dfffff
 80071a0:	94a03595 	.word	0x94a03595
 80071a4:	3fcfffff 	.word	0x3fcfffff
 80071a8:	3ff00000 	.word	0x3ff00000
 80071ac:	3fe00000 	.word	0x3fe00000
 80071b0:	7ff00000 	.word	0x7ff00000
 80071b4:	7fe00000 	.word	0x7fe00000
 80071b8:	7c9fffff 	.word	0x7c9fffff
 80071bc:	7fefffff 	.word	0x7fefffff

080071c0 <strtof>:
 80071c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8007288 <strtof+0xc8>
 80071c8:	4b2a      	ldr	r3, [pc, #168]	; (8007274 <strtof+0xb4>)
 80071ca:	460a      	mov	r2, r1
 80071cc:	ed2d 8b02 	vpush	{d8}
 80071d0:	4601      	mov	r1, r0
 80071d2:	f8d8 0000 	ldr.w	r0, [r8]
 80071d6:	f7ff fa03 	bl	80065e0 <_strtod_l>
 80071da:	ec55 4b10 	vmov	r4, r5, d0
 80071de:	ee10 2a10 	vmov	r2, s0
 80071e2:	ee10 0a10 	vmov	r0, s0
 80071e6:	462b      	mov	r3, r5
 80071e8:	4629      	mov	r1, r5
 80071ea:	f7f9 fc9f 	bl	8000b2c <__aeabi_dcmpun>
 80071ee:	b190      	cbz	r0, 8007216 <strtof+0x56>
 80071f0:	2d00      	cmp	r5, #0
 80071f2:	4821      	ldr	r0, [pc, #132]	; (8007278 <strtof+0xb8>)
 80071f4:	da09      	bge.n	800720a <strtof+0x4a>
 80071f6:	f000 facb 	bl	8007790 <nanf>
 80071fa:	eeb1 8a40 	vneg.f32	s16, s0
 80071fe:	eeb0 0a48 	vmov.f32	s0, s16
 8007202:	ecbd 8b02 	vpop	{d8}
 8007206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800720a:	ecbd 8b02 	vpop	{d8}
 800720e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007212:	f000 babd 	b.w	8007790 <nanf>
 8007216:	4620      	mov	r0, r4
 8007218:	4629      	mov	r1, r5
 800721a:	f7f9 fcbd 	bl	8000b98 <__aeabi_d2f>
 800721e:	ee08 0a10 	vmov	s16, r0
 8007222:	eddf 7a16 	vldr	s15, [pc, #88]	; 800727c <strtof+0xbc>
 8007226:	eeb0 7ac8 	vabs.f32	s14, s16
 800722a:	eeb4 7a67 	vcmp.f32	s14, s15
 800722e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007232:	dd11      	ble.n	8007258 <strtof+0x98>
 8007234:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8007238:	4b11      	ldr	r3, [pc, #68]	; (8007280 <strtof+0xc0>)
 800723a:	f04f 32ff 	mov.w	r2, #4294967295
 800723e:	4620      	mov	r0, r4
 8007240:	4639      	mov	r1, r7
 8007242:	f7f9 fc73 	bl	8000b2c <__aeabi_dcmpun>
 8007246:	b980      	cbnz	r0, 800726a <strtof+0xaa>
 8007248:	4b0d      	ldr	r3, [pc, #52]	; (8007280 <strtof+0xc0>)
 800724a:	f04f 32ff 	mov.w	r2, #4294967295
 800724e:	4620      	mov	r0, r4
 8007250:	4639      	mov	r1, r7
 8007252:	f7f9 fc4d 	bl	8000af0 <__aeabi_dcmple>
 8007256:	b940      	cbnz	r0, 800726a <strtof+0xaa>
 8007258:	ee18 3a10 	vmov	r3, s16
 800725c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007260:	d1cd      	bne.n	80071fe <strtof+0x3e>
 8007262:	4b08      	ldr	r3, [pc, #32]	; (8007284 <strtof+0xc4>)
 8007264:	402b      	ands	r3, r5
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0c9      	beq.n	80071fe <strtof+0x3e>
 800726a:	f8d8 3000 	ldr.w	r3, [r8]
 800726e:	2222      	movs	r2, #34	; 0x22
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	e7c4      	b.n	80071fe <strtof+0x3e>
 8007274:	20000018 	.word	0x20000018
 8007278:	08009796 	.word	0x08009796
 800727c:	7f7fffff 	.word	0x7f7fffff
 8007280:	7fefffff 	.word	0x7fefffff
 8007284:	7ff00000 	.word	0x7ff00000
 8007288:	200001d0 	.word	0x200001d0

0800728c <_strtoul_l.constprop.0>:
 800728c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007290:	4f36      	ldr	r7, [pc, #216]	; (800736c <_strtoul_l.constprop.0+0xe0>)
 8007292:	4686      	mov	lr, r0
 8007294:	460d      	mov	r5, r1
 8007296:	4628      	mov	r0, r5
 8007298:	f815 4b01 	ldrb.w	r4, [r5], #1
 800729c:	5d3e      	ldrb	r6, [r7, r4]
 800729e:	f016 0608 	ands.w	r6, r6, #8
 80072a2:	d1f8      	bne.n	8007296 <_strtoul_l.constprop.0+0xa>
 80072a4:	2c2d      	cmp	r4, #45	; 0x2d
 80072a6:	d130      	bne.n	800730a <_strtoul_l.constprop.0+0x7e>
 80072a8:	782c      	ldrb	r4, [r5, #0]
 80072aa:	2601      	movs	r6, #1
 80072ac:	1c85      	adds	r5, r0, #2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d057      	beq.n	8007362 <_strtoul_l.constprop.0+0xd6>
 80072b2:	2b10      	cmp	r3, #16
 80072b4:	d109      	bne.n	80072ca <_strtoul_l.constprop.0+0x3e>
 80072b6:	2c30      	cmp	r4, #48	; 0x30
 80072b8:	d107      	bne.n	80072ca <_strtoul_l.constprop.0+0x3e>
 80072ba:	7828      	ldrb	r0, [r5, #0]
 80072bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80072c0:	2858      	cmp	r0, #88	; 0x58
 80072c2:	d149      	bne.n	8007358 <_strtoul_l.constprop.0+0xcc>
 80072c4:	786c      	ldrb	r4, [r5, #1]
 80072c6:	2310      	movs	r3, #16
 80072c8:	3502      	adds	r5, #2
 80072ca:	f04f 38ff 	mov.w	r8, #4294967295
 80072ce:	2700      	movs	r7, #0
 80072d0:	fbb8 f8f3 	udiv	r8, r8, r3
 80072d4:	fb03 f908 	mul.w	r9, r3, r8
 80072d8:	ea6f 0909 	mvn.w	r9, r9
 80072dc:	4638      	mov	r0, r7
 80072de:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80072e2:	f1bc 0f09 	cmp.w	ip, #9
 80072e6:	d815      	bhi.n	8007314 <_strtoul_l.constprop.0+0x88>
 80072e8:	4664      	mov	r4, ip
 80072ea:	42a3      	cmp	r3, r4
 80072ec:	dd23      	ble.n	8007336 <_strtoul_l.constprop.0+0xaa>
 80072ee:	f1b7 3fff 	cmp.w	r7, #4294967295
 80072f2:	d007      	beq.n	8007304 <_strtoul_l.constprop.0+0x78>
 80072f4:	4580      	cmp	r8, r0
 80072f6:	d31b      	bcc.n	8007330 <_strtoul_l.constprop.0+0xa4>
 80072f8:	d101      	bne.n	80072fe <_strtoul_l.constprop.0+0x72>
 80072fa:	45a1      	cmp	r9, r4
 80072fc:	db18      	blt.n	8007330 <_strtoul_l.constprop.0+0xa4>
 80072fe:	fb00 4003 	mla	r0, r0, r3, r4
 8007302:	2701      	movs	r7, #1
 8007304:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007308:	e7e9      	b.n	80072de <_strtoul_l.constprop.0+0x52>
 800730a:	2c2b      	cmp	r4, #43	; 0x2b
 800730c:	bf04      	itt	eq
 800730e:	782c      	ldrbeq	r4, [r5, #0]
 8007310:	1c85      	addeq	r5, r0, #2
 8007312:	e7cc      	b.n	80072ae <_strtoul_l.constprop.0+0x22>
 8007314:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007318:	f1bc 0f19 	cmp.w	ip, #25
 800731c:	d801      	bhi.n	8007322 <_strtoul_l.constprop.0+0x96>
 800731e:	3c37      	subs	r4, #55	; 0x37
 8007320:	e7e3      	b.n	80072ea <_strtoul_l.constprop.0+0x5e>
 8007322:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007326:	f1bc 0f19 	cmp.w	ip, #25
 800732a:	d804      	bhi.n	8007336 <_strtoul_l.constprop.0+0xaa>
 800732c:	3c57      	subs	r4, #87	; 0x57
 800732e:	e7dc      	b.n	80072ea <_strtoul_l.constprop.0+0x5e>
 8007330:	f04f 37ff 	mov.w	r7, #4294967295
 8007334:	e7e6      	b.n	8007304 <_strtoul_l.constprop.0+0x78>
 8007336:	1c7b      	adds	r3, r7, #1
 8007338:	d106      	bne.n	8007348 <_strtoul_l.constprop.0+0xbc>
 800733a:	2322      	movs	r3, #34	; 0x22
 800733c:	f8ce 3000 	str.w	r3, [lr]
 8007340:	4638      	mov	r0, r7
 8007342:	b932      	cbnz	r2, 8007352 <_strtoul_l.constprop.0+0xc6>
 8007344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007348:	b106      	cbz	r6, 800734c <_strtoul_l.constprop.0+0xc0>
 800734a:	4240      	negs	r0, r0
 800734c:	2a00      	cmp	r2, #0
 800734e:	d0f9      	beq.n	8007344 <_strtoul_l.constprop.0+0xb8>
 8007350:	b107      	cbz	r7, 8007354 <_strtoul_l.constprop.0+0xc8>
 8007352:	1e69      	subs	r1, r5, #1
 8007354:	6011      	str	r1, [r2, #0]
 8007356:	e7f5      	b.n	8007344 <_strtoul_l.constprop.0+0xb8>
 8007358:	2430      	movs	r4, #48	; 0x30
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1b5      	bne.n	80072ca <_strtoul_l.constprop.0+0x3e>
 800735e:	2308      	movs	r3, #8
 8007360:	e7b3      	b.n	80072ca <_strtoul_l.constprop.0+0x3e>
 8007362:	2c30      	cmp	r4, #48	; 0x30
 8007364:	d0a9      	beq.n	80072ba <_strtoul_l.constprop.0+0x2e>
 8007366:	230a      	movs	r3, #10
 8007368:	e7af      	b.n	80072ca <_strtoul_l.constprop.0+0x3e>
 800736a:	bf00      	nop
 800736c:	080095f9 	.word	0x080095f9

08007370 <strtoul>:
 8007370:	4613      	mov	r3, r2
 8007372:	460a      	mov	r2, r1
 8007374:	4601      	mov	r1, r0
 8007376:	4802      	ldr	r0, [pc, #8]	; (8007380 <strtoul+0x10>)
 8007378:	6800      	ldr	r0, [r0, #0]
 800737a:	f7ff bf87 	b.w	800728c <_strtoul_l.constprop.0>
 800737e:	bf00      	nop
 8007380:	200001d0 	.word	0x200001d0

08007384 <std>:
 8007384:	2300      	movs	r3, #0
 8007386:	b510      	push	{r4, lr}
 8007388:	4604      	mov	r4, r0
 800738a:	e9c0 3300 	strd	r3, r3, [r0]
 800738e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007392:	6083      	str	r3, [r0, #8]
 8007394:	8181      	strh	r1, [r0, #12]
 8007396:	6643      	str	r3, [r0, #100]	; 0x64
 8007398:	81c2      	strh	r2, [r0, #14]
 800739a:	6183      	str	r3, [r0, #24]
 800739c:	4619      	mov	r1, r3
 800739e:	2208      	movs	r2, #8
 80073a0:	305c      	adds	r0, #92	; 0x5c
 80073a2:	f000 f8f4 	bl	800758e <memset>
 80073a6:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <std+0x58>)
 80073a8:	6263      	str	r3, [r4, #36]	; 0x24
 80073aa:	4b0d      	ldr	r3, [pc, #52]	; (80073e0 <std+0x5c>)
 80073ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80073ae:	4b0d      	ldr	r3, [pc, #52]	; (80073e4 <std+0x60>)
 80073b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073b2:	4b0d      	ldr	r3, [pc, #52]	; (80073e8 <std+0x64>)
 80073b4:	6323      	str	r3, [r4, #48]	; 0x30
 80073b6:	4b0d      	ldr	r3, [pc, #52]	; (80073ec <std+0x68>)
 80073b8:	6224      	str	r4, [r4, #32]
 80073ba:	429c      	cmp	r4, r3
 80073bc:	d006      	beq.n	80073cc <std+0x48>
 80073be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80073c2:	4294      	cmp	r4, r2
 80073c4:	d002      	beq.n	80073cc <std+0x48>
 80073c6:	33d0      	adds	r3, #208	; 0xd0
 80073c8:	429c      	cmp	r4, r3
 80073ca:	d105      	bne.n	80073d8 <std+0x54>
 80073cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d4:	f000 b9c2 	b.w	800775c <__retarget_lock_init_recursive>
 80073d8:	bd10      	pop	{r4, pc}
 80073da:	bf00      	nop
 80073dc:	08007509 	.word	0x08007509
 80073e0:	0800752b 	.word	0x0800752b
 80073e4:	08007563 	.word	0x08007563
 80073e8:	08007587 	.word	0x08007587
 80073ec:	200005f8 	.word	0x200005f8

080073f0 <stdio_exit_handler>:
 80073f0:	4a02      	ldr	r2, [pc, #8]	; (80073fc <stdio_exit_handler+0xc>)
 80073f2:	4903      	ldr	r1, [pc, #12]	; (8007400 <stdio_exit_handler+0x10>)
 80073f4:	4803      	ldr	r0, [pc, #12]	; (8007404 <stdio_exit_handler+0x14>)
 80073f6:	f000 b869 	b.w	80074cc <_fwalk_sglue>
 80073fa:	bf00      	nop
 80073fc:	2000000c 	.word	0x2000000c
 8007400:	08008b2d 	.word	0x08008b2d
 8007404:	20000184 	.word	0x20000184

08007408 <cleanup_stdio>:
 8007408:	6841      	ldr	r1, [r0, #4]
 800740a:	4b0c      	ldr	r3, [pc, #48]	; (800743c <cleanup_stdio+0x34>)
 800740c:	4299      	cmp	r1, r3
 800740e:	b510      	push	{r4, lr}
 8007410:	4604      	mov	r4, r0
 8007412:	d001      	beq.n	8007418 <cleanup_stdio+0x10>
 8007414:	f001 fb8a 	bl	8008b2c <_fflush_r>
 8007418:	68a1      	ldr	r1, [r4, #8]
 800741a:	4b09      	ldr	r3, [pc, #36]	; (8007440 <cleanup_stdio+0x38>)
 800741c:	4299      	cmp	r1, r3
 800741e:	d002      	beq.n	8007426 <cleanup_stdio+0x1e>
 8007420:	4620      	mov	r0, r4
 8007422:	f001 fb83 	bl	8008b2c <_fflush_r>
 8007426:	68e1      	ldr	r1, [r4, #12]
 8007428:	4b06      	ldr	r3, [pc, #24]	; (8007444 <cleanup_stdio+0x3c>)
 800742a:	4299      	cmp	r1, r3
 800742c:	d004      	beq.n	8007438 <cleanup_stdio+0x30>
 800742e:	4620      	mov	r0, r4
 8007430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007434:	f001 bb7a 	b.w	8008b2c <_fflush_r>
 8007438:	bd10      	pop	{r4, pc}
 800743a:	bf00      	nop
 800743c:	200005f8 	.word	0x200005f8
 8007440:	20000660 	.word	0x20000660
 8007444:	200006c8 	.word	0x200006c8

08007448 <global_stdio_init.part.0>:
 8007448:	b510      	push	{r4, lr}
 800744a:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <global_stdio_init.part.0+0x30>)
 800744c:	4c0b      	ldr	r4, [pc, #44]	; (800747c <global_stdio_init.part.0+0x34>)
 800744e:	4a0c      	ldr	r2, [pc, #48]	; (8007480 <global_stdio_init.part.0+0x38>)
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	4620      	mov	r0, r4
 8007454:	2200      	movs	r2, #0
 8007456:	2104      	movs	r1, #4
 8007458:	f7ff ff94 	bl	8007384 <std>
 800745c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007460:	2201      	movs	r2, #1
 8007462:	2109      	movs	r1, #9
 8007464:	f7ff ff8e 	bl	8007384 <std>
 8007468:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800746c:	2202      	movs	r2, #2
 800746e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007472:	2112      	movs	r1, #18
 8007474:	f7ff bf86 	b.w	8007384 <std>
 8007478:	20000730 	.word	0x20000730
 800747c:	200005f8 	.word	0x200005f8
 8007480:	080073f1 	.word	0x080073f1

08007484 <__sfp_lock_acquire>:
 8007484:	4801      	ldr	r0, [pc, #4]	; (800748c <__sfp_lock_acquire+0x8>)
 8007486:	f000 b96a 	b.w	800775e <__retarget_lock_acquire_recursive>
 800748a:	bf00      	nop
 800748c:	20000739 	.word	0x20000739

08007490 <__sfp_lock_release>:
 8007490:	4801      	ldr	r0, [pc, #4]	; (8007498 <__sfp_lock_release+0x8>)
 8007492:	f000 b965 	b.w	8007760 <__retarget_lock_release_recursive>
 8007496:	bf00      	nop
 8007498:	20000739 	.word	0x20000739

0800749c <__sinit>:
 800749c:	b510      	push	{r4, lr}
 800749e:	4604      	mov	r4, r0
 80074a0:	f7ff fff0 	bl	8007484 <__sfp_lock_acquire>
 80074a4:	6a23      	ldr	r3, [r4, #32]
 80074a6:	b11b      	cbz	r3, 80074b0 <__sinit+0x14>
 80074a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ac:	f7ff bff0 	b.w	8007490 <__sfp_lock_release>
 80074b0:	4b04      	ldr	r3, [pc, #16]	; (80074c4 <__sinit+0x28>)
 80074b2:	6223      	str	r3, [r4, #32]
 80074b4:	4b04      	ldr	r3, [pc, #16]	; (80074c8 <__sinit+0x2c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1f5      	bne.n	80074a8 <__sinit+0xc>
 80074bc:	f7ff ffc4 	bl	8007448 <global_stdio_init.part.0>
 80074c0:	e7f2      	b.n	80074a8 <__sinit+0xc>
 80074c2:	bf00      	nop
 80074c4:	08007409 	.word	0x08007409
 80074c8:	20000730 	.word	0x20000730

080074cc <_fwalk_sglue>:
 80074cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074d0:	4607      	mov	r7, r0
 80074d2:	4688      	mov	r8, r1
 80074d4:	4614      	mov	r4, r2
 80074d6:	2600      	movs	r6, #0
 80074d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074dc:	f1b9 0901 	subs.w	r9, r9, #1
 80074e0:	d505      	bpl.n	80074ee <_fwalk_sglue+0x22>
 80074e2:	6824      	ldr	r4, [r4, #0]
 80074e4:	2c00      	cmp	r4, #0
 80074e6:	d1f7      	bne.n	80074d8 <_fwalk_sglue+0xc>
 80074e8:	4630      	mov	r0, r6
 80074ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ee:	89ab      	ldrh	r3, [r5, #12]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d907      	bls.n	8007504 <_fwalk_sglue+0x38>
 80074f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074f8:	3301      	adds	r3, #1
 80074fa:	d003      	beq.n	8007504 <_fwalk_sglue+0x38>
 80074fc:	4629      	mov	r1, r5
 80074fe:	4638      	mov	r0, r7
 8007500:	47c0      	blx	r8
 8007502:	4306      	orrs	r6, r0
 8007504:	3568      	adds	r5, #104	; 0x68
 8007506:	e7e9      	b.n	80074dc <_fwalk_sglue+0x10>

08007508 <__sread>:
 8007508:	b510      	push	{r4, lr}
 800750a:	460c      	mov	r4, r1
 800750c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007510:	f000 f8d6 	bl	80076c0 <_read_r>
 8007514:	2800      	cmp	r0, #0
 8007516:	bfab      	itete	ge
 8007518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800751a:	89a3      	ldrhlt	r3, [r4, #12]
 800751c:	181b      	addge	r3, r3, r0
 800751e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007522:	bfac      	ite	ge
 8007524:	6563      	strge	r3, [r4, #84]	; 0x54
 8007526:	81a3      	strhlt	r3, [r4, #12]
 8007528:	bd10      	pop	{r4, pc}

0800752a <__swrite>:
 800752a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800752e:	461f      	mov	r7, r3
 8007530:	898b      	ldrh	r3, [r1, #12]
 8007532:	05db      	lsls	r3, r3, #23
 8007534:	4605      	mov	r5, r0
 8007536:	460c      	mov	r4, r1
 8007538:	4616      	mov	r6, r2
 800753a:	d505      	bpl.n	8007548 <__swrite+0x1e>
 800753c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007540:	2302      	movs	r3, #2
 8007542:	2200      	movs	r2, #0
 8007544:	f000 f8aa 	bl	800769c <_lseek_r>
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800754e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007552:	81a3      	strh	r3, [r4, #12]
 8007554:	4632      	mov	r2, r6
 8007556:	463b      	mov	r3, r7
 8007558:	4628      	mov	r0, r5
 800755a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800755e:	f000 b8c1 	b.w	80076e4 <_write_r>

08007562 <__sseek>:
 8007562:	b510      	push	{r4, lr}
 8007564:	460c      	mov	r4, r1
 8007566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756a:	f000 f897 	bl	800769c <_lseek_r>
 800756e:	1c43      	adds	r3, r0, #1
 8007570:	89a3      	ldrh	r3, [r4, #12]
 8007572:	bf15      	itete	ne
 8007574:	6560      	strne	r0, [r4, #84]	; 0x54
 8007576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800757a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800757e:	81a3      	strheq	r3, [r4, #12]
 8007580:	bf18      	it	ne
 8007582:	81a3      	strhne	r3, [r4, #12]
 8007584:	bd10      	pop	{r4, pc}

08007586 <__sclose>:
 8007586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800758a:	f000 b877 	b.w	800767c <_close_r>

0800758e <memset>:
 800758e:	4402      	add	r2, r0
 8007590:	4603      	mov	r3, r0
 8007592:	4293      	cmp	r3, r2
 8007594:	d100      	bne.n	8007598 <memset+0xa>
 8007596:	4770      	bx	lr
 8007598:	f803 1b01 	strb.w	r1, [r3], #1
 800759c:	e7f9      	b.n	8007592 <memset+0x4>

0800759e <strncmp>:
 800759e:	b510      	push	{r4, lr}
 80075a0:	b16a      	cbz	r2, 80075be <strncmp+0x20>
 80075a2:	3901      	subs	r1, #1
 80075a4:	1884      	adds	r4, r0, r2
 80075a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d103      	bne.n	80075ba <strncmp+0x1c>
 80075b2:	42a0      	cmp	r0, r4
 80075b4:	d001      	beq.n	80075ba <strncmp+0x1c>
 80075b6:	2a00      	cmp	r2, #0
 80075b8:	d1f5      	bne.n	80075a6 <strncmp+0x8>
 80075ba:	1ad0      	subs	r0, r2, r3
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	4610      	mov	r0, r2
 80075c0:	e7fc      	b.n	80075bc <strncmp+0x1e>
	...

080075c4 <strtok>:
 80075c4:	4b16      	ldr	r3, [pc, #88]	; (8007620 <strtok+0x5c>)
 80075c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075c8:	681e      	ldr	r6, [r3, #0]
 80075ca:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80075cc:	4605      	mov	r5, r0
 80075ce:	b9fc      	cbnz	r4, 8007610 <strtok+0x4c>
 80075d0:	2050      	movs	r0, #80	; 0x50
 80075d2:	9101      	str	r1, [sp, #4]
 80075d4:	f000 fca4 	bl	8007f20 <malloc>
 80075d8:	9901      	ldr	r1, [sp, #4]
 80075da:	6470      	str	r0, [r6, #68]	; 0x44
 80075dc:	4602      	mov	r2, r0
 80075de:	b920      	cbnz	r0, 80075ea <strtok+0x26>
 80075e0:	4b10      	ldr	r3, [pc, #64]	; (8007624 <strtok+0x60>)
 80075e2:	4811      	ldr	r0, [pc, #68]	; (8007628 <strtok+0x64>)
 80075e4:	215b      	movs	r1, #91	; 0x5b
 80075e6:	f000 f8d9 	bl	800779c <__assert_func>
 80075ea:	e9c0 4400 	strd	r4, r4, [r0]
 80075ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80075f2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80075f6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80075fa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80075fe:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007602:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007606:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800760a:	6184      	str	r4, [r0, #24]
 800760c:	7704      	strb	r4, [r0, #28]
 800760e:	6244      	str	r4, [r0, #36]	; 0x24
 8007610:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8007612:	2301      	movs	r3, #1
 8007614:	4628      	mov	r0, r5
 8007616:	b002      	add	sp, #8
 8007618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800761c:	f000 b806 	b.w	800762c <__strtok_r>
 8007620:	200001d0 	.word	0x200001d0
 8007624:	08009524 	.word	0x08009524
 8007628:	080096f9 	.word	0x080096f9

0800762c <__strtok_r>:
 800762c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800762e:	b908      	cbnz	r0, 8007634 <__strtok_r+0x8>
 8007630:	6810      	ldr	r0, [r2, #0]
 8007632:	b188      	cbz	r0, 8007658 <__strtok_r+0x2c>
 8007634:	4604      	mov	r4, r0
 8007636:	4620      	mov	r0, r4
 8007638:	f814 5b01 	ldrb.w	r5, [r4], #1
 800763c:	460f      	mov	r7, r1
 800763e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007642:	b91e      	cbnz	r6, 800764c <__strtok_r+0x20>
 8007644:	b965      	cbnz	r5, 8007660 <__strtok_r+0x34>
 8007646:	6015      	str	r5, [r2, #0]
 8007648:	4628      	mov	r0, r5
 800764a:	e005      	b.n	8007658 <__strtok_r+0x2c>
 800764c:	42b5      	cmp	r5, r6
 800764e:	d1f6      	bne.n	800763e <__strtok_r+0x12>
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1f0      	bne.n	8007636 <__strtok_r+0xa>
 8007654:	6014      	str	r4, [r2, #0]
 8007656:	7003      	strb	r3, [r0, #0]
 8007658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800765a:	461c      	mov	r4, r3
 800765c:	e00c      	b.n	8007678 <__strtok_r+0x4c>
 800765e:	b915      	cbnz	r5, 8007666 <__strtok_r+0x3a>
 8007660:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007664:	460e      	mov	r6, r1
 8007666:	f816 5b01 	ldrb.w	r5, [r6], #1
 800766a:	42ab      	cmp	r3, r5
 800766c:	d1f7      	bne.n	800765e <__strtok_r+0x32>
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0f3      	beq.n	800765a <__strtok_r+0x2e>
 8007672:	2300      	movs	r3, #0
 8007674:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007678:	6014      	str	r4, [r2, #0]
 800767a:	e7ed      	b.n	8007658 <__strtok_r+0x2c>

0800767c <_close_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4d06      	ldr	r5, [pc, #24]	; (8007698 <_close_r+0x1c>)
 8007680:	2300      	movs	r3, #0
 8007682:	4604      	mov	r4, r0
 8007684:	4608      	mov	r0, r1
 8007686:	602b      	str	r3, [r5, #0]
 8007688:	f7fa ff85 	bl	8002596 <_close>
 800768c:	1c43      	adds	r3, r0, #1
 800768e:	d102      	bne.n	8007696 <_close_r+0x1a>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	b103      	cbz	r3, 8007696 <_close_r+0x1a>
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	bd38      	pop	{r3, r4, r5, pc}
 8007698:	20000734 	.word	0x20000734

0800769c <_lseek_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4d07      	ldr	r5, [pc, #28]	; (80076bc <_lseek_r+0x20>)
 80076a0:	4604      	mov	r4, r0
 80076a2:	4608      	mov	r0, r1
 80076a4:	4611      	mov	r1, r2
 80076a6:	2200      	movs	r2, #0
 80076a8:	602a      	str	r2, [r5, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	f7fa ff9a 	bl	80025e4 <_lseek>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_lseek_r+0x1e>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_lseek_r+0x1e>
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	20000734 	.word	0x20000734

080076c0 <_read_r>:
 80076c0:	b538      	push	{r3, r4, r5, lr}
 80076c2:	4d07      	ldr	r5, [pc, #28]	; (80076e0 <_read_r+0x20>)
 80076c4:	4604      	mov	r4, r0
 80076c6:	4608      	mov	r0, r1
 80076c8:	4611      	mov	r1, r2
 80076ca:	2200      	movs	r2, #0
 80076cc:	602a      	str	r2, [r5, #0]
 80076ce:	461a      	mov	r2, r3
 80076d0:	f7fa ff28 	bl	8002524 <_read>
 80076d4:	1c43      	adds	r3, r0, #1
 80076d6:	d102      	bne.n	80076de <_read_r+0x1e>
 80076d8:	682b      	ldr	r3, [r5, #0]
 80076da:	b103      	cbz	r3, 80076de <_read_r+0x1e>
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	bd38      	pop	{r3, r4, r5, pc}
 80076e0:	20000734 	.word	0x20000734

080076e4 <_write_r>:
 80076e4:	b538      	push	{r3, r4, r5, lr}
 80076e6:	4d07      	ldr	r5, [pc, #28]	; (8007704 <_write_r+0x20>)
 80076e8:	4604      	mov	r4, r0
 80076ea:	4608      	mov	r0, r1
 80076ec:	4611      	mov	r1, r2
 80076ee:	2200      	movs	r2, #0
 80076f0:	602a      	str	r2, [r5, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	f7fa ff33 	bl	800255e <_write>
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d102      	bne.n	8007702 <_write_r+0x1e>
 80076fc:	682b      	ldr	r3, [r5, #0]
 80076fe:	b103      	cbz	r3, 8007702 <_write_r+0x1e>
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	bd38      	pop	{r3, r4, r5, pc}
 8007704:	20000734 	.word	0x20000734

08007708 <__errno>:
 8007708:	4b01      	ldr	r3, [pc, #4]	; (8007710 <__errno+0x8>)
 800770a:	6818      	ldr	r0, [r3, #0]
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	200001d0 	.word	0x200001d0

08007714 <__libc_init_array>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	4d0d      	ldr	r5, [pc, #52]	; (800774c <__libc_init_array+0x38>)
 8007718:	4c0d      	ldr	r4, [pc, #52]	; (8007750 <__libc_init_array+0x3c>)
 800771a:	1b64      	subs	r4, r4, r5
 800771c:	10a4      	asrs	r4, r4, #2
 800771e:	2600      	movs	r6, #0
 8007720:	42a6      	cmp	r6, r4
 8007722:	d109      	bne.n	8007738 <__libc_init_array+0x24>
 8007724:	4d0b      	ldr	r5, [pc, #44]	; (8007754 <__libc_init_array+0x40>)
 8007726:	4c0c      	ldr	r4, [pc, #48]	; (8007758 <__libc_init_array+0x44>)
 8007728:	f001 fe98 	bl	800945c <_init>
 800772c:	1b64      	subs	r4, r4, r5
 800772e:	10a4      	asrs	r4, r4, #2
 8007730:	2600      	movs	r6, #0
 8007732:	42a6      	cmp	r6, r4
 8007734:	d105      	bne.n	8007742 <__libc_init_array+0x2e>
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	f855 3b04 	ldr.w	r3, [r5], #4
 800773c:	4798      	blx	r3
 800773e:	3601      	adds	r6, #1
 8007740:	e7ee      	b.n	8007720 <__libc_init_array+0xc>
 8007742:	f855 3b04 	ldr.w	r3, [r5], #4
 8007746:	4798      	blx	r3
 8007748:	3601      	adds	r6, #1
 800774a:	e7f2      	b.n	8007732 <__libc_init_array+0x1e>
 800774c:	080099a0 	.word	0x080099a0
 8007750:	080099a0 	.word	0x080099a0
 8007754:	080099a0 	.word	0x080099a0
 8007758:	080099a4 	.word	0x080099a4

0800775c <__retarget_lock_init_recursive>:
 800775c:	4770      	bx	lr

0800775e <__retarget_lock_acquire_recursive>:
 800775e:	4770      	bx	lr

08007760 <__retarget_lock_release_recursive>:
 8007760:	4770      	bx	lr

08007762 <memcpy>:
 8007762:	440a      	add	r2, r1
 8007764:	4291      	cmp	r1, r2
 8007766:	f100 33ff 	add.w	r3, r0, #4294967295
 800776a:	d100      	bne.n	800776e <memcpy+0xc>
 800776c:	4770      	bx	lr
 800776e:	b510      	push	{r4, lr}
 8007770:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007774:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007778:	4291      	cmp	r1, r2
 800777a:	d1f9      	bne.n	8007770 <memcpy+0xe>
 800777c:	bd10      	pop	{r4, pc}
	...

08007780 <nan>:
 8007780:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007788 <nan+0x8>
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	00000000 	.word	0x00000000
 800778c:	7ff80000 	.word	0x7ff80000

08007790 <nanf>:
 8007790:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007798 <nanf+0x8>
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	7fc00000 	.word	0x7fc00000

0800779c <__assert_func>:
 800779c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800779e:	4614      	mov	r4, r2
 80077a0:	461a      	mov	r2, r3
 80077a2:	4b09      	ldr	r3, [pc, #36]	; (80077c8 <__assert_func+0x2c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4605      	mov	r5, r0
 80077a8:	68d8      	ldr	r0, [r3, #12]
 80077aa:	b14c      	cbz	r4, 80077c0 <__assert_func+0x24>
 80077ac:	4b07      	ldr	r3, [pc, #28]	; (80077cc <__assert_func+0x30>)
 80077ae:	9100      	str	r1, [sp, #0]
 80077b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077b4:	4906      	ldr	r1, [pc, #24]	; (80077d0 <__assert_func+0x34>)
 80077b6:	462b      	mov	r3, r5
 80077b8:	f001 f9e0 	bl	8008b7c <fiprintf>
 80077bc:	f001 fa00 	bl	8008bc0 <abort>
 80077c0:	4b04      	ldr	r3, [pc, #16]	; (80077d4 <__assert_func+0x38>)
 80077c2:	461c      	mov	r4, r3
 80077c4:	e7f3      	b.n	80077ae <__assert_func+0x12>
 80077c6:	bf00      	nop
 80077c8:	200001d0 	.word	0x200001d0
 80077cc:	0800975b 	.word	0x0800975b
 80077d0:	08009768 	.word	0x08009768
 80077d4:	08009796 	.word	0x08009796

080077d8 <_free_r>:
 80077d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077da:	2900      	cmp	r1, #0
 80077dc:	d044      	beq.n	8007868 <_free_r+0x90>
 80077de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077e2:	9001      	str	r0, [sp, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f1a1 0404 	sub.w	r4, r1, #4
 80077ea:	bfb8      	it	lt
 80077ec:	18e4      	addlt	r4, r4, r3
 80077ee:	f000 fc51 	bl	8008094 <__malloc_lock>
 80077f2:	4a1e      	ldr	r2, [pc, #120]	; (800786c <_free_r+0x94>)
 80077f4:	9801      	ldr	r0, [sp, #4]
 80077f6:	6813      	ldr	r3, [r2, #0]
 80077f8:	b933      	cbnz	r3, 8007808 <_free_r+0x30>
 80077fa:	6063      	str	r3, [r4, #4]
 80077fc:	6014      	str	r4, [r2, #0]
 80077fe:	b003      	add	sp, #12
 8007800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007804:	f000 bc4c 	b.w	80080a0 <__malloc_unlock>
 8007808:	42a3      	cmp	r3, r4
 800780a:	d908      	bls.n	800781e <_free_r+0x46>
 800780c:	6825      	ldr	r5, [r4, #0]
 800780e:	1961      	adds	r1, r4, r5
 8007810:	428b      	cmp	r3, r1
 8007812:	bf01      	itttt	eq
 8007814:	6819      	ldreq	r1, [r3, #0]
 8007816:	685b      	ldreq	r3, [r3, #4]
 8007818:	1949      	addeq	r1, r1, r5
 800781a:	6021      	streq	r1, [r4, #0]
 800781c:	e7ed      	b.n	80077fa <_free_r+0x22>
 800781e:	461a      	mov	r2, r3
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	b10b      	cbz	r3, 8007828 <_free_r+0x50>
 8007824:	42a3      	cmp	r3, r4
 8007826:	d9fa      	bls.n	800781e <_free_r+0x46>
 8007828:	6811      	ldr	r1, [r2, #0]
 800782a:	1855      	adds	r5, r2, r1
 800782c:	42a5      	cmp	r5, r4
 800782e:	d10b      	bne.n	8007848 <_free_r+0x70>
 8007830:	6824      	ldr	r4, [r4, #0]
 8007832:	4421      	add	r1, r4
 8007834:	1854      	adds	r4, r2, r1
 8007836:	42a3      	cmp	r3, r4
 8007838:	6011      	str	r1, [r2, #0]
 800783a:	d1e0      	bne.n	80077fe <_free_r+0x26>
 800783c:	681c      	ldr	r4, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	6053      	str	r3, [r2, #4]
 8007842:	440c      	add	r4, r1
 8007844:	6014      	str	r4, [r2, #0]
 8007846:	e7da      	b.n	80077fe <_free_r+0x26>
 8007848:	d902      	bls.n	8007850 <_free_r+0x78>
 800784a:	230c      	movs	r3, #12
 800784c:	6003      	str	r3, [r0, #0]
 800784e:	e7d6      	b.n	80077fe <_free_r+0x26>
 8007850:	6825      	ldr	r5, [r4, #0]
 8007852:	1961      	adds	r1, r4, r5
 8007854:	428b      	cmp	r3, r1
 8007856:	bf04      	itt	eq
 8007858:	6819      	ldreq	r1, [r3, #0]
 800785a:	685b      	ldreq	r3, [r3, #4]
 800785c:	6063      	str	r3, [r4, #4]
 800785e:	bf04      	itt	eq
 8007860:	1949      	addeq	r1, r1, r5
 8007862:	6021      	streq	r1, [r4, #0]
 8007864:	6054      	str	r4, [r2, #4]
 8007866:	e7ca      	b.n	80077fe <_free_r+0x26>
 8007868:	b003      	add	sp, #12
 800786a:	bd30      	pop	{r4, r5, pc}
 800786c:	2000073c 	.word	0x2000073c

08007870 <rshift>:
 8007870:	6903      	ldr	r3, [r0, #16]
 8007872:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007876:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800787a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800787e:	f100 0414 	add.w	r4, r0, #20
 8007882:	dd45      	ble.n	8007910 <rshift+0xa0>
 8007884:	f011 011f 	ands.w	r1, r1, #31
 8007888:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800788c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007890:	d10c      	bne.n	80078ac <rshift+0x3c>
 8007892:	f100 0710 	add.w	r7, r0, #16
 8007896:	4629      	mov	r1, r5
 8007898:	42b1      	cmp	r1, r6
 800789a:	d334      	bcc.n	8007906 <rshift+0x96>
 800789c:	1a9b      	subs	r3, r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	1eea      	subs	r2, r5, #3
 80078a2:	4296      	cmp	r6, r2
 80078a4:	bf38      	it	cc
 80078a6:	2300      	movcc	r3, #0
 80078a8:	4423      	add	r3, r4
 80078aa:	e015      	b.n	80078d8 <rshift+0x68>
 80078ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80078b0:	f1c1 0820 	rsb	r8, r1, #32
 80078b4:	40cf      	lsrs	r7, r1
 80078b6:	f105 0e04 	add.w	lr, r5, #4
 80078ba:	46a1      	mov	r9, r4
 80078bc:	4576      	cmp	r6, lr
 80078be:	46f4      	mov	ip, lr
 80078c0:	d815      	bhi.n	80078ee <rshift+0x7e>
 80078c2:	1a9a      	subs	r2, r3, r2
 80078c4:	0092      	lsls	r2, r2, #2
 80078c6:	3a04      	subs	r2, #4
 80078c8:	3501      	adds	r5, #1
 80078ca:	42ae      	cmp	r6, r5
 80078cc:	bf38      	it	cc
 80078ce:	2200      	movcc	r2, #0
 80078d0:	18a3      	adds	r3, r4, r2
 80078d2:	50a7      	str	r7, [r4, r2]
 80078d4:	b107      	cbz	r7, 80078d8 <rshift+0x68>
 80078d6:	3304      	adds	r3, #4
 80078d8:	1b1a      	subs	r2, r3, r4
 80078da:	42a3      	cmp	r3, r4
 80078dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80078e0:	bf08      	it	eq
 80078e2:	2300      	moveq	r3, #0
 80078e4:	6102      	str	r2, [r0, #16]
 80078e6:	bf08      	it	eq
 80078e8:	6143      	streq	r3, [r0, #20]
 80078ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078ee:	f8dc c000 	ldr.w	ip, [ip]
 80078f2:	fa0c fc08 	lsl.w	ip, ip, r8
 80078f6:	ea4c 0707 	orr.w	r7, ip, r7
 80078fa:	f849 7b04 	str.w	r7, [r9], #4
 80078fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007902:	40cf      	lsrs	r7, r1
 8007904:	e7da      	b.n	80078bc <rshift+0x4c>
 8007906:	f851 cb04 	ldr.w	ip, [r1], #4
 800790a:	f847 cf04 	str.w	ip, [r7, #4]!
 800790e:	e7c3      	b.n	8007898 <rshift+0x28>
 8007910:	4623      	mov	r3, r4
 8007912:	e7e1      	b.n	80078d8 <rshift+0x68>

08007914 <__hexdig_fun>:
 8007914:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007918:	2b09      	cmp	r3, #9
 800791a:	d802      	bhi.n	8007922 <__hexdig_fun+0xe>
 800791c:	3820      	subs	r0, #32
 800791e:	b2c0      	uxtb	r0, r0
 8007920:	4770      	bx	lr
 8007922:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007926:	2b05      	cmp	r3, #5
 8007928:	d801      	bhi.n	800792e <__hexdig_fun+0x1a>
 800792a:	3847      	subs	r0, #71	; 0x47
 800792c:	e7f7      	b.n	800791e <__hexdig_fun+0xa>
 800792e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007932:	2b05      	cmp	r3, #5
 8007934:	d801      	bhi.n	800793a <__hexdig_fun+0x26>
 8007936:	3827      	subs	r0, #39	; 0x27
 8007938:	e7f1      	b.n	800791e <__hexdig_fun+0xa>
 800793a:	2000      	movs	r0, #0
 800793c:	4770      	bx	lr
	...

08007940 <__gethex>:
 8007940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007944:	4617      	mov	r7, r2
 8007946:	680a      	ldr	r2, [r1, #0]
 8007948:	b085      	sub	sp, #20
 800794a:	f102 0b02 	add.w	fp, r2, #2
 800794e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007952:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007956:	4681      	mov	r9, r0
 8007958:	468a      	mov	sl, r1
 800795a:	9302      	str	r3, [sp, #8]
 800795c:	32fe      	adds	r2, #254	; 0xfe
 800795e:	eb02 030b 	add.w	r3, r2, fp
 8007962:	46d8      	mov	r8, fp
 8007964:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	2830      	cmp	r0, #48	; 0x30
 800796c:	d0f7      	beq.n	800795e <__gethex+0x1e>
 800796e:	f7ff ffd1 	bl	8007914 <__hexdig_fun>
 8007972:	4604      	mov	r4, r0
 8007974:	2800      	cmp	r0, #0
 8007976:	d138      	bne.n	80079ea <__gethex+0xaa>
 8007978:	49a7      	ldr	r1, [pc, #668]	; (8007c18 <__gethex+0x2d8>)
 800797a:	2201      	movs	r2, #1
 800797c:	4640      	mov	r0, r8
 800797e:	f7ff fe0e 	bl	800759e <strncmp>
 8007982:	4606      	mov	r6, r0
 8007984:	2800      	cmp	r0, #0
 8007986:	d169      	bne.n	8007a5c <__gethex+0x11c>
 8007988:	f898 0001 	ldrb.w	r0, [r8, #1]
 800798c:	465d      	mov	r5, fp
 800798e:	f7ff ffc1 	bl	8007914 <__hexdig_fun>
 8007992:	2800      	cmp	r0, #0
 8007994:	d064      	beq.n	8007a60 <__gethex+0x120>
 8007996:	465a      	mov	r2, fp
 8007998:	7810      	ldrb	r0, [r2, #0]
 800799a:	2830      	cmp	r0, #48	; 0x30
 800799c:	4690      	mov	r8, r2
 800799e:	f102 0201 	add.w	r2, r2, #1
 80079a2:	d0f9      	beq.n	8007998 <__gethex+0x58>
 80079a4:	f7ff ffb6 	bl	8007914 <__hexdig_fun>
 80079a8:	2301      	movs	r3, #1
 80079aa:	fab0 f480 	clz	r4, r0
 80079ae:	0964      	lsrs	r4, r4, #5
 80079b0:	465e      	mov	r6, fp
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	4642      	mov	r2, r8
 80079b6:	4615      	mov	r5, r2
 80079b8:	3201      	adds	r2, #1
 80079ba:	7828      	ldrb	r0, [r5, #0]
 80079bc:	f7ff ffaa 	bl	8007914 <__hexdig_fun>
 80079c0:	2800      	cmp	r0, #0
 80079c2:	d1f8      	bne.n	80079b6 <__gethex+0x76>
 80079c4:	4994      	ldr	r1, [pc, #592]	; (8007c18 <__gethex+0x2d8>)
 80079c6:	2201      	movs	r2, #1
 80079c8:	4628      	mov	r0, r5
 80079ca:	f7ff fde8 	bl	800759e <strncmp>
 80079ce:	b978      	cbnz	r0, 80079f0 <__gethex+0xb0>
 80079d0:	b946      	cbnz	r6, 80079e4 <__gethex+0xa4>
 80079d2:	1c6e      	adds	r6, r5, #1
 80079d4:	4632      	mov	r2, r6
 80079d6:	4615      	mov	r5, r2
 80079d8:	3201      	adds	r2, #1
 80079da:	7828      	ldrb	r0, [r5, #0]
 80079dc:	f7ff ff9a 	bl	8007914 <__hexdig_fun>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d1f8      	bne.n	80079d6 <__gethex+0x96>
 80079e4:	1b73      	subs	r3, r6, r5
 80079e6:	009e      	lsls	r6, r3, #2
 80079e8:	e004      	b.n	80079f4 <__gethex+0xb4>
 80079ea:	2400      	movs	r4, #0
 80079ec:	4626      	mov	r6, r4
 80079ee:	e7e1      	b.n	80079b4 <__gethex+0x74>
 80079f0:	2e00      	cmp	r6, #0
 80079f2:	d1f7      	bne.n	80079e4 <__gethex+0xa4>
 80079f4:	782b      	ldrb	r3, [r5, #0]
 80079f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80079fa:	2b50      	cmp	r3, #80	; 0x50
 80079fc:	d13d      	bne.n	8007a7a <__gethex+0x13a>
 80079fe:	786b      	ldrb	r3, [r5, #1]
 8007a00:	2b2b      	cmp	r3, #43	; 0x2b
 8007a02:	d02f      	beq.n	8007a64 <__gethex+0x124>
 8007a04:	2b2d      	cmp	r3, #45	; 0x2d
 8007a06:	d031      	beq.n	8007a6c <__gethex+0x12c>
 8007a08:	1c69      	adds	r1, r5, #1
 8007a0a:	f04f 0b00 	mov.w	fp, #0
 8007a0e:	7808      	ldrb	r0, [r1, #0]
 8007a10:	f7ff ff80 	bl	8007914 <__hexdig_fun>
 8007a14:	1e42      	subs	r2, r0, #1
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	2a18      	cmp	r2, #24
 8007a1a:	d82e      	bhi.n	8007a7a <__gethex+0x13a>
 8007a1c:	f1a0 0210 	sub.w	r2, r0, #16
 8007a20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007a24:	f7ff ff76 	bl	8007914 <__hexdig_fun>
 8007a28:	f100 3cff 	add.w	ip, r0, #4294967295
 8007a2c:	fa5f fc8c 	uxtb.w	ip, ip
 8007a30:	f1bc 0f18 	cmp.w	ip, #24
 8007a34:	d91d      	bls.n	8007a72 <__gethex+0x132>
 8007a36:	f1bb 0f00 	cmp.w	fp, #0
 8007a3a:	d000      	beq.n	8007a3e <__gethex+0xfe>
 8007a3c:	4252      	negs	r2, r2
 8007a3e:	4416      	add	r6, r2
 8007a40:	f8ca 1000 	str.w	r1, [sl]
 8007a44:	b1dc      	cbz	r4, 8007a7e <__gethex+0x13e>
 8007a46:	9b01      	ldr	r3, [sp, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	bf14      	ite	ne
 8007a4c:	f04f 0800 	movne.w	r8, #0
 8007a50:	f04f 0806 	moveq.w	r8, #6
 8007a54:	4640      	mov	r0, r8
 8007a56:	b005      	add	sp, #20
 8007a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a5c:	4645      	mov	r5, r8
 8007a5e:	4626      	mov	r6, r4
 8007a60:	2401      	movs	r4, #1
 8007a62:	e7c7      	b.n	80079f4 <__gethex+0xb4>
 8007a64:	f04f 0b00 	mov.w	fp, #0
 8007a68:	1ca9      	adds	r1, r5, #2
 8007a6a:	e7d0      	b.n	8007a0e <__gethex+0xce>
 8007a6c:	f04f 0b01 	mov.w	fp, #1
 8007a70:	e7fa      	b.n	8007a68 <__gethex+0x128>
 8007a72:	230a      	movs	r3, #10
 8007a74:	fb03 0002 	mla	r0, r3, r2, r0
 8007a78:	e7d0      	b.n	8007a1c <__gethex+0xdc>
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	e7e0      	b.n	8007a40 <__gethex+0x100>
 8007a7e:	eba5 0308 	sub.w	r3, r5, r8
 8007a82:	3b01      	subs	r3, #1
 8007a84:	4621      	mov	r1, r4
 8007a86:	2b07      	cmp	r3, #7
 8007a88:	dc0a      	bgt.n	8007aa0 <__gethex+0x160>
 8007a8a:	4648      	mov	r0, r9
 8007a8c:	f000 fb0e 	bl	80080ac <_Balloc>
 8007a90:	4604      	mov	r4, r0
 8007a92:	b940      	cbnz	r0, 8007aa6 <__gethex+0x166>
 8007a94:	4b61      	ldr	r3, [pc, #388]	; (8007c1c <__gethex+0x2dc>)
 8007a96:	4602      	mov	r2, r0
 8007a98:	21e4      	movs	r1, #228	; 0xe4
 8007a9a:	4861      	ldr	r0, [pc, #388]	; (8007c20 <__gethex+0x2e0>)
 8007a9c:	f7ff fe7e 	bl	800779c <__assert_func>
 8007aa0:	3101      	adds	r1, #1
 8007aa2:	105b      	asrs	r3, r3, #1
 8007aa4:	e7ef      	b.n	8007a86 <__gethex+0x146>
 8007aa6:	f100 0a14 	add.w	sl, r0, #20
 8007aaa:	2300      	movs	r3, #0
 8007aac:	495a      	ldr	r1, [pc, #360]	; (8007c18 <__gethex+0x2d8>)
 8007aae:	f8cd a004 	str.w	sl, [sp, #4]
 8007ab2:	469b      	mov	fp, r3
 8007ab4:	45a8      	cmp	r8, r5
 8007ab6:	d342      	bcc.n	8007b3e <__gethex+0x1fe>
 8007ab8:	9801      	ldr	r0, [sp, #4]
 8007aba:	f840 bb04 	str.w	fp, [r0], #4
 8007abe:	eba0 000a 	sub.w	r0, r0, sl
 8007ac2:	1080      	asrs	r0, r0, #2
 8007ac4:	6120      	str	r0, [r4, #16]
 8007ac6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8007aca:	4658      	mov	r0, fp
 8007acc:	f000 fbe0 	bl	8008290 <__hi0bits>
 8007ad0:	683d      	ldr	r5, [r7, #0]
 8007ad2:	eba8 0000 	sub.w	r0, r8, r0
 8007ad6:	42a8      	cmp	r0, r5
 8007ad8:	dd59      	ble.n	8007b8e <__gethex+0x24e>
 8007ada:	eba0 0805 	sub.w	r8, r0, r5
 8007ade:	4641      	mov	r1, r8
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 ff6f 	bl	80089c4 <__any_on>
 8007ae6:	4683      	mov	fp, r0
 8007ae8:	b1b8      	cbz	r0, 8007b1a <__gethex+0x1da>
 8007aea:	f108 33ff 	add.w	r3, r8, #4294967295
 8007aee:	1159      	asrs	r1, r3, #5
 8007af0:	f003 021f 	and.w	r2, r3, #31
 8007af4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007af8:	f04f 0b01 	mov.w	fp, #1
 8007afc:	fa0b f202 	lsl.w	r2, fp, r2
 8007b00:	420a      	tst	r2, r1
 8007b02:	d00a      	beq.n	8007b1a <__gethex+0x1da>
 8007b04:	455b      	cmp	r3, fp
 8007b06:	dd06      	ble.n	8007b16 <__gethex+0x1d6>
 8007b08:	f1a8 0102 	sub.w	r1, r8, #2
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f000 ff59 	bl	80089c4 <__any_on>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d138      	bne.n	8007b88 <__gethex+0x248>
 8007b16:	f04f 0b02 	mov.w	fp, #2
 8007b1a:	4641      	mov	r1, r8
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f7ff fea7 	bl	8007870 <rshift>
 8007b22:	4446      	add	r6, r8
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	42b3      	cmp	r3, r6
 8007b28:	da41      	bge.n	8007bae <__gethex+0x26e>
 8007b2a:	4621      	mov	r1, r4
 8007b2c:	4648      	mov	r0, r9
 8007b2e:	f000 fafd 	bl	800812c <_Bfree>
 8007b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b34:	2300      	movs	r3, #0
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007b3c:	e78a      	b.n	8007a54 <__gethex+0x114>
 8007b3e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007b42:	2a2e      	cmp	r2, #46	; 0x2e
 8007b44:	d014      	beq.n	8007b70 <__gethex+0x230>
 8007b46:	2b20      	cmp	r3, #32
 8007b48:	d106      	bne.n	8007b58 <__gethex+0x218>
 8007b4a:	9b01      	ldr	r3, [sp, #4]
 8007b4c:	f843 bb04 	str.w	fp, [r3], #4
 8007b50:	f04f 0b00 	mov.w	fp, #0
 8007b54:	9301      	str	r3, [sp, #4]
 8007b56:	465b      	mov	r3, fp
 8007b58:	7828      	ldrb	r0, [r5, #0]
 8007b5a:	9303      	str	r3, [sp, #12]
 8007b5c:	f7ff feda 	bl	8007914 <__hexdig_fun>
 8007b60:	9b03      	ldr	r3, [sp, #12]
 8007b62:	f000 000f 	and.w	r0, r0, #15
 8007b66:	4098      	lsls	r0, r3
 8007b68:	ea4b 0b00 	orr.w	fp, fp, r0
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	e7a1      	b.n	8007ab4 <__gethex+0x174>
 8007b70:	45a8      	cmp	r8, r5
 8007b72:	d8e8      	bhi.n	8007b46 <__gethex+0x206>
 8007b74:	2201      	movs	r2, #1
 8007b76:	4628      	mov	r0, r5
 8007b78:	9303      	str	r3, [sp, #12]
 8007b7a:	f7ff fd10 	bl	800759e <strncmp>
 8007b7e:	4926      	ldr	r1, [pc, #152]	; (8007c18 <__gethex+0x2d8>)
 8007b80:	9b03      	ldr	r3, [sp, #12]
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d1df      	bne.n	8007b46 <__gethex+0x206>
 8007b86:	e795      	b.n	8007ab4 <__gethex+0x174>
 8007b88:	f04f 0b03 	mov.w	fp, #3
 8007b8c:	e7c5      	b.n	8007b1a <__gethex+0x1da>
 8007b8e:	da0b      	bge.n	8007ba8 <__gethex+0x268>
 8007b90:	eba5 0800 	sub.w	r8, r5, r0
 8007b94:	4621      	mov	r1, r4
 8007b96:	4642      	mov	r2, r8
 8007b98:	4648      	mov	r0, r9
 8007b9a:	f000 fce1 	bl	8008560 <__lshift>
 8007b9e:	eba6 0608 	sub.w	r6, r6, r8
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	f100 0a14 	add.w	sl, r0, #20
 8007ba8:	f04f 0b00 	mov.w	fp, #0
 8007bac:	e7ba      	b.n	8007b24 <__gethex+0x1e4>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	42b3      	cmp	r3, r6
 8007bb2:	dd73      	ble.n	8007c9c <__gethex+0x35c>
 8007bb4:	1b9e      	subs	r6, r3, r6
 8007bb6:	42b5      	cmp	r5, r6
 8007bb8:	dc34      	bgt.n	8007c24 <__gethex+0x2e4>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d023      	beq.n	8007c08 <__gethex+0x2c8>
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d025      	beq.n	8007c10 <__gethex+0x2d0>
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d115      	bne.n	8007bf4 <__gethex+0x2b4>
 8007bc8:	42b5      	cmp	r5, r6
 8007bca:	d113      	bne.n	8007bf4 <__gethex+0x2b4>
 8007bcc:	2d01      	cmp	r5, #1
 8007bce:	d10b      	bne.n	8007be8 <__gethex+0x2a8>
 8007bd0:	9a02      	ldr	r2, [sp, #8]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6013      	str	r3, [r2, #0]
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	6123      	str	r3, [r4, #16]
 8007bda:	f8ca 3000 	str.w	r3, [sl]
 8007bde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007be0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007be4:	601c      	str	r4, [r3, #0]
 8007be6:	e735      	b.n	8007a54 <__gethex+0x114>
 8007be8:	1e69      	subs	r1, r5, #1
 8007bea:	4620      	mov	r0, r4
 8007bec:	f000 feea 	bl	80089c4 <__any_on>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d1ed      	bne.n	8007bd0 <__gethex+0x290>
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	4648      	mov	r0, r9
 8007bf8:	f000 fa98 	bl	800812c <_Bfree>
 8007bfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bfe:	2300      	movs	r3, #0
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007c06:	e725      	b.n	8007a54 <__gethex+0x114>
 8007c08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1f2      	bne.n	8007bf4 <__gethex+0x2b4>
 8007c0e:	e7df      	b.n	8007bd0 <__gethex+0x290>
 8007c10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1dc      	bne.n	8007bd0 <__gethex+0x290>
 8007c16:	e7ed      	b.n	8007bf4 <__gethex+0x2b4>
 8007c18:	08009593 	.word	0x08009593
 8007c1c:	08009797 	.word	0x08009797
 8007c20:	080097a8 	.word	0x080097a8
 8007c24:	f106 38ff 	add.w	r8, r6, #4294967295
 8007c28:	f1bb 0f00 	cmp.w	fp, #0
 8007c2c:	d133      	bne.n	8007c96 <__gethex+0x356>
 8007c2e:	f1b8 0f00 	cmp.w	r8, #0
 8007c32:	d004      	beq.n	8007c3e <__gethex+0x2fe>
 8007c34:	4641      	mov	r1, r8
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 fec4 	bl	80089c4 <__any_on>
 8007c3c:	4683      	mov	fp, r0
 8007c3e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007c42:	2301      	movs	r3, #1
 8007c44:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007c48:	f008 081f 	and.w	r8, r8, #31
 8007c4c:	fa03 f308 	lsl.w	r3, r3, r8
 8007c50:	4213      	tst	r3, r2
 8007c52:	4631      	mov	r1, r6
 8007c54:	4620      	mov	r0, r4
 8007c56:	bf18      	it	ne
 8007c58:	f04b 0b02 	orrne.w	fp, fp, #2
 8007c5c:	1bad      	subs	r5, r5, r6
 8007c5e:	f7ff fe07 	bl	8007870 <rshift>
 8007c62:	687e      	ldr	r6, [r7, #4]
 8007c64:	f04f 0802 	mov.w	r8, #2
 8007c68:	f1bb 0f00 	cmp.w	fp, #0
 8007c6c:	d04a      	beq.n	8007d04 <__gethex+0x3c4>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d016      	beq.n	8007ca2 <__gethex+0x362>
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	d018      	beq.n	8007caa <__gethex+0x36a>
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d109      	bne.n	8007c90 <__gethex+0x350>
 8007c7c:	f01b 0f02 	tst.w	fp, #2
 8007c80:	d006      	beq.n	8007c90 <__gethex+0x350>
 8007c82:	f8da 3000 	ldr.w	r3, [sl]
 8007c86:	ea4b 0b03 	orr.w	fp, fp, r3
 8007c8a:	f01b 0f01 	tst.w	fp, #1
 8007c8e:	d10f      	bne.n	8007cb0 <__gethex+0x370>
 8007c90:	f048 0810 	orr.w	r8, r8, #16
 8007c94:	e036      	b.n	8007d04 <__gethex+0x3c4>
 8007c96:	f04f 0b01 	mov.w	fp, #1
 8007c9a:	e7d0      	b.n	8007c3e <__gethex+0x2fe>
 8007c9c:	f04f 0801 	mov.w	r8, #1
 8007ca0:	e7e2      	b.n	8007c68 <__gethex+0x328>
 8007ca2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ca4:	f1c3 0301 	rsb	r3, r3, #1
 8007ca8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007caa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d0ef      	beq.n	8007c90 <__gethex+0x350>
 8007cb0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007cb4:	f104 0214 	add.w	r2, r4, #20
 8007cb8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007cbc:	9301      	str	r3, [sp, #4]
 8007cbe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	4694      	mov	ip, r2
 8007cc6:	f852 1b04 	ldr.w	r1, [r2], #4
 8007cca:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007cce:	d01e      	beq.n	8007d0e <__gethex+0x3ce>
 8007cd0:	3101      	adds	r1, #1
 8007cd2:	f8cc 1000 	str.w	r1, [ip]
 8007cd6:	f1b8 0f02 	cmp.w	r8, #2
 8007cda:	f104 0214 	add.w	r2, r4, #20
 8007cde:	d13d      	bne.n	8007d5c <__gethex+0x41c>
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	42ab      	cmp	r3, r5
 8007ce6:	d10b      	bne.n	8007d00 <__gethex+0x3c0>
 8007ce8:	1169      	asrs	r1, r5, #5
 8007cea:	2301      	movs	r3, #1
 8007cec:	f005 051f 	and.w	r5, r5, #31
 8007cf0:	fa03 f505 	lsl.w	r5, r3, r5
 8007cf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cf8:	421d      	tst	r5, r3
 8007cfa:	bf18      	it	ne
 8007cfc:	f04f 0801 	movne.w	r8, #1
 8007d00:	f048 0820 	orr.w	r8, r8, #32
 8007d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d06:	601c      	str	r4, [r3, #0]
 8007d08:	9b02      	ldr	r3, [sp, #8]
 8007d0a:	601e      	str	r6, [r3, #0]
 8007d0c:	e6a2      	b.n	8007a54 <__gethex+0x114>
 8007d0e:	4290      	cmp	r0, r2
 8007d10:	f842 3c04 	str.w	r3, [r2, #-4]
 8007d14:	d8d6      	bhi.n	8007cc4 <__gethex+0x384>
 8007d16:	68a2      	ldr	r2, [r4, #8]
 8007d18:	4593      	cmp	fp, r2
 8007d1a:	db17      	blt.n	8007d4c <__gethex+0x40c>
 8007d1c:	6861      	ldr	r1, [r4, #4]
 8007d1e:	4648      	mov	r0, r9
 8007d20:	3101      	adds	r1, #1
 8007d22:	f000 f9c3 	bl	80080ac <_Balloc>
 8007d26:	4682      	mov	sl, r0
 8007d28:	b918      	cbnz	r0, 8007d32 <__gethex+0x3f2>
 8007d2a:	4b1b      	ldr	r3, [pc, #108]	; (8007d98 <__gethex+0x458>)
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	2184      	movs	r1, #132	; 0x84
 8007d30:	e6b3      	b.n	8007a9a <__gethex+0x15a>
 8007d32:	6922      	ldr	r2, [r4, #16]
 8007d34:	3202      	adds	r2, #2
 8007d36:	f104 010c 	add.w	r1, r4, #12
 8007d3a:	0092      	lsls	r2, r2, #2
 8007d3c:	300c      	adds	r0, #12
 8007d3e:	f7ff fd10 	bl	8007762 <memcpy>
 8007d42:	4621      	mov	r1, r4
 8007d44:	4648      	mov	r0, r9
 8007d46:	f000 f9f1 	bl	800812c <_Bfree>
 8007d4a:	4654      	mov	r4, sl
 8007d4c:	6922      	ldr	r2, [r4, #16]
 8007d4e:	1c51      	adds	r1, r2, #1
 8007d50:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007d54:	6121      	str	r1, [r4, #16]
 8007d56:	2101      	movs	r1, #1
 8007d58:	6151      	str	r1, [r2, #20]
 8007d5a:	e7bc      	b.n	8007cd6 <__gethex+0x396>
 8007d5c:	6921      	ldr	r1, [r4, #16]
 8007d5e:	4559      	cmp	r1, fp
 8007d60:	dd0b      	ble.n	8007d7a <__gethex+0x43a>
 8007d62:	2101      	movs	r1, #1
 8007d64:	4620      	mov	r0, r4
 8007d66:	f7ff fd83 	bl	8007870 <rshift>
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	3601      	adds	r6, #1
 8007d6e:	42b3      	cmp	r3, r6
 8007d70:	f6ff aedb 	blt.w	8007b2a <__gethex+0x1ea>
 8007d74:	f04f 0801 	mov.w	r8, #1
 8007d78:	e7c2      	b.n	8007d00 <__gethex+0x3c0>
 8007d7a:	f015 051f 	ands.w	r5, r5, #31
 8007d7e:	d0f9      	beq.n	8007d74 <__gethex+0x434>
 8007d80:	9b01      	ldr	r3, [sp, #4]
 8007d82:	441a      	add	r2, r3
 8007d84:	f1c5 0520 	rsb	r5, r5, #32
 8007d88:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007d8c:	f000 fa80 	bl	8008290 <__hi0bits>
 8007d90:	42a8      	cmp	r0, r5
 8007d92:	dbe6      	blt.n	8007d62 <__gethex+0x422>
 8007d94:	e7ee      	b.n	8007d74 <__gethex+0x434>
 8007d96:	bf00      	nop
 8007d98:	08009797 	.word	0x08009797

08007d9c <L_shift>:
 8007d9c:	f1c2 0208 	rsb	r2, r2, #8
 8007da0:	0092      	lsls	r2, r2, #2
 8007da2:	b570      	push	{r4, r5, r6, lr}
 8007da4:	f1c2 0620 	rsb	r6, r2, #32
 8007da8:	6843      	ldr	r3, [r0, #4]
 8007daa:	6804      	ldr	r4, [r0, #0]
 8007dac:	fa03 f506 	lsl.w	r5, r3, r6
 8007db0:	432c      	orrs	r4, r5
 8007db2:	40d3      	lsrs	r3, r2
 8007db4:	6004      	str	r4, [r0, #0]
 8007db6:	f840 3f04 	str.w	r3, [r0, #4]!
 8007dba:	4288      	cmp	r0, r1
 8007dbc:	d3f4      	bcc.n	8007da8 <L_shift+0xc>
 8007dbe:	bd70      	pop	{r4, r5, r6, pc}

08007dc0 <__match>:
 8007dc0:	b530      	push	{r4, r5, lr}
 8007dc2:	6803      	ldr	r3, [r0, #0]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dca:	b914      	cbnz	r4, 8007dd2 <__match+0x12>
 8007dcc:	6003      	str	r3, [r0, #0]
 8007dce:	2001      	movs	r0, #1
 8007dd0:	bd30      	pop	{r4, r5, pc}
 8007dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dd6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007dda:	2d19      	cmp	r5, #25
 8007ddc:	bf98      	it	ls
 8007dde:	3220      	addls	r2, #32
 8007de0:	42a2      	cmp	r2, r4
 8007de2:	d0f0      	beq.n	8007dc6 <__match+0x6>
 8007de4:	2000      	movs	r0, #0
 8007de6:	e7f3      	b.n	8007dd0 <__match+0x10>

08007de8 <__hexnan>:
 8007de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dec:	680b      	ldr	r3, [r1, #0]
 8007dee:	6801      	ldr	r1, [r0, #0]
 8007df0:	115e      	asrs	r6, r3, #5
 8007df2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007df6:	f013 031f 	ands.w	r3, r3, #31
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	bf18      	it	ne
 8007dfe:	3604      	addne	r6, #4
 8007e00:	2500      	movs	r5, #0
 8007e02:	1f37      	subs	r7, r6, #4
 8007e04:	4682      	mov	sl, r0
 8007e06:	4690      	mov	r8, r2
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8007e0e:	46b9      	mov	r9, r7
 8007e10:	463c      	mov	r4, r7
 8007e12:	9502      	str	r5, [sp, #8]
 8007e14:	46ab      	mov	fp, r5
 8007e16:	784a      	ldrb	r2, [r1, #1]
 8007e18:	1c4b      	adds	r3, r1, #1
 8007e1a:	9303      	str	r3, [sp, #12]
 8007e1c:	b342      	cbz	r2, 8007e70 <__hexnan+0x88>
 8007e1e:	4610      	mov	r0, r2
 8007e20:	9105      	str	r1, [sp, #20]
 8007e22:	9204      	str	r2, [sp, #16]
 8007e24:	f7ff fd76 	bl	8007914 <__hexdig_fun>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d14f      	bne.n	8007ecc <__hexnan+0xe4>
 8007e2c:	9a04      	ldr	r2, [sp, #16]
 8007e2e:	9905      	ldr	r1, [sp, #20]
 8007e30:	2a20      	cmp	r2, #32
 8007e32:	d818      	bhi.n	8007e66 <__hexnan+0x7e>
 8007e34:	9b02      	ldr	r3, [sp, #8]
 8007e36:	459b      	cmp	fp, r3
 8007e38:	dd13      	ble.n	8007e62 <__hexnan+0x7a>
 8007e3a:	454c      	cmp	r4, r9
 8007e3c:	d206      	bcs.n	8007e4c <__hexnan+0x64>
 8007e3e:	2d07      	cmp	r5, #7
 8007e40:	dc04      	bgt.n	8007e4c <__hexnan+0x64>
 8007e42:	462a      	mov	r2, r5
 8007e44:	4649      	mov	r1, r9
 8007e46:	4620      	mov	r0, r4
 8007e48:	f7ff ffa8 	bl	8007d9c <L_shift>
 8007e4c:	4544      	cmp	r4, r8
 8007e4e:	d950      	bls.n	8007ef2 <__hexnan+0x10a>
 8007e50:	2300      	movs	r3, #0
 8007e52:	f1a4 0904 	sub.w	r9, r4, #4
 8007e56:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e5a:	f8cd b008 	str.w	fp, [sp, #8]
 8007e5e:	464c      	mov	r4, r9
 8007e60:	461d      	mov	r5, r3
 8007e62:	9903      	ldr	r1, [sp, #12]
 8007e64:	e7d7      	b.n	8007e16 <__hexnan+0x2e>
 8007e66:	2a29      	cmp	r2, #41	; 0x29
 8007e68:	d155      	bne.n	8007f16 <__hexnan+0x12e>
 8007e6a:	3102      	adds	r1, #2
 8007e6c:	f8ca 1000 	str.w	r1, [sl]
 8007e70:	f1bb 0f00 	cmp.w	fp, #0
 8007e74:	d04f      	beq.n	8007f16 <__hexnan+0x12e>
 8007e76:	454c      	cmp	r4, r9
 8007e78:	d206      	bcs.n	8007e88 <__hexnan+0xa0>
 8007e7a:	2d07      	cmp	r5, #7
 8007e7c:	dc04      	bgt.n	8007e88 <__hexnan+0xa0>
 8007e7e:	462a      	mov	r2, r5
 8007e80:	4649      	mov	r1, r9
 8007e82:	4620      	mov	r0, r4
 8007e84:	f7ff ff8a 	bl	8007d9c <L_shift>
 8007e88:	4544      	cmp	r4, r8
 8007e8a:	d934      	bls.n	8007ef6 <__hexnan+0x10e>
 8007e8c:	f1a8 0204 	sub.w	r2, r8, #4
 8007e90:	4623      	mov	r3, r4
 8007e92:	f853 1b04 	ldr.w	r1, [r3], #4
 8007e96:	f842 1f04 	str.w	r1, [r2, #4]!
 8007e9a:	429f      	cmp	r7, r3
 8007e9c:	d2f9      	bcs.n	8007e92 <__hexnan+0xaa>
 8007e9e:	1b3b      	subs	r3, r7, r4
 8007ea0:	f023 0303 	bic.w	r3, r3, #3
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	3e03      	subs	r6, #3
 8007ea8:	3401      	adds	r4, #1
 8007eaa:	42a6      	cmp	r6, r4
 8007eac:	bf38      	it	cc
 8007eae:	2304      	movcc	r3, #4
 8007eb0:	4443      	add	r3, r8
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f843 2b04 	str.w	r2, [r3], #4
 8007eb8:	429f      	cmp	r7, r3
 8007eba:	d2fb      	bcs.n	8007eb4 <__hexnan+0xcc>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	b91b      	cbnz	r3, 8007ec8 <__hexnan+0xe0>
 8007ec0:	4547      	cmp	r7, r8
 8007ec2:	d126      	bne.n	8007f12 <__hexnan+0x12a>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	603b      	str	r3, [r7, #0]
 8007ec8:	2005      	movs	r0, #5
 8007eca:	e025      	b.n	8007f18 <__hexnan+0x130>
 8007ecc:	3501      	adds	r5, #1
 8007ece:	2d08      	cmp	r5, #8
 8007ed0:	f10b 0b01 	add.w	fp, fp, #1
 8007ed4:	dd06      	ble.n	8007ee4 <__hexnan+0xfc>
 8007ed6:	4544      	cmp	r4, r8
 8007ed8:	d9c3      	bls.n	8007e62 <__hexnan+0x7a>
 8007eda:	2300      	movs	r3, #0
 8007edc:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ee0:	2501      	movs	r5, #1
 8007ee2:	3c04      	subs	r4, #4
 8007ee4:	6822      	ldr	r2, [r4, #0]
 8007ee6:	f000 000f 	and.w	r0, r0, #15
 8007eea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007eee:	6020      	str	r0, [r4, #0]
 8007ef0:	e7b7      	b.n	8007e62 <__hexnan+0x7a>
 8007ef2:	2508      	movs	r5, #8
 8007ef4:	e7b5      	b.n	8007e62 <__hexnan+0x7a>
 8007ef6:	9b01      	ldr	r3, [sp, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0df      	beq.n	8007ebc <__hexnan+0xd4>
 8007efc:	f1c3 0320 	rsb	r3, r3, #32
 8007f00:	f04f 32ff 	mov.w	r2, #4294967295
 8007f04:	40da      	lsrs	r2, r3
 8007f06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	f846 3c04 	str.w	r3, [r6, #-4]
 8007f10:	e7d4      	b.n	8007ebc <__hexnan+0xd4>
 8007f12:	3f04      	subs	r7, #4
 8007f14:	e7d2      	b.n	8007ebc <__hexnan+0xd4>
 8007f16:	2004      	movs	r0, #4
 8007f18:	b007      	add	sp, #28
 8007f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007f20 <malloc>:
 8007f20:	4b02      	ldr	r3, [pc, #8]	; (8007f2c <malloc+0xc>)
 8007f22:	4601      	mov	r1, r0
 8007f24:	6818      	ldr	r0, [r3, #0]
 8007f26:	f000 b823 	b.w	8007f70 <_malloc_r>
 8007f2a:	bf00      	nop
 8007f2c:	200001d0 	.word	0x200001d0

08007f30 <sbrk_aligned>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	4e0e      	ldr	r6, [pc, #56]	; (8007f6c <sbrk_aligned+0x3c>)
 8007f34:	460c      	mov	r4, r1
 8007f36:	6831      	ldr	r1, [r6, #0]
 8007f38:	4605      	mov	r5, r0
 8007f3a:	b911      	cbnz	r1, 8007f42 <sbrk_aligned+0x12>
 8007f3c:	f000 fe30 	bl	8008ba0 <_sbrk_r>
 8007f40:	6030      	str	r0, [r6, #0]
 8007f42:	4621      	mov	r1, r4
 8007f44:	4628      	mov	r0, r5
 8007f46:	f000 fe2b 	bl	8008ba0 <_sbrk_r>
 8007f4a:	1c43      	adds	r3, r0, #1
 8007f4c:	d00a      	beq.n	8007f64 <sbrk_aligned+0x34>
 8007f4e:	1cc4      	adds	r4, r0, #3
 8007f50:	f024 0403 	bic.w	r4, r4, #3
 8007f54:	42a0      	cmp	r0, r4
 8007f56:	d007      	beq.n	8007f68 <sbrk_aligned+0x38>
 8007f58:	1a21      	subs	r1, r4, r0
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f000 fe20 	bl	8008ba0 <_sbrk_r>
 8007f60:	3001      	adds	r0, #1
 8007f62:	d101      	bne.n	8007f68 <sbrk_aligned+0x38>
 8007f64:	f04f 34ff 	mov.w	r4, #4294967295
 8007f68:	4620      	mov	r0, r4
 8007f6a:	bd70      	pop	{r4, r5, r6, pc}
 8007f6c:	20000740 	.word	0x20000740

08007f70 <_malloc_r>:
 8007f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f74:	1ccd      	adds	r5, r1, #3
 8007f76:	f025 0503 	bic.w	r5, r5, #3
 8007f7a:	3508      	adds	r5, #8
 8007f7c:	2d0c      	cmp	r5, #12
 8007f7e:	bf38      	it	cc
 8007f80:	250c      	movcc	r5, #12
 8007f82:	2d00      	cmp	r5, #0
 8007f84:	4607      	mov	r7, r0
 8007f86:	db01      	blt.n	8007f8c <_malloc_r+0x1c>
 8007f88:	42a9      	cmp	r1, r5
 8007f8a:	d905      	bls.n	8007f98 <_malloc_r+0x28>
 8007f8c:	230c      	movs	r3, #12
 8007f8e:	603b      	str	r3, [r7, #0]
 8007f90:	2600      	movs	r6, #0
 8007f92:	4630      	mov	r0, r6
 8007f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800806c <_malloc_r+0xfc>
 8007f9c:	f000 f87a 	bl	8008094 <__malloc_lock>
 8007fa0:	f8d8 3000 	ldr.w	r3, [r8]
 8007fa4:	461c      	mov	r4, r3
 8007fa6:	bb5c      	cbnz	r4, 8008000 <_malloc_r+0x90>
 8007fa8:	4629      	mov	r1, r5
 8007faa:	4638      	mov	r0, r7
 8007fac:	f7ff ffc0 	bl	8007f30 <sbrk_aligned>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	d155      	bne.n	8008062 <_malloc_r+0xf2>
 8007fb6:	f8d8 4000 	ldr.w	r4, [r8]
 8007fba:	4626      	mov	r6, r4
 8007fbc:	2e00      	cmp	r6, #0
 8007fbe:	d145      	bne.n	800804c <_malloc_r+0xdc>
 8007fc0:	2c00      	cmp	r4, #0
 8007fc2:	d048      	beq.n	8008056 <_malloc_r+0xe6>
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	4638      	mov	r0, r7
 8007fca:	eb04 0903 	add.w	r9, r4, r3
 8007fce:	f000 fde7 	bl	8008ba0 <_sbrk_r>
 8007fd2:	4581      	cmp	r9, r0
 8007fd4:	d13f      	bne.n	8008056 <_malloc_r+0xe6>
 8007fd6:	6821      	ldr	r1, [r4, #0]
 8007fd8:	1a6d      	subs	r5, r5, r1
 8007fda:	4629      	mov	r1, r5
 8007fdc:	4638      	mov	r0, r7
 8007fde:	f7ff ffa7 	bl	8007f30 <sbrk_aligned>
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	d037      	beq.n	8008056 <_malloc_r+0xe6>
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	442b      	add	r3, r5
 8007fea:	6023      	str	r3, [r4, #0]
 8007fec:	f8d8 3000 	ldr.w	r3, [r8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d038      	beq.n	8008066 <_malloc_r+0xf6>
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	42a2      	cmp	r2, r4
 8007ff8:	d12b      	bne.n	8008052 <_malloc_r+0xe2>
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	605a      	str	r2, [r3, #4]
 8007ffe:	e00f      	b.n	8008020 <_malloc_r+0xb0>
 8008000:	6822      	ldr	r2, [r4, #0]
 8008002:	1b52      	subs	r2, r2, r5
 8008004:	d41f      	bmi.n	8008046 <_malloc_r+0xd6>
 8008006:	2a0b      	cmp	r2, #11
 8008008:	d917      	bls.n	800803a <_malloc_r+0xca>
 800800a:	1961      	adds	r1, r4, r5
 800800c:	42a3      	cmp	r3, r4
 800800e:	6025      	str	r5, [r4, #0]
 8008010:	bf18      	it	ne
 8008012:	6059      	strne	r1, [r3, #4]
 8008014:	6863      	ldr	r3, [r4, #4]
 8008016:	bf08      	it	eq
 8008018:	f8c8 1000 	streq.w	r1, [r8]
 800801c:	5162      	str	r2, [r4, r5]
 800801e:	604b      	str	r3, [r1, #4]
 8008020:	4638      	mov	r0, r7
 8008022:	f104 060b 	add.w	r6, r4, #11
 8008026:	f000 f83b 	bl	80080a0 <__malloc_unlock>
 800802a:	f026 0607 	bic.w	r6, r6, #7
 800802e:	1d23      	adds	r3, r4, #4
 8008030:	1af2      	subs	r2, r6, r3
 8008032:	d0ae      	beq.n	8007f92 <_malloc_r+0x22>
 8008034:	1b9b      	subs	r3, r3, r6
 8008036:	50a3      	str	r3, [r4, r2]
 8008038:	e7ab      	b.n	8007f92 <_malloc_r+0x22>
 800803a:	42a3      	cmp	r3, r4
 800803c:	6862      	ldr	r2, [r4, #4]
 800803e:	d1dd      	bne.n	8007ffc <_malloc_r+0x8c>
 8008040:	f8c8 2000 	str.w	r2, [r8]
 8008044:	e7ec      	b.n	8008020 <_malloc_r+0xb0>
 8008046:	4623      	mov	r3, r4
 8008048:	6864      	ldr	r4, [r4, #4]
 800804a:	e7ac      	b.n	8007fa6 <_malloc_r+0x36>
 800804c:	4634      	mov	r4, r6
 800804e:	6876      	ldr	r6, [r6, #4]
 8008050:	e7b4      	b.n	8007fbc <_malloc_r+0x4c>
 8008052:	4613      	mov	r3, r2
 8008054:	e7cc      	b.n	8007ff0 <_malloc_r+0x80>
 8008056:	230c      	movs	r3, #12
 8008058:	603b      	str	r3, [r7, #0]
 800805a:	4638      	mov	r0, r7
 800805c:	f000 f820 	bl	80080a0 <__malloc_unlock>
 8008060:	e797      	b.n	8007f92 <_malloc_r+0x22>
 8008062:	6025      	str	r5, [r4, #0]
 8008064:	e7dc      	b.n	8008020 <_malloc_r+0xb0>
 8008066:	605b      	str	r3, [r3, #4]
 8008068:	deff      	udf	#255	; 0xff
 800806a:	bf00      	nop
 800806c:	2000073c 	.word	0x2000073c

08008070 <__ascii_mbtowc>:
 8008070:	b082      	sub	sp, #8
 8008072:	b901      	cbnz	r1, 8008076 <__ascii_mbtowc+0x6>
 8008074:	a901      	add	r1, sp, #4
 8008076:	b142      	cbz	r2, 800808a <__ascii_mbtowc+0x1a>
 8008078:	b14b      	cbz	r3, 800808e <__ascii_mbtowc+0x1e>
 800807a:	7813      	ldrb	r3, [r2, #0]
 800807c:	600b      	str	r3, [r1, #0]
 800807e:	7812      	ldrb	r2, [r2, #0]
 8008080:	1e10      	subs	r0, r2, #0
 8008082:	bf18      	it	ne
 8008084:	2001      	movne	r0, #1
 8008086:	b002      	add	sp, #8
 8008088:	4770      	bx	lr
 800808a:	4610      	mov	r0, r2
 800808c:	e7fb      	b.n	8008086 <__ascii_mbtowc+0x16>
 800808e:	f06f 0001 	mvn.w	r0, #1
 8008092:	e7f8      	b.n	8008086 <__ascii_mbtowc+0x16>

08008094 <__malloc_lock>:
 8008094:	4801      	ldr	r0, [pc, #4]	; (800809c <__malloc_lock+0x8>)
 8008096:	f7ff bb62 	b.w	800775e <__retarget_lock_acquire_recursive>
 800809a:	bf00      	nop
 800809c:	20000738 	.word	0x20000738

080080a0 <__malloc_unlock>:
 80080a0:	4801      	ldr	r0, [pc, #4]	; (80080a8 <__malloc_unlock+0x8>)
 80080a2:	f7ff bb5d 	b.w	8007760 <__retarget_lock_release_recursive>
 80080a6:	bf00      	nop
 80080a8:	20000738 	.word	0x20000738

080080ac <_Balloc>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	69c6      	ldr	r6, [r0, #28]
 80080b0:	4604      	mov	r4, r0
 80080b2:	460d      	mov	r5, r1
 80080b4:	b976      	cbnz	r6, 80080d4 <_Balloc+0x28>
 80080b6:	2010      	movs	r0, #16
 80080b8:	f7ff ff32 	bl	8007f20 <malloc>
 80080bc:	4602      	mov	r2, r0
 80080be:	61e0      	str	r0, [r4, #28]
 80080c0:	b920      	cbnz	r0, 80080cc <_Balloc+0x20>
 80080c2:	4b18      	ldr	r3, [pc, #96]	; (8008124 <_Balloc+0x78>)
 80080c4:	4818      	ldr	r0, [pc, #96]	; (8008128 <_Balloc+0x7c>)
 80080c6:	216b      	movs	r1, #107	; 0x6b
 80080c8:	f7ff fb68 	bl	800779c <__assert_func>
 80080cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080d0:	6006      	str	r6, [r0, #0]
 80080d2:	60c6      	str	r6, [r0, #12]
 80080d4:	69e6      	ldr	r6, [r4, #28]
 80080d6:	68f3      	ldr	r3, [r6, #12]
 80080d8:	b183      	cbz	r3, 80080fc <_Balloc+0x50>
 80080da:	69e3      	ldr	r3, [r4, #28]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080e2:	b9b8      	cbnz	r0, 8008114 <_Balloc+0x68>
 80080e4:	2101      	movs	r1, #1
 80080e6:	fa01 f605 	lsl.w	r6, r1, r5
 80080ea:	1d72      	adds	r2, r6, #5
 80080ec:	0092      	lsls	r2, r2, #2
 80080ee:	4620      	mov	r0, r4
 80080f0:	f000 fd6d 	bl	8008bce <_calloc_r>
 80080f4:	b160      	cbz	r0, 8008110 <_Balloc+0x64>
 80080f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080fa:	e00e      	b.n	800811a <_Balloc+0x6e>
 80080fc:	2221      	movs	r2, #33	; 0x21
 80080fe:	2104      	movs	r1, #4
 8008100:	4620      	mov	r0, r4
 8008102:	f000 fd64 	bl	8008bce <_calloc_r>
 8008106:	69e3      	ldr	r3, [r4, #28]
 8008108:	60f0      	str	r0, [r6, #12]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e4      	bne.n	80080da <_Balloc+0x2e>
 8008110:	2000      	movs	r0, #0
 8008112:	bd70      	pop	{r4, r5, r6, pc}
 8008114:	6802      	ldr	r2, [r0, #0]
 8008116:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800811a:	2300      	movs	r3, #0
 800811c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008120:	e7f7      	b.n	8008112 <_Balloc+0x66>
 8008122:	bf00      	nop
 8008124:	08009524 	.word	0x08009524
 8008128:	08009808 	.word	0x08009808

0800812c <_Bfree>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	69c6      	ldr	r6, [r0, #28]
 8008130:	4605      	mov	r5, r0
 8008132:	460c      	mov	r4, r1
 8008134:	b976      	cbnz	r6, 8008154 <_Bfree+0x28>
 8008136:	2010      	movs	r0, #16
 8008138:	f7ff fef2 	bl	8007f20 <malloc>
 800813c:	4602      	mov	r2, r0
 800813e:	61e8      	str	r0, [r5, #28]
 8008140:	b920      	cbnz	r0, 800814c <_Bfree+0x20>
 8008142:	4b09      	ldr	r3, [pc, #36]	; (8008168 <_Bfree+0x3c>)
 8008144:	4809      	ldr	r0, [pc, #36]	; (800816c <_Bfree+0x40>)
 8008146:	218f      	movs	r1, #143	; 0x8f
 8008148:	f7ff fb28 	bl	800779c <__assert_func>
 800814c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008150:	6006      	str	r6, [r0, #0]
 8008152:	60c6      	str	r6, [r0, #12]
 8008154:	b13c      	cbz	r4, 8008166 <_Bfree+0x3a>
 8008156:	69eb      	ldr	r3, [r5, #28]
 8008158:	6862      	ldr	r2, [r4, #4]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008160:	6021      	str	r1, [r4, #0]
 8008162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008166:	bd70      	pop	{r4, r5, r6, pc}
 8008168:	08009524 	.word	0x08009524
 800816c:	08009808 	.word	0x08009808

08008170 <__multadd>:
 8008170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008174:	690d      	ldr	r5, [r1, #16]
 8008176:	4607      	mov	r7, r0
 8008178:	460c      	mov	r4, r1
 800817a:	461e      	mov	r6, r3
 800817c:	f101 0c14 	add.w	ip, r1, #20
 8008180:	2000      	movs	r0, #0
 8008182:	f8dc 3000 	ldr.w	r3, [ip]
 8008186:	b299      	uxth	r1, r3
 8008188:	fb02 6101 	mla	r1, r2, r1, r6
 800818c:	0c1e      	lsrs	r6, r3, #16
 800818e:	0c0b      	lsrs	r3, r1, #16
 8008190:	fb02 3306 	mla	r3, r2, r6, r3
 8008194:	b289      	uxth	r1, r1
 8008196:	3001      	adds	r0, #1
 8008198:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800819c:	4285      	cmp	r5, r0
 800819e:	f84c 1b04 	str.w	r1, [ip], #4
 80081a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081a6:	dcec      	bgt.n	8008182 <__multadd+0x12>
 80081a8:	b30e      	cbz	r6, 80081ee <__multadd+0x7e>
 80081aa:	68a3      	ldr	r3, [r4, #8]
 80081ac:	42ab      	cmp	r3, r5
 80081ae:	dc19      	bgt.n	80081e4 <__multadd+0x74>
 80081b0:	6861      	ldr	r1, [r4, #4]
 80081b2:	4638      	mov	r0, r7
 80081b4:	3101      	adds	r1, #1
 80081b6:	f7ff ff79 	bl	80080ac <_Balloc>
 80081ba:	4680      	mov	r8, r0
 80081bc:	b928      	cbnz	r0, 80081ca <__multadd+0x5a>
 80081be:	4602      	mov	r2, r0
 80081c0:	4b0c      	ldr	r3, [pc, #48]	; (80081f4 <__multadd+0x84>)
 80081c2:	480d      	ldr	r0, [pc, #52]	; (80081f8 <__multadd+0x88>)
 80081c4:	21ba      	movs	r1, #186	; 0xba
 80081c6:	f7ff fae9 	bl	800779c <__assert_func>
 80081ca:	6922      	ldr	r2, [r4, #16]
 80081cc:	3202      	adds	r2, #2
 80081ce:	f104 010c 	add.w	r1, r4, #12
 80081d2:	0092      	lsls	r2, r2, #2
 80081d4:	300c      	adds	r0, #12
 80081d6:	f7ff fac4 	bl	8007762 <memcpy>
 80081da:	4621      	mov	r1, r4
 80081dc:	4638      	mov	r0, r7
 80081de:	f7ff ffa5 	bl	800812c <_Bfree>
 80081e2:	4644      	mov	r4, r8
 80081e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081e8:	3501      	adds	r5, #1
 80081ea:	615e      	str	r6, [r3, #20]
 80081ec:	6125      	str	r5, [r4, #16]
 80081ee:	4620      	mov	r0, r4
 80081f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f4:	08009797 	.word	0x08009797
 80081f8:	08009808 	.word	0x08009808

080081fc <__s2b>:
 80081fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008200:	460c      	mov	r4, r1
 8008202:	4615      	mov	r5, r2
 8008204:	461f      	mov	r7, r3
 8008206:	2209      	movs	r2, #9
 8008208:	3308      	adds	r3, #8
 800820a:	4606      	mov	r6, r0
 800820c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008210:	2100      	movs	r1, #0
 8008212:	2201      	movs	r2, #1
 8008214:	429a      	cmp	r2, r3
 8008216:	db09      	blt.n	800822c <__s2b+0x30>
 8008218:	4630      	mov	r0, r6
 800821a:	f7ff ff47 	bl	80080ac <_Balloc>
 800821e:	b940      	cbnz	r0, 8008232 <__s2b+0x36>
 8008220:	4602      	mov	r2, r0
 8008222:	4b19      	ldr	r3, [pc, #100]	; (8008288 <__s2b+0x8c>)
 8008224:	4819      	ldr	r0, [pc, #100]	; (800828c <__s2b+0x90>)
 8008226:	21d3      	movs	r1, #211	; 0xd3
 8008228:	f7ff fab8 	bl	800779c <__assert_func>
 800822c:	0052      	lsls	r2, r2, #1
 800822e:	3101      	adds	r1, #1
 8008230:	e7f0      	b.n	8008214 <__s2b+0x18>
 8008232:	9b08      	ldr	r3, [sp, #32]
 8008234:	6143      	str	r3, [r0, #20]
 8008236:	2d09      	cmp	r5, #9
 8008238:	f04f 0301 	mov.w	r3, #1
 800823c:	6103      	str	r3, [r0, #16]
 800823e:	dd16      	ble.n	800826e <__s2b+0x72>
 8008240:	f104 0909 	add.w	r9, r4, #9
 8008244:	46c8      	mov	r8, r9
 8008246:	442c      	add	r4, r5
 8008248:	f818 3b01 	ldrb.w	r3, [r8], #1
 800824c:	4601      	mov	r1, r0
 800824e:	3b30      	subs	r3, #48	; 0x30
 8008250:	220a      	movs	r2, #10
 8008252:	4630      	mov	r0, r6
 8008254:	f7ff ff8c 	bl	8008170 <__multadd>
 8008258:	45a0      	cmp	r8, r4
 800825a:	d1f5      	bne.n	8008248 <__s2b+0x4c>
 800825c:	f1a5 0408 	sub.w	r4, r5, #8
 8008260:	444c      	add	r4, r9
 8008262:	1b2d      	subs	r5, r5, r4
 8008264:	1963      	adds	r3, r4, r5
 8008266:	42bb      	cmp	r3, r7
 8008268:	db04      	blt.n	8008274 <__s2b+0x78>
 800826a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800826e:	340a      	adds	r4, #10
 8008270:	2509      	movs	r5, #9
 8008272:	e7f6      	b.n	8008262 <__s2b+0x66>
 8008274:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008278:	4601      	mov	r1, r0
 800827a:	3b30      	subs	r3, #48	; 0x30
 800827c:	220a      	movs	r2, #10
 800827e:	4630      	mov	r0, r6
 8008280:	f7ff ff76 	bl	8008170 <__multadd>
 8008284:	e7ee      	b.n	8008264 <__s2b+0x68>
 8008286:	bf00      	nop
 8008288:	08009797 	.word	0x08009797
 800828c:	08009808 	.word	0x08009808

08008290 <__hi0bits>:
 8008290:	0c03      	lsrs	r3, r0, #16
 8008292:	041b      	lsls	r3, r3, #16
 8008294:	b9d3      	cbnz	r3, 80082cc <__hi0bits+0x3c>
 8008296:	0400      	lsls	r0, r0, #16
 8008298:	2310      	movs	r3, #16
 800829a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800829e:	bf04      	itt	eq
 80082a0:	0200      	lsleq	r0, r0, #8
 80082a2:	3308      	addeq	r3, #8
 80082a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082a8:	bf04      	itt	eq
 80082aa:	0100      	lsleq	r0, r0, #4
 80082ac:	3304      	addeq	r3, #4
 80082ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082b2:	bf04      	itt	eq
 80082b4:	0080      	lsleq	r0, r0, #2
 80082b6:	3302      	addeq	r3, #2
 80082b8:	2800      	cmp	r0, #0
 80082ba:	db05      	blt.n	80082c8 <__hi0bits+0x38>
 80082bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80082c0:	f103 0301 	add.w	r3, r3, #1
 80082c4:	bf08      	it	eq
 80082c6:	2320      	moveq	r3, #32
 80082c8:	4618      	mov	r0, r3
 80082ca:	4770      	bx	lr
 80082cc:	2300      	movs	r3, #0
 80082ce:	e7e4      	b.n	800829a <__hi0bits+0xa>

080082d0 <__lo0bits>:
 80082d0:	6803      	ldr	r3, [r0, #0]
 80082d2:	f013 0207 	ands.w	r2, r3, #7
 80082d6:	d00c      	beq.n	80082f2 <__lo0bits+0x22>
 80082d8:	07d9      	lsls	r1, r3, #31
 80082da:	d422      	bmi.n	8008322 <__lo0bits+0x52>
 80082dc:	079a      	lsls	r2, r3, #30
 80082de:	bf49      	itett	mi
 80082e0:	085b      	lsrmi	r3, r3, #1
 80082e2:	089b      	lsrpl	r3, r3, #2
 80082e4:	6003      	strmi	r3, [r0, #0]
 80082e6:	2201      	movmi	r2, #1
 80082e8:	bf5c      	itt	pl
 80082ea:	6003      	strpl	r3, [r0, #0]
 80082ec:	2202      	movpl	r2, #2
 80082ee:	4610      	mov	r0, r2
 80082f0:	4770      	bx	lr
 80082f2:	b299      	uxth	r1, r3
 80082f4:	b909      	cbnz	r1, 80082fa <__lo0bits+0x2a>
 80082f6:	0c1b      	lsrs	r3, r3, #16
 80082f8:	2210      	movs	r2, #16
 80082fa:	b2d9      	uxtb	r1, r3
 80082fc:	b909      	cbnz	r1, 8008302 <__lo0bits+0x32>
 80082fe:	3208      	adds	r2, #8
 8008300:	0a1b      	lsrs	r3, r3, #8
 8008302:	0719      	lsls	r1, r3, #28
 8008304:	bf04      	itt	eq
 8008306:	091b      	lsreq	r3, r3, #4
 8008308:	3204      	addeq	r2, #4
 800830a:	0799      	lsls	r1, r3, #30
 800830c:	bf04      	itt	eq
 800830e:	089b      	lsreq	r3, r3, #2
 8008310:	3202      	addeq	r2, #2
 8008312:	07d9      	lsls	r1, r3, #31
 8008314:	d403      	bmi.n	800831e <__lo0bits+0x4e>
 8008316:	085b      	lsrs	r3, r3, #1
 8008318:	f102 0201 	add.w	r2, r2, #1
 800831c:	d003      	beq.n	8008326 <__lo0bits+0x56>
 800831e:	6003      	str	r3, [r0, #0]
 8008320:	e7e5      	b.n	80082ee <__lo0bits+0x1e>
 8008322:	2200      	movs	r2, #0
 8008324:	e7e3      	b.n	80082ee <__lo0bits+0x1e>
 8008326:	2220      	movs	r2, #32
 8008328:	e7e1      	b.n	80082ee <__lo0bits+0x1e>
	...

0800832c <__i2b>:
 800832c:	b510      	push	{r4, lr}
 800832e:	460c      	mov	r4, r1
 8008330:	2101      	movs	r1, #1
 8008332:	f7ff febb 	bl	80080ac <_Balloc>
 8008336:	4602      	mov	r2, r0
 8008338:	b928      	cbnz	r0, 8008346 <__i2b+0x1a>
 800833a:	4b05      	ldr	r3, [pc, #20]	; (8008350 <__i2b+0x24>)
 800833c:	4805      	ldr	r0, [pc, #20]	; (8008354 <__i2b+0x28>)
 800833e:	f240 1145 	movw	r1, #325	; 0x145
 8008342:	f7ff fa2b 	bl	800779c <__assert_func>
 8008346:	2301      	movs	r3, #1
 8008348:	6144      	str	r4, [r0, #20]
 800834a:	6103      	str	r3, [r0, #16]
 800834c:	bd10      	pop	{r4, pc}
 800834e:	bf00      	nop
 8008350:	08009797 	.word	0x08009797
 8008354:	08009808 	.word	0x08009808

08008358 <__multiply>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	4691      	mov	r9, r2
 800835e:	690a      	ldr	r2, [r1, #16]
 8008360:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008364:	429a      	cmp	r2, r3
 8008366:	bfb8      	it	lt
 8008368:	460b      	movlt	r3, r1
 800836a:	460c      	mov	r4, r1
 800836c:	bfbc      	itt	lt
 800836e:	464c      	movlt	r4, r9
 8008370:	4699      	movlt	r9, r3
 8008372:	6927      	ldr	r7, [r4, #16]
 8008374:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008378:	68a3      	ldr	r3, [r4, #8]
 800837a:	6861      	ldr	r1, [r4, #4]
 800837c:	eb07 060a 	add.w	r6, r7, sl
 8008380:	42b3      	cmp	r3, r6
 8008382:	b085      	sub	sp, #20
 8008384:	bfb8      	it	lt
 8008386:	3101      	addlt	r1, #1
 8008388:	f7ff fe90 	bl	80080ac <_Balloc>
 800838c:	b930      	cbnz	r0, 800839c <__multiply+0x44>
 800838e:	4602      	mov	r2, r0
 8008390:	4b44      	ldr	r3, [pc, #272]	; (80084a4 <__multiply+0x14c>)
 8008392:	4845      	ldr	r0, [pc, #276]	; (80084a8 <__multiply+0x150>)
 8008394:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008398:	f7ff fa00 	bl	800779c <__assert_func>
 800839c:	f100 0514 	add.w	r5, r0, #20
 80083a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083a4:	462b      	mov	r3, r5
 80083a6:	2200      	movs	r2, #0
 80083a8:	4543      	cmp	r3, r8
 80083aa:	d321      	bcc.n	80083f0 <__multiply+0x98>
 80083ac:	f104 0314 	add.w	r3, r4, #20
 80083b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80083b4:	f109 0314 	add.w	r3, r9, #20
 80083b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083bc:	9202      	str	r2, [sp, #8]
 80083be:	1b3a      	subs	r2, r7, r4
 80083c0:	3a15      	subs	r2, #21
 80083c2:	f022 0203 	bic.w	r2, r2, #3
 80083c6:	3204      	adds	r2, #4
 80083c8:	f104 0115 	add.w	r1, r4, #21
 80083cc:	428f      	cmp	r7, r1
 80083ce:	bf38      	it	cc
 80083d0:	2204      	movcc	r2, #4
 80083d2:	9201      	str	r2, [sp, #4]
 80083d4:	9a02      	ldr	r2, [sp, #8]
 80083d6:	9303      	str	r3, [sp, #12]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d80c      	bhi.n	80083f6 <__multiply+0x9e>
 80083dc:	2e00      	cmp	r6, #0
 80083de:	dd03      	ble.n	80083e8 <__multiply+0x90>
 80083e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d05b      	beq.n	80084a0 <__multiply+0x148>
 80083e8:	6106      	str	r6, [r0, #16]
 80083ea:	b005      	add	sp, #20
 80083ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f0:	f843 2b04 	str.w	r2, [r3], #4
 80083f4:	e7d8      	b.n	80083a8 <__multiply+0x50>
 80083f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80083fa:	f1ba 0f00 	cmp.w	sl, #0
 80083fe:	d024      	beq.n	800844a <__multiply+0xf2>
 8008400:	f104 0e14 	add.w	lr, r4, #20
 8008404:	46a9      	mov	r9, r5
 8008406:	f04f 0c00 	mov.w	ip, #0
 800840a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800840e:	f8d9 1000 	ldr.w	r1, [r9]
 8008412:	fa1f fb82 	uxth.w	fp, r2
 8008416:	b289      	uxth	r1, r1
 8008418:	fb0a 110b 	mla	r1, sl, fp, r1
 800841c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008420:	f8d9 2000 	ldr.w	r2, [r9]
 8008424:	4461      	add	r1, ip
 8008426:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800842a:	fb0a c20b 	mla	r2, sl, fp, ip
 800842e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008432:	b289      	uxth	r1, r1
 8008434:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008438:	4577      	cmp	r7, lr
 800843a:	f849 1b04 	str.w	r1, [r9], #4
 800843e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008442:	d8e2      	bhi.n	800840a <__multiply+0xb2>
 8008444:	9a01      	ldr	r2, [sp, #4]
 8008446:	f845 c002 	str.w	ip, [r5, r2]
 800844a:	9a03      	ldr	r2, [sp, #12]
 800844c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008450:	3304      	adds	r3, #4
 8008452:	f1b9 0f00 	cmp.w	r9, #0
 8008456:	d021      	beq.n	800849c <__multiply+0x144>
 8008458:	6829      	ldr	r1, [r5, #0]
 800845a:	f104 0c14 	add.w	ip, r4, #20
 800845e:	46ae      	mov	lr, r5
 8008460:	f04f 0a00 	mov.w	sl, #0
 8008464:	f8bc b000 	ldrh.w	fp, [ip]
 8008468:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800846c:	fb09 220b 	mla	r2, r9, fp, r2
 8008470:	4452      	add	r2, sl
 8008472:	b289      	uxth	r1, r1
 8008474:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008478:	f84e 1b04 	str.w	r1, [lr], #4
 800847c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008480:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008484:	f8be 1000 	ldrh.w	r1, [lr]
 8008488:	fb09 110a 	mla	r1, r9, sl, r1
 800848c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008490:	4567      	cmp	r7, ip
 8008492:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008496:	d8e5      	bhi.n	8008464 <__multiply+0x10c>
 8008498:	9a01      	ldr	r2, [sp, #4]
 800849a:	50a9      	str	r1, [r5, r2]
 800849c:	3504      	adds	r5, #4
 800849e:	e799      	b.n	80083d4 <__multiply+0x7c>
 80084a0:	3e01      	subs	r6, #1
 80084a2:	e79b      	b.n	80083dc <__multiply+0x84>
 80084a4:	08009797 	.word	0x08009797
 80084a8:	08009808 	.word	0x08009808

080084ac <__pow5mult>:
 80084ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084b0:	4615      	mov	r5, r2
 80084b2:	f012 0203 	ands.w	r2, r2, #3
 80084b6:	4606      	mov	r6, r0
 80084b8:	460f      	mov	r7, r1
 80084ba:	d007      	beq.n	80084cc <__pow5mult+0x20>
 80084bc:	4c25      	ldr	r4, [pc, #148]	; (8008554 <__pow5mult+0xa8>)
 80084be:	3a01      	subs	r2, #1
 80084c0:	2300      	movs	r3, #0
 80084c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084c6:	f7ff fe53 	bl	8008170 <__multadd>
 80084ca:	4607      	mov	r7, r0
 80084cc:	10ad      	asrs	r5, r5, #2
 80084ce:	d03d      	beq.n	800854c <__pow5mult+0xa0>
 80084d0:	69f4      	ldr	r4, [r6, #28]
 80084d2:	b97c      	cbnz	r4, 80084f4 <__pow5mult+0x48>
 80084d4:	2010      	movs	r0, #16
 80084d6:	f7ff fd23 	bl	8007f20 <malloc>
 80084da:	4602      	mov	r2, r0
 80084dc:	61f0      	str	r0, [r6, #28]
 80084de:	b928      	cbnz	r0, 80084ec <__pow5mult+0x40>
 80084e0:	4b1d      	ldr	r3, [pc, #116]	; (8008558 <__pow5mult+0xac>)
 80084e2:	481e      	ldr	r0, [pc, #120]	; (800855c <__pow5mult+0xb0>)
 80084e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80084e8:	f7ff f958 	bl	800779c <__assert_func>
 80084ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084f0:	6004      	str	r4, [r0, #0]
 80084f2:	60c4      	str	r4, [r0, #12]
 80084f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80084f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084fc:	b94c      	cbnz	r4, 8008512 <__pow5mult+0x66>
 80084fe:	f240 2171 	movw	r1, #625	; 0x271
 8008502:	4630      	mov	r0, r6
 8008504:	f7ff ff12 	bl	800832c <__i2b>
 8008508:	2300      	movs	r3, #0
 800850a:	f8c8 0008 	str.w	r0, [r8, #8]
 800850e:	4604      	mov	r4, r0
 8008510:	6003      	str	r3, [r0, #0]
 8008512:	f04f 0900 	mov.w	r9, #0
 8008516:	07eb      	lsls	r3, r5, #31
 8008518:	d50a      	bpl.n	8008530 <__pow5mult+0x84>
 800851a:	4639      	mov	r1, r7
 800851c:	4622      	mov	r2, r4
 800851e:	4630      	mov	r0, r6
 8008520:	f7ff ff1a 	bl	8008358 <__multiply>
 8008524:	4639      	mov	r1, r7
 8008526:	4680      	mov	r8, r0
 8008528:	4630      	mov	r0, r6
 800852a:	f7ff fdff 	bl	800812c <_Bfree>
 800852e:	4647      	mov	r7, r8
 8008530:	106d      	asrs	r5, r5, #1
 8008532:	d00b      	beq.n	800854c <__pow5mult+0xa0>
 8008534:	6820      	ldr	r0, [r4, #0]
 8008536:	b938      	cbnz	r0, 8008548 <__pow5mult+0x9c>
 8008538:	4622      	mov	r2, r4
 800853a:	4621      	mov	r1, r4
 800853c:	4630      	mov	r0, r6
 800853e:	f7ff ff0b 	bl	8008358 <__multiply>
 8008542:	6020      	str	r0, [r4, #0]
 8008544:	f8c0 9000 	str.w	r9, [r0]
 8008548:	4604      	mov	r4, r0
 800854a:	e7e4      	b.n	8008516 <__pow5mult+0x6a>
 800854c:	4638      	mov	r0, r7
 800854e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008552:	bf00      	nop
 8008554:	08009958 	.word	0x08009958
 8008558:	08009524 	.word	0x08009524
 800855c:	08009808 	.word	0x08009808

08008560 <__lshift>:
 8008560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008564:	460c      	mov	r4, r1
 8008566:	6849      	ldr	r1, [r1, #4]
 8008568:	6923      	ldr	r3, [r4, #16]
 800856a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800856e:	68a3      	ldr	r3, [r4, #8]
 8008570:	4607      	mov	r7, r0
 8008572:	4691      	mov	r9, r2
 8008574:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008578:	f108 0601 	add.w	r6, r8, #1
 800857c:	42b3      	cmp	r3, r6
 800857e:	db0b      	blt.n	8008598 <__lshift+0x38>
 8008580:	4638      	mov	r0, r7
 8008582:	f7ff fd93 	bl	80080ac <_Balloc>
 8008586:	4605      	mov	r5, r0
 8008588:	b948      	cbnz	r0, 800859e <__lshift+0x3e>
 800858a:	4602      	mov	r2, r0
 800858c:	4b28      	ldr	r3, [pc, #160]	; (8008630 <__lshift+0xd0>)
 800858e:	4829      	ldr	r0, [pc, #164]	; (8008634 <__lshift+0xd4>)
 8008590:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008594:	f7ff f902 	bl	800779c <__assert_func>
 8008598:	3101      	adds	r1, #1
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	e7ee      	b.n	800857c <__lshift+0x1c>
 800859e:	2300      	movs	r3, #0
 80085a0:	f100 0114 	add.w	r1, r0, #20
 80085a4:	f100 0210 	add.w	r2, r0, #16
 80085a8:	4618      	mov	r0, r3
 80085aa:	4553      	cmp	r3, sl
 80085ac:	db33      	blt.n	8008616 <__lshift+0xb6>
 80085ae:	6920      	ldr	r0, [r4, #16]
 80085b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085b4:	f104 0314 	add.w	r3, r4, #20
 80085b8:	f019 091f 	ands.w	r9, r9, #31
 80085bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085c4:	d02b      	beq.n	800861e <__lshift+0xbe>
 80085c6:	f1c9 0e20 	rsb	lr, r9, #32
 80085ca:	468a      	mov	sl, r1
 80085cc:	2200      	movs	r2, #0
 80085ce:	6818      	ldr	r0, [r3, #0]
 80085d0:	fa00 f009 	lsl.w	r0, r0, r9
 80085d4:	4310      	orrs	r0, r2
 80085d6:	f84a 0b04 	str.w	r0, [sl], #4
 80085da:	f853 2b04 	ldr.w	r2, [r3], #4
 80085de:	459c      	cmp	ip, r3
 80085e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80085e4:	d8f3      	bhi.n	80085ce <__lshift+0x6e>
 80085e6:	ebac 0304 	sub.w	r3, ip, r4
 80085ea:	3b15      	subs	r3, #21
 80085ec:	f023 0303 	bic.w	r3, r3, #3
 80085f0:	3304      	adds	r3, #4
 80085f2:	f104 0015 	add.w	r0, r4, #21
 80085f6:	4584      	cmp	ip, r0
 80085f8:	bf38      	it	cc
 80085fa:	2304      	movcc	r3, #4
 80085fc:	50ca      	str	r2, [r1, r3]
 80085fe:	b10a      	cbz	r2, 8008604 <__lshift+0xa4>
 8008600:	f108 0602 	add.w	r6, r8, #2
 8008604:	3e01      	subs	r6, #1
 8008606:	4638      	mov	r0, r7
 8008608:	612e      	str	r6, [r5, #16]
 800860a:	4621      	mov	r1, r4
 800860c:	f7ff fd8e 	bl	800812c <_Bfree>
 8008610:	4628      	mov	r0, r5
 8008612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008616:	f842 0f04 	str.w	r0, [r2, #4]!
 800861a:	3301      	adds	r3, #1
 800861c:	e7c5      	b.n	80085aa <__lshift+0x4a>
 800861e:	3904      	subs	r1, #4
 8008620:	f853 2b04 	ldr.w	r2, [r3], #4
 8008624:	f841 2f04 	str.w	r2, [r1, #4]!
 8008628:	459c      	cmp	ip, r3
 800862a:	d8f9      	bhi.n	8008620 <__lshift+0xc0>
 800862c:	e7ea      	b.n	8008604 <__lshift+0xa4>
 800862e:	bf00      	nop
 8008630:	08009797 	.word	0x08009797
 8008634:	08009808 	.word	0x08009808

08008638 <__mcmp>:
 8008638:	b530      	push	{r4, r5, lr}
 800863a:	6902      	ldr	r2, [r0, #16]
 800863c:	690c      	ldr	r4, [r1, #16]
 800863e:	1b12      	subs	r2, r2, r4
 8008640:	d10e      	bne.n	8008660 <__mcmp+0x28>
 8008642:	f100 0314 	add.w	r3, r0, #20
 8008646:	3114      	adds	r1, #20
 8008648:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800864c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008650:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008654:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008658:	42a5      	cmp	r5, r4
 800865a:	d003      	beq.n	8008664 <__mcmp+0x2c>
 800865c:	d305      	bcc.n	800866a <__mcmp+0x32>
 800865e:	2201      	movs	r2, #1
 8008660:	4610      	mov	r0, r2
 8008662:	bd30      	pop	{r4, r5, pc}
 8008664:	4283      	cmp	r3, r0
 8008666:	d3f3      	bcc.n	8008650 <__mcmp+0x18>
 8008668:	e7fa      	b.n	8008660 <__mcmp+0x28>
 800866a:	f04f 32ff 	mov.w	r2, #4294967295
 800866e:	e7f7      	b.n	8008660 <__mcmp+0x28>

08008670 <__mdiff>:
 8008670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008674:	460c      	mov	r4, r1
 8008676:	4606      	mov	r6, r0
 8008678:	4611      	mov	r1, r2
 800867a:	4620      	mov	r0, r4
 800867c:	4690      	mov	r8, r2
 800867e:	f7ff ffdb 	bl	8008638 <__mcmp>
 8008682:	1e05      	subs	r5, r0, #0
 8008684:	d110      	bne.n	80086a8 <__mdiff+0x38>
 8008686:	4629      	mov	r1, r5
 8008688:	4630      	mov	r0, r6
 800868a:	f7ff fd0f 	bl	80080ac <_Balloc>
 800868e:	b930      	cbnz	r0, 800869e <__mdiff+0x2e>
 8008690:	4b3a      	ldr	r3, [pc, #232]	; (800877c <__mdiff+0x10c>)
 8008692:	4602      	mov	r2, r0
 8008694:	f240 2137 	movw	r1, #567	; 0x237
 8008698:	4839      	ldr	r0, [pc, #228]	; (8008780 <__mdiff+0x110>)
 800869a:	f7ff f87f 	bl	800779c <__assert_func>
 800869e:	2301      	movs	r3, #1
 80086a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a8:	bfa4      	itt	ge
 80086aa:	4643      	movge	r3, r8
 80086ac:	46a0      	movge	r8, r4
 80086ae:	4630      	mov	r0, r6
 80086b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80086b4:	bfa6      	itte	ge
 80086b6:	461c      	movge	r4, r3
 80086b8:	2500      	movge	r5, #0
 80086ba:	2501      	movlt	r5, #1
 80086bc:	f7ff fcf6 	bl	80080ac <_Balloc>
 80086c0:	b920      	cbnz	r0, 80086cc <__mdiff+0x5c>
 80086c2:	4b2e      	ldr	r3, [pc, #184]	; (800877c <__mdiff+0x10c>)
 80086c4:	4602      	mov	r2, r0
 80086c6:	f240 2145 	movw	r1, #581	; 0x245
 80086ca:	e7e5      	b.n	8008698 <__mdiff+0x28>
 80086cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086d0:	6926      	ldr	r6, [r4, #16]
 80086d2:	60c5      	str	r5, [r0, #12]
 80086d4:	f104 0914 	add.w	r9, r4, #20
 80086d8:	f108 0514 	add.w	r5, r8, #20
 80086dc:	f100 0e14 	add.w	lr, r0, #20
 80086e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80086e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086e8:	f108 0210 	add.w	r2, r8, #16
 80086ec:	46f2      	mov	sl, lr
 80086ee:	2100      	movs	r1, #0
 80086f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80086f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80086f8:	fa11 f88b 	uxtah	r8, r1, fp
 80086fc:	b299      	uxth	r1, r3
 80086fe:	0c1b      	lsrs	r3, r3, #16
 8008700:	eba8 0801 	sub.w	r8, r8, r1
 8008704:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008708:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800870c:	fa1f f888 	uxth.w	r8, r8
 8008710:	1419      	asrs	r1, r3, #16
 8008712:	454e      	cmp	r6, r9
 8008714:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008718:	f84a 3b04 	str.w	r3, [sl], #4
 800871c:	d8e8      	bhi.n	80086f0 <__mdiff+0x80>
 800871e:	1b33      	subs	r3, r6, r4
 8008720:	3b15      	subs	r3, #21
 8008722:	f023 0303 	bic.w	r3, r3, #3
 8008726:	3304      	adds	r3, #4
 8008728:	3415      	adds	r4, #21
 800872a:	42a6      	cmp	r6, r4
 800872c:	bf38      	it	cc
 800872e:	2304      	movcc	r3, #4
 8008730:	441d      	add	r5, r3
 8008732:	4473      	add	r3, lr
 8008734:	469e      	mov	lr, r3
 8008736:	462e      	mov	r6, r5
 8008738:	4566      	cmp	r6, ip
 800873a:	d30e      	bcc.n	800875a <__mdiff+0xea>
 800873c:	f10c 0203 	add.w	r2, ip, #3
 8008740:	1b52      	subs	r2, r2, r5
 8008742:	f022 0203 	bic.w	r2, r2, #3
 8008746:	3d03      	subs	r5, #3
 8008748:	45ac      	cmp	ip, r5
 800874a:	bf38      	it	cc
 800874c:	2200      	movcc	r2, #0
 800874e:	4413      	add	r3, r2
 8008750:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008754:	b17a      	cbz	r2, 8008776 <__mdiff+0x106>
 8008756:	6107      	str	r7, [r0, #16]
 8008758:	e7a4      	b.n	80086a4 <__mdiff+0x34>
 800875a:	f856 8b04 	ldr.w	r8, [r6], #4
 800875e:	fa11 f288 	uxtah	r2, r1, r8
 8008762:	1414      	asrs	r4, r2, #16
 8008764:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008768:	b292      	uxth	r2, r2
 800876a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800876e:	f84e 2b04 	str.w	r2, [lr], #4
 8008772:	1421      	asrs	r1, r4, #16
 8008774:	e7e0      	b.n	8008738 <__mdiff+0xc8>
 8008776:	3f01      	subs	r7, #1
 8008778:	e7ea      	b.n	8008750 <__mdiff+0xe0>
 800877a:	bf00      	nop
 800877c:	08009797 	.word	0x08009797
 8008780:	08009808 	.word	0x08009808

08008784 <__ulp>:
 8008784:	b082      	sub	sp, #8
 8008786:	ed8d 0b00 	vstr	d0, [sp]
 800878a:	9a01      	ldr	r2, [sp, #4]
 800878c:	4b0f      	ldr	r3, [pc, #60]	; (80087cc <__ulp+0x48>)
 800878e:	4013      	ands	r3, r2
 8008790:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008794:	2b00      	cmp	r3, #0
 8008796:	dc08      	bgt.n	80087aa <__ulp+0x26>
 8008798:	425b      	negs	r3, r3
 800879a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800879e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80087a2:	da04      	bge.n	80087ae <__ulp+0x2a>
 80087a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80087a8:	4113      	asrs	r3, r2
 80087aa:	2200      	movs	r2, #0
 80087ac:	e008      	b.n	80087c0 <__ulp+0x3c>
 80087ae:	f1a2 0314 	sub.w	r3, r2, #20
 80087b2:	2b1e      	cmp	r3, #30
 80087b4:	bfda      	itte	le
 80087b6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80087ba:	40da      	lsrle	r2, r3
 80087bc:	2201      	movgt	r2, #1
 80087be:	2300      	movs	r3, #0
 80087c0:	4619      	mov	r1, r3
 80087c2:	4610      	mov	r0, r2
 80087c4:	ec41 0b10 	vmov	d0, r0, r1
 80087c8:	b002      	add	sp, #8
 80087ca:	4770      	bx	lr
 80087cc:	7ff00000 	.word	0x7ff00000

080087d0 <__b2d>:
 80087d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d4:	6906      	ldr	r6, [r0, #16]
 80087d6:	f100 0814 	add.w	r8, r0, #20
 80087da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80087de:	1f37      	subs	r7, r6, #4
 80087e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80087e4:	4610      	mov	r0, r2
 80087e6:	f7ff fd53 	bl	8008290 <__hi0bits>
 80087ea:	f1c0 0320 	rsb	r3, r0, #32
 80087ee:	280a      	cmp	r0, #10
 80087f0:	600b      	str	r3, [r1, #0]
 80087f2:	491b      	ldr	r1, [pc, #108]	; (8008860 <__b2d+0x90>)
 80087f4:	dc15      	bgt.n	8008822 <__b2d+0x52>
 80087f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80087fa:	fa22 f30c 	lsr.w	r3, r2, ip
 80087fe:	45b8      	cmp	r8, r7
 8008800:	ea43 0501 	orr.w	r5, r3, r1
 8008804:	bf34      	ite	cc
 8008806:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800880a:	2300      	movcs	r3, #0
 800880c:	3015      	adds	r0, #21
 800880e:	fa02 f000 	lsl.w	r0, r2, r0
 8008812:	fa23 f30c 	lsr.w	r3, r3, ip
 8008816:	4303      	orrs	r3, r0
 8008818:	461c      	mov	r4, r3
 800881a:	ec45 4b10 	vmov	d0, r4, r5
 800881e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008822:	45b8      	cmp	r8, r7
 8008824:	bf3a      	itte	cc
 8008826:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800882a:	f1a6 0708 	subcc.w	r7, r6, #8
 800882e:	2300      	movcs	r3, #0
 8008830:	380b      	subs	r0, #11
 8008832:	d012      	beq.n	800885a <__b2d+0x8a>
 8008834:	f1c0 0120 	rsb	r1, r0, #32
 8008838:	fa23 f401 	lsr.w	r4, r3, r1
 800883c:	4082      	lsls	r2, r0
 800883e:	4322      	orrs	r2, r4
 8008840:	4547      	cmp	r7, r8
 8008842:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008846:	bf8c      	ite	hi
 8008848:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800884c:	2200      	movls	r2, #0
 800884e:	4083      	lsls	r3, r0
 8008850:	40ca      	lsrs	r2, r1
 8008852:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008856:	4313      	orrs	r3, r2
 8008858:	e7de      	b.n	8008818 <__b2d+0x48>
 800885a:	ea42 0501 	orr.w	r5, r2, r1
 800885e:	e7db      	b.n	8008818 <__b2d+0x48>
 8008860:	3ff00000 	.word	0x3ff00000

08008864 <__d2b>:
 8008864:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008868:	460f      	mov	r7, r1
 800886a:	2101      	movs	r1, #1
 800886c:	ec59 8b10 	vmov	r8, r9, d0
 8008870:	4616      	mov	r6, r2
 8008872:	f7ff fc1b 	bl	80080ac <_Balloc>
 8008876:	4604      	mov	r4, r0
 8008878:	b930      	cbnz	r0, 8008888 <__d2b+0x24>
 800887a:	4602      	mov	r2, r0
 800887c:	4b24      	ldr	r3, [pc, #144]	; (8008910 <__d2b+0xac>)
 800887e:	4825      	ldr	r0, [pc, #148]	; (8008914 <__d2b+0xb0>)
 8008880:	f240 310f 	movw	r1, #783	; 0x30f
 8008884:	f7fe ff8a 	bl	800779c <__assert_func>
 8008888:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800888c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008890:	bb2d      	cbnz	r5, 80088de <__d2b+0x7a>
 8008892:	9301      	str	r3, [sp, #4]
 8008894:	f1b8 0300 	subs.w	r3, r8, #0
 8008898:	d026      	beq.n	80088e8 <__d2b+0x84>
 800889a:	4668      	mov	r0, sp
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	f7ff fd17 	bl	80082d0 <__lo0bits>
 80088a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80088a6:	b1e8      	cbz	r0, 80088e4 <__d2b+0x80>
 80088a8:	f1c0 0320 	rsb	r3, r0, #32
 80088ac:	fa02 f303 	lsl.w	r3, r2, r3
 80088b0:	430b      	orrs	r3, r1
 80088b2:	40c2      	lsrs	r2, r0
 80088b4:	6163      	str	r3, [r4, #20]
 80088b6:	9201      	str	r2, [sp, #4]
 80088b8:	9b01      	ldr	r3, [sp, #4]
 80088ba:	61a3      	str	r3, [r4, #24]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	bf14      	ite	ne
 80088c0:	2202      	movne	r2, #2
 80088c2:	2201      	moveq	r2, #1
 80088c4:	6122      	str	r2, [r4, #16]
 80088c6:	b1bd      	cbz	r5, 80088f8 <__d2b+0x94>
 80088c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088cc:	4405      	add	r5, r0
 80088ce:	603d      	str	r5, [r7, #0]
 80088d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088d4:	6030      	str	r0, [r6, #0]
 80088d6:	4620      	mov	r0, r4
 80088d8:	b003      	add	sp, #12
 80088da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088e2:	e7d6      	b.n	8008892 <__d2b+0x2e>
 80088e4:	6161      	str	r1, [r4, #20]
 80088e6:	e7e7      	b.n	80088b8 <__d2b+0x54>
 80088e8:	a801      	add	r0, sp, #4
 80088ea:	f7ff fcf1 	bl	80082d0 <__lo0bits>
 80088ee:	9b01      	ldr	r3, [sp, #4]
 80088f0:	6163      	str	r3, [r4, #20]
 80088f2:	3020      	adds	r0, #32
 80088f4:	2201      	movs	r2, #1
 80088f6:	e7e5      	b.n	80088c4 <__d2b+0x60>
 80088f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008900:	6038      	str	r0, [r7, #0]
 8008902:	6918      	ldr	r0, [r3, #16]
 8008904:	f7ff fcc4 	bl	8008290 <__hi0bits>
 8008908:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800890c:	e7e2      	b.n	80088d4 <__d2b+0x70>
 800890e:	bf00      	nop
 8008910:	08009797 	.word	0x08009797
 8008914:	08009808 	.word	0x08009808

08008918 <__ratio>:
 8008918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800891c:	4688      	mov	r8, r1
 800891e:	4669      	mov	r1, sp
 8008920:	4681      	mov	r9, r0
 8008922:	f7ff ff55 	bl	80087d0 <__b2d>
 8008926:	a901      	add	r1, sp, #4
 8008928:	4640      	mov	r0, r8
 800892a:	ec55 4b10 	vmov	r4, r5, d0
 800892e:	f7ff ff4f 	bl	80087d0 <__b2d>
 8008932:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008936:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800893a:	eba3 0c02 	sub.w	ip, r3, r2
 800893e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008942:	1a9b      	subs	r3, r3, r2
 8008944:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008948:	ec51 0b10 	vmov	r0, r1, d0
 800894c:	2b00      	cmp	r3, #0
 800894e:	bfd6      	itet	le
 8008950:	460a      	movle	r2, r1
 8008952:	462a      	movgt	r2, r5
 8008954:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008958:	468b      	mov	fp, r1
 800895a:	462f      	mov	r7, r5
 800895c:	bfd4      	ite	le
 800895e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008962:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008966:	4620      	mov	r0, r4
 8008968:	ee10 2a10 	vmov	r2, s0
 800896c:	465b      	mov	r3, fp
 800896e:	4639      	mov	r1, r7
 8008970:	f7f7 ff6c 	bl	800084c <__aeabi_ddiv>
 8008974:	ec41 0b10 	vmov	d0, r0, r1
 8008978:	b003      	add	sp, #12
 800897a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800897e <__copybits>:
 800897e:	3901      	subs	r1, #1
 8008980:	b570      	push	{r4, r5, r6, lr}
 8008982:	1149      	asrs	r1, r1, #5
 8008984:	6914      	ldr	r4, [r2, #16]
 8008986:	3101      	adds	r1, #1
 8008988:	f102 0314 	add.w	r3, r2, #20
 800898c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008990:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008994:	1f05      	subs	r5, r0, #4
 8008996:	42a3      	cmp	r3, r4
 8008998:	d30c      	bcc.n	80089b4 <__copybits+0x36>
 800899a:	1aa3      	subs	r3, r4, r2
 800899c:	3b11      	subs	r3, #17
 800899e:	f023 0303 	bic.w	r3, r3, #3
 80089a2:	3211      	adds	r2, #17
 80089a4:	42a2      	cmp	r2, r4
 80089a6:	bf88      	it	hi
 80089a8:	2300      	movhi	r3, #0
 80089aa:	4418      	add	r0, r3
 80089ac:	2300      	movs	r3, #0
 80089ae:	4288      	cmp	r0, r1
 80089b0:	d305      	bcc.n	80089be <__copybits+0x40>
 80089b2:	bd70      	pop	{r4, r5, r6, pc}
 80089b4:	f853 6b04 	ldr.w	r6, [r3], #4
 80089b8:	f845 6f04 	str.w	r6, [r5, #4]!
 80089bc:	e7eb      	b.n	8008996 <__copybits+0x18>
 80089be:	f840 3b04 	str.w	r3, [r0], #4
 80089c2:	e7f4      	b.n	80089ae <__copybits+0x30>

080089c4 <__any_on>:
 80089c4:	f100 0214 	add.w	r2, r0, #20
 80089c8:	6900      	ldr	r0, [r0, #16]
 80089ca:	114b      	asrs	r3, r1, #5
 80089cc:	4298      	cmp	r0, r3
 80089ce:	b510      	push	{r4, lr}
 80089d0:	db11      	blt.n	80089f6 <__any_on+0x32>
 80089d2:	dd0a      	ble.n	80089ea <__any_on+0x26>
 80089d4:	f011 011f 	ands.w	r1, r1, #31
 80089d8:	d007      	beq.n	80089ea <__any_on+0x26>
 80089da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80089de:	fa24 f001 	lsr.w	r0, r4, r1
 80089e2:	fa00 f101 	lsl.w	r1, r0, r1
 80089e6:	428c      	cmp	r4, r1
 80089e8:	d10b      	bne.n	8008a02 <__any_on+0x3e>
 80089ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d803      	bhi.n	80089fa <__any_on+0x36>
 80089f2:	2000      	movs	r0, #0
 80089f4:	bd10      	pop	{r4, pc}
 80089f6:	4603      	mov	r3, r0
 80089f8:	e7f7      	b.n	80089ea <__any_on+0x26>
 80089fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089fe:	2900      	cmp	r1, #0
 8008a00:	d0f5      	beq.n	80089ee <__any_on+0x2a>
 8008a02:	2001      	movs	r0, #1
 8008a04:	e7f6      	b.n	80089f4 <__any_on+0x30>

08008a06 <__ascii_wctomb>:
 8008a06:	b149      	cbz	r1, 8008a1c <__ascii_wctomb+0x16>
 8008a08:	2aff      	cmp	r2, #255	; 0xff
 8008a0a:	bf85      	ittet	hi
 8008a0c:	238a      	movhi	r3, #138	; 0x8a
 8008a0e:	6003      	strhi	r3, [r0, #0]
 8008a10:	700a      	strbls	r2, [r1, #0]
 8008a12:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a16:	bf98      	it	ls
 8008a18:	2001      	movls	r0, #1
 8008a1a:	4770      	bx	lr
 8008a1c:	4608      	mov	r0, r1
 8008a1e:	4770      	bx	lr

08008a20 <__sflush_r>:
 8008a20:	898a      	ldrh	r2, [r1, #12]
 8008a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a26:	4605      	mov	r5, r0
 8008a28:	0710      	lsls	r0, r2, #28
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	d458      	bmi.n	8008ae0 <__sflush_r+0xc0>
 8008a2e:	684b      	ldr	r3, [r1, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dc05      	bgt.n	8008a40 <__sflush_r+0x20>
 8008a34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	dc02      	bgt.n	8008a40 <__sflush_r+0x20>
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a42:	2e00      	cmp	r6, #0
 8008a44:	d0f9      	beq.n	8008a3a <__sflush_r+0x1a>
 8008a46:	2300      	movs	r3, #0
 8008a48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a4c:	682f      	ldr	r7, [r5, #0]
 8008a4e:	6a21      	ldr	r1, [r4, #32]
 8008a50:	602b      	str	r3, [r5, #0]
 8008a52:	d032      	beq.n	8008aba <__sflush_r+0x9a>
 8008a54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	075a      	lsls	r2, r3, #29
 8008a5a:	d505      	bpl.n	8008a68 <__sflush_r+0x48>
 8008a5c:	6863      	ldr	r3, [r4, #4]
 8008a5e:	1ac0      	subs	r0, r0, r3
 8008a60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a62:	b10b      	cbz	r3, 8008a68 <__sflush_r+0x48>
 8008a64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a66:	1ac0      	subs	r0, r0, r3
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a6e:	6a21      	ldr	r1, [r4, #32]
 8008a70:	4628      	mov	r0, r5
 8008a72:	47b0      	blx	r6
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	89a3      	ldrh	r3, [r4, #12]
 8008a78:	d106      	bne.n	8008a88 <__sflush_r+0x68>
 8008a7a:	6829      	ldr	r1, [r5, #0]
 8008a7c:	291d      	cmp	r1, #29
 8008a7e:	d82b      	bhi.n	8008ad8 <__sflush_r+0xb8>
 8008a80:	4a29      	ldr	r2, [pc, #164]	; (8008b28 <__sflush_r+0x108>)
 8008a82:	410a      	asrs	r2, r1
 8008a84:	07d6      	lsls	r6, r2, #31
 8008a86:	d427      	bmi.n	8008ad8 <__sflush_r+0xb8>
 8008a88:	2200      	movs	r2, #0
 8008a8a:	6062      	str	r2, [r4, #4]
 8008a8c:	04d9      	lsls	r1, r3, #19
 8008a8e:	6922      	ldr	r2, [r4, #16]
 8008a90:	6022      	str	r2, [r4, #0]
 8008a92:	d504      	bpl.n	8008a9e <__sflush_r+0x7e>
 8008a94:	1c42      	adds	r2, r0, #1
 8008a96:	d101      	bne.n	8008a9c <__sflush_r+0x7c>
 8008a98:	682b      	ldr	r3, [r5, #0]
 8008a9a:	b903      	cbnz	r3, 8008a9e <__sflush_r+0x7e>
 8008a9c:	6560      	str	r0, [r4, #84]	; 0x54
 8008a9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008aa0:	602f      	str	r7, [r5, #0]
 8008aa2:	2900      	cmp	r1, #0
 8008aa4:	d0c9      	beq.n	8008a3a <__sflush_r+0x1a>
 8008aa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aaa:	4299      	cmp	r1, r3
 8008aac:	d002      	beq.n	8008ab4 <__sflush_r+0x94>
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f7fe fe92 	bl	80077d8 <_free_r>
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	6360      	str	r0, [r4, #52]	; 0x34
 8008ab8:	e7c0      	b.n	8008a3c <__sflush_r+0x1c>
 8008aba:	2301      	movs	r3, #1
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b0      	blx	r6
 8008ac0:	1c41      	adds	r1, r0, #1
 8008ac2:	d1c8      	bne.n	8008a56 <__sflush_r+0x36>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d0c5      	beq.n	8008a56 <__sflush_r+0x36>
 8008aca:	2b1d      	cmp	r3, #29
 8008acc:	d001      	beq.n	8008ad2 <__sflush_r+0xb2>
 8008ace:	2b16      	cmp	r3, #22
 8008ad0:	d101      	bne.n	8008ad6 <__sflush_r+0xb6>
 8008ad2:	602f      	str	r7, [r5, #0]
 8008ad4:	e7b1      	b.n	8008a3a <__sflush_r+0x1a>
 8008ad6:	89a3      	ldrh	r3, [r4, #12]
 8008ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008adc:	81a3      	strh	r3, [r4, #12]
 8008ade:	e7ad      	b.n	8008a3c <__sflush_r+0x1c>
 8008ae0:	690f      	ldr	r7, [r1, #16]
 8008ae2:	2f00      	cmp	r7, #0
 8008ae4:	d0a9      	beq.n	8008a3a <__sflush_r+0x1a>
 8008ae6:	0793      	lsls	r3, r2, #30
 8008ae8:	680e      	ldr	r6, [r1, #0]
 8008aea:	bf08      	it	eq
 8008aec:	694b      	ldreq	r3, [r1, #20]
 8008aee:	600f      	str	r7, [r1, #0]
 8008af0:	bf18      	it	ne
 8008af2:	2300      	movne	r3, #0
 8008af4:	eba6 0807 	sub.w	r8, r6, r7
 8008af8:	608b      	str	r3, [r1, #8]
 8008afa:	f1b8 0f00 	cmp.w	r8, #0
 8008afe:	dd9c      	ble.n	8008a3a <__sflush_r+0x1a>
 8008b00:	6a21      	ldr	r1, [r4, #32]
 8008b02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b04:	4643      	mov	r3, r8
 8008b06:	463a      	mov	r2, r7
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b0      	blx	r6
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	dc06      	bgt.n	8008b1e <__sflush_r+0xfe>
 8008b10:	89a3      	ldrh	r3, [r4, #12]
 8008b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b16:	81a3      	strh	r3, [r4, #12]
 8008b18:	f04f 30ff 	mov.w	r0, #4294967295
 8008b1c:	e78e      	b.n	8008a3c <__sflush_r+0x1c>
 8008b1e:	4407      	add	r7, r0
 8008b20:	eba8 0800 	sub.w	r8, r8, r0
 8008b24:	e7e9      	b.n	8008afa <__sflush_r+0xda>
 8008b26:	bf00      	nop
 8008b28:	dfbffffe 	.word	0xdfbffffe

08008b2c <_fflush_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	690b      	ldr	r3, [r1, #16]
 8008b30:	4605      	mov	r5, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	b913      	cbnz	r3, 8008b3c <_fflush_r+0x10>
 8008b36:	2500      	movs	r5, #0
 8008b38:	4628      	mov	r0, r5
 8008b3a:	bd38      	pop	{r3, r4, r5, pc}
 8008b3c:	b118      	cbz	r0, 8008b46 <_fflush_r+0x1a>
 8008b3e:	6a03      	ldr	r3, [r0, #32]
 8008b40:	b90b      	cbnz	r3, 8008b46 <_fflush_r+0x1a>
 8008b42:	f7fe fcab 	bl	800749c <__sinit>
 8008b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0f3      	beq.n	8008b36 <_fflush_r+0xa>
 8008b4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b50:	07d0      	lsls	r0, r2, #31
 8008b52:	d404      	bmi.n	8008b5e <_fflush_r+0x32>
 8008b54:	0599      	lsls	r1, r3, #22
 8008b56:	d402      	bmi.n	8008b5e <_fflush_r+0x32>
 8008b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b5a:	f7fe fe00 	bl	800775e <__retarget_lock_acquire_recursive>
 8008b5e:	4628      	mov	r0, r5
 8008b60:	4621      	mov	r1, r4
 8008b62:	f7ff ff5d 	bl	8008a20 <__sflush_r>
 8008b66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b68:	07da      	lsls	r2, r3, #31
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	d4e4      	bmi.n	8008b38 <_fflush_r+0xc>
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	059b      	lsls	r3, r3, #22
 8008b72:	d4e1      	bmi.n	8008b38 <_fflush_r+0xc>
 8008b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b76:	f7fe fdf3 	bl	8007760 <__retarget_lock_release_recursive>
 8008b7a:	e7dd      	b.n	8008b38 <_fflush_r+0xc>

08008b7c <fiprintf>:
 8008b7c:	b40e      	push	{r1, r2, r3}
 8008b7e:	b503      	push	{r0, r1, lr}
 8008b80:	4601      	mov	r1, r0
 8008b82:	ab03      	add	r3, sp, #12
 8008b84:	4805      	ldr	r0, [pc, #20]	; (8008b9c <fiprintf+0x20>)
 8008b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b8a:	6800      	ldr	r0, [r0, #0]
 8008b8c:	9301      	str	r3, [sp, #4]
 8008b8e:	f000 f85d 	bl	8008c4c <_vfiprintf_r>
 8008b92:	b002      	add	sp, #8
 8008b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b98:	b003      	add	sp, #12
 8008b9a:	4770      	bx	lr
 8008b9c:	200001d0 	.word	0x200001d0

08008ba0 <_sbrk_r>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	4d06      	ldr	r5, [pc, #24]	; (8008bbc <_sbrk_r+0x1c>)
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	4604      	mov	r4, r0
 8008ba8:	4608      	mov	r0, r1
 8008baa:	602b      	str	r3, [r5, #0]
 8008bac:	f7f9 fd28 	bl	8002600 <_sbrk>
 8008bb0:	1c43      	adds	r3, r0, #1
 8008bb2:	d102      	bne.n	8008bba <_sbrk_r+0x1a>
 8008bb4:	682b      	ldr	r3, [r5, #0]
 8008bb6:	b103      	cbz	r3, 8008bba <_sbrk_r+0x1a>
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	bd38      	pop	{r3, r4, r5, pc}
 8008bbc:	20000734 	.word	0x20000734

08008bc0 <abort>:
 8008bc0:	b508      	push	{r3, lr}
 8008bc2:	2006      	movs	r0, #6
 8008bc4:	f000 fbaa 	bl	800931c <raise>
 8008bc8:	2001      	movs	r0, #1
 8008bca:	f7f9 fca1 	bl	8002510 <_exit>

08008bce <_calloc_r>:
 8008bce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bd0:	fba1 2402 	umull	r2, r4, r1, r2
 8008bd4:	b94c      	cbnz	r4, 8008bea <_calloc_r+0x1c>
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	9201      	str	r2, [sp, #4]
 8008bda:	f7ff f9c9 	bl	8007f70 <_malloc_r>
 8008bde:	9a01      	ldr	r2, [sp, #4]
 8008be0:	4605      	mov	r5, r0
 8008be2:	b930      	cbnz	r0, 8008bf2 <_calloc_r+0x24>
 8008be4:	4628      	mov	r0, r5
 8008be6:	b003      	add	sp, #12
 8008be8:	bd30      	pop	{r4, r5, pc}
 8008bea:	220c      	movs	r2, #12
 8008bec:	6002      	str	r2, [r0, #0]
 8008bee:	2500      	movs	r5, #0
 8008bf0:	e7f8      	b.n	8008be4 <_calloc_r+0x16>
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	f7fe fccb 	bl	800758e <memset>
 8008bf8:	e7f4      	b.n	8008be4 <_calloc_r+0x16>

08008bfa <__sfputc_r>:
 8008bfa:	6893      	ldr	r3, [r2, #8]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	b410      	push	{r4}
 8008c02:	6093      	str	r3, [r2, #8]
 8008c04:	da08      	bge.n	8008c18 <__sfputc_r+0x1e>
 8008c06:	6994      	ldr	r4, [r2, #24]
 8008c08:	42a3      	cmp	r3, r4
 8008c0a:	db01      	blt.n	8008c10 <__sfputc_r+0x16>
 8008c0c:	290a      	cmp	r1, #10
 8008c0e:	d103      	bne.n	8008c18 <__sfputc_r+0x1e>
 8008c10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c14:	f000 bac4 	b.w	80091a0 <__swbuf_r>
 8008c18:	6813      	ldr	r3, [r2, #0]
 8008c1a:	1c58      	adds	r0, r3, #1
 8008c1c:	6010      	str	r0, [r2, #0]
 8008c1e:	7019      	strb	r1, [r3, #0]
 8008c20:	4608      	mov	r0, r1
 8008c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <__sfputs_r>:
 8008c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	460f      	mov	r7, r1
 8008c2e:	4614      	mov	r4, r2
 8008c30:	18d5      	adds	r5, r2, r3
 8008c32:	42ac      	cmp	r4, r5
 8008c34:	d101      	bne.n	8008c3a <__sfputs_r+0x12>
 8008c36:	2000      	movs	r0, #0
 8008c38:	e007      	b.n	8008c4a <__sfputs_r+0x22>
 8008c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c3e:	463a      	mov	r2, r7
 8008c40:	4630      	mov	r0, r6
 8008c42:	f7ff ffda 	bl	8008bfa <__sfputc_r>
 8008c46:	1c43      	adds	r3, r0, #1
 8008c48:	d1f3      	bne.n	8008c32 <__sfputs_r+0xa>
 8008c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c4c <_vfiprintf_r>:
 8008c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c50:	460d      	mov	r5, r1
 8008c52:	b09d      	sub	sp, #116	; 0x74
 8008c54:	4614      	mov	r4, r2
 8008c56:	4698      	mov	r8, r3
 8008c58:	4606      	mov	r6, r0
 8008c5a:	b118      	cbz	r0, 8008c64 <_vfiprintf_r+0x18>
 8008c5c:	6a03      	ldr	r3, [r0, #32]
 8008c5e:	b90b      	cbnz	r3, 8008c64 <_vfiprintf_r+0x18>
 8008c60:	f7fe fc1c 	bl	800749c <__sinit>
 8008c64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c66:	07d9      	lsls	r1, r3, #31
 8008c68:	d405      	bmi.n	8008c76 <_vfiprintf_r+0x2a>
 8008c6a:	89ab      	ldrh	r3, [r5, #12]
 8008c6c:	059a      	lsls	r2, r3, #22
 8008c6e:	d402      	bmi.n	8008c76 <_vfiprintf_r+0x2a>
 8008c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c72:	f7fe fd74 	bl	800775e <__retarget_lock_acquire_recursive>
 8008c76:	89ab      	ldrh	r3, [r5, #12]
 8008c78:	071b      	lsls	r3, r3, #28
 8008c7a:	d501      	bpl.n	8008c80 <_vfiprintf_r+0x34>
 8008c7c:	692b      	ldr	r3, [r5, #16]
 8008c7e:	b99b      	cbnz	r3, 8008ca8 <_vfiprintf_r+0x5c>
 8008c80:	4629      	mov	r1, r5
 8008c82:	4630      	mov	r0, r6
 8008c84:	f000 faca 	bl	800921c <__swsetup_r>
 8008c88:	b170      	cbz	r0, 8008ca8 <_vfiprintf_r+0x5c>
 8008c8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c8c:	07dc      	lsls	r4, r3, #31
 8008c8e:	d504      	bpl.n	8008c9a <_vfiprintf_r+0x4e>
 8008c90:	f04f 30ff 	mov.w	r0, #4294967295
 8008c94:	b01d      	add	sp, #116	; 0x74
 8008c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9a:	89ab      	ldrh	r3, [r5, #12]
 8008c9c:	0598      	lsls	r0, r3, #22
 8008c9e:	d4f7      	bmi.n	8008c90 <_vfiprintf_r+0x44>
 8008ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ca2:	f7fe fd5d 	bl	8007760 <__retarget_lock_release_recursive>
 8008ca6:	e7f3      	b.n	8008c90 <_vfiprintf_r+0x44>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9309      	str	r3, [sp, #36]	; 0x24
 8008cac:	2320      	movs	r3, #32
 8008cae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cb6:	2330      	movs	r3, #48	; 0x30
 8008cb8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008e6c <_vfiprintf_r+0x220>
 8008cbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cc0:	f04f 0901 	mov.w	r9, #1
 8008cc4:	4623      	mov	r3, r4
 8008cc6:	469a      	mov	sl, r3
 8008cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ccc:	b10a      	cbz	r2, 8008cd2 <_vfiprintf_r+0x86>
 8008cce:	2a25      	cmp	r2, #37	; 0x25
 8008cd0:	d1f9      	bne.n	8008cc6 <_vfiprintf_r+0x7a>
 8008cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8008cd6:	d00b      	beq.n	8008cf0 <_vfiprintf_r+0xa4>
 8008cd8:	465b      	mov	r3, fp
 8008cda:	4622      	mov	r2, r4
 8008cdc:	4629      	mov	r1, r5
 8008cde:	4630      	mov	r0, r6
 8008ce0:	f7ff ffa2 	bl	8008c28 <__sfputs_r>
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	f000 80a9 	beq.w	8008e3c <_vfiprintf_r+0x1f0>
 8008cea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cec:	445a      	add	r2, fp
 8008cee:	9209      	str	r2, [sp, #36]	; 0x24
 8008cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 80a1 	beq.w	8008e3c <_vfiprintf_r+0x1f0>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8008d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d04:	f10a 0a01 	add.w	sl, sl, #1
 8008d08:	9304      	str	r3, [sp, #16]
 8008d0a:	9307      	str	r3, [sp, #28]
 8008d0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d10:	931a      	str	r3, [sp, #104]	; 0x68
 8008d12:	4654      	mov	r4, sl
 8008d14:	2205      	movs	r2, #5
 8008d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1a:	4854      	ldr	r0, [pc, #336]	; (8008e6c <_vfiprintf_r+0x220>)
 8008d1c:	f7f7 fa60 	bl	80001e0 <memchr>
 8008d20:	9a04      	ldr	r2, [sp, #16]
 8008d22:	b9d8      	cbnz	r0, 8008d5c <_vfiprintf_r+0x110>
 8008d24:	06d1      	lsls	r1, r2, #27
 8008d26:	bf44      	itt	mi
 8008d28:	2320      	movmi	r3, #32
 8008d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d2e:	0713      	lsls	r3, r2, #28
 8008d30:	bf44      	itt	mi
 8008d32:	232b      	movmi	r3, #43	; 0x2b
 8008d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d38:	f89a 3000 	ldrb.w	r3, [sl]
 8008d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d3e:	d015      	beq.n	8008d6c <_vfiprintf_r+0x120>
 8008d40:	9a07      	ldr	r2, [sp, #28]
 8008d42:	4654      	mov	r4, sl
 8008d44:	2000      	movs	r0, #0
 8008d46:	f04f 0c0a 	mov.w	ip, #10
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d50:	3b30      	subs	r3, #48	; 0x30
 8008d52:	2b09      	cmp	r3, #9
 8008d54:	d94d      	bls.n	8008df2 <_vfiprintf_r+0x1a6>
 8008d56:	b1b0      	cbz	r0, 8008d86 <_vfiprintf_r+0x13a>
 8008d58:	9207      	str	r2, [sp, #28]
 8008d5a:	e014      	b.n	8008d86 <_vfiprintf_r+0x13a>
 8008d5c:	eba0 0308 	sub.w	r3, r0, r8
 8008d60:	fa09 f303 	lsl.w	r3, r9, r3
 8008d64:	4313      	orrs	r3, r2
 8008d66:	9304      	str	r3, [sp, #16]
 8008d68:	46a2      	mov	sl, r4
 8008d6a:	e7d2      	b.n	8008d12 <_vfiprintf_r+0xc6>
 8008d6c:	9b03      	ldr	r3, [sp, #12]
 8008d6e:	1d19      	adds	r1, r3, #4
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	9103      	str	r1, [sp, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	bfbb      	ittet	lt
 8008d78:	425b      	neglt	r3, r3
 8008d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8008d7e:	9307      	strge	r3, [sp, #28]
 8008d80:	9307      	strlt	r3, [sp, #28]
 8008d82:	bfb8      	it	lt
 8008d84:	9204      	strlt	r2, [sp, #16]
 8008d86:	7823      	ldrb	r3, [r4, #0]
 8008d88:	2b2e      	cmp	r3, #46	; 0x2e
 8008d8a:	d10c      	bne.n	8008da6 <_vfiprintf_r+0x15a>
 8008d8c:	7863      	ldrb	r3, [r4, #1]
 8008d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d90:	d134      	bne.n	8008dfc <_vfiprintf_r+0x1b0>
 8008d92:	9b03      	ldr	r3, [sp, #12]
 8008d94:	1d1a      	adds	r2, r3, #4
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	9203      	str	r2, [sp, #12]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	bfb8      	it	lt
 8008d9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008da2:	3402      	adds	r4, #2
 8008da4:	9305      	str	r3, [sp, #20]
 8008da6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008e7c <_vfiprintf_r+0x230>
 8008daa:	7821      	ldrb	r1, [r4, #0]
 8008dac:	2203      	movs	r2, #3
 8008dae:	4650      	mov	r0, sl
 8008db0:	f7f7 fa16 	bl	80001e0 <memchr>
 8008db4:	b138      	cbz	r0, 8008dc6 <_vfiprintf_r+0x17a>
 8008db6:	9b04      	ldr	r3, [sp, #16]
 8008db8:	eba0 000a 	sub.w	r0, r0, sl
 8008dbc:	2240      	movs	r2, #64	; 0x40
 8008dbe:	4082      	lsls	r2, r0
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	3401      	adds	r4, #1
 8008dc4:	9304      	str	r3, [sp, #16]
 8008dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dca:	4829      	ldr	r0, [pc, #164]	; (8008e70 <_vfiprintf_r+0x224>)
 8008dcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dd0:	2206      	movs	r2, #6
 8008dd2:	f7f7 fa05 	bl	80001e0 <memchr>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d03f      	beq.n	8008e5a <_vfiprintf_r+0x20e>
 8008dda:	4b26      	ldr	r3, [pc, #152]	; (8008e74 <_vfiprintf_r+0x228>)
 8008ddc:	bb1b      	cbnz	r3, 8008e26 <_vfiprintf_r+0x1da>
 8008dde:	9b03      	ldr	r3, [sp, #12]
 8008de0:	3307      	adds	r3, #7
 8008de2:	f023 0307 	bic.w	r3, r3, #7
 8008de6:	3308      	adds	r3, #8
 8008de8:	9303      	str	r3, [sp, #12]
 8008dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dec:	443b      	add	r3, r7
 8008dee:	9309      	str	r3, [sp, #36]	; 0x24
 8008df0:	e768      	b.n	8008cc4 <_vfiprintf_r+0x78>
 8008df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008df6:	460c      	mov	r4, r1
 8008df8:	2001      	movs	r0, #1
 8008dfa:	e7a6      	b.n	8008d4a <_vfiprintf_r+0xfe>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	3401      	adds	r4, #1
 8008e00:	9305      	str	r3, [sp, #20]
 8008e02:	4619      	mov	r1, r3
 8008e04:	f04f 0c0a 	mov.w	ip, #10
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e0e:	3a30      	subs	r2, #48	; 0x30
 8008e10:	2a09      	cmp	r2, #9
 8008e12:	d903      	bls.n	8008e1c <_vfiprintf_r+0x1d0>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0c6      	beq.n	8008da6 <_vfiprintf_r+0x15a>
 8008e18:	9105      	str	r1, [sp, #20]
 8008e1a:	e7c4      	b.n	8008da6 <_vfiprintf_r+0x15a>
 8008e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e20:	4604      	mov	r4, r0
 8008e22:	2301      	movs	r3, #1
 8008e24:	e7f0      	b.n	8008e08 <_vfiprintf_r+0x1bc>
 8008e26:	ab03      	add	r3, sp, #12
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	462a      	mov	r2, r5
 8008e2c:	4b12      	ldr	r3, [pc, #72]	; (8008e78 <_vfiprintf_r+0x22c>)
 8008e2e:	a904      	add	r1, sp, #16
 8008e30:	4630      	mov	r0, r6
 8008e32:	f3af 8000 	nop.w
 8008e36:	4607      	mov	r7, r0
 8008e38:	1c78      	adds	r0, r7, #1
 8008e3a:	d1d6      	bne.n	8008dea <_vfiprintf_r+0x19e>
 8008e3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e3e:	07d9      	lsls	r1, r3, #31
 8008e40:	d405      	bmi.n	8008e4e <_vfiprintf_r+0x202>
 8008e42:	89ab      	ldrh	r3, [r5, #12]
 8008e44:	059a      	lsls	r2, r3, #22
 8008e46:	d402      	bmi.n	8008e4e <_vfiprintf_r+0x202>
 8008e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e4a:	f7fe fc89 	bl	8007760 <__retarget_lock_release_recursive>
 8008e4e:	89ab      	ldrh	r3, [r5, #12]
 8008e50:	065b      	lsls	r3, r3, #25
 8008e52:	f53f af1d 	bmi.w	8008c90 <_vfiprintf_r+0x44>
 8008e56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e58:	e71c      	b.n	8008c94 <_vfiprintf_r+0x48>
 8008e5a:	ab03      	add	r3, sp, #12
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	462a      	mov	r2, r5
 8008e60:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <_vfiprintf_r+0x22c>)
 8008e62:	a904      	add	r1, sp, #16
 8008e64:	4630      	mov	r0, r6
 8008e66:	f000 f879 	bl	8008f5c <_printf_i>
 8008e6a:	e7e4      	b.n	8008e36 <_vfiprintf_r+0x1ea>
 8008e6c:	08009964 	.word	0x08009964
 8008e70:	0800996e 	.word	0x0800996e
 8008e74:	00000000 	.word	0x00000000
 8008e78:	08008c29 	.word	0x08008c29
 8008e7c:	0800996a 	.word	0x0800996a

08008e80 <_printf_common>:
 8008e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e84:	4616      	mov	r6, r2
 8008e86:	4699      	mov	r9, r3
 8008e88:	688a      	ldr	r2, [r1, #8]
 8008e8a:	690b      	ldr	r3, [r1, #16]
 8008e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e90:	4293      	cmp	r3, r2
 8008e92:	bfb8      	it	lt
 8008e94:	4613      	movlt	r3, r2
 8008e96:	6033      	str	r3, [r6, #0]
 8008e98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e9c:	4607      	mov	r7, r0
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	b10a      	cbz	r2, 8008ea6 <_printf_common+0x26>
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	6033      	str	r3, [r6, #0]
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	0699      	lsls	r1, r3, #26
 8008eaa:	bf42      	ittt	mi
 8008eac:	6833      	ldrmi	r3, [r6, #0]
 8008eae:	3302      	addmi	r3, #2
 8008eb0:	6033      	strmi	r3, [r6, #0]
 8008eb2:	6825      	ldr	r5, [r4, #0]
 8008eb4:	f015 0506 	ands.w	r5, r5, #6
 8008eb8:	d106      	bne.n	8008ec8 <_printf_common+0x48>
 8008eba:	f104 0a19 	add.w	sl, r4, #25
 8008ebe:	68e3      	ldr	r3, [r4, #12]
 8008ec0:	6832      	ldr	r2, [r6, #0]
 8008ec2:	1a9b      	subs	r3, r3, r2
 8008ec4:	42ab      	cmp	r3, r5
 8008ec6:	dc26      	bgt.n	8008f16 <_printf_common+0x96>
 8008ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ecc:	1e13      	subs	r3, r2, #0
 8008ece:	6822      	ldr	r2, [r4, #0]
 8008ed0:	bf18      	it	ne
 8008ed2:	2301      	movne	r3, #1
 8008ed4:	0692      	lsls	r2, r2, #26
 8008ed6:	d42b      	bmi.n	8008f30 <_printf_common+0xb0>
 8008ed8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008edc:	4649      	mov	r1, r9
 8008ede:	4638      	mov	r0, r7
 8008ee0:	47c0      	blx	r8
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	d01e      	beq.n	8008f24 <_printf_common+0xa4>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	6922      	ldr	r2, [r4, #16]
 8008eea:	f003 0306 	and.w	r3, r3, #6
 8008eee:	2b04      	cmp	r3, #4
 8008ef0:	bf02      	ittt	eq
 8008ef2:	68e5      	ldreq	r5, [r4, #12]
 8008ef4:	6833      	ldreq	r3, [r6, #0]
 8008ef6:	1aed      	subeq	r5, r5, r3
 8008ef8:	68a3      	ldr	r3, [r4, #8]
 8008efa:	bf0c      	ite	eq
 8008efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f00:	2500      	movne	r5, #0
 8008f02:	4293      	cmp	r3, r2
 8008f04:	bfc4      	itt	gt
 8008f06:	1a9b      	subgt	r3, r3, r2
 8008f08:	18ed      	addgt	r5, r5, r3
 8008f0a:	2600      	movs	r6, #0
 8008f0c:	341a      	adds	r4, #26
 8008f0e:	42b5      	cmp	r5, r6
 8008f10:	d11a      	bne.n	8008f48 <_printf_common+0xc8>
 8008f12:	2000      	movs	r0, #0
 8008f14:	e008      	b.n	8008f28 <_printf_common+0xa8>
 8008f16:	2301      	movs	r3, #1
 8008f18:	4652      	mov	r2, sl
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	47c0      	blx	r8
 8008f20:	3001      	adds	r0, #1
 8008f22:	d103      	bne.n	8008f2c <_printf_common+0xac>
 8008f24:	f04f 30ff 	mov.w	r0, #4294967295
 8008f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f2c:	3501      	adds	r5, #1
 8008f2e:	e7c6      	b.n	8008ebe <_printf_common+0x3e>
 8008f30:	18e1      	adds	r1, r4, r3
 8008f32:	1c5a      	adds	r2, r3, #1
 8008f34:	2030      	movs	r0, #48	; 0x30
 8008f36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f3a:	4422      	add	r2, r4
 8008f3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f44:	3302      	adds	r3, #2
 8008f46:	e7c7      	b.n	8008ed8 <_printf_common+0x58>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	4622      	mov	r2, r4
 8008f4c:	4649      	mov	r1, r9
 8008f4e:	4638      	mov	r0, r7
 8008f50:	47c0      	blx	r8
 8008f52:	3001      	adds	r0, #1
 8008f54:	d0e6      	beq.n	8008f24 <_printf_common+0xa4>
 8008f56:	3601      	adds	r6, #1
 8008f58:	e7d9      	b.n	8008f0e <_printf_common+0x8e>
	...

08008f5c <_printf_i>:
 8008f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f60:	7e0f      	ldrb	r7, [r1, #24]
 8008f62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f64:	2f78      	cmp	r7, #120	; 0x78
 8008f66:	4691      	mov	r9, r2
 8008f68:	4680      	mov	r8, r0
 8008f6a:	460c      	mov	r4, r1
 8008f6c:	469a      	mov	sl, r3
 8008f6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f72:	d807      	bhi.n	8008f84 <_printf_i+0x28>
 8008f74:	2f62      	cmp	r7, #98	; 0x62
 8008f76:	d80a      	bhi.n	8008f8e <_printf_i+0x32>
 8008f78:	2f00      	cmp	r7, #0
 8008f7a:	f000 80d4 	beq.w	8009126 <_printf_i+0x1ca>
 8008f7e:	2f58      	cmp	r7, #88	; 0x58
 8008f80:	f000 80c0 	beq.w	8009104 <_printf_i+0x1a8>
 8008f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f8c:	e03a      	b.n	8009004 <_printf_i+0xa8>
 8008f8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f92:	2b15      	cmp	r3, #21
 8008f94:	d8f6      	bhi.n	8008f84 <_printf_i+0x28>
 8008f96:	a101      	add	r1, pc, #4	; (adr r1, 8008f9c <_printf_i+0x40>)
 8008f98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f9c:	08008ff5 	.word	0x08008ff5
 8008fa0:	08009009 	.word	0x08009009
 8008fa4:	08008f85 	.word	0x08008f85
 8008fa8:	08008f85 	.word	0x08008f85
 8008fac:	08008f85 	.word	0x08008f85
 8008fb0:	08008f85 	.word	0x08008f85
 8008fb4:	08009009 	.word	0x08009009
 8008fb8:	08008f85 	.word	0x08008f85
 8008fbc:	08008f85 	.word	0x08008f85
 8008fc0:	08008f85 	.word	0x08008f85
 8008fc4:	08008f85 	.word	0x08008f85
 8008fc8:	0800910d 	.word	0x0800910d
 8008fcc:	08009035 	.word	0x08009035
 8008fd0:	080090c7 	.word	0x080090c7
 8008fd4:	08008f85 	.word	0x08008f85
 8008fd8:	08008f85 	.word	0x08008f85
 8008fdc:	0800912f 	.word	0x0800912f
 8008fe0:	08008f85 	.word	0x08008f85
 8008fe4:	08009035 	.word	0x08009035
 8008fe8:	08008f85 	.word	0x08008f85
 8008fec:	08008f85 	.word	0x08008f85
 8008ff0:	080090cf 	.word	0x080090cf
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	1d1a      	adds	r2, r3, #4
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	602a      	str	r2, [r5, #0]
 8008ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009000:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009004:	2301      	movs	r3, #1
 8009006:	e09f      	b.n	8009148 <_printf_i+0x1ec>
 8009008:	6820      	ldr	r0, [r4, #0]
 800900a:	682b      	ldr	r3, [r5, #0]
 800900c:	0607      	lsls	r7, r0, #24
 800900e:	f103 0104 	add.w	r1, r3, #4
 8009012:	6029      	str	r1, [r5, #0]
 8009014:	d501      	bpl.n	800901a <_printf_i+0xbe>
 8009016:	681e      	ldr	r6, [r3, #0]
 8009018:	e003      	b.n	8009022 <_printf_i+0xc6>
 800901a:	0646      	lsls	r6, r0, #25
 800901c:	d5fb      	bpl.n	8009016 <_printf_i+0xba>
 800901e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009022:	2e00      	cmp	r6, #0
 8009024:	da03      	bge.n	800902e <_printf_i+0xd2>
 8009026:	232d      	movs	r3, #45	; 0x2d
 8009028:	4276      	negs	r6, r6
 800902a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800902e:	485a      	ldr	r0, [pc, #360]	; (8009198 <_printf_i+0x23c>)
 8009030:	230a      	movs	r3, #10
 8009032:	e012      	b.n	800905a <_printf_i+0xfe>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	6820      	ldr	r0, [r4, #0]
 8009038:	1d19      	adds	r1, r3, #4
 800903a:	6029      	str	r1, [r5, #0]
 800903c:	0605      	lsls	r5, r0, #24
 800903e:	d501      	bpl.n	8009044 <_printf_i+0xe8>
 8009040:	681e      	ldr	r6, [r3, #0]
 8009042:	e002      	b.n	800904a <_printf_i+0xee>
 8009044:	0641      	lsls	r1, r0, #25
 8009046:	d5fb      	bpl.n	8009040 <_printf_i+0xe4>
 8009048:	881e      	ldrh	r6, [r3, #0]
 800904a:	4853      	ldr	r0, [pc, #332]	; (8009198 <_printf_i+0x23c>)
 800904c:	2f6f      	cmp	r7, #111	; 0x6f
 800904e:	bf0c      	ite	eq
 8009050:	2308      	moveq	r3, #8
 8009052:	230a      	movne	r3, #10
 8009054:	2100      	movs	r1, #0
 8009056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800905a:	6865      	ldr	r5, [r4, #4]
 800905c:	60a5      	str	r5, [r4, #8]
 800905e:	2d00      	cmp	r5, #0
 8009060:	bfa2      	ittt	ge
 8009062:	6821      	ldrge	r1, [r4, #0]
 8009064:	f021 0104 	bicge.w	r1, r1, #4
 8009068:	6021      	strge	r1, [r4, #0]
 800906a:	b90e      	cbnz	r6, 8009070 <_printf_i+0x114>
 800906c:	2d00      	cmp	r5, #0
 800906e:	d04b      	beq.n	8009108 <_printf_i+0x1ac>
 8009070:	4615      	mov	r5, r2
 8009072:	fbb6 f1f3 	udiv	r1, r6, r3
 8009076:	fb03 6711 	mls	r7, r3, r1, r6
 800907a:	5dc7      	ldrb	r7, [r0, r7]
 800907c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009080:	4637      	mov	r7, r6
 8009082:	42bb      	cmp	r3, r7
 8009084:	460e      	mov	r6, r1
 8009086:	d9f4      	bls.n	8009072 <_printf_i+0x116>
 8009088:	2b08      	cmp	r3, #8
 800908a:	d10b      	bne.n	80090a4 <_printf_i+0x148>
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	07de      	lsls	r6, r3, #31
 8009090:	d508      	bpl.n	80090a4 <_printf_i+0x148>
 8009092:	6923      	ldr	r3, [r4, #16]
 8009094:	6861      	ldr	r1, [r4, #4]
 8009096:	4299      	cmp	r1, r3
 8009098:	bfde      	ittt	le
 800909a:	2330      	movle	r3, #48	; 0x30
 800909c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090a4:	1b52      	subs	r2, r2, r5
 80090a6:	6122      	str	r2, [r4, #16]
 80090a8:	f8cd a000 	str.w	sl, [sp]
 80090ac:	464b      	mov	r3, r9
 80090ae:	aa03      	add	r2, sp, #12
 80090b0:	4621      	mov	r1, r4
 80090b2:	4640      	mov	r0, r8
 80090b4:	f7ff fee4 	bl	8008e80 <_printf_common>
 80090b8:	3001      	adds	r0, #1
 80090ba:	d14a      	bne.n	8009152 <_printf_i+0x1f6>
 80090bc:	f04f 30ff 	mov.w	r0, #4294967295
 80090c0:	b004      	add	sp, #16
 80090c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	f043 0320 	orr.w	r3, r3, #32
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	4833      	ldr	r0, [pc, #204]	; (800919c <_printf_i+0x240>)
 80090d0:	2778      	movs	r7, #120	; 0x78
 80090d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	6829      	ldr	r1, [r5, #0]
 80090da:	061f      	lsls	r7, r3, #24
 80090dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80090e0:	d402      	bmi.n	80090e8 <_printf_i+0x18c>
 80090e2:	065f      	lsls	r7, r3, #25
 80090e4:	bf48      	it	mi
 80090e6:	b2b6      	uxthmi	r6, r6
 80090e8:	07df      	lsls	r7, r3, #31
 80090ea:	bf48      	it	mi
 80090ec:	f043 0320 	orrmi.w	r3, r3, #32
 80090f0:	6029      	str	r1, [r5, #0]
 80090f2:	bf48      	it	mi
 80090f4:	6023      	strmi	r3, [r4, #0]
 80090f6:	b91e      	cbnz	r6, 8009100 <_printf_i+0x1a4>
 80090f8:	6823      	ldr	r3, [r4, #0]
 80090fa:	f023 0320 	bic.w	r3, r3, #32
 80090fe:	6023      	str	r3, [r4, #0]
 8009100:	2310      	movs	r3, #16
 8009102:	e7a7      	b.n	8009054 <_printf_i+0xf8>
 8009104:	4824      	ldr	r0, [pc, #144]	; (8009198 <_printf_i+0x23c>)
 8009106:	e7e4      	b.n	80090d2 <_printf_i+0x176>
 8009108:	4615      	mov	r5, r2
 800910a:	e7bd      	b.n	8009088 <_printf_i+0x12c>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	6826      	ldr	r6, [r4, #0]
 8009110:	6961      	ldr	r1, [r4, #20]
 8009112:	1d18      	adds	r0, r3, #4
 8009114:	6028      	str	r0, [r5, #0]
 8009116:	0635      	lsls	r5, r6, #24
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	d501      	bpl.n	8009120 <_printf_i+0x1c4>
 800911c:	6019      	str	r1, [r3, #0]
 800911e:	e002      	b.n	8009126 <_printf_i+0x1ca>
 8009120:	0670      	lsls	r0, r6, #25
 8009122:	d5fb      	bpl.n	800911c <_printf_i+0x1c0>
 8009124:	8019      	strh	r1, [r3, #0]
 8009126:	2300      	movs	r3, #0
 8009128:	6123      	str	r3, [r4, #16]
 800912a:	4615      	mov	r5, r2
 800912c:	e7bc      	b.n	80090a8 <_printf_i+0x14c>
 800912e:	682b      	ldr	r3, [r5, #0]
 8009130:	1d1a      	adds	r2, r3, #4
 8009132:	602a      	str	r2, [r5, #0]
 8009134:	681d      	ldr	r5, [r3, #0]
 8009136:	6862      	ldr	r2, [r4, #4]
 8009138:	2100      	movs	r1, #0
 800913a:	4628      	mov	r0, r5
 800913c:	f7f7 f850 	bl	80001e0 <memchr>
 8009140:	b108      	cbz	r0, 8009146 <_printf_i+0x1ea>
 8009142:	1b40      	subs	r0, r0, r5
 8009144:	6060      	str	r0, [r4, #4]
 8009146:	6863      	ldr	r3, [r4, #4]
 8009148:	6123      	str	r3, [r4, #16]
 800914a:	2300      	movs	r3, #0
 800914c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009150:	e7aa      	b.n	80090a8 <_printf_i+0x14c>
 8009152:	6923      	ldr	r3, [r4, #16]
 8009154:	462a      	mov	r2, r5
 8009156:	4649      	mov	r1, r9
 8009158:	4640      	mov	r0, r8
 800915a:	47d0      	blx	sl
 800915c:	3001      	adds	r0, #1
 800915e:	d0ad      	beq.n	80090bc <_printf_i+0x160>
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	079b      	lsls	r3, r3, #30
 8009164:	d413      	bmi.n	800918e <_printf_i+0x232>
 8009166:	68e0      	ldr	r0, [r4, #12]
 8009168:	9b03      	ldr	r3, [sp, #12]
 800916a:	4298      	cmp	r0, r3
 800916c:	bfb8      	it	lt
 800916e:	4618      	movlt	r0, r3
 8009170:	e7a6      	b.n	80090c0 <_printf_i+0x164>
 8009172:	2301      	movs	r3, #1
 8009174:	4632      	mov	r2, r6
 8009176:	4649      	mov	r1, r9
 8009178:	4640      	mov	r0, r8
 800917a:	47d0      	blx	sl
 800917c:	3001      	adds	r0, #1
 800917e:	d09d      	beq.n	80090bc <_printf_i+0x160>
 8009180:	3501      	adds	r5, #1
 8009182:	68e3      	ldr	r3, [r4, #12]
 8009184:	9903      	ldr	r1, [sp, #12]
 8009186:	1a5b      	subs	r3, r3, r1
 8009188:	42ab      	cmp	r3, r5
 800918a:	dcf2      	bgt.n	8009172 <_printf_i+0x216>
 800918c:	e7eb      	b.n	8009166 <_printf_i+0x20a>
 800918e:	2500      	movs	r5, #0
 8009190:	f104 0619 	add.w	r6, r4, #25
 8009194:	e7f5      	b.n	8009182 <_printf_i+0x226>
 8009196:	bf00      	nop
 8009198:	08009975 	.word	0x08009975
 800919c:	08009986 	.word	0x08009986

080091a0 <__swbuf_r>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	460e      	mov	r6, r1
 80091a4:	4614      	mov	r4, r2
 80091a6:	4605      	mov	r5, r0
 80091a8:	b118      	cbz	r0, 80091b2 <__swbuf_r+0x12>
 80091aa:	6a03      	ldr	r3, [r0, #32]
 80091ac:	b90b      	cbnz	r3, 80091b2 <__swbuf_r+0x12>
 80091ae:	f7fe f975 	bl	800749c <__sinit>
 80091b2:	69a3      	ldr	r3, [r4, #24]
 80091b4:	60a3      	str	r3, [r4, #8]
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	071a      	lsls	r2, r3, #28
 80091ba:	d525      	bpl.n	8009208 <__swbuf_r+0x68>
 80091bc:	6923      	ldr	r3, [r4, #16]
 80091be:	b31b      	cbz	r3, 8009208 <__swbuf_r+0x68>
 80091c0:	6823      	ldr	r3, [r4, #0]
 80091c2:	6922      	ldr	r2, [r4, #16]
 80091c4:	1a98      	subs	r0, r3, r2
 80091c6:	6963      	ldr	r3, [r4, #20]
 80091c8:	b2f6      	uxtb	r6, r6
 80091ca:	4283      	cmp	r3, r0
 80091cc:	4637      	mov	r7, r6
 80091ce:	dc04      	bgt.n	80091da <__swbuf_r+0x3a>
 80091d0:	4621      	mov	r1, r4
 80091d2:	4628      	mov	r0, r5
 80091d4:	f7ff fcaa 	bl	8008b2c <_fflush_r>
 80091d8:	b9e0      	cbnz	r0, 8009214 <__swbuf_r+0x74>
 80091da:	68a3      	ldr	r3, [r4, #8]
 80091dc:	3b01      	subs	r3, #1
 80091de:	60a3      	str	r3, [r4, #8]
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	1c5a      	adds	r2, r3, #1
 80091e4:	6022      	str	r2, [r4, #0]
 80091e6:	701e      	strb	r6, [r3, #0]
 80091e8:	6962      	ldr	r2, [r4, #20]
 80091ea:	1c43      	adds	r3, r0, #1
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d004      	beq.n	80091fa <__swbuf_r+0x5a>
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	07db      	lsls	r3, r3, #31
 80091f4:	d506      	bpl.n	8009204 <__swbuf_r+0x64>
 80091f6:	2e0a      	cmp	r6, #10
 80091f8:	d104      	bne.n	8009204 <__swbuf_r+0x64>
 80091fa:	4621      	mov	r1, r4
 80091fc:	4628      	mov	r0, r5
 80091fe:	f7ff fc95 	bl	8008b2c <_fflush_r>
 8009202:	b938      	cbnz	r0, 8009214 <__swbuf_r+0x74>
 8009204:	4638      	mov	r0, r7
 8009206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009208:	4621      	mov	r1, r4
 800920a:	4628      	mov	r0, r5
 800920c:	f000 f806 	bl	800921c <__swsetup_r>
 8009210:	2800      	cmp	r0, #0
 8009212:	d0d5      	beq.n	80091c0 <__swbuf_r+0x20>
 8009214:	f04f 37ff 	mov.w	r7, #4294967295
 8009218:	e7f4      	b.n	8009204 <__swbuf_r+0x64>
	...

0800921c <__swsetup_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4b2a      	ldr	r3, [pc, #168]	; (80092c8 <__swsetup_r+0xac>)
 8009220:	4605      	mov	r5, r0
 8009222:	6818      	ldr	r0, [r3, #0]
 8009224:	460c      	mov	r4, r1
 8009226:	b118      	cbz	r0, 8009230 <__swsetup_r+0x14>
 8009228:	6a03      	ldr	r3, [r0, #32]
 800922a:	b90b      	cbnz	r3, 8009230 <__swsetup_r+0x14>
 800922c:	f7fe f936 	bl	800749c <__sinit>
 8009230:	89a3      	ldrh	r3, [r4, #12]
 8009232:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009236:	0718      	lsls	r0, r3, #28
 8009238:	d422      	bmi.n	8009280 <__swsetup_r+0x64>
 800923a:	06d9      	lsls	r1, r3, #27
 800923c:	d407      	bmi.n	800924e <__swsetup_r+0x32>
 800923e:	2309      	movs	r3, #9
 8009240:	602b      	str	r3, [r5, #0]
 8009242:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009246:	81a3      	strh	r3, [r4, #12]
 8009248:	f04f 30ff 	mov.w	r0, #4294967295
 800924c:	e034      	b.n	80092b8 <__swsetup_r+0x9c>
 800924e:	0758      	lsls	r0, r3, #29
 8009250:	d512      	bpl.n	8009278 <__swsetup_r+0x5c>
 8009252:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009254:	b141      	cbz	r1, 8009268 <__swsetup_r+0x4c>
 8009256:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800925a:	4299      	cmp	r1, r3
 800925c:	d002      	beq.n	8009264 <__swsetup_r+0x48>
 800925e:	4628      	mov	r0, r5
 8009260:	f7fe faba 	bl	80077d8 <_free_r>
 8009264:	2300      	movs	r3, #0
 8009266:	6363      	str	r3, [r4, #52]	; 0x34
 8009268:	89a3      	ldrh	r3, [r4, #12]
 800926a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800926e:	81a3      	strh	r3, [r4, #12]
 8009270:	2300      	movs	r3, #0
 8009272:	6063      	str	r3, [r4, #4]
 8009274:	6923      	ldr	r3, [r4, #16]
 8009276:	6023      	str	r3, [r4, #0]
 8009278:	89a3      	ldrh	r3, [r4, #12]
 800927a:	f043 0308 	orr.w	r3, r3, #8
 800927e:	81a3      	strh	r3, [r4, #12]
 8009280:	6923      	ldr	r3, [r4, #16]
 8009282:	b94b      	cbnz	r3, 8009298 <__swsetup_r+0x7c>
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800928a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800928e:	d003      	beq.n	8009298 <__swsetup_r+0x7c>
 8009290:	4621      	mov	r1, r4
 8009292:	4628      	mov	r0, r5
 8009294:	f000 f884 	bl	80093a0 <__smakebuf_r>
 8009298:	89a0      	ldrh	r0, [r4, #12]
 800929a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800929e:	f010 0301 	ands.w	r3, r0, #1
 80092a2:	d00a      	beq.n	80092ba <__swsetup_r+0x9e>
 80092a4:	2300      	movs	r3, #0
 80092a6:	60a3      	str	r3, [r4, #8]
 80092a8:	6963      	ldr	r3, [r4, #20]
 80092aa:	425b      	negs	r3, r3
 80092ac:	61a3      	str	r3, [r4, #24]
 80092ae:	6923      	ldr	r3, [r4, #16]
 80092b0:	b943      	cbnz	r3, 80092c4 <__swsetup_r+0xa8>
 80092b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092b6:	d1c4      	bne.n	8009242 <__swsetup_r+0x26>
 80092b8:	bd38      	pop	{r3, r4, r5, pc}
 80092ba:	0781      	lsls	r1, r0, #30
 80092bc:	bf58      	it	pl
 80092be:	6963      	ldrpl	r3, [r4, #20]
 80092c0:	60a3      	str	r3, [r4, #8]
 80092c2:	e7f4      	b.n	80092ae <__swsetup_r+0x92>
 80092c4:	2000      	movs	r0, #0
 80092c6:	e7f7      	b.n	80092b8 <__swsetup_r+0x9c>
 80092c8:	200001d0 	.word	0x200001d0

080092cc <_raise_r>:
 80092cc:	291f      	cmp	r1, #31
 80092ce:	b538      	push	{r3, r4, r5, lr}
 80092d0:	4604      	mov	r4, r0
 80092d2:	460d      	mov	r5, r1
 80092d4:	d904      	bls.n	80092e0 <_raise_r+0x14>
 80092d6:	2316      	movs	r3, #22
 80092d8:	6003      	str	r3, [r0, #0]
 80092da:	f04f 30ff 	mov.w	r0, #4294967295
 80092de:	bd38      	pop	{r3, r4, r5, pc}
 80092e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80092e2:	b112      	cbz	r2, 80092ea <_raise_r+0x1e>
 80092e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092e8:	b94b      	cbnz	r3, 80092fe <_raise_r+0x32>
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 f830 	bl	8009350 <_getpid_r>
 80092f0:	462a      	mov	r2, r5
 80092f2:	4601      	mov	r1, r0
 80092f4:	4620      	mov	r0, r4
 80092f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092fa:	f000 b817 	b.w	800932c <_kill_r>
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d00a      	beq.n	8009318 <_raise_r+0x4c>
 8009302:	1c59      	adds	r1, r3, #1
 8009304:	d103      	bne.n	800930e <_raise_r+0x42>
 8009306:	2316      	movs	r3, #22
 8009308:	6003      	str	r3, [r0, #0]
 800930a:	2001      	movs	r0, #1
 800930c:	e7e7      	b.n	80092de <_raise_r+0x12>
 800930e:	2400      	movs	r4, #0
 8009310:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009314:	4628      	mov	r0, r5
 8009316:	4798      	blx	r3
 8009318:	2000      	movs	r0, #0
 800931a:	e7e0      	b.n	80092de <_raise_r+0x12>

0800931c <raise>:
 800931c:	4b02      	ldr	r3, [pc, #8]	; (8009328 <raise+0xc>)
 800931e:	4601      	mov	r1, r0
 8009320:	6818      	ldr	r0, [r3, #0]
 8009322:	f7ff bfd3 	b.w	80092cc <_raise_r>
 8009326:	bf00      	nop
 8009328:	200001d0 	.word	0x200001d0

0800932c <_kill_r>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	4d07      	ldr	r5, [pc, #28]	; (800934c <_kill_r+0x20>)
 8009330:	2300      	movs	r3, #0
 8009332:	4604      	mov	r4, r0
 8009334:	4608      	mov	r0, r1
 8009336:	4611      	mov	r1, r2
 8009338:	602b      	str	r3, [r5, #0]
 800933a:	f7f9 f8d9 	bl	80024f0 <_kill>
 800933e:	1c43      	adds	r3, r0, #1
 8009340:	d102      	bne.n	8009348 <_kill_r+0x1c>
 8009342:	682b      	ldr	r3, [r5, #0]
 8009344:	b103      	cbz	r3, 8009348 <_kill_r+0x1c>
 8009346:	6023      	str	r3, [r4, #0]
 8009348:	bd38      	pop	{r3, r4, r5, pc}
 800934a:	bf00      	nop
 800934c:	20000734 	.word	0x20000734

08009350 <_getpid_r>:
 8009350:	f7f9 b8c6 	b.w	80024e0 <_getpid>

08009354 <__swhatbuf_r>:
 8009354:	b570      	push	{r4, r5, r6, lr}
 8009356:	460c      	mov	r4, r1
 8009358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800935c:	2900      	cmp	r1, #0
 800935e:	b096      	sub	sp, #88	; 0x58
 8009360:	4615      	mov	r5, r2
 8009362:	461e      	mov	r6, r3
 8009364:	da0d      	bge.n	8009382 <__swhatbuf_r+0x2e>
 8009366:	89a3      	ldrh	r3, [r4, #12]
 8009368:	f013 0f80 	tst.w	r3, #128	; 0x80
 800936c:	f04f 0100 	mov.w	r1, #0
 8009370:	bf0c      	ite	eq
 8009372:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009376:	2340      	movne	r3, #64	; 0x40
 8009378:	2000      	movs	r0, #0
 800937a:	6031      	str	r1, [r6, #0]
 800937c:	602b      	str	r3, [r5, #0]
 800937e:	b016      	add	sp, #88	; 0x58
 8009380:	bd70      	pop	{r4, r5, r6, pc}
 8009382:	466a      	mov	r2, sp
 8009384:	f000 f848 	bl	8009418 <_fstat_r>
 8009388:	2800      	cmp	r0, #0
 800938a:	dbec      	blt.n	8009366 <__swhatbuf_r+0x12>
 800938c:	9901      	ldr	r1, [sp, #4]
 800938e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009392:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009396:	4259      	negs	r1, r3
 8009398:	4159      	adcs	r1, r3
 800939a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800939e:	e7eb      	b.n	8009378 <__swhatbuf_r+0x24>

080093a0 <__smakebuf_r>:
 80093a0:	898b      	ldrh	r3, [r1, #12]
 80093a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093a4:	079d      	lsls	r5, r3, #30
 80093a6:	4606      	mov	r6, r0
 80093a8:	460c      	mov	r4, r1
 80093aa:	d507      	bpl.n	80093bc <__smakebuf_r+0x1c>
 80093ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	6123      	str	r3, [r4, #16]
 80093b4:	2301      	movs	r3, #1
 80093b6:	6163      	str	r3, [r4, #20]
 80093b8:	b002      	add	sp, #8
 80093ba:	bd70      	pop	{r4, r5, r6, pc}
 80093bc:	ab01      	add	r3, sp, #4
 80093be:	466a      	mov	r2, sp
 80093c0:	f7ff ffc8 	bl	8009354 <__swhatbuf_r>
 80093c4:	9900      	ldr	r1, [sp, #0]
 80093c6:	4605      	mov	r5, r0
 80093c8:	4630      	mov	r0, r6
 80093ca:	f7fe fdd1 	bl	8007f70 <_malloc_r>
 80093ce:	b948      	cbnz	r0, 80093e4 <__smakebuf_r+0x44>
 80093d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093d4:	059a      	lsls	r2, r3, #22
 80093d6:	d4ef      	bmi.n	80093b8 <__smakebuf_r+0x18>
 80093d8:	f023 0303 	bic.w	r3, r3, #3
 80093dc:	f043 0302 	orr.w	r3, r3, #2
 80093e0:	81a3      	strh	r3, [r4, #12]
 80093e2:	e7e3      	b.n	80093ac <__smakebuf_r+0xc>
 80093e4:	89a3      	ldrh	r3, [r4, #12]
 80093e6:	6020      	str	r0, [r4, #0]
 80093e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	9b00      	ldr	r3, [sp, #0]
 80093f0:	6163      	str	r3, [r4, #20]
 80093f2:	9b01      	ldr	r3, [sp, #4]
 80093f4:	6120      	str	r0, [r4, #16]
 80093f6:	b15b      	cbz	r3, 8009410 <__smakebuf_r+0x70>
 80093f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093fc:	4630      	mov	r0, r6
 80093fe:	f000 f81d 	bl	800943c <_isatty_r>
 8009402:	b128      	cbz	r0, 8009410 <__smakebuf_r+0x70>
 8009404:	89a3      	ldrh	r3, [r4, #12]
 8009406:	f023 0303 	bic.w	r3, r3, #3
 800940a:	f043 0301 	orr.w	r3, r3, #1
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	89a3      	ldrh	r3, [r4, #12]
 8009412:	431d      	orrs	r5, r3
 8009414:	81a5      	strh	r5, [r4, #12]
 8009416:	e7cf      	b.n	80093b8 <__smakebuf_r+0x18>

08009418 <_fstat_r>:
 8009418:	b538      	push	{r3, r4, r5, lr}
 800941a:	4d07      	ldr	r5, [pc, #28]	; (8009438 <_fstat_r+0x20>)
 800941c:	2300      	movs	r3, #0
 800941e:	4604      	mov	r4, r0
 8009420:	4608      	mov	r0, r1
 8009422:	4611      	mov	r1, r2
 8009424:	602b      	str	r3, [r5, #0]
 8009426:	f7f9 f8c2 	bl	80025ae <_fstat>
 800942a:	1c43      	adds	r3, r0, #1
 800942c:	d102      	bne.n	8009434 <_fstat_r+0x1c>
 800942e:	682b      	ldr	r3, [r5, #0]
 8009430:	b103      	cbz	r3, 8009434 <_fstat_r+0x1c>
 8009432:	6023      	str	r3, [r4, #0]
 8009434:	bd38      	pop	{r3, r4, r5, pc}
 8009436:	bf00      	nop
 8009438:	20000734 	.word	0x20000734

0800943c <_isatty_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	4d06      	ldr	r5, [pc, #24]	; (8009458 <_isatty_r+0x1c>)
 8009440:	2300      	movs	r3, #0
 8009442:	4604      	mov	r4, r0
 8009444:	4608      	mov	r0, r1
 8009446:	602b      	str	r3, [r5, #0]
 8009448:	f7f9 f8c1 	bl	80025ce <_isatty>
 800944c:	1c43      	adds	r3, r0, #1
 800944e:	d102      	bne.n	8009456 <_isatty_r+0x1a>
 8009450:	682b      	ldr	r3, [r5, #0]
 8009452:	b103      	cbz	r3, 8009456 <_isatty_r+0x1a>
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	bd38      	pop	{r3, r4, r5, pc}
 8009458:	20000734 	.word	0x20000734

0800945c <_init>:
 800945c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945e:	bf00      	nop
 8009460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009462:	bc08      	pop	{r3}
 8009464:	469e      	mov	lr, r3
 8009466:	4770      	bx	lr

08009468 <_fini>:
 8009468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946a:	bf00      	nop
 800946c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946e:	bc08      	pop	{r3}
 8009470:	469e      	mov	lr, r3
 8009472:	4770      	bx	lr
