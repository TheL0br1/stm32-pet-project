
led-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ac0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  08009c60  08009c60  00019c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3c8  0800a3c8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3c8  0800a3c8  0001a3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3d0  0800a3d0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3d0  0800a3d0  0001a3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3d4  0800a3d4  0001a3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a3d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  200001d4  0800a5ac  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  0800a5ac  0002079c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ff3  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029cc  00000000  00000000  0003223a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00034c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d63  00000000  00000000  00035d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019546  00000000  00000000  00036a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013fe1  00000000  00000000  0004ffc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d108  00000000  00000000  00063fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c54  00000000  00000000  001010ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00106d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c48 	.word	0x08009c48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009c48 	.word	0x08009c48

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a6 	b.w	8000f9c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9e08      	ldr	r6, [sp, #32]
 8000cda:	460d      	mov	r5, r1
 8000cdc:	4604      	mov	r4, r0
 8000cde:	460f      	mov	r7, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14a      	bne.n	8000d7a <__udivmoddi4+0xa6>
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	4694      	mov	ip, r2
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0xe2>
 8000cea:	fab2 f382 	clz	r3, r2
 8000cee:	b143      	cbz	r3, 8000d02 <__udivmoddi4+0x2e>
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	f1c3 0220 	rsb	r2, r3, #32
 8000cf8:	409f      	lsls	r7, r3
 8000cfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	409c      	lsls	r4, r3
 8000d02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d06:	fa1f f58c 	uxth.w	r5, ip
 8000d0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d0e:	0c22      	lsrs	r2, r4, #16
 8000d10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d18:	fb01 f005 	mul.w	r0, r1, r5
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	d90a      	bls.n	8000d36 <__udivmoddi4+0x62>
 8000d20:	eb1c 0202 	adds.w	r2, ip, r2
 8000d24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d28:	f080 811c 	bcs.w	8000f64 <__udivmoddi4+0x290>
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	f240 8119 	bls.w	8000f64 <__udivmoddi4+0x290>
 8000d32:	3902      	subs	r1, #2
 8000d34:	4462      	add	r2, ip
 8000d36:	1a12      	subs	r2, r2, r0
 8000d38:	b2a4      	uxth	r4, r4
 8000d3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d46:	fb00 f505 	mul.w	r5, r0, r5
 8000d4a:	42a5      	cmp	r5, r4
 8000d4c:	d90a      	bls.n	8000d64 <__udivmoddi4+0x90>
 8000d4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x294>
 8000d5a:	42a5      	cmp	r5, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x294>
 8000d60:	4464      	add	r4, ip
 8000d62:	3802      	subs	r0, #2
 8000d64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d68:	1b64      	subs	r4, r4, r5
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	b11e      	cbz	r6, 8000d76 <__udivmoddi4+0xa2>
 8000d6e:	40dc      	lsrs	r4, r3
 8000d70:	2300      	movs	r3, #0
 8000d72:	e9c6 4300 	strd	r4, r3, [r6]
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0xbc>
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f000 80ed 	beq.w	8000f5e <__udivmoddi4+0x28a>
 8000d84:	2100      	movs	r1, #0
 8000d86:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	fab3 f183 	clz	r1, r3
 8000d94:	2900      	cmp	r1, #0
 8000d96:	d149      	bne.n	8000e2c <__udivmoddi4+0x158>
 8000d98:	42ab      	cmp	r3, r5
 8000d9a:	d302      	bcc.n	8000da2 <__udivmoddi4+0xce>
 8000d9c:	4282      	cmp	r2, r0
 8000d9e:	f200 80f8 	bhi.w	8000f92 <__udivmoddi4+0x2be>
 8000da2:	1a84      	subs	r4, r0, r2
 8000da4:	eb65 0203 	sbc.w	r2, r5, r3
 8000da8:	2001      	movs	r0, #1
 8000daa:	4617      	mov	r7, r2
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d0e2      	beq.n	8000d76 <__udivmoddi4+0xa2>
 8000db0:	e9c6 4700 	strd	r4, r7, [r6]
 8000db4:	e7df      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000db6:	b902      	cbnz	r2, 8000dba <__udivmoddi4+0xe6>
 8000db8:	deff      	udf	#255	; 0xff
 8000dba:	fab2 f382 	clz	r3, r2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f040 8090 	bne.w	8000ee4 <__udivmoddi4+0x210>
 8000dc4:	1a8a      	subs	r2, r1, r2
 8000dc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dca:	fa1f fe8c 	uxth.w	lr, ip
 8000dce:	2101      	movs	r1, #1
 8000dd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000dd8:	0c22      	lsrs	r2, r4, #16
 8000dda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dde:	fb0e f005 	mul.w	r0, lr, r5
 8000de2:	4290      	cmp	r0, r2
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x124>
 8000de6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x122>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f200 80cb 	bhi.w	8000f8c <__udivmoddi4+0x2b8>
 8000df6:	4645      	mov	r5, r8
 8000df8:	1a12      	subs	r2, r2, r0
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e00:	fb07 2210 	mls	r2, r7, r0, r2
 8000e04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e08:	fb0e fe00 	mul.w	lr, lr, r0
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x14e>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e18:	d202      	bcs.n	8000e20 <__udivmoddi4+0x14c>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	f200 80bb 	bhi.w	8000f96 <__udivmoddi4+0x2c2>
 8000e20:	4610      	mov	r0, r2
 8000e22:	eba4 040e 	sub.w	r4, r4, lr
 8000e26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2a:	e79f      	b.n	8000d6c <__udivmoddi4+0x98>
 8000e2c:	f1c1 0720 	rsb	r7, r1, #32
 8000e30:	408b      	lsls	r3, r1
 8000e32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e42:	40fd      	lsrs	r5, r7
 8000e44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e48:	4323      	orrs	r3, r4
 8000e4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	fb09 5518 	mls	r5, r9, r8, r5
 8000e56:	0c1c      	lsrs	r4, r3, #16
 8000e58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e60:	42a5      	cmp	r5, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6a:	d90b      	bls.n	8000e84 <__udivmoddi4+0x1b0>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e74:	f080 8088 	bcs.w	8000f88 <__udivmoddi4+0x2b4>
 8000e78:	42a5      	cmp	r5, r4
 8000e7a:	f240 8085 	bls.w	8000f88 <__udivmoddi4+0x2b4>
 8000e7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e82:	4464      	add	r4, ip
 8000e84:	1b64      	subs	r4, r4, r5
 8000e86:	b29d      	uxth	r5, r3
 8000e88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e98:	45a6      	cmp	lr, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x1da>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea4:	d26c      	bcs.n	8000f80 <__udivmoddi4+0x2ac>
 8000ea6:	45a6      	cmp	lr, r4
 8000ea8:	d96a      	bls.n	8000f80 <__udivmoddi4+0x2ac>
 8000eaa:	3b02      	subs	r3, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000eb6:	eba4 040e 	sub.w	r4, r4, lr
 8000eba:	42ac      	cmp	r4, r5
 8000ebc:	46c8      	mov	r8, r9
 8000ebe:	46ae      	mov	lr, r5
 8000ec0:	d356      	bcc.n	8000f70 <__udivmoddi4+0x29c>
 8000ec2:	d053      	beq.n	8000f6c <__udivmoddi4+0x298>
 8000ec4:	b156      	cbz	r6, 8000edc <__udivmoddi4+0x208>
 8000ec6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eca:	eb64 040e 	sbc.w	r4, r4, lr
 8000ece:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed2:	40ca      	lsrs	r2, r1
 8000ed4:	40cc      	lsrs	r4, r1
 8000ed6:	4317      	orrs	r7, r2
 8000ed8:	e9c6 7400 	strd	r7, r4, [r6]
 8000edc:	4618      	mov	r0, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee4:	f1c3 0120 	rsb	r1, r3, #32
 8000ee8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eec:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef4:	409d      	lsls	r5, r3
 8000ef6:	432a      	orrs	r2, r5
 8000ef8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f04:	fb07 1510 	mls	r5, r7, r0, r1
 8000f08:	0c11      	lsrs	r1, r2, #16
 8000f0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f12:	428d      	cmp	r5, r1
 8000f14:	fa04 f403 	lsl.w	r4, r4, r3
 8000f18:	d908      	bls.n	8000f2c <__udivmoddi4+0x258>
 8000f1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f22:	d22f      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f24:	428d      	cmp	r5, r1
 8000f26:	d92d      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f28:	3802      	subs	r0, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1b49      	subs	r1, r1, r5
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f34:	fb07 1115 	mls	r1, r7, r5, r1
 8000f38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f40:	4291      	cmp	r1, r2
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x282>
 8000f44:	eb1c 0202 	adds.w	r2, ip, r2
 8000f48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f4c:	d216      	bcs.n	8000f7c <__udivmoddi4+0x2a8>
 8000f4e:	4291      	cmp	r1, r2
 8000f50:	d914      	bls.n	8000f7c <__udivmoddi4+0x2a8>
 8000f52:	3d02      	subs	r5, #2
 8000f54:	4462      	add	r2, ip
 8000f56:	1a52      	subs	r2, r2, r1
 8000f58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f5c:	e738      	b.n	8000dd0 <__udivmoddi4+0xfc>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e708      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000f64:	4639      	mov	r1, r7
 8000f66:	e6e6      	b.n	8000d36 <__udivmoddi4+0x62>
 8000f68:	4610      	mov	r0, r2
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x90>
 8000f6c:	4548      	cmp	r0, r9
 8000f6e:	d2a9      	bcs.n	8000ec4 <__udivmoddi4+0x1f0>
 8000f70:	ebb9 0802 	subs.w	r8, r9, r2
 8000f74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	e7a3      	b.n	8000ec4 <__udivmoddi4+0x1f0>
 8000f7c:	4645      	mov	r5, r8
 8000f7e:	e7ea      	b.n	8000f56 <__udivmoddi4+0x282>
 8000f80:	462b      	mov	r3, r5
 8000f82:	e794      	b.n	8000eae <__udivmoddi4+0x1da>
 8000f84:	4640      	mov	r0, r8
 8000f86:	e7d1      	b.n	8000f2c <__udivmoddi4+0x258>
 8000f88:	46d0      	mov	r8, sl
 8000f8a:	e77b      	b.n	8000e84 <__udivmoddi4+0x1b0>
 8000f8c:	3d02      	subs	r5, #2
 8000f8e:	4462      	add	r2, ip
 8000f90:	e732      	b.n	8000df8 <__udivmoddi4+0x124>
 8000f92:	4608      	mov	r0, r1
 8000f94:	e70a      	b.n	8000dac <__udivmoddi4+0xd8>
 8000f96:	4464      	add	r4, ip
 8000f98:	3802      	subs	r0, #2
 8000f9a:	e742      	b.n	8000e22 <__udivmoddi4+0x14e>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <update_arr>:
uint8_t LedMode;
uint8_t displayMode;
int16_t microphoneValue;

//util function to change timer frequency
void update_arr(TIM_HandleTypeDef *htim, uint16_t arr) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
    __HAL_TIM_SET_AUTORELOAD(htim, arr);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	887a      	ldrh	r2, [r7, #2]
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fb4:	887a      	ldrh	r2, [r7, #2]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60da      	str	r2, [r3, #12]
    if (__HAL_TIM_GET_COUNTER(htim) >= __HAL_TIM_GET_AUTORELOAD(htim)) {
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d307      	bcc.n	8000fda <update_arr+0x3a>
        htim->Instance->EGR |= TIM_EGR_UG;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f042 0201 	orr.w	r2, r2, #1
 8000fd8:	615a      	str	r2, [r3, #20]
    }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <parseString>:

void parseString(char *input) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

    displayMode = 0;
 8000ff0:	4ba8      	ldr	r3, [pc, #672]	; (8001294 <parseString+0x2ac>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]

    char *token;
    switch (input[0]) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b6d      	cmp	r3, #109	; 0x6d
 8000ffc:	d015      	beq.n	800102a <parseString+0x42>
 8000ffe:	2b6d      	cmp	r3, #109	; 0x6d
 8001000:	f300 8117 	bgt.w	8001232 <parseString+0x24a>
 8001004:	2b63      	cmp	r3, #99	; 0x63
 8001006:	d003      	beq.n	8001010 <parseString+0x28>
 8001008:	2b64      	cmp	r3, #100	; 0x64
 800100a:	f000 8101 	beq.w	8001210 <parseString+0x228>
 800100e:	e110      	b.n	8001232 <parseString+0x24a>
        case 'c':
            LED_setColor(strtoul(&input[1], NULL, 10));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3301      	adds	r3, #1
 8001014:	220a      	movs	r2, #10
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f006 fbd5 	bl	80077c8 <strtoul>
 800101e:	4603      	mov	r3, r0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f960 	bl	80012e8 <LED_setColor>
            break;
 8001028:	e12f      	b.n	800128a <parseString+0x2a2>
        case 'm': {
            HAL_TIM_Base_Stop_IT(&htim3);
 800102a:	489b      	ldr	r0, [pc, #620]	; (8001298 <parseString+0x2b0>)
 800102c:	f003 fd66 	bl	8004afc <HAL_TIM_Base_Stop_IT>
            HAL_TIM_Base_Stop_IT(&htim2);
 8001030:	489a      	ldr	r0, [pc, #616]	; (800129c <parseString+0x2b4>)
 8001032:	f003 fd63 	bl	8004afc <HAL_TIM_Base_Stop_IT>
            token = strtok(input, ";");
 8001036:	499a      	ldr	r1, [pc, #616]	; (80012a0 <parseString+0x2b8>)
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f006 fd0f 	bl	8007a5c <strtok>
 800103e:	60f8      	str	r0, [r7, #12]
            LedMode = strtoul(&token[1], NULL, 10);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3301      	adds	r3, #1
 8001044:	220a      	movs	r2, #10
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f006 fbbd 	bl	80077c8 <strtoul>
 800104e:	4603      	mov	r3, r0
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b94      	ldr	r3, [pc, #592]	; (80012a4 <parseString+0x2bc>)
 8001054:	701a      	strb	r2, [r3, #0]
            switch (LedMode) {
 8001056:	4b93      	ldr	r3, [pc, #588]	; (80012a4 <parseString+0x2bc>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b04      	cmp	r3, #4
 800105c:	f200 8114 	bhi.w	8001288 <parseString+0x2a0>
 8001060:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <parseString+0x80>)
 8001062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001066:	bf00      	nop
 8001068:	0800107d 	.word	0x0800107d
 800106c:	080010dd 	.word	0x080010dd
 8001070:	08001121 	.word	0x08001121
 8001074:	08001165 	.word	0x08001165
 8001078:	080011a9 	.word	0x080011a9
                case 0:
                    token = strtok(NULL, ";");
 800107c:	4988      	ldr	r1, [pc, #544]	; (80012a0 <parseString+0x2b8>)
 800107e:	2000      	movs	r0, #0
 8001080:	f006 fcec 	bl	8007a5c <strtok>
 8001084:	60f8      	str	r0, [r7, #12]
                    currentColor = strtoul(token, NULL, 10);
 8001086:	220a      	movs	r2, #10
 8001088:	2100      	movs	r1, #0
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f006 fb9c 	bl	80077c8 <strtoul>
 8001090:	4603      	mov	r3, r0
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b84      	ldr	r3, [pc, #528]	; (80012a8 <parseString+0x2c0>)
 8001096:	701a      	strb	r2, [r3, #0]
                    token = strtok(NULL, ";");
 8001098:	4981      	ldr	r1, [pc, #516]	; (80012a0 <parseString+0x2b8>)
 800109a:	2000      	movs	r0, #0
 800109c:	f006 fcde 	bl	8007a5c <strtok>
 80010a0:	60f8      	str	r0, [r7, #12]
                    pulseFrequency = strtof(token, NULL);
 80010a2:	2100      	movs	r1, #0
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f006 fab7 	bl	8007618 <strtof>
 80010aa:	eef0 7a40 	vmov.f32	s15, s0
 80010ae:	4b7f      	ldr	r3, [pc, #508]	; (80012ac <parseString+0x2c4>)
 80010b0:	edc3 7a00 	vstr	s15, [r3]
                    update_arr(&htim3, pulseFrequency * ARR_1SECOND_VALUE);
 80010b4:	4b7d      	ldr	r3, [pc, #500]	; (80012ac <parseString+0x2c4>)
 80010b6:	edd3 7a00 	vldr	s15, [r3]
 80010ba:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80012b0 <parseString+0x2c8>
 80010be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c6:	ee17 3a90 	vmov	r3, s15
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4619      	mov	r1, r3
 80010ce:	4872      	ldr	r0, [pc, #456]	; (8001298 <parseString+0x2b0>)
 80010d0:	f7ff ff66 	bl	8000fa0 <update_arr>
                    HAL_TIM_Base_Start_IT(&htim3);
 80010d4:	4870      	ldr	r0, [pc, #448]	; (8001298 <parseString+0x2b0>)
 80010d6:	f003 fcaf 	bl	8004a38 <HAL_TIM_Base_Start_IT>
                    break;
 80010da:	e098      	b.n	800120e <parseString+0x226>
                case 1:
                    token = strtok(NULL, ";");
 80010dc:	4970      	ldr	r1, [pc, #448]	; (80012a0 <parseString+0x2b8>)
 80010de:	2000      	movs	r0, #0
 80010e0:	f006 fcbc 	bl	8007a5c <strtok>
 80010e4:	60f8      	str	r0, [r7, #12]
                    pulseFrequency = strtof(token, NULL);
 80010e6:	2100      	movs	r1, #0
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f006 fa95 	bl	8007618 <strtof>
 80010ee:	eef0 7a40 	vmov.f32	s15, s0
 80010f2:	4b6e      	ldr	r3, [pc, #440]	; (80012ac <parseString+0x2c4>)
 80010f4:	edc3 7a00 	vstr	s15, [r3]
                    update_arr(&htim3, pulseFrequency * ARR_1SECOND_VALUE);
 80010f8:	4b6c      	ldr	r3, [pc, #432]	; (80012ac <parseString+0x2c4>)
 80010fa:	edd3 7a00 	vldr	s15, [r3]
 80010fe:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80012b0 <parseString+0x2c8>
 8001102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110a:	ee17 3a90 	vmov	r3, s15
 800110e:	b29b      	uxth	r3, r3
 8001110:	4619      	mov	r1, r3
 8001112:	4861      	ldr	r0, [pc, #388]	; (8001298 <parseString+0x2b0>)
 8001114:	f7ff ff44 	bl	8000fa0 <update_arr>
                    HAL_TIM_Base_Start_IT(&htim3);
 8001118:	485f      	ldr	r0, [pc, #380]	; (8001298 <parseString+0x2b0>)
 800111a:	f003 fc8d 	bl	8004a38 <HAL_TIM_Base_Start_IT>
                    break;
 800111e:	e076      	b.n	800120e <parseString+0x226>
                case 2:
                    token = strtok(NULL, ";");
 8001120:	495f      	ldr	r1, [pc, #380]	; (80012a0 <parseString+0x2b8>)
 8001122:	2000      	movs	r0, #0
 8001124:	f006 fc9a 	bl	8007a5c <strtok>
 8001128:	60f8      	str	r0, [r7, #12]
                    pulseFrequency = strtof(token, NULL);
 800112a:	2100      	movs	r1, #0
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f006 fa73 	bl	8007618 <strtof>
 8001132:	eef0 7a40 	vmov.f32	s15, s0
 8001136:	4b5d      	ldr	r3, [pc, #372]	; (80012ac <parseString+0x2c4>)
 8001138:	edc3 7a00 	vstr	s15, [r3]
                    update_arr(&htim3, pulseFrequency * ARR_1SECOND_VALUE);
 800113c:	4b5b      	ldr	r3, [pc, #364]	; (80012ac <parseString+0x2c4>)
 800113e:	edd3 7a00 	vldr	s15, [r3]
 8001142:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80012b0 <parseString+0x2c8>
 8001146:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800114e:	ee17 3a90 	vmov	r3, s15
 8001152:	b29b      	uxth	r3, r3
 8001154:	4619      	mov	r1, r3
 8001156:	4850      	ldr	r0, [pc, #320]	; (8001298 <parseString+0x2b0>)
 8001158:	f7ff ff22 	bl	8000fa0 <update_arr>
                    HAL_TIM_Base_Start_IT(&htim3);
 800115c:	484e      	ldr	r0, [pc, #312]	; (8001298 <parseString+0x2b0>)
 800115e:	f003 fc6b 	bl	8004a38 <HAL_TIM_Base_Start_IT>
                    break;
 8001162:	e054      	b.n	800120e <parseString+0x226>
                case 3:
                    token = strtok(NULL, ";");
 8001164:	494e      	ldr	r1, [pc, #312]	; (80012a0 <parseString+0x2b8>)
 8001166:	2000      	movs	r0, #0
 8001168:	f006 fc78 	bl	8007a5c <strtok>
 800116c:	60f8      	str	r0, [r7, #12]
                    pulseFrequency = strtof(token, NULL);
 800116e:	2100      	movs	r1, #0
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f006 fa51 	bl	8007618 <strtof>
 8001176:	eef0 7a40 	vmov.f32	s15, s0
 800117a:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <parseString+0x2c4>)
 800117c:	edc3 7a00 	vstr	s15, [r3]
                    update_arr(&htim3, pulseFrequency * ARR_1SECOND_VALUE);
 8001180:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <parseString+0x2c4>)
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80012b0 <parseString+0x2c8>
 800118a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001192:	ee17 3a90 	vmov	r3, s15
 8001196:	b29b      	uxth	r3, r3
 8001198:	4619      	mov	r1, r3
 800119a:	483f      	ldr	r0, [pc, #252]	; (8001298 <parseString+0x2b0>)
 800119c:	f7ff ff00 	bl	8000fa0 <update_arr>
                    HAL_TIM_Base_Start_IT(&htim3);
 80011a0:	483d      	ldr	r0, [pc, #244]	; (8001298 <parseString+0x2b0>)
 80011a2:	f003 fc49 	bl	8004a38 <HAL_TIM_Base_Start_IT>
                    break;
 80011a6:	e032      	b.n	800120e <parseString+0x226>
                case 4:
                    token = strtok(NULL, ";");
 80011a8:	493d      	ldr	r1, [pc, #244]	; (80012a0 <parseString+0x2b8>)
 80011aa:	2000      	movs	r0, #0
 80011ac:	f006 fc56 	bl	8007a5c <strtok>
 80011b0:	60f8      	str	r0, [r7, #12]
                    currentColor = strtoul(token, NULL, 10);
 80011b2:	220a      	movs	r2, #10
 80011b4:	2100      	movs	r1, #0
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f006 fb06 	bl	80077c8 <strtoul>
 80011bc:	4603      	mov	r3, r0
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <parseString+0x2c0>)
 80011c2:	701a      	strb	r2, [r3, #0]
                    token = strtok(NULL, ";");
 80011c4:	4936      	ldr	r1, [pc, #216]	; (80012a0 <parseString+0x2b8>)
 80011c6:	2000      	movs	r0, #0
 80011c8:	f006 fc48 	bl	8007a5c <strtok>
 80011cc:	60f8      	str	r0, [r7, #12]
                    pulseFrequency = strtof(token, NULL);
 80011ce:	2100      	movs	r1, #0
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f006 fa21 	bl	8007618 <strtof>
 80011d6:	eef0 7a40 	vmov.f32	s15, s0
 80011da:	4b34      	ldr	r3, [pc, #208]	; (80012ac <parseString+0x2c4>)
 80011dc:	edc3 7a00 	vstr	s15, [r3]
                    update_arr(&htim3, pulseFrequency * ARR_1SECOND_VALUE);
 80011e0:	4b32      	ldr	r3, [pc, #200]	; (80012ac <parseString+0x2c4>)
 80011e2:	edd3 7a00 	vldr	s15, [r3]
 80011e6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80012b0 <parseString+0x2c8>
 80011ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f2:	ee17 3a90 	vmov	r3, s15
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	4619      	mov	r1, r3
 80011fa:	4827      	ldr	r0, [pc, #156]	; (8001298 <parseString+0x2b0>)
 80011fc:	f7ff fed0 	bl	8000fa0 <update_arr>
                    HAL_TIM_Base_Start_IT(&htim2);
 8001200:	4826      	ldr	r0, [pc, #152]	; (800129c <parseString+0x2b4>)
 8001202:	f003 fc19 	bl	8004a38 <HAL_TIM_Base_Start_IT>
                    HAL_TIM_Base_Start_IT(&htim3);
 8001206:	4824      	ldr	r0, [pc, #144]	; (8001298 <parseString+0x2b0>)
 8001208:	f003 fc16 	bl	8004a38 <HAL_TIM_Base_Start_IT>
                    break;
 800120c:	bf00      	nop
            }
            break;
 800120e:	e03b      	b.n	8001288 <parseString+0x2a0>
        }

        case 'd':
            token = strtok(input, ";");
 8001210:	4923      	ldr	r1, [pc, #140]	; (80012a0 <parseString+0x2b8>)
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f006 fc22 	bl	8007a5c <strtok>
 8001218:	60f8      	str	r0, [r7, #12]
            displayMode = strtoul(&token[1], NULL, 10);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3301      	adds	r3, #1
 800121e:	220a      	movs	r2, #10
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f006 fad0 	bl	80077c8 <strtoul>
 8001228:	4603      	mov	r3, r0
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <parseString+0x2ac>)
 800122e:	701a      	strb	r2, [r3, #0]
            break;
 8001230:	e02b      	b.n	800128a <parseString+0x2a2>

        default:
            token = strtok(input, ";");
 8001232:	491b      	ldr	r1, [pc, #108]	; (80012a0 <parseString+0x2b8>)
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f006 fc11 	bl	8007a5c <strtok>
 800123a:	60f8      	str	r0, [r7, #12]
            uint8_t var1 = strtoul(token, NULL, 10);
 800123c:	220a      	movs	r2, #10
 800123e:	2100      	movs	r1, #0
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f006 fac1 	bl	80077c8 <strtoul>
 8001246:	4603      	mov	r3, r0
 8001248:	72fb      	strb	r3, [r7, #11]
            token = strtok(NULL, ";");
 800124a:	4915      	ldr	r1, [pc, #84]	; (80012a0 <parseString+0x2b8>)
 800124c:	2000      	movs	r0, #0
 800124e:	f006 fc05 	bl	8007a5c <strtok>
 8001252:	60f8      	str	r0, [r7, #12]

            uint8_t var2 = strtoul(token, NULL, 10);
 8001254:	220a      	movs	r2, #10
 8001256:	2100      	movs	r1, #0
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f006 fab5 	bl	80077c8 <strtoul>
 800125e:	4603      	mov	r3, r0
 8001260:	72bb      	strb	r3, [r7, #10]
            token = strtok(NULL, ";");
 8001262:	490f      	ldr	r1, [pc, #60]	; (80012a0 <parseString+0x2b8>)
 8001264:	2000      	movs	r0, #0
 8001266:	f006 fbf9 	bl	8007a5c <strtok>
 800126a:	60f8      	str	r0, [r7, #12]

            uint8_t var3 = strtoul(token, NULL, 10);
 800126c:	220a      	movs	r2, #10
 800126e:	2100      	movs	r1, #0
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f006 faa9 	bl	80077c8 <strtoul>
 8001276:	4603      	mov	r3, r0
 8001278:	727b      	strb	r3, [r7, #9]
            LED_setColorRGB(var1, var2, var3);
 800127a:	7a7a      	ldrb	r2, [r7, #9]
 800127c:	7ab9      	ldrb	r1, [r7, #10]
 800127e:	7afb      	ldrb	r3, [r7, #11]
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f817 	bl	80012b4 <LED_setColorRGB>
            break;
 8001286:	e000      	b.n	800128a <parseString+0x2a2>
            break;
 8001288:	bf00      	nop
    }



}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200001f9 	.word	0x200001f9
 8001298:	2000038c 	.word	0x2000038c
 800129c:	20000344 	.word	0x20000344
 80012a0:	08009c60 	.word	0x08009c60
 80012a4:	200001f8 	.word	0x200001f8
 80012a8:	200001f1 	.word	0x200001f1
 80012ac:	200001f4 	.word	0x200001f4
 80012b0:	42c80000 	.word	0x42c80000

080012b4 <LED_setColorRGB>:

void LED_setColorRGB(uint8_t R, uint8_t G, uint8_t B) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	460b      	mov	r3, r1
 80012c0:	71bb      	strb	r3, [r7, #6]
 80012c2:	4613      	mov	r3, r2
 80012c4:	717b      	strb	r3, [r7, #5]
    TIM1->CCR1 = R;
 80012c6:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <LED_setColorRGB+0x30>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	6353      	str	r3, [r2, #52]	; 0x34
    TIM1->CCR2 = G;
 80012cc:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <LED_setColorRGB+0x30>)
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	6393      	str	r3, [r2, #56]	; 0x38
    TIM1->CCR3 = B;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <LED_setColorRGB+0x30>)
 80012d4:	797b      	ldrb	r3, [r7, #5]
 80012d6:	63d3      	str	r3, [r2, #60]	; 0x3c
    prepateLCDMessage();
 80012d8:	f000 fb4c 	bl	8001974 <prepateLCDMessage>

}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40010000 	.word	0x40010000

080012e8 <LED_setColor>:

void LED_setColor(enum Color color) {
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
    TIM1->CCR1 = colorValues[color].red / ARR_DIV;
 80012f2:	79fa      	ldrb	r2, [r7, #7]
 80012f4:	492a      	ldr	r1, [pc, #168]	; (80013a0 <LED_setColor+0xb8>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	440b      	add	r3, r1
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f90e 	bl	8000524 <__aeabi_i2d>
 8001308:	a323      	add	r3, pc, #140	; (adr r3, 8001398 <LED_setColor+0xb0>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff fa9d 	bl	800084c <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4c23      	ldr	r4, [pc, #140]	; (80013a4 <LED_setColor+0xbc>)
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f7ff fc1c 	bl	8000b58 <__aeabi_d2uiz>
 8001320:	4603      	mov	r3, r0
 8001322:	6363      	str	r3, [r4, #52]	; 0x34
    TIM1->CCR2 = colorValues[color].green / ARR_DIV;
 8001324:	79fa      	ldrb	r2, [r7, #7]
 8001326:	491e      	ldr	r1, [pc, #120]	; (80013a0 <LED_setColor+0xb8>)
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	3304      	adds	r3, #4
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f8f4 	bl	8000524 <__aeabi_i2d>
 800133c:	a316      	add	r3, pc, #88	; (adr r3, 8001398 <LED_setColor+0xb0>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7ff fa83 	bl	800084c <__aeabi_ddiv>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4c16      	ldr	r4, [pc, #88]	; (80013a4 <LED_setColor+0xbc>)
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fc02 	bl	8000b58 <__aeabi_d2uiz>
 8001354:	4603      	mov	r3, r0
 8001356:	63a3      	str	r3, [r4, #56]	; 0x38
    TIM1->CCR3 = colorValues[color].blue / ARR_DIV;
 8001358:	79fa      	ldrb	r2, [r7, #7]
 800135a:	4911      	ldr	r1, [pc, #68]	; (80013a0 <LED_setColor+0xb8>)
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	3308      	adds	r3, #8
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f8da 	bl	8000524 <__aeabi_i2d>
 8001370:	a309      	add	r3, pc, #36	; (adr r3, 8001398 <LED_setColor+0xb0>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff fa69 	bl	800084c <__aeabi_ddiv>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4c09      	ldr	r4, [pc, #36]	; (80013a4 <LED_setColor+0xbc>)
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fbe8 	bl	8000b58 <__aeabi_d2uiz>
 8001388:	4603      	mov	r3, r0
 800138a:	63e3      	str	r3, [r4, #60]	; 0x3c
    prepateLCDMessage();
 800138c:	f000 faf2 	bl	8001974 <prepateLCDMessage>

}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bd90      	pop	{r4, r7, pc}
 8001398:	66666666 	.word	0x66666666
 800139c:	40046666 	.word	0x40046666
 80013a0:	08009c70 	.word	0x08009c70
 80013a4:	40010000 	.word	0x40010000

080013a8 <LED_pulseMode>:

void LED_pulseMode() {
 80013a8:	b5b0      	push	{r4, r5, r7, lr}
 80013aa:	af00      	add	r7, sp, #0
    TIM1->CCR1 = colorValues[currentColor].red / ARR_DIV - pulseCounter;
 80013ac:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <LED_pulseMode+0x130>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4a4a      	ldr	r2, [pc, #296]	; (80014dc <LED_pulseMode+0x134>)
 80013b4:	460b      	mov	r3, r1
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	440b      	add	r3, r1
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8af 	bl	8000524 <__aeabi_i2d>
 80013c6:	a342      	add	r3, pc, #264	; (adr r3, 80014d0 <LED_pulseMode+0x128>)
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	f7ff fa3e 	bl	800084c <__aeabi_ddiv>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4614      	mov	r4, r2
 80013d6:	461d      	mov	r5, r3
 80013d8:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <LED_pulseMode+0x138>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8a1 	bl	8000524 <__aeabi_i2d>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4620      	mov	r0, r4
 80013e8:	4629      	mov	r1, r5
 80013ea:	f7fe ff4d 	bl	8000288 <__aeabi_dsub>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4c3c      	ldr	r4, [pc, #240]	; (80014e4 <LED_pulseMode+0x13c>)
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fbae 	bl	8000b58 <__aeabi_d2uiz>
 80013fc:	4603      	mov	r3, r0
 80013fe:	6363      	str	r3, [r4, #52]	; 0x34
    TIM1->CCR2 = colorValues[currentColor].green / ARR_DIV - pulseCounter;
 8001400:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <LED_pulseMode+0x130>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	4a35      	ldr	r2, [pc, #212]	; (80014dc <LED_pulseMode+0x134>)
 8001408:	460b      	mov	r3, r1
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	440b      	add	r3, r1
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	3304      	adds	r3, #4
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f884 	bl	8000524 <__aeabi_i2d>
 800141c:	a32c      	add	r3, pc, #176	; (adr r3, 80014d0 <LED_pulseMode+0x128>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7ff fa13 	bl	800084c <__aeabi_ddiv>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4614      	mov	r4, r2
 800142c:	461d      	mov	r5, r3
 800142e:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <LED_pulseMode+0x138>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f876 	bl	8000524 <__aeabi_i2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4620      	mov	r0, r4
 800143e:	4629      	mov	r1, r5
 8001440:	f7fe ff22 	bl	8000288 <__aeabi_dsub>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4c26      	ldr	r4, [pc, #152]	; (80014e4 <LED_pulseMode+0x13c>)
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fb83 	bl	8000b58 <__aeabi_d2uiz>
 8001452:	4603      	mov	r3, r0
 8001454:	63a3      	str	r3, [r4, #56]	; 0x38
    TIM1->CCR3 = colorValues[currentColor].blue / ARR_DIV - pulseCounter;
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <LED_pulseMode+0x130>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	4619      	mov	r1, r3
 800145c:	4a1f      	ldr	r2, [pc, #124]	; (80014dc <LED_pulseMode+0x134>)
 800145e:	460b      	mov	r3, r1
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	440b      	add	r3, r1
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	3308      	adds	r3, #8
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f859 	bl	8000524 <__aeabi_i2d>
 8001472:	a317      	add	r3, pc, #92	; (adr r3, 80014d0 <LED_pulseMode+0x128>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f9e8 	bl	800084c <__aeabi_ddiv>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4614      	mov	r4, r2
 8001482:	461d      	mov	r5, r3
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <LED_pulseMode+0x138>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f84b 	bl	8000524 <__aeabi_i2d>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4620      	mov	r0, r4
 8001494:	4629      	mov	r1, r5
 8001496:	f7fe fef7 	bl	8000288 <__aeabi_dsub>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4c11      	ldr	r4, [pc, #68]	; (80014e4 <LED_pulseMode+0x13c>)
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff fb58 	bl	8000b58 <__aeabi_d2uiz>
 80014a8:	4603      	mov	r3, r0
 80014aa:	63e3      	str	r3, [r4, #60]	; 0x3c
    pulseCounter++;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <LED_pulseMode+0x138>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <LED_pulseMode+0x138>)
 80014b6:	701a      	strb	r2, [r3, #0]
    if (pulseCounter >= CCR_MAX_VALUE) {
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <LED_pulseMode+0x138>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b63      	cmp	r3, #99	; 0x63
 80014be:	d904      	bls.n	80014ca <LED_pulseMode+0x122>
        pulseCounter = 0;
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <LED_pulseMode+0x138>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
        prepateLCDMessage();
 80014c6:	f000 fa55 	bl	8001974 <prepateLCDMessage>

    }
}
 80014ca:	bf00      	nop
 80014cc:	bdb0      	pop	{r4, r5, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	66666666 	.word	0x66666666
 80014d4:	40046666 	.word	0x40046666
 80014d8:	200001f1 	.word	0x200001f1
 80014dc:	08009c70 	.word	0x08009c70
 80014e0:	200001f0 	.word	0x200001f0
 80014e4:	40010000 	.word	0x40010000

080014e8 <LED_continuousTransformationMode>:

void LED_continuousTransformationMode() {
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	af00      	add	r7, sp, #0
    TIM1->CCR1 = colorValues[currentColor].red / ARR_DIV - pulseCounter;
 80014ec:	4b54      	ldr	r3, [pc, #336]	; (8001640 <LED_continuousTransformationMode+0x158>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	4a54      	ldr	r2, [pc, #336]	; (8001644 <LED_continuousTransformationMode+0x15c>)
 80014f4:	460b      	mov	r3, r1
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	440b      	add	r3, r1
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f80f 	bl	8000524 <__aeabi_i2d>
 8001506:	a34c      	add	r3, pc, #304	; (adr r3, 8001638 <LED_continuousTransformationMode+0x150>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7ff f99e 	bl	800084c <__aeabi_ddiv>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4614      	mov	r4, r2
 8001516:	461d      	mov	r5, r3
 8001518:	4b4b      	ldr	r3, [pc, #300]	; (8001648 <LED_continuousTransformationMode+0x160>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f801 	bl	8000524 <__aeabi_i2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4620      	mov	r0, r4
 8001528:	4629      	mov	r1, r5
 800152a:	f7fe fead 	bl	8000288 <__aeabi_dsub>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4c46      	ldr	r4, [pc, #280]	; (800164c <LED_continuousTransformationMode+0x164>)
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff fb0e 	bl	8000b58 <__aeabi_d2uiz>
 800153c:	4603      	mov	r3, r0
 800153e:	6363      	str	r3, [r4, #52]	; 0x34
    TIM1->CCR2 = colorValues[currentColor].green / ARR_DIV - pulseCounter;
 8001540:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <LED_continuousTransformationMode+0x158>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	4a3f      	ldr	r2, [pc, #252]	; (8001644 <LED_continuousTransformationMode+0x15c>)
 8001548:	460b      	mov	r3, r1
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	440b      	add	r3, r1
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	3304      	adds	r3, #4
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ffe4 	bl	8000524 <__aeabi_i2d>
 800155c:	a336      	add	r3, pc, #216	; (adr r3, 8001638 <LED_continuousTransformationMode+0x150>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7ff f973 	bl	800084c <__aeabi_ddiv>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4614      	mov	r4, r2
 800156c:	461d      	mov	r5, r3
 800156e:	4b36      	ldr	r3, [pc, #216]	; (8001648 <LED_continuousTransformationMode+0x160>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffd6 	bl	8000524 <__aeabi_i2d>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4620      	mov	r0, r4
 800157e:	4629      	mov	r1, r5
 8001580:	f7fe fe82 	bl	8000288 <__aeabi_dsub>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4c30      	ldr	r4, [pc, #192]	; (800164c <LED_continuousTransformationMode+0x164>)
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fae3 	bl	8000b58 <__aeabi_d2uiz>
 8001592:	4603      	mov	r3, r0
 8001594:	63a3      	str	r3, [r4, #56]	; 0x38
    TIM1->CCR3 = colorValues[currentColor].blue / ARR_DIV - pulseCounter;
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <LED_continuousTransformationMode+0x158>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	4619      	mov	r1, r3
 800159c:	4a29      	ldr	r2, [pc, #164]	; (8001644 <LED_continuousTransformationMode+0x15c>)
 800159e:	460b      	mov	r3, r1
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	440b      	add	r3, r1
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3308      	adds	r3, #8
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffb9 	bl	8000524 <__aeabi_i2d>
 80015b2:	a321      	add	r3, pc, #132	; (adr r3, 8001638 <LED_continuousTransformationMode+0x150>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7ff f948 	bl	800084c <__aeabi_ddiv>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <LED_continuousTransformationMode+0x160>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffab 	bl	8000524 <__aeabi_i2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4620      	mov	r0, r4
 80015d4:	4629      	mov	r1, r5
 80015d6:	f7fe fe57 	bl	8000288 <__aeabi_dsub>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4c1b      	ldr	r4, [pc, #108]	; (800164c <LED_continuousTransformationMode+0x164>)
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f7ff fab8 	bl	8000b58 <__aeabi_d2uiz>
 80015e8:	4603      	mov	r3, r0
 80015ea:	63e3      	str	r3, [r4, #60]	; 0x3c
    pulseCounter++;
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <LED_continuousTransformationMode+0x160>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <LED_continuousTransformationMode+0x160>)
 80015f6:	701a      	strb	r2, [r3, #0]
    if (pulseCounter >= CCR_MAX_VALUE) {
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <LED_continuousTransformationMode+0x160>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b63      	cmp	r3, #99	; 0x63
 80015fe:	d919      	bls.n	8001634 <LED_continuousTransformationMode+0x14c>
        pulseCounter = 0;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <LED_continuousTransformationMode+0x160>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
        currentColor++;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <LED_continuousTransformationMode+0x158>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <LED_continuousTransformationMode+0x158>)
 8001610:	701a      	strb	r2, [r3, #0]
        currentColor %= 11;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <LED_continuousTransformationMode+0x158>)
 8001614:	7819      	ldrb	r1, [r3, #0]
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <LED_continuousTransformationMode+0x168>)
 8001618:	fba3 2301 	umull	r2, r3, r3, r1
 800161c:	08da      	lsrs	r2, r3, #3
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	1acb      	subs	r3, r1, r3
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <LED_continuousTransformationMode+0x158>)
 800162e:	701a      	strb	r2, [r3, #0]
        prepateLCDMessage();
 8001630:	f000 f9a0 	bl	8001974 <prepateLCDMessage>

    }
}
 8001634:	bf00      	nop
 8001636:	bdb0      	pop	{r4, r5, r7, pc}
 8001638:	66666666 	.word	0x66666666
 800163c:	40046666 	.word	0x40046666
 8001640:	200001f1 	.word	0x200001f1
 8001644:	08009c70 	.word	0x08009c70
 8001648:	200001f0 	.word	0x200001f0
 800164c:	40010000 	.word	0x40010000
 8001650:	ba2e8ba3 	.word	0xba2e8ba3
 8001654:	00000000 	.word	0x00000000

08001658 <LED_continuousColorChangeMode>:

void LED_continuousColorChangeMode() {
 8001658:	b598      	push	{r3, r4, r7, lr}
 800165a:	af00      	add	r7, sp, #0
    TIM1->CCR1 = colorValues[currentColor].red / ARR_DIV;
 800165c:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <LED_continuousColorChangeMode+0x100>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	4a3e      	ldr	r2, [pc, #248]	; (800175c <LED_continuousColorChangeMode+0x104>)
 8001664:	460b      	mov	r3, r1
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	440b      	add	r3, r1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff57 	bl	8000524 <__aeabi_i2d>
 8001676:	a336      	add	r3, pc, #216	; (adr r3, 8001750 <LED_continuousColorChangeMode+0xf8>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7ff f8e6 	bl	800084c <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4c36      	ldr	r4, [pc, #216]	; (8001760 <LED_continuousColorChangeMode+0x108>)
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fa65 	bl	8000b58 <__aeabi_d2uiz>
 800168e:	4603      	mov	r3, r0
 8001690:	6363      	str	r3, [r4, #52]	; 0x34
    TIM1->CCR2 = colorValues[currentColor].green / ARR_DIV;
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <LED_continuousColorChangeMode+0x100>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	4619      	mov	r1, r3
 8001698:	4a30      	ldr	r2, [pc, #192]	; (800175c <LED_continuousColorChangeMode+0x104>)
 800169a:	460b      	mov	r3, r1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	440b      	add	r3, r1
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	3304      	adds	r3, #4
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff3b 	bl	8000524 <__aeabi_i2d>
 80016ae:	a328      	add	r3, pc, #160	; (adr r3, 8001750 <LED_continuousColorChangeMode+0xf8>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7ff f8ca 	bl	800084c <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4c28      	ldr	r4, [pc, #160]	; (8001760 <LED_continuousColorChangeMode+0x108>)
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff fa49 	bl	8000b58 <__aeabi_d2uiz>
 80016c6:	4603      	mov	r3, r0
 80016c8:	63a3      	str	r3, [r4, #56]	; 0x38
    TIM1->CCR3 = colorValues[currentColor].blue / ARR_DIV;
 80016ca:	4b23      	ldr	r3, [pc, #140]	; (8001758 <LED_continuousColorChangeMode+0x100>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	4619      	mov	r1, r3
 80016d0:	4a22      	ldr	r2, [pc, #136]	; (800175c <LED_continuousColorChangeMode+0x104>)
 80016d2:	460b      	mov	r3, r1
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	440b      	add	r3, r1
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	3308      	adds	r3, #8
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff1f 	bl	8000524 <__aeabi_i2d>
 80016e6:	a31a      	add	r3, pc, #104	; (adr r3, 8001750 <LED_continuousColorChangeMode+0xf8>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7ff f8ae 	bl	800084c <__aeabi_ddiv>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4c1a      	ldr	r4, [pc, #104]	; (8001760 <LED_continuousColorChangeMode+0x108>)
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff fa2d 	bl	8000b58 <__aeabi_d2uiz>
 80016fe:	4603      	mov	r3, r0
 8001700:	63e3      	str	r3, [r4, #60]	; 0x3c
    pulseCounter++;
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <LED_continuousColorChangeMode+0x10c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <LED_continuousColorChangeMode+0x10c>)
 800170c:	701a      	strb	r2, [r3, #0]
    if (pulseCounter >= CCR_MAX_VALUE) {
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <LED_continuousColorChangeMode+0x10c>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b63      	cmp	r3, #99	; 0x63
 8001714:	d918      	bls.n	8001748 <LED_continuousColorChangeMode+0xf0>
        pulseCounter = 0;
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <LED_continuousColorChangeMode+0x10c>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
        currentColor++;
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <LED_continuousColorChangeMode+0x100>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <LED_continuousColorChangeMode+0x100>)
 8001726:	701a      	strb	r2, [r3, #0]
        currentColor %= 12;
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <LED_continuousColorChangeMode+0x100>)
 800172a:	781a      	ldrb	r2, [r3, #0]
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <LED_continuousColorChangeMode+0x110>)
 800172e:	fba3 1302 	umull	r1, r3, r3, r2
 8001732:	08d9      	lsrs	r1, r3, #3
 8001734:	460b      	mov	r3, r1
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	440b      	add	r3, r1
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <LED_continuousColorChangeMode+0x100>)
 8001742:	701a      	strb	r2, [r3, #0]
        prepateLCDMessage();
 8001744:	f000 f916 	bl	8001974 <prepateLCDMessage>

    }
}
 8001748:	bf00      	nop
 800174a:	bd98      	pop	{r3, r4, r7, pc}
 800174c:	f3af 8000 	nop.w
 8001750:	66666666 	.word	0x66666666
 8001754:	40046666 	.word	0x40046666
 8001758:	200001f1 	.word	0x200001f1
 800175c:	08009c70 	.word	0x08009c70
 8001760:	40010000 	.word	0x40010000
 8001764:	200001f0 	.word	0x200001f0
 8001768:	aaaaaaab 	.word	0xaaaaaaab

0800176c <LED_randomColorMode>:

void LED_randomColorMode() {
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
    pulseCounter++;
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <LED_randomColorMode+0x80>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <LED_randomColorMode+0x80>)
 800177a:	701a      	strb	r2, [r3, #0]
    if (pulseCounter >= CCR_MAX_VALUE) {
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <LED_randomColorMode+0x80>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b63      	cmp	r3, #99	; 0x63
 8001782:	d931      	bls.n	80017e8 <LED_randomColorMode+0x7c>
        pulseCounter = 0;
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <LED_randomColorMode+0x80>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
        TIM1->CCR1 = rand() % 100;
 800178a:	f005 f8f9 	bl	8006980 <rand>
 800178e:	4603      	mov	r3, r0
 8001790:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <LED_randomColorMode+0x84>)
 8001792:	fb82 1203 	smull	r1, r2, r2, r3
 8001796:	1151      	asrs	r1, r2, #5
 8001798:	17da      	asrs	r2, r3, #31
 800179a:	1a8a      	subs	r2, r1, r2
 800179c:	2164      	movs	r1, #100	; 0x64
 800179e:	fb01 f202 	mul.w	r2, r1, r2
 80017a2:	1a9a      	subs	r2, r3, r2
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <LED_randomColorMode+0x88>)
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR2 = rand() % 100;
 80017a8:	f005 f8ea 	bl	8006980 <rand>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <LED_randomColorMode+0x84>)
 80017b0:	fb82 1203 	smull	r1, r2, r2, r3
 80017b4:	1151      	asrs	r1, r2, #5
 80017b6:	17da      	asrs	r2, r3, #31
 80017b8:	1a8a      	subs	r2, r1, r2
 80017ba:	2164      	movs	r1, #100	; 0x64
 80017bc:	fb01 f202 	mul.w	r2, r1, r2
 80017c0:	1a9a      	subs	r2, r3, r2
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <LED_randomColorMode+0x88>)
 80017c4:	639a      	str	r2, [r3, #56]	; 0x38
        TIM1->CCR3 = rand() % 100;
 80017c6:	f005 f8db 	bl	8006980 <rand>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <LED_randomColorMode+0x84>)
 80017ce:	fb82 1203 	smull	r1, r2, r2, r3
 80017d2:	1151      	asrs	r1, r2, #5
 80017d4:	17da      	asrs	r2, r3, #31
 80017d6:	1a8a      	subs	r2, r1, r2
 80017d8:	2164      	movs	r1, #100	; 0x64
 80017da:	fb01 f202 	mul.w	r2, r1, r2
 80017de:	1a9a      	subs	r2, r3, r2
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <LED_randomColorMode+0x88>)
 80017e2:	63da      	str	r2, [r3, #60]	; 0x3c
        prepateLCDMessage();
 80017e4:	f000 f8c6 	bl	8001974 <prepateLCDMessage>

    }
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200001f0 	.word	0x200001f0
 80017f0:	51eb851f 	.word	0x51eb851f
 80017f4:	40010000 	.word	0x40010000

080017f8 <LED_microphoneMode>:

void LED_microphoneMode() {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	; 0x30
 80017fc:	af00      	add	r7, sp, #0
    pulseCounter++;
 80017fe:	4b57      	ldr	r3, [pc, #348]	; (800195c <LED_microphoneMode+0x164>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	3301      	adds	r3, #1
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4b55      	ldr	r3, [pc, #340]	; (800195c <LED_microphoneMode+0x164>)
 8001808:	701a      	strb	r2, [r3, #0]
    if (pulseCounter >= CCR_MAX_VALUE) {
 800180a:	4b54      	ldr	r3, [pc, #336]	; (800195c <LED_microphoneMode+0x164>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b63      	cmp	r3, #99	; 0x63
 8001810:	f240 80a0 	bls.w	8001954 <LED_microphoneMode+0x15c>
        pulseCounter = 0;
 8001814:	4b51      	ldr	r3, [pc, #324]	; (800195c <LED_microphoneMode+0x164>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
        TIM1->CCR1 = min(100, max(0, microphoneValue - ADC_NOISE_VALUE)) /
 800181a:	2364      	movs	r3, #100	; 0x64
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800181e:	2300      	movs	r3, #0
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
 8001822:	4b4f      	ldr	r3, [pc, #316]	; (8001960 <LED_microphoneMode+0x168>)
 8001824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001828:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
 800182e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001832:	4293      	cmp	r3, r2
 8001834:	bfb8      	it	lt
 8001836:	4613      	movlt	r3, r2
 8001838:	623b      	str	r3, [r7, #32]
 800183a:	6a3a      	ldr	r2, [r7, #32]
 800183c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183e:	4293      	cmp	r3, r2
 8001840:	bfa8      	it	ge
 8001842:	4613      	movge	r3, r2
                     ADC_DIV * ((float) colorValues[currentColor].red / (float) UCHAR_MAX);
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184c:	4b45      	ldr	r3, [pc, #276]	; (8001964 <LED_microphoneMode+0x16c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	4a45      	ldr	r2, [pc, #276]	; (8001968 <LED_microphoneMode+0x170>)
 8001854:	460b      	mov	r3, r1
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	440b      	add	r3, r1
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001868:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800196c <LED_microphoneMode+0x174>
 800186c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001870:	ee67 7a27 	vmul.f32	s15, s14, s15
        TIM1->CCR1 = min(100, max(0, microphoneValue - ADC_NOISE_VALUE)) /
 8001874:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <LED_microphoneMode+0x178>)
 8001876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800187a:	ee17 2a90 	vmov	r2, s15
 800187e:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR2 = min(100, max(0, microphoneValue - ADC_NOISE_VALUE)) /
 8001880:	2364      	movs	r3, #100	; 0x64
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	4b35      	ldr	r3, [pc, #212]	; (8001960 <LED_microphoneMode+0x168>)
 800188a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188e:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4293      	cmp	r3, r2
 800189a:	bfb8      	it	lt
 800189c:	4613      	movlt	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	4293      	cmp	r3, r2
 80018a6:	bfa8      	it	ge
 80018a8:	4613      	movge	r3, r2
                     ADC_DIV * ((float) colorValues[currentColor].green / (float) UCHAR_MAX);
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <LED_microphoneMode+0x16c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	4619      	mov	r1, r3
 80018b8:	4a2b      	ldr	r2, [pc, #172]	; (8001968 <LED_microphoneMode+0x170>)
 80018ba:	460b      	mov	r3, r1
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	440b      	add	r3, r1
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	3304      	adds	r3, #4
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	ee07 3a90 	vmov	s15, r3
 80018cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018d0:	ed9f 6a26 	vldr	s12, [pc, #152]	; 800196c <LED_microphoneMode+0x174>
 80018d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018d8:	ee67 7a27 	vmul.f32	s15, s14, s15
        TIM1->CCR2 = min(100, max(0, microphoneValue - ADC_NOISE_VALUE)) /
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <LED_microphoneMode+0x178>)
 80018de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e2:	ee17 2a90 	vmov	r2, s15
 80018e6:	639a      	str	r2, [r3, #56]	; 0x38
        TIM1->CCR3 = min(100, max(0, microphoneValue - ADC_NOISE_VALUE)) /
 80018e8:	2364      	movs	r3, #100	; 0x64
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <LED_microphoneMode+0x168>)
 80018f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f6:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	4293      	cmp	r3, r2
 8001902:	bfb8      	it	lt
 8001904:	4613      	movlt	r3, r2
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4293      	cmp	r3, r2
 800190e:	bfa8      	it	ge
 8001910:	4613      	movge	r3, r2
                     ADC_DIV * ((float) colorValues[currentColor].blue / (float) UCHAR_MAX);
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <LED_microphoneMode+0x16c>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	4619      	mov	r1, r3
 8001920:	4a11      	ldr	r2, [pc, #68]	; (8001968 <LED_microphoneMode+0x170>)
 8001922:	460b      	mov	r3, r1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	440b      	add	r3, r1
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	3308      	adds	r3, #8
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	ee07 3a90 	vmov	s15, r3
 8001934:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001938:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 800196c <LED_microphoneMode+0x174>
 800193c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001940:	ee67 7a27 	vmul.f32	s15, s14, s15
        TIM1->CCR3 = min(100, max(0, microphoneValue - ADC_NOISE_VALUE)) /
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <LED_microphoneMode+0x178>)
 8001946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800194a:	ee17 2a90 	vmov	r2, s15
 800194e:	63da      	str	r2, [r3, #60]	; 0x3c
        prepateLCDMessage();
 8001950:	f000 f810 	bl	8001974 <prepateLCDMessage>
    }

}
 8001954:	bf00      	nop
 8001956:	3730      	adds	r7, #48	; 0x30
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200001f0 	.word	0x200001f0
 8001960:	200001fa 	.word	0x200001fa
 8001964:	200001f1 	.word	0x200001f1
 8001968:	08009c70 	.word	0x08009c70
 800196c:	437f0000 	.word	0x437f0000
 8001970:	40010000 	.word	0x40010000

08001974 <prepateLCDMessage>:

void prepateLCDMessage() {
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af02      	add	r7, sp, #8
    if (!displayMode) return;
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <prepateLCDMessage+0x48>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d018      	beq.n	80019b4 <prepateLCDMessage+0x40>
    char a[20];
    switch (displayMode) {
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <prepateLCDMessage+0x48>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d115      	bne.n	80019b6 <prepateLCDMessage+0x42>
        case 1:
            sprintf(a, "%lu;%lu;%lu", TIM1->CCR1, TIM1->CCR2, TIM1->CCR3);
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <prepateLCDMessage+0x4c>)
 800198c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <prepateLCDMessage+0x4c>)
 8001990:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <prepateLCDMessage+0x4c>)
 8001994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001996:	1d38      	adds	r0, r7, #4
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	460b      	mov	r3, r1
 800199c:	4909      	ldr	r1, [pc, #36]	; (80019c4 <prepateLCDMessage+0x50>)
 800199e:	f005 ffdf 	bl	8007960 <siprintf>
            LCD_clrScr();
 80019a2:	f000 fd43 	bl	800242c <LCD_clrScr>
            LCD_print(a, 4, 3);
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2203      	movs	r2, #3
 80019aa:	2104      	movs	r1, #4
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 fd1d 	bl	80023ec <LCD_print>
            break;
 80019b2:	e000      	b.n	80019b6 <prepateLCDMessage+0x42>
    if (!displayMode) return;
 80019b4:	bf00      	nop

    }
}
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200001f9 	.word	0x200001f9
 80019c0:	40010000 	.word	0x40010000
 80019c4:	08009c64 	.word	0x08009c64

080019c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019cc:	f001 f8b8 	bl	8002b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d0:	f000 f85a 	bl	8001a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d4:	f000 fae8 	bl	8001fa8 <MX_GPIO_Init>
  MX_DMA_Init();
 80019d8:	f000 fac6 	bl	8001f68 <MX_DMA_Init>
  MX_ADC1_Init();
 80019dc:	f000 f8c0 	bl	8001b60 <MX_ADC1_Init>
  MX_TIM1_Init();
 80019e0:	f000 f946 	bl	8001c70 <MX_TIM1_Init>
  MX_TIM2_Init();
 80019e4:	f000 f9fc 	bl	8001de0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80019e8:	f000 fa94 	bl	8001f14 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80019ec:	f000 fa44 	bl	8001e78 <MX_TIM3_Init>
  MX_SPI1_Init();
 80019f0:	f000 f908 	bl	8001c04 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
    HAL_ADC_Start(&hadc1);
 80019f4:	481c      	ldr	r0, [pc, #112]	; (8001a68 <main+0xa0>)
 80019f6:	f001 f959 	bl	8002cac <HAL_ADC_Start>
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &UARTRecieveBuffer[UARTBufIterator++], 1);
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <main+0xa4>)
 80019fc:	f993 2000 	ldrsb.w	r2, [r3]
 8001a00:	b2d3      	uxtb	r3, r2
 8001a02:	3301      	adds	r3, #1
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	b259      	sxtb	r1, r3
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <main+0xa4>)
 8001a0a:	7019      	strb	r1, [r3, #0]
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <main+0xa8>)
 8001a0e:	4413      	add	r3, r2
 8001a10:	2201      	movs	r2, #1
 8001a12:	4619      	mov	r1, r3
 8001a14:	4817      	ldr	r0, [pc, #92]	; (8001a74 <main+0xac>)
 8001a16:	f004 f85a 	bl	8005ace <HAL_UART_Receive_IT>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4816      	ldr	r0, [pc, #88]	; (8001a78 <main+0xb0>)
 8001a1e:	f003 f8f5 	bl	8004c0c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001a22:	2104      	movs	r1, #4
 8001a24:	4814      	ldr	r0, [pc, #80]	; (8001a78 <main+0xb0>)
 8001a26:	f003 f8f1 	bl	8004c0c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001a2a:	2108      	movs	r1, #8
 8001a2c:	4812      	ldr	r0, [pc, #72]	; (8001a78 <main+0xb0>)
 8001a2e:	f003 f8ed 	bl	8004c0c <HAL_TIM_PWM_Start>
    LCD_setRST(GPIOC, GPIO_PIN_4);
 8001a32:	2110      	movs	r1, #16
 8001a34:	4811      	ldr	r0, [pc, #68]	; (8001a7c <main+0xb4>)
 8001a36:	f000 fb79 	bl	800212c <LCD_setRST>
    LCD_setCE(GPIOC, GPIO_PIN_5);
 8001a3a:	2120      	movs	r1, #32
 8001a3c:	480f      	ldr	r0, [pc, #60]	; (8001a7c <main+0xb4>)
 8001a3e:	f000 fb89 	bl	8002154 <LCD_setCE>
    LCD_setDC(GPIOB, GPIO_PIN_0);
 8001a42:	2101      	movs	r1, #1
 8001a44:	480e      	ldr	r0, [pc, #56]	; (8001a80 <main+0xb8>)
 8001a46:	f000 fb99 	bl	800217c <LCD_setDC>
    LCD_setDIN(GPIOA, GPIO_PIN_7);
 8001a4a:	2180      	movs	r1, #128	; 0x80
 8001a4c:	480d      	ldr	r0, [pc, #52]	; (8001a84 <main+0xbc>)
 8001a4e:	f000 fba9 	bl	80021a4 <LCD_setDIN>
    LCD_setCLK(GPIOA, GPIO_PIN_5);
 8001a52:	2120      	movs	r1, #32
 8001a54:	480b      	ldr	r0, [pc, #44]	; (8001a84 <main+0xbc>)
 8001a56:	f000 fbb9 	bl	80021cc <LCD_setCLK>
    LCD_init();
 8001a5a:	f000 fc4f 	bl	80022fc <LCD_init>
    srand(0);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f004 ff60 	bl	8006924 <srand>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8001a64:	e7fe      	b.n	8001a64 <main+0x9c>
 8001a66:	bf00      	nop
 8001a68:	200001fc 	.word	0x200001fc
 8001a6c:	20000422 	.word	0x20000422
 8001a70:	20000418 	.word	0x20000418
 8001a74:	200003d4 	.word	0x200003d4
 8001a78:	200002fc 	.word	0x200002fc
 8001a7c:	40020800 	.word	0x40020800
 8001a80:	40020400 	.word	0x40020400
 8001a84:	40020000 	.word	0x40020000

08001a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b094      	sub	sp, #80	; 0x50
 8001a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8e:	f107 0320 	add.w	r3, r7, #32
 8001a92:	2230      	movs	r2, #48	; 0x30
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f005 ffc5 	bl	8007a26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <SystemClock_Config+0xd0>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	4a28      	ldr	r2, [pc, #160]	; (8001b58 <SystemClock_Config+0xd0>)
 8001ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aba:	6413      	str	r3, [r2, #64]	; 0x40
 8001abc:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <SystemClock_Config+0xd0>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <SystemClock_Config+0xd4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ad4:	4a21      	ldr	r2, [pc, #132]	; (8001b5c <SystemClock_Config+0xd4>)
 8001ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <SystemClock_Config+0xd4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aec:	2301      	movs	r3, #1
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af0:	2310      	movs	r3, #16
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af4:	2302      	movs	r3, #2
 8001af6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001af8:	2300      	movs	r3, #0
 8001afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001afc:	2308      	movs	r3, #8
 8001afe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001b00:	2354      	movs	r3, #84	; 0x54
 8001b02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b04:	2302      	movs	r3, #2
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b08:	2304      	movs	r3, #4
 8001b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0c:	f107 0320 	add.w	r3, r7, #32
 8001b10:	4618      	mov	r0, r3
 8001b12:	f002 fa61 	bl	8003fd8 <HAL_RCC_OscConfig>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b1c:	f000 fb00 	bl	8002120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b20:	230f      	movs	r3, #15
 8001b22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b24:	2302      	movs	r3, #2
 8001b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f002 fcc2 	bl	80044c8 <HAL_RCC_ClockConfig>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001b4a:	f000 fae9 	bl	8002120 <Error_Handler>
  }
}
 8001b4e:	bf00      	nop
 8001b50:	3750      	adds	r7, #80	; 0x50
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40007000 	.word	0x40007000

08001b60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b66:	463b      	mov	r3, r7
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b72:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <MX_ADC1_Init+0x98>)
 8001b74:	4a21      	ldr	r2, [pc, #132]	; (8001bfc <MX_ADC1_Init+0x9c>)
 8001b76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001b78:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <MX_ADC1_Init+0x98>)
 8001b7a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <MX_ADC1_Init+0x98>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <MX_ADC1_Init+0x98>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <MX_ADC1_Init+0x98>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b92:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <MX_ADC1_Init+0x98>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <MX_ADC1_Init+0x98>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <MX_ADC1_Init+0x98>)
 8001ba2:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <MX_ADC1_Init+0xa0>)
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <MX_ADC1_Init+0x98>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <MX_ADC1_Init+0x98>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_ADC1_Init+0x98>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = EOC_SEQ_CONV;
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <MX_ADC1_Init+0x98>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bc0:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <MX_ADC1_Init+0x98>)
 8001bc2:	f001 f82f 	bl	8002c24 <HAL_ADC_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001bcc:	f000 faa8 	bl	8002120 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_ADC1_Init+0x98>)
 8001be2:	f001 f9af 	bl	8002f44 <HAL_ADC_ConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001bec:	f000 fa98 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200001fc 	.word	0x200001fc
 8001bfc:	40012000 	.word	0x40012000
 8001c00:	0f000001 	.word	0x0f000001

08001c04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c08:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c0a:	4a18      	ldr	r2, [pc, #96]	; (8001c6c <MX_SPI1_Init+0x68>)
 8001c0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c0e:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c50:	220a      	movs	r2, #10
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c54:	4804      	ldr	r0, [pc, #16]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c56:	f002 fe17 	bl	8004888 <HAL_SPI_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c60:	f000 fa5e 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200002a4 	.word	0x200002a4
 8001c6c:	40013000 	.word	0x40013000

08001c70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b096      	sub	sp, #88	; 0x58
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	611a      	str	r2, [r3, #16]
 8001c9e:	615a      	str	r2, [r3, #20]
 8001ca0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f005 febc 	bl	8007a26 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cae:	4b4a      	ldr	r3, [pc, #296]	; (8001dd8 <MX_TIM1_Init+0x168>)
 8001cb0:	4a4a      	ldr	r2, [pc, #296]	; (8001ddc <MX_TIM1_Init+0x16c>)
 8001cb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001cb4:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <MX_TIM1_Init+0x168>)
 8001cb6:	2253      	movs	r2, #83	; 0x53
 8001cb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cba:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <MX_TIM1_Init+0x168>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 250-1;
 8001cc0:	4b45      	ldr	r3, [pc, #276]	; (8001dd8 <MX_TIM1_Init+0x168>)
 8001cc2:	22f9      	movs	r2, #249	; 0xf9
 8001cc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc6:	4b44      	ldr	r3, [pc, #272]	; (8001dd8 <MX_TIM1_Init+0x168>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ccc:	4b42      	ldr	r3, [pc, #264]	; (8001dd8 <MX_TIM1_Init+0x168>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd2:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <MX_TIM1_Init+0x168>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cd8:	483f      	ldr	r0, [pc, #252]	; (8001dd8 <MX_TIM1_Init+0x168>)
 8001cda:	f002 fe5e 	bl	800499a <HAL_TIM_Base_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001ce4:	f000 fa1c 	bl	8002120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4838      	ldr	r0, [pc, #224]	; (8001dd8 <MX_TIM1_Init+0x168>)
 8001cf6:	f003 fa03 	bl	8005100 <HAL_TIM_ConfigClockSource>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001d00:	f000 fa0e 	bl	8002120 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d04:	4834      	ldr	r0, [pc, #208]	; (8001dd8 <MX_TIM1_Init+0x168>)
 8001d06:	f002 ff28 	bl	8004b5a <HAL_TIM_PWM_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001d10:	f000 fa06 	bl	8002120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d14:	2300      	movs	r3, #0
 8001d16:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d20:	4619      	mov	r1, r3
 8001d22:	482d      	ldr	r0, [pc, #180]	; (8001dd8 <MX_TIM1_Init+0x168>)
 8001d24:	f003 fdb2 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001d2e:	f000 f9f7 	bl	8002120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d32:	2360      	movs	r3, #96	; 0x60
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d52:	2200      	movs	r2, #0
 8001d54:	4619      	mov	r1, r3
 8001d56:	4820      	ldr	r0, [pc, #128]	; (8001dd8 <MX_TIM1_Init+0x168>)
 8001d58:	f003 f910 	bl	8004f7c <HAL_TIM_PWM_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001d62:	f000 f9dd 	bl	8002120 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	481a      	ldr	r0, [pc, #104]	; (8001dd8 <MX_TIM1_Init+0x168>)
 8001d70:	f003 f904 	bl	8004f7c <HAL_TIM_PWM_ConfigChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001d7a:	f000 f9d1 	bl	8002120 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d82:	2208      	movs	r2, #8
 8001d84:	4619      	mov	r1, r3
 8001d86:	4814      	ldr	r0, [pc, #80]	; (8001dd8 <MX_TIM1_Init+0x168>)
 8001d88:	f003 f8f8 	bl	8004f7c <HAL_TIM_PWM_ConfigChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001d92:	f000 f9c5 	bl	8002120 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001daa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	4619      	mov	r1, r3
 8001db8:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <MX_TIM1_Init+0x168>)
 8001dba:	f003 fdd5 	bl	8005968 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001dc4:	f000 f9ac 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dc8:	4803      	ldr	r0, [pc, #12]	; (8001dd8 <MX_TIM1_Init+0x168>)
 8001dca:	f000 fcab 	bl	8002724 <HAL_TIM_MspPostInit>

}
 8001dce:	bf00      	nop
 8001dd0:	3758      	adds	r7, #88	; 0x58
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200002fc 	.word	0x200002fc
 8001ddc:	40010000 	.word	0x40010000

08001de0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de6:	f107 0308 	add.w	r3, r7, #8
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df4:	463b      	mov	r3, r7
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <MX_TIM2_Init+0x94>)
 8001dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <MX_TIM2_Init+0x94>)
 8001e06:	f240 3247 	movw	r2, #839	; 0x347
 8001e0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <MX_TIM2_Init+0x94>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2-1;
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <MX_TIM2_Init+0x94>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <MX_TIM2_Init+0x94>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <MX_TIM2_Init+0x94>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e24:	4813      	ldr	r0, [pc, #76]	; (8001e74 <MX_TIM2_Init+0x94>)
 8001e26:	f002 fdb8 	bl	800499a <HAL_TIM_Base_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e30:	f000 f976 	bl	8002120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e3a:	f107 0308 	add.w	r3, r7, #8
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480c      	ldr	r0, [pc, #48]	; (8001e74 <MX_TIM2_Init+0x94>)
 8001e42:	f003 f95d 	bl	8005100 <HAL_TIM_ConfigClockSource>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e4c:	f000 f968 	bl	8002120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e58:	463b      	mov	r3, r7
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_TIM2_Init+0x94>)
 8001e5e:	f003 fd15 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e68:	f000 f95a 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000344 	.word	0x20000344

08001e78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7e:	f107 0308 	add.w	r3, r7, #8
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e94:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <MX_TIM3_Init+0x94>)
 8001e96:	4a1e      	ldr	r2, [pc, #120]	; (8001f10 <MX_TIM3_Init+0x98>)
 8001e98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8001e9a:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <MX_TIM3_Init+0x94>)
 8001e9c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001ea0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <MX_TIM3_Init+0x94>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 8001ea8:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <MX_TIM3_Init+0x94>)
 8001eaa:	2209      	movs	r2, #9
 8001eac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eae:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <MX_TIM3_Init+0x94>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb4:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <MX_TIM3_Init+0x94>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001eba:	4814      	ldr	r0, [pc, #80]	; (8001f0c <MX_TIM3_Init+0x94>)
 8001ebc:	f002 fd6d 	bl	800499a <HAL_TIM_Base_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001ec6:	f000 f92b 	bl	8002120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ece:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ed0:	f107 0308 	add.w	r3, r7, #8
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	480d      	ldr	r0, [pc, #52]	; (8001f0c <MX_TIM3_Init+0x94>)
 8001ed8:	f003 f912 	bl	8005100 <HAL_TIM_ConfigClockSource>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001ee2:	f000 f91d 	bl	8002120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001eee:	463b      	mov	r3, r7
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4806      	ldr	r0, [pc, #24]	; (8001f0c <MX_TIM3_Init+0x94>)
 8001ef4:	f003 fcca 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001efe:	f000 f90f 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000038c 	.word	0x2000038c
 8001f10:	40000400 	.word	0x40000400

08001f14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f1a:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <MX_USART1_UART_Init+0x50>)
 8001f1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <MX_USART1_UART_Init+0x4c>)
 8001f4c:	f003 fd72 	bl	8005a34 <HAL_UART_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f56:	f000 f8e3 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200003d4 	.word	0x200003d4
 8001f64:	40011000 	.word	0x40011000

08001f68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <MX_DMA_Init+0x3c>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <MX_DMA_Init+0x3c>)
 8001f78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <MX_DMA_Init+0x3c>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2038      	movs	r0, #56	; 0x38
 8001f90:	f001 fad1 	bl	8003536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f94:	2038      	movs	r0, #56	; 0x38
 8001f96:	f001 faea 	bl	800356e <HAL_NVIC_EnableIRQ>

}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800

08001fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b30      	ldr	r3, [pc, #192]	; (8002084 <MX_GPIO_Init+0xdc>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a2f      	ldr	r2, [pc, #188]	; (8002084 <MX_GPIO_Init+0xdc>)
 8001fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <MX_GPIO_Init+0xdc>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <MX_GPIO_Init+0xdc>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a28      	ldr	r2, [pc, #160]	; (8002084 <MX_GPIO_Init+0xdc>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b26      	ldr	r3, [pc, #152]	; (8002084 <MX_GPIO_Init+0xdc>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	4b22      	ldr	r3, [pc, #136]	; (8002084 <MX_GPIO_Init+0xdc>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a21      	ldr	r2, [pc, #132]	; (8002084 <MX_GPIO_Init+0xdc>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <MX_GPIO_Init+0xdc>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <MX_GPIO_Init+0xdc>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a1a      	ldr	r2, [pc, #104]	; (8002084 <MX_GPIO_Init+0xdc>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <MX_GPIO_Init+0xdc>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	2130      	movs	r1, #48	; 0x30
 8002032:	4815      	ldr	r0, [pc, #84]	; (8002088 <MX_GPIO_Init+0xe0>)
 8002034:	f001 ffb6 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002038:	2200      	movs	r2, #0
 800203a:	2101      	movs	r1, #1
 800203c:	4813      	ldr	r0, [pc, #76]	; (800208c <MX_GPIO_Init+0xe4>)
 800203e:	f001 ffb1 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002042:	2330      	movs	r3, #48	; 0x30
 8002044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002046:	2301      	movs	r3, #1
 8002048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	480b      	ldr	r0, [pc, #44]	; (8002088 <MX_GPIO_Init+0xe0>)
 800205a:	f001 fe1f 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800205e:	2301      	movs	r3, #1
 8002060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	4805      	ldr	r0, [pc, #20]	; (800208c <MX_GPIO_Init+0xe4>)
 8002076:	f001 fe11 	bl	8003c9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800207a:	bf00      	nop
 800207c:	3728      	adds	r7, #40	; 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	40020800 	.word	0x40020800
 800208c:	40020400 	.word	0x40020400

08002090 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_UART_RxCpltCallback+0x80>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d122      	bne.n	80020e8 <HAL_UART_RxCpltCallback+0x58>
        // Process the received data here
        // ...
        if (UARTRecieveBuffer[UARTBufIterator - 1] == '\0' || UARTRecieveBuffer[UARTBufIterator - 1] == '\r' ||
 80020a2:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <HAL_UART_RxCpltCallback+0x84>)
 80020a4:	f993 3000 	ldrsb.w	r3, [r3]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	4a1b      	ldr	r2, [pc, #108]	; (8002118 <HAL_UART_RxCpltCallback+0x88>)
 80020ac:	5cd3      	ldrb	r3, [r2, r3]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00f      	beq.n	80020d2 <HAL_UART_RxCpltCallback+0x42>
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_UART_RxCpltCallback+0x84>)
 80020b4:	f993 3000 	ldrsb.w	r3, [r3]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	4a17      	ldr	r2, [pc, #92]	; (8002118 <HAL_UART_RxCpltCallback+0x88>)
 80020bc:	5cd3      	ldrb	r3, [r2, r3]
 80020be:	2b0d      	cmp	r3, #13
 80020c0:	d007      	beq.n	80020d2 <HAL_UART_RxCpltCallback+0x42>
            UARTRecieveBuffer[UARTBufIterator - 1] == '\n') {
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_UART_RxCpltCallback+0x84>)
 80020c4:	f993 3000 	ldrsb.w	r3, [r3]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	4a13      	ldr	r2, [pc, #76]	; (8002118 <HAL_UART_RxCpltCallback+0x88>)
 80020cc:	5cd3      	ldrb	r3, [r2, r3]
        if (UARTRecieveBuffer[UARTBufIterator - 1] == '\0' || UARTRecieveBuffer[UARTBufIterator - 1] == '\r' ||
 80020ce:	2b0a      	cmp	r3, #10
 80020d0:	d10a      	bne.n	80020e8 <HAL_UART_RxCpltCallback+0x58>
            parseString(UARTRecieveBuffer);
 80020d2:	4811      	ldr	r0, [pc, #68]	; (8002118 <HAL_UART_RxCpltCallback+0x88>)
 80020d4:	f7fe ff88 	bl	8000fe8 <parseString>
            memset(UARTRecieveBuffer, 0, sizeof(UARTRecieveBuffer));
 80020d8:	220a      	movs	r2, #10
 80020da:	2100      	movs	r1, #0
 80020dc:	480e      	ldr	r0, [pc, #56]	; (8002118 <HAL_UART_RxCpltCallback+0x88>)
 80020de:	f005 fca2 	bl	8007a26 <memset>
            UARTBufIterator = 0;
 80020e2:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <HAL_UART_RxCpltCallback+0x84>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
        }
        // Restart reception for the next byte
    }
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &UARTRecieveBuffer[UARTBufIterator++], 1);
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_UART_RxCpltCallback+0x84>)
 80020ea:	f993 2000 	ldrsb.w	r2, [r3]
 80020ee:	b2d3      	uxtb	r3, r2
 80020f0:	3301      	adds	r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	b259      	sxtb	r1, r3
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <HAL_UART_RxCpltCallback+0x84>)
 80020f8:	7019      	strb	r1, [r3, #0]
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_UART_RxCpltCallback+0x88>)
 80020fc:	4413      	add	r3, r2
 80020fe:	2201      	movs	r2, #1
 8002100:	4619      	mov	r1, r3
 8002102:	4806      	ldr	r0, [pc, #24]	; (800211c <HAL_UART_RxCpltCallback+0x8c>)
 8002104:	f003 fce3 	bl	8005ace <HAL_UART_Receive_IT>

}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40011000 	.word	0x40011000
 8002114:	20000422 	.word	0x20000422
 8002118:	20000418 	.word	0x20000418
 800211c:	200003d4 	.word	0x200003d4

08002120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002124:	b672      	cpsid	i
}
 8002126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002128:	e7fe      	b.n	8002128 <Error_Handler+0x8>
	...

0800212c <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8002138:	4a05      	ldr	r2, [pc, #20]	; (8002150 <LCD_setRST+0x24>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 800213e:	4a04      	ldr	r2, [pc, #16]	; (8002150 <LCD_setRST+0x24>)
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	8093      	strh	r3, [r2, #4]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	20000620 	.word	0x20000620

08002154 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8002160:	4a05      	ldr	r2, [pc, #20]	; (8002178 <LCD_setCE+0x24>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 8002166:	4a04      	ldr	r2, [pc, #16]	; (8002178 <LCD_setCE+0x24>)
 8002168:	887b      	ldrh	r3, [r7, #2]
 800216a:	8193      	strh	r3, [r2, #12]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	20000620 	.word	0x20000620

0800217c <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 8002188:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <LCD_setDC+0x24>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <LCD_setDC+0x24>)
 8002190:	887b      	ldrh	r3, [r7, #2]
 8002192:	8293      	strh	r3, [r2, #20]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	20000620 	.word	0x20000620

080021a4 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 80021b0:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <LCD_setDIN+0x24>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <LCD_setDIN+0x24>)
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	8393      	strh	r3, [r2, #28]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	20000620 	.word	0x20000620

080021cc <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 80021d8:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <LCD_setCLK+0x24>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 80021de:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <LCD_setCLK+0x24>)
 80021e0:	887b      	ldrh	r3, [r7, #2]
 80021e2:	8493      	strh	r3, [r2, #36]	; 0x24
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	20000620 	.word	0x20000620

080021f4 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	e026      	b.n	8002252 <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <LCD_send+0x70>)
 8002206:	6998      	ldr	r0, [r3, #24]
 8002208:	4b16      	ldr	r3, [pc, #88]	; (8002264 <LCD_send+0x70>)
 800220a:	8b99      	ldrh	r1, [r3, #28]
 800220c:	79fa      	ldrb	r2, [r7, #7]
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	f1c3 0307 	rsb	r3, r3, #7
 8002214:	fa42 f303 	asr.w	r3, r2, r3
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf14      	ite	ne
 8002220:	2301      	movne	r3, #1
 8002222:	2300      	moveq	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	f001 febc 	bl	8003fa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 800222c:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <LCD_send+0x70>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4a0c      	ldr	r2, [pc, #48]	; (8002264 <LCD_send+0x70>)
 8002232:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8002234:	2201      	movs	r2, #1
 8002236:	4618      	mov	r0, r3
 8002238:	f001 feb4 	bl	8003fa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <LCD_send+0x70>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4a08      	ldr	r2, [pc, #32]	; (8002264 <LCD_send+0x70>)
 8002242:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8002244:	2200      	movs	r2, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f001 feac 	bl	8003fa4 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	3301      	adds	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	2b07      	cmp	r3, #7
 8002256:	d9d5      	bls.n	8002204 <LCD_send+0x10>
  }
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000620 	.word	0x20000620

08002268 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	460a      	mov	r2, r1
 8002272:	71fb      	strb	r3, [r7, #7]
 8002274:	4613      	mov	r3, r2
 8002276:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 8002278:	79bb      	ldrb	r3, [r7, #6]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d11c      	bne.n	80022b8 <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 800227e:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <LCD_write+0x90>)
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <LCD_write+0x90>)
 8002284:	8a91      	ldrh	r1, [r2, #20]
 8002286:	2200      	movs	r2, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f001 fe8b 	bl	8003fa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <LCD_write+0x90>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <LCD_write+0x90>)
 8002294:	8991      	ldrh	r1, [r2, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f001 fe83 	bl	8003fa4 <HAL_GPIO_WritePin>
    LCD_send(data);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ffa7 	bl	80021f4 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 80022a6:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <LCD_write+0x90>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <LCD_write+0x90>)
 80022ac:	8991      	ldrh	r1, [r2, #12]
 80022ae:	2201      	movs	r2, #1
 80022b0:	4618      	mov	r0, r3
 80022b2:	f001 fe77 	bl	8003fa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 80022b6:	e01b      	b.n	80022f0 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <LCD_write+0x90>)
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	4a0e      	ldr	r2, [pc, #56]	; (80022f8 <LCD_write+0x90>)
 80022be:	8a91      	ldrh	r1, [r2, #20]
 80022c0:	2201      	movs	r2, #1
 80022c2:	4618      	mov	r0, r3
 80022c4:	f001 fe6e 	bl	8003fa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <LCD_write+0x90>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <LCD_write+0x90>)
 80022ce:	8991      	ldrh	r1, [r2, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f001 fe66 	bl	8003fa4 <HAL_GPIO_WritePin>
    LCD_send(data);
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff8a 	bl	80021f4 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <LCD_write+0x90>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <LCD_write+0x90>)
 80022e6:	8991      	ldrh	r1, [r2, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	4618      	mov	r0, r3
 80022ec:	f001 fe5a 	bl	8003fa4 <HAL_GPIO_WritePin>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000620 	.word	0x20000620

080022fc <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <LCD_init+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a16      	ldr	r2, [pc, #88]	; (8002360 <LCD_init+0x64>)
 8002306:	8891      	ldrh	r1, [r2, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f001 fe4a 	bl	8003fa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <LCD_init+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a12      	ldr	r2, [pc, #72]	; (8002360 <LCD_init+0x64>)
 8002316:	8891      	ldrh	r1, [r2, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	4618      	mov	r0, r3
 800231c:	f001 fe42 	bl	8003fa4 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8002320:	2100      	movs	r1, #0
 8002322:	2021      	movs	r0, #33	; 0x21
 8002324:	f7ff ffa0 	bl	8002268 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8002328:	2100      	movs	r1, #0
 800232a:	20b8      	movs	r0, #184	; 0xb8
 800232c:	f7ff ff9c 	bl	8002268 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8002330:	2100      	movs	r1, #0
 8002332:	2004      	movs	r0, #4
 8002334:	f7ff ff98 	bl	8002268 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8002338:	2100      	movs	r1, #0
 800233a:	2014      	movs	r0, #20
 800233c:	f7ff ff94 	bl	8002268 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8002340:	2100      	movs	r1, #0
 8002342:	2020      	movs	r0, #32
 8002344:	f7ff ff90 	bl	8002268 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8002348:	2100      	movs	r1, #0
 800234a:	200c      	movs	r0, #12
 800234c:	f7ff ff8c 	bl	8002268 <LCD_write>
  LCD_clrScr();
 8002350:	f000 f86c 	bl	800242c <LCD_clrScr>
  lcd.inverttext = false;
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <LCD_init+0x68>)
 8002356:	2200      	movs	r2, #0
 8002358:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000620 	.word	0x20000620
 8002364:	20000424 	.word	0x20000424

08002368 <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < 6; i++){
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e02d      	b.n	80023d4 <LCD_putChar+0x6c>
    if(lcd.inverttext != true)
 8002378:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <LCD_putChar+0x7c>)
 800237a:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 800237e:	f083 0301 	eor.w	r3, r3, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d010      	beq.n	80023aa <LCD_putChar+0x42>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	f1a3 0220 	sub.w	r2, r3, #32
 800238e:	4916      	ldr	r1, [pc, #88]	; (80023e8 <LCD_putChar+0x80>)
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	18ca      	adds	r2, r1, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4413      	add	r3, r2
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2101      	movs	r1, #1
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ff60 	bl	8002268 <LCD_write>
 80023a8:	e011      	b.n	80023ce <LCD_putChar+0x66>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	f1a3 0220 	sub.w	r2, r3, #32
 80023b0:	490d      	ldr	r1, [pc, #52]	; (80023e8 <LCD_putChar+0x80>)
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	18ca      	adds	r2, r1, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4413      	add	r3, r2
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2101      	movs	r1, #1
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff4d 	bl	8002268 <LCD_write>
  for(int i = 0; i < 6; i++){
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3301      	adds	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b05      	cmp	r3, #5
 80023d8:	ddce      	ble.n	8002378 <LCD_putChar+0x10>
  }
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000424 	.word	0x20000424
 80023e8:	08009cf4 	.word	0x08009cf4

080023ec <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	70fb      	strb	r3, [r7, #3]
 80023f8:	4613      	mov	r3, r2
 80023fa:	70bb      	strb	r3, [r7, #2]
  LCD_goXY(x, y);
 80023fc:	78ba      	ldrb	r2, [r7, #2]
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f830 	bl	8002468 <LCD_goXY>
  while(*str){
 8002408:	e006      	b.n	8002418 <LCD_print+0x2c>
    LCD_putChar(*str++);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ffa8 	bl	8002368 <LCD_putChar>
  while(*str){
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f4      	bne.n	800240a <LCD_print+0x1e>
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	e00b      	b.n	8002450 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 8002438:	2101      	movs	r1, #1
 800243a:	2000      	movs	r0, #0
 800243c:	f7ff ff14 	bl	8002268 <LCD_write>
    lcd.buffer[i] = 0;
 8002440:	4a08      	ldr	r2, [pc, #32]	; (8002464 <LCD_clrScr+0x38>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3301      	adds	r3, #1
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8002456:	dbef      	blt.n	8002438 <LCD_clrScr+0xc>
  }
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000424 	.word	0x20000424

08002468 <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	460a      	mov	r2, r1
 8002472:	71fb      	strb	r3, [r7, #7]
 8002474:	4613      	mov	r3, r2
 8002476:	71bb      	strb	r3, [r7, #6]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fef0 	bl	8002268 <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 8002488:	79bb      	ldrb	r3, [r7, #6]
 800248a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fee8 	bl	8002268 <LCD_write>
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_MspInit+0x4c>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	4a0f      	ldr	r2, [pc, #60]	; (80024ec <HAL_MspInit+0x4c>)
 80024b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b4:	6453      	str	r3, [r2, #68]	; 0x44
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_MspInit+0x4c>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_MspInit+0x4c>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	4a08      	ldr	r2, [pc, #32]	; (80024ec <HAL_MspInit+0x4c>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	6413      	str	r3, [r2, #64]	; 0x40
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_MspInit+0x4c>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800

080024f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a2f      	ldr	r2, [pc, #188]	; (80025cc <HAL_ADC_MspInit+0xdc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d157      	bne.n	80025c2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <HAL_ADC_MspInit+0xe0>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	4a2d      	ldr	r2, [pc, #180]	; (80025d0 <HAL_ADC_MspInit+0xe0>)
 800251c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002520:	6453      	str	r3, [r2, #68]	; 0x44
 8002522:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <HAL_ADC_MspInit+0xe0>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_ADC_MspInit+0xe0>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a26      	ldr	r2, [pc, #152]	; (80025d0 <HAL_ADC_MspInit+0xe0>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_ADC_MspInit+0xe0>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800254a:	2301      	movs	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800254e:	2303      	movs	r3, #3
 8002550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	f107 0314 	add.w	r3, r7, #20
 800255a:	4619      	mov	r1, r3
 800255c:	481d      	ldr	r0, [pc, #116]	; (80025d4 <HAL_ADC_MspInit+0xe4>)
 800255e:	f001 fb9d 	bl	8003c9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002562:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <HAL_ADC_MspInit+0xe8>)
 8002564:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <HAL_ADC_MspInit+0xec>)
 8002566:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <HAL_ADC_MspInit+0xe8>)
 800256a:	2200      	movs	r2, #0
 800256c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800256e:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <HAL_ADC_MspInit+0xe8>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002574:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <HAL_ADC_MspInit+0xe8>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <HAL_ADC_MspInit+0xe8>)
 800257c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002580:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_ADC_MspInit+0xe8>)
 8002584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002588:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800258a:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <HAL_ADC_MspInit+0xe8>)
 800258c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002590:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002592:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <HAL_ADC_MspInit+0xe8>)
 8002594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002598:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800259a:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_ADC_MspInit+0xe8>)
 800259c:	2200      	movs	r2, #0
 800259e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025a0:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <HAL_ADC_MspInit+0xe8>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025a6:	480c      	ldr	r0, [pc, #48]	; (80025d8 <HAL_ADC_MspInit+0xe8>)
 80025a8:	f000 fffc 	bl	80035a4 <HAL_DMA_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80025b2:	f7ff fdb5 	bl	8002120 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <HAL_ADC_MspInit+0xe8>)
 80025ba:	639a      	str	r2, [r3, #56]	; 0x38
 80025bc:	4a06      	ldr	r2, [pc, #24]	; (80025d8 <HAL_ADC_MspInit+0xe8>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025c2:	bf00      	nop
 80025c4:	3728      	adds	r7, #40	; 0x28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40012000 	.word	0x40012000
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40020000 	.word	0x40020000
 80025d8:	20000244 	.word	0x20000244
 80025dc:	40026410 	.word	0x40026410

080025e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a19      	ldr	r2, [pc, #100]	; (8002664 <HAL_SPI_MspInit+0x84>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d12b      	bne.n	800265a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <HAL_SPI_MspInit+0x88>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a17      	ldr	r2, [pc, #92]	; (8002668 <HAL_SPI_MspInit+0x88>)
 800260c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b15      	ldr	r3, [pc, #84]	; (8002668 <HAL_SPI_MspInit+0x88>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_SPI_MspInit+0x88>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a10      	ldr	r2, [pc, #64]	; (8002668 <HAL_SPI_MspInit+0x88>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <HAL_SPI_MspInit+0x88>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800263a:	23a0      	movs	r3, #160	; 0xa0
 800263c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263e:	2302      	movs	r3, #2
 8002640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002646:	2303      	movs	r3, #3
 8002648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800264a:	2305      	movs	r3, #5
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264e:	f107 0314 	add.w	r3, r7, #20
 8002652:	4619      	mov	r1, r3
 8002654:	4805      	ldr	r0, [pc, #20]	; (800266c <HAL_SPI_MspInit+0x8c>)
 8002656:	f001 fb21 	bl	8003c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800265a:	bf00      	nop
 800265c:	3728      	adds	r7, #40	; 0x28
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40013000 	.word	0x40013000
 8002668:	40023800 	.word	0x40023800
 800266c:	40020000 	.word	0x40020000

08002670 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a26      	ldr	r2, [pc, #152]	; (8002718 <HAL_TIM_Base_MspInit+0xa8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d10e      	bne.n	80026a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	4b25      	ldr	r3, [pc, #148]	; (800271c <HAL_TIM_Base_MspInit+0xac>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	4a24      	ldr	r2, [pc, #144]	; (800271c <HAL_TIM_Base_MspInit+0xac>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6453      	str	r3, [r2, #68]	; 0x44
 8002692:	4b22      	ldr	r3, [pc, #136]	; (800271c <HAL_TIM_Base_MspInit+0xac>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800269e:	e036      	b.n	800270e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a8:	d116      	bne.n	80026d8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_TIM_Base_MspInit+0xac>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a1a      	ldr	r2, [pc, #104]	; (800271c <HAL_TIM_Base_MspInit+0xac>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b18      	ldr	r3, [pc, #96]	; (800271c <HAL_TIM_Base_MspInit+0xac>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2100      	movs	r1, #0
 80026ca:	201c      	movs	r0, #28
 80026cc:	f000 ff33 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026d0:	201c      	movs	r0, #28
 80026d2:	f000 ff4c 	bl	800356e <HAL_NVIC_EnableIRQ>
}
 80026d6:	e01a      	b.n	800270e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a10      	ldr	r2, [pc, #64]	; (8002720 <HAL_TIM_Base_MspInit+0xb0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d115      	bne.n	800270e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_TIM_Base_MspInit+0xac>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a0c      	ldr	r2, [pc, #48]	; (800271c <HAL_TIM_Base_MspInit+0xac>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_TIM_Base_MspInit+0xac>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	2100      	movs	r1, #0
 8002702:	201d      	movs	r0, #29
 8002704:	f000 ff17 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002708:	201d      	movs	r0, #29
 800270a:	f000 ff30 	bl	800356e <HAL_NVIC_EnableIRQ>
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40010000 	.word	0x40010000
 800271c:	40023800 	.word	0x40023800
 8002720:	40000400 	.word	0x40000400

08002724 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 030c 	add.w	r3, r7, #12
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a12      	ldr	r2, [pc, #72]	; (800278c <HAL_TIM_MspPostInit+0x68>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d11e      	bne.n	8002784 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <HAL_TIM_MspPostInit+0x6c>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a10      	ldr	r2, [pc, #64]	; (8002790 <HAL_TIM_MspPostInit+0x6c>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <HAL_TIM_MspPostInit+0x6c>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002762:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002766:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002770:	2300      	movs	r3, #0
 8002772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002774:	2301      	movs	r3, #1
 8002776:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 030c 	add.w	r3, r7, #12
 800277c:	4619      	mov	r1, r3
 800277e:	4805      	ldr	r0, [pc, #20]	; (8002794 <HAL_TIM_MspPostInit+0x70>)
 8002780:	f001 fa8c 	bl	8003c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002784:	bf00      	nop
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40010000 	.word	0x40010000
 8002790:	40023800 	.word	0x40023800
 8002794:	40020000 	.word	0x40020000

08002798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1d      	ldr	r2, [pc, #116]	; (800282c <HAL_UART_MspInit+0x94>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d133      	bne.n	8002822 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <HAL_UART_MspInit+0x98>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	4a1b      	ldr	r2, [pc, #108]	; (8002830 <HAL_UART_MspInit+0x98>)
 80027c4:	f043 0310 	orr.w	r3, r3, #16
 80027c8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_UART_MspInit+0x98>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <HAL_UART_MspInit+0x98>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a14      	ldr	r2, [pc, #80]	; (8002830 <HAL_UART_MspInit+0x98>)
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_UART_MspInit+0x98>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027f2:	23c0      	movs	r3, #192	; 0xc0
 80027f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002802:	2307      	movs	r3, #7
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	4619      	mov	r1, r3
 800280c:	4809      	ldr	r0, [pc, #36]	; (8002834 <HAL_UART_MspInit+0x9c>)
 800280e:	f001 fa45 	bl	8003c9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2100      	movs	r1, #0
 8002816:	2025      	movs	r0, #37	; 0x25
 8002818:	f000 fe8d 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800281c:	2025      	movs	r0, #37	; 0x25
 800281e:	f000 fea6 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002822:	bf00      	nop
 8002824:	3728      	adds	r7, #40	; 0x28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40011000 	.word	0x40011000
 8002830:	40023800 	.word	0x40023800
 8002834:	40020400 	.word	0x40020400

08002838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 800283c:	e7fe      	b.n	800283c <NMI_Handler+0x4>

0800283e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002842:	e7fe      	b.n	8002842 <HardFault_Handler+0x4>

08002844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002848:	e7fe      	b.n	8002848 <MemManage_Handler+0x4>

0800284a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800284e:	e7fe      	b.n	800284e <BusFault_Handler+0x4>

08002850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002854:	e7fe      	b.n	8002854 <UsageFault_Handler+0x4>

08002856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002884:	f000 f9ae 	bl	8002be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}

0800288c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002890:	4807      	ldr	r0, [pc, #28]	; (80028b0 <TIM2_IRQHandler+0x24>)
 8002892:	f002 fa6b 	bl	8004d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
    HAL_ADC_PollForConversion(&hadc1, 100);
 8002896:	2164      	movs	r1, #100	; 0x64
 8002898:	4806      	ldr	r0, [pc, #24]	; (80028b4 <TIM2_IRQHandler+0x28>)
 800289a:	f000 fabb 	bl	8002e14 <HAL_ADC_PollForConversion>
    microphoneValue = HAL_ADC_GetValue(&hadc1);
 800289e:	4805      	ldr	r0, [pc, #20]	; (80028b4 <TIM2_IRQHandler+0x28>)
 80028a0:	f000 fb43 	bl	8002f2a <HAL_ADC_GetValue>
 80028a4:	4603      	mov	r3, r0
 80028a6:	b21a      	sxth	r2, r3
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <TIM2_IRQHandler+0x2c>)
 80028aa:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000344 	.word	0x20000344
 80028b4:	200001fc 	.word	0x200001fc
 80028b8:	200001fa 	.word	0x200001fa

080028bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
    switch (LedMode) {
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <TIM3_IRQHandler+0x50>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d81c      	bhi.n	8002902 <TIM3_IRQHandler+0x46>
 80028c8:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <TIM3_IRQHandler+0x14>)
 80028ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ce:	bf00      	nop
 80028d0:	080028e5 	.word	0x080028e5
 80028d4:	080028eb 	.word	0x080028eb
 80028d8:	080028f1 	.word	0x080028f1
 80028dc:	080028f7 	.word	0x080028f7
 80028e0:	080028fd 	.word	0x080028fd
        case 0:
            LED_pulseMode();
 80028e4:	f7fe fd60 	bl	80013a8 <LED_pulseMode>
            break;
 80028e8:	e00b      	b.n	8002902 <TIM3_IRQHandler+0x46>
        case 1:
            LED_continuousTransformationMode();
 80028ea:	f7fe fdfd 	bl	80014e8 <LED_continuousTransformationMode>
            break;
 80028ee:	e008      	b.n	8002902 <TIM3_IRQHandler+0x46>
        case 2:
            LED_continuousColorChangeMode();
 80028f0:	f7fe feb2 	bl	8001658 <LED_continuousColorChangeMode>
            break;
 80028f4:	e005      	b.n	8002902 <TIM3_IRQHandler+0x46>
        case 3:
            LED_randomColorMode();
 80028f6:	f7fe ff39 	bl	800176c <LED_randomColorMode>
            break;
 80028fa:	e002      	b.n	8002902 <TIM3_IRQHandler+0x46>
        case 4:
            LED_microphoneMode();
 80028fc:	f7fe ff7c 	bl	80017f8 <LED_microphoneMode>
            break;
 8002900:	bf00      	nop
    }
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002902:	4803      	ldr	r0, [pc, #12]	; (8002910 <TIM3_IRQHandler+0x54>)
 8002904:	f002 fa32 	bl	8004d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}
 800290c:	200001f8 	.word	0x200001f8
 8002910:	2000038c 	.word	0x2000038c

08002914 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <USART1_IRQHandler+0x10>)
 800291a:	f003 f909 	bl	8005b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200003d4 	.word	0x200003d4

08002928 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <DMA2_Stream0_IRQHandler+0x10>)
 800292e:	f000 ff79 	bl	8003824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000244 	.word	0x20000244

0800293c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return 1;
 8002940:	2301      	movs	r3, #1
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <_kill>:

int _kill(int pid, int sig)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002956:	f005 f923 	bl	8007ba0 <__errno>
 800295a:	4603      	mov	r3, r0
 800295c:	2216      	movs	r2, #22
 800295e:	601a      	str	r2, [r3, #0]
  return -1;
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <_exit>:

void _exit (int status)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002974:	f04f 31ff 	mov.w	r1, #4294967295
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ffe7 	bl	800294c <_kill>
  while (1) {}    /* Make sure we hang here */
 800297e:	e7fe      	b.n	800297e <_exit+0x12>

08002980 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	e00a      	b.n	80029a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002992:	f3af 8000 	nop.w
 8002996:	4601      	mov	r1, r0
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	60ba      	str	r2, [r7, #8]
 800299e:	b2ca      	uxtb	r2, r1
 80029a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3301      	adds	r3, #1
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	dbf0      	blt.n	8002992 <_read+0x12>
  }

  return len;
 80029b0:	687b      	ldr	r3, [r7, #4]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b086      	sub	sp, #24
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	e009      	b.n	80029e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	60ba      	str	r2, [r7, #8]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	3301      	adds	r3, #1
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	dbf1      	blt.n	80029cc <_write+0x12>
  }
  return len;
 80029e8:	687b      	ldr	r3, [r7, #4]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <_close>:

int _close(int file)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a1a:	605a      	str	r2, [r3, #4]
  return 0;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <_isatty>:

int _isatty(int file)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a32:	2301      	movs	r3, #1
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a64:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <_sbrk+0x5c>)
 8002a66:	4b15      	ldr	r3, [pc, #84]	; (8002abc <_sbrk+0x60>)
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <_sbrk+0x64>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d102      	bne.n	8002a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <_sbrk+0x64>)
 8002a7a:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <_sbrk+0x68>)
 8002a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <_sbrk+0x64>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d207      	bcs.n	8002a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a8c:	f005 f888 	bl	8007ba0 <__errno>
 8002a90:	4603      	mov	r3, r0
 8002a92:	220c      	movs	r2, #12
 8002a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	e009      	b.n	8002ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <_sbrk+0x64>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <_sbrk+0x64>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <_sbrk+0x64>)
 8002aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aae:	68fb      	ldr	r3, [r7, #12]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20018000 	.word	0x20018000
 8002abc:	00000400 	.word	0x00000400
 8002ac0:	20000648 	.word	0x20000648
 8002ac4:	200007a0 	.word	0x200007a0

08002ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <SystemInit+0x20>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <SystemInit+0x20>)
 8002ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002af0:	480d      	ldr	r0, [pc, #52]	; (8002b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002af2:	490e      	ldr	r1, [pc, #56]	; (8002b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002af4:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af8:	e002      	b.n	8002b00 <LoopCopyDataInit>

08002afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002afe:	3304      	adds	r3, #4

08002b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b04:	d3f9      	bcc.n	8002afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b06:	4a0b      	ldr	r2, [pc, #44]	; (8002b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b08:	4c0b      	ldr	r4, [pc, #44]	; (8002b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b0c:	e001      	b.n	8002b12 <LoopFillZerobss>

08002b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b10:	3204      	adds	r2, #4

08002b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b14:	d3fb      	bcc.n	8002b0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b16:	f7ff ffd7 	bl	8002ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b1a:	f005 f847 	bl	8007bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b1e:	f7fe ff53 	bl	80019c8 <main>
  bx  lr    
 8002b22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b2c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002b30:	0800a3d8 	.word	0x0800a3d8
  ldr r2, =_sbss
 8002b34:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002b38:	2000079c 	.word	0x2000079c

08002b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b3c:	e7fe      	b.n	8002b3c <ADC_IRQHandler>
	...

08002b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b44:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <HAL_Init+0x40>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0d      	ldr	r2, [pc, #52]	; (8002b80 <HAL_Init+0x40>)
 8002b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_Init+0x40>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <HAL_Init+0x40>)
 8002b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_Init+0x40>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <HAL_Init+0x40>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b68:	2003      	movs	r0, #3
 8002b6a:	f000 fcd9 	bl	8003520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b6e:	200f      	movs	r0, #15
 8002b70:	f000 f808 	bl	8002b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b74:	f7ff fc94 	bl	80024a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40023c00 	.word	0x40023c00

08002b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_InitTick+0x54>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_InitTick+0x58>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4619      	mov	r1, r3
 8002b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fcf1 	bl	800358a <HAL_SYSTICK_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00e      	b.n	8002bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b0f      	cmp	r3, #15
 8002bb6:	d80a      	bhi.n	8002bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	f000 fcb9 	bl	8003536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc4:	4a06      	ldr	r2, [pc, #24]	; (8002be0 <HAL_InitTick+0x5c>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	20000008 	.word	0x20000008
 8002be0:	20000004 	.word	0x20000004

08002be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_IncTick+0x20>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_IncTick+0x24>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <HAL_IncTick+0x24>)
 8002bf6:	6013      	str	r3, [r2, #0]
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000008 	.word	0x20000008
 8002c08:	2000064c 	.word	0x2000064c

08002c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c10:	4b03      	ldr	r3, [pc, #12]	; (8002c20 <HAL_GetTick+0x14>)
 8002c12:	681b      	ldr	r3, [r3, #0]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	2000064c 	.word	0x2000064c

08002c24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e033      	b.n	8002ca2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fc54 	bl	80024f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d118      	bne.n	8002c94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c6a:	f023 0302 	bic.w	r3, r3, #2
 8002c6e:	f043 0202 	orr.w	r2, r3, #2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fa86 	bl	8003188 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
 8002c92:	e001      	b.n	8002c98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_ADC_Start+0x1a>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e097      	b.n	8002df6 <HAL_ADC_Start+0x14a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d018      	beq.n	8002d0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cec:	4b45      	ldr	r3, [pc, #276]	; (8002e04 <HAL_ADC_Start+0x158>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a45      	ldr	r2, [pc, #276]	; (8002e08 <HAL_ADC_Start+0x15c>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	0c9a      	lsrs	r2, r3, #18
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002d00:	e002      	b.n	8002d08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3b01      	subs	r3, #1
 8002d06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f9      	bne.n	8002d02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d15f      	bne.n	8002ddc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5a:	d106      	bne.n	8002d6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	f023 0206 	bic.w	r2, r3, #6
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	645a      	str	r2, [r3, #68]	; 0x44
 8002d68:	e002      	b.n	8002d70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d78:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_ADC_Start+0x160>)
 8002d7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 031f 	and.w	r3, r3, #31
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10f      	bne.n	8002db2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d129      	bne.n	8002df4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	e020      	b.n	8002df4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <HAL_ADC_Start+0x164>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d11b      	bne.n	8002df4 <HAL_ADC_Start+0x148>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d114      	bne.n	8002df4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dd8:	609a      	str	r2, [r3, #8]
 8002dda:	e00b      	b.n	8002df4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f043 0210 	orr.w	r2, r3, #16
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dec:	f043 0201 	orr.w	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000000 	.word	0x20000000
 8002e08:	431bde83 	.word	0x431bde83
 8002e0c:	40012300 	.word	0x40012300
 8002e10:	40012000 	.word	0x40012000

08002e14 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e30:	d113      	bne.n	8002e5a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e40:	d10b      	bne.n	8002e5a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f043 0220 	orr.w	r2, r3, #32
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e063      	b.n	8002f22 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002e5a:	f7ff fed7 	bl	8002c0c <HAL_GetTick>
 8002e5e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e60:	e021      	b.n	8002ea6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d01d      	beq.n	8002ea6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <HAL_ADC_PollForConversion+0x6c>
 8002e70:	f7ff fecc 	bl	8002c0c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d212      	bcs.n	8002ea6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f043 0204 	orr.w	r2, r3, #4
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e03d      	b.n	8002f22 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d1d6      	bne.n	8002e62 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0212 	mvn.w	r2, #18
 8002ebc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d123      	bne.n	8002f20 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d11f      	bne.n	8002f20 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d006      	beq.n	8002efc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d111      	bne.n	8002f20 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f043 0201 	orr.w	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x1c>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e105      	b.n	800316c <HAL_ADC_ConfigChannel+0x228>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b09      	cmp	r3, #9
 8002f6e:	d925      	bls.n	8002fbc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68d9      	ldr	r1, [r3, #12]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	3b1e      	subs	r3, #30
 8002f86:	2207      	movs	r2, #7
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	400a      	ands	r2, r1
 8002f94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68d9      	ldr	r1, [r3, #12]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	4603      	mov	r3, r0
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4403      	add	r3, r0
 8002fae:	3b1e      	subs	r3, #30
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	e022      	b.n	8003002 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6919      	ldr	r1, [r3, #16]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	2207      	movs	r2, #7
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	400a      	ands	r2, r1
 8002fde:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6919      	ldr	r1, [r3, #16]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4403      	add	r3, r0
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b06      	cmp	r3, #6
 8003008:	d824      	bhi.n	8003054 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	3b05      	subs	r3, #5
 800301c:	221f      	movs	r2, #31
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43da      	mvns	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	400a      	ands	r2, r1
 800302a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	4618      	mov	r0, r3
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	3b05      	subs	r3, #5
 8003046:	fa00 f203 	lsl.w	r2, r0, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	635a      	str	r2, [r3, #52]	; 0x34
 8003052:	e04c      	b.n	80030ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b0c      	cmp	r3, #12
 800305a:	d824      	bhi.n	80030a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	3b23      	subs	r3, #35	; 0x23
 800306e:	221f      	movs	r2, #31
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43da      	mvns	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	400a      	ands	r2, r1
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	4618      	mov	r0, r3
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	3b23      	subs	r3, #35	; 0x23
 8003098:	fa00 f203 	lsl.w	r2, r0, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
 80030a4:	e023      	b.n	80030ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	3b41      	subs	r3, #65	; 0x41
 80030b8:	221f      	movs	r2, #31
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	400a      	ands	r2, r1
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	4618      	mov	r0, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	3b41      	subs	r3, #65	; 0x41
 80030e2:	fa00 f203 	lsl.w	r2, r0, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030ee:	4b22      	ldr	r3, [pc, #136]	; (8003178 <HAL_ADC_ConfigChannel+0x234>)
 80030f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a21      	ldr	r2, [pc, #132]	; (800317c <HAL_ADC_ConfigChannel+0x238>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d109      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x1cc>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b12      	cmp	r3, #18
 8003102:	d105      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a19      	ldr	r2, [pc, #100]	; (800317c <HAL_ADC_ConfigChannel+0x238>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d123      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x21e>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b10      	cmp	r3, #16
 8003120:	d003      	beq.n	800312a <HAL_ADC_ConfigChannel+0x1e6>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b11      	cmp	r3, #17
 8003128:	d11b      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b10      	cmp	r3, #16
 800313c:	d111      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <HAL_ADC_ConfigChannel+0x23c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a10      	ldr	r2, [pc, #64]	; (8003184 <HAL_ADC_ConfigChannel+0x240>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	0c9a      	lsrs	r2, r3, #18
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003154:	e002      	b.n	800315c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	3b01      	subs	r3, #1
 800315a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f9      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	40012300 	.word	0x40012300
 800317c:	40012000 	.word	0x40012000
 8003180:	20000000 	.word	0x20000000
 8003184:	431bde83 	.word	0x431bde83

08003188 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003190:	4b79      	ldr	r3, [pc, #484]	; (8003378 <ADC_Init+0x1f0>)
 8003192:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	431a      	orrs	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	021a      	lsls	r2, r3, #8
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003202:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6899      	ldr	r1, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	4a58      	ldr	r2, [pc, #352]	; (800337c <ADC_Init+0x1f4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d022      	beq.n	8003266 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800322e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6899      	ldr	r1, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003250:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6899      	ldr	r1, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	e00f      	b.n	8003286 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003274:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003284:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0202 	bic.w	r2, r2, #2
 8003294:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6899      	ldr	r1, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	7e1b      	ldrb	r3, [r3, #24]
 80032a0:	005a      	lsls	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01b      	beq.n	80032ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6859      	ldr	r1, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	3b01      	subs	r3, #1
 80032e0:	035a      	lsls	r2, r3, #13
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	e007      	b.n	80032fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	3b01      	subs	r3, #1
 8003318:	051a      	lsls	r2, r3, #20
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003330:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6899      	ldr	r1, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800333e:	025a      	lsls	r2, r3, #9
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003356:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6899      	ldr	r1, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	029a      	lsls	r2, r3, #10
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	609a      	str	r2, [r3, #8]
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	40012300 	.word	0x40012300
 800337c:	0f000001 	.word	0x0f000001

08003380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800339c:	4013      	ands	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033b2:	4a04      	ldr	r2, [pc, #16]	; (80033c4 <__NVIC_SetPriorityGrouping+0x44>)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	60d3      	str	r3, [r2, #12]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033cc:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	0a1b      	lsrs	r3, r3, #8
 80033d2:	f003 0307 	and.w	r3, r3, #7
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	db0b      	blt.n	800340e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	f003 021f 	and.w	r2, r3, #31
 80033fc:	4907      	ldr	r1, [pc, #28]	; (800341c <__NVIC_EnableIRQ+0x38>)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	2001      	movs	r0, #1
 8003406:	fa00 f202 	lsl.w	r2, r0, r2
 800340a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	e000e100 	.word	0xe000e100

08003420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	6039      	str	r1, [r7, #0]
 800342a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003430:	2b00      	cmp	r3, #0
 8003432:	db0a      	blt.n	800344a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	b2da      	uxtb	r2, r3
 8003438:	490c      	ldr	r1, [pc, #48]	; (800346c <__NVIC_SetPriority+0x4c>)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	0112      	lsls	r2, r2, #4
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	440b      	add	r3, r1
 8003444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003448:	e00a      	b.n	8003460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4908      	ldr	r1, [pc, #32]	; (8003470 <__NVIC_SetPriority+0x50>)
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	3b04      	subs	r3, #4
 8003458:	0112      	lsls	r2, r2, #4
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	440b      	add	r3, r1
 800345e:	761a      	strb	r2, [r3, #24]
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	e000e100 	.word	0xe000e100
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	; 0x24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f1c3 0307 	rsb	r3, r3, #7
 800348e:	2b04      	cmp	r3, #4
 8003490:	bf28      	it	cs
 8003492:	2304      	movcs	r3, #4
 8003494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3304      	adds	r3, #4
 800349a:	2b06      	cmp	r3, #6
 800349c:	d902      	bls.n	80034a4 <NVIC_EncodePriority+0x30>
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3b03      	subs	r3, #3
 80034a2:	e000      	b.n	80034a6 <NVIC_EncodePriority+0x32>
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43da      	mvns	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	401a      	ands	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034bc:	f04f 31ff 	mov.w	r1, #4294967295
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	43d9      	mvns	r1, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034cc:	4313      	orrs	r3, r2
         );
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3724      	adds	r7, #36	; 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ec:	d301      	bcc.n	80034f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00f      	b.n	8003512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <SysTick_Config+0x40>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fa:	210f      	movs	r1, #15
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	f7ff ff8e 	bl	8003420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <SysTick_Config+0x40>)
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350a:	4b04      	ldr	r3, [pc, #16]	; (800351c <SysTick_Config+0x40>)
 800350c:	2207      	movs	r2, #7
 800350e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	e000e010 	.word	0xe000e010

08003520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7ff ff29 	bl	8003380 <__NVIC_SetPriorityGrouping>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003548:	f7ff ff3e 	bl	80033c8 <__NVIC_GetPriorityGrouping>
 800354c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	6978      	ldr	r0, [r7, #20]
 8003554:	f7ff ff8e 	bl	8003474 <NVIC_EncodePriority>
 8003558:	4602      	mov	r2, r0
 800355a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff5d 	bl	8003420 <__NVIC_SetPriority>
}
 8003566:	bf00      	nop
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff31 	bl	80033e4 <__NVIC_EnableIRQ>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ffa2 	bl	80034dc <SysTick_Config>
 8003598:	4603      	mov	r3, r0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035b0:	f7ff fb2c 	bl	8002c0c <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e099      	b.n	80036f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035e0:	e00f      	b.n	8003602 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035e2:	f7ff fb13 	bl	8002c0c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	d908      	bls.n	8003602 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2203      	movs	r2, #3
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e078      	b.n	80036f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e8      	bne.n	80035e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	4b38      	ldr	r3, [pc, #224]	; (80036fc <HAL_DMA_Init+0x158>)
 800361c:	4013      	ands	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800362e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800363a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	2b04      	cmp	r3, #4
 800365a:	d107      	bne.n	800366c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	4313      	orrs	r3, r2
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f023 0307 	bic.w	r3, r3, #7
 8003682:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	2b04      	cmp	r3, #4
 8003694:	d117      	bne.n	80036c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00e      	beq.n	80036c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fa7b 	bl	8003ba4 <DMA_CheckFifoParam>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2240      	movs	r2, #64	; 0x40
 80036b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036c2:	2301      	movs	r3, #1
 80036c4:	e016      	b.n	80036f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fa32 	bl	8003b38 <DMA_CalcBaseAndBitshift>
 80036d4:	4603      	mov	r3, r0
 80036d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	223f      	movs	r2, #63	; 0x3f
 80036de:	409a      	lsls	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	f010803f 	.word	0xf010803f

08003700 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800370e:	f7ff fa7d 	bl	8002c0c <HAL_GetTick>
 8003712:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d008      	beq.n	8003732 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2280      	movs	r2, #128	; 0x80
 8003724:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e052      	b.n	80037d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0216 	bic.w	r2, r2, #22
 8003740:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003750:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d103      	bne.n	8003762 <HAL_DMA_Abort+0x62>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0208 	bic.w	r2, r2, #8
 8003770:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0201 	bic.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003782:	e013      	b.n	80037ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003784:	f7ff fa42 	bl	8002c0c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b05      	cmp	r3, #5
 8003790:	d90c      	bls.n	80037ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2203      	movs	r2, #3
 800379c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e015      	b.n	80037d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e4      	bne.n	8003784 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	223f      	movs	r2, #63	; 0x3f
 80037c0:	409a      	lsls	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d004      	beq.n	80037fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2280      	movs	r2, #128	; 0x80
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e00c      	b.n	8003818 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2205      	movs	r2, #5
 8003802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0201 	bic.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003830:	4b8e      	ldr	r3, [pc, #568]	; (8003a6c <HAL_DMA_IRQHandler+0x248>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a8e      	ldr	r2, [pc, #568]	; (8003a70 <HAL_DMA_IRQHandler+0x24c>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	0a9b      	lsrs	r3, r3, #10
 800383c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003842:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384e:	2208      	movs	r2, #8
 8003850:	409a      	lsls	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d01a      	beq.n	8003890 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d013      	beq.n	8003890 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0204 	bic.w	r2, r2, #4
 8003876:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	2208      	movs	r2, #8
 800387e:	409a      	lsls	r2, r3
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	f043 0201 	orr.w	r2, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003894:	2201      	movs	r2, #1
 8003896:	409a      	lsls	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d012      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	2201      	movs	r2, #1
 80038b4:	409a      	lsls	r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038be:	f043 0202 	orr.w	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ca:	2204      	movs	r2, #4
 80038cc:	409a      	lsls	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d012      	beq.n	80038fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00b      	beq.n	80038fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e8:	2204      	movs	r2, #4
 80038ea:	409a      	lsls	r2, r3
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f4:	f043 0204 	orr.w	r2, r3, #4
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003900:	2210      	movs	r2, #16
 8003902:	409a      	lsls	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d043      	beq.n	8003994 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d03c      	beq.n	8003994 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391e:	2210      	movs	r2, #16
 8003920:	409a      	lsls	r2, r3
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d018      	beq.n	8003966 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d108      	bne.n	8003954 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	d024      	beq.n	8003994 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	4798      	blx	r3
 8003952:	e01f      	b.n	8003994 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01b      	beq.n	8003994 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	4798      	blx	r3
 8003964:	e016      	b.n	8003994 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d107      	bne.n	8003984 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0208 	bic.w	r2, r2, #8
 8003982:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	2220      	movs	r2, #32
 800399a:	409a      	lsls	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 808f 	beq.w	8003ac4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8087 	beq.w	8003ac4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ba:	2220      	movs	r2, #32
 80039bc:	409a      	lsls	r2, r3
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b05      	cmp	r3, #5
 80039cc:	d136      	bne.n	8003a3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0216 	bic.w	r2, r2, #22
 80039dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d103      	bne.n	80039fe <HAL_DMA_IRQHandler+0x1da>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0208 	bic.w	r2, r2, #8
 8003a0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	223f      	movs	r2, #63	; 0x3f
 8003a14:	409a      	lsls	r2, r3
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d07e      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
        }
        return;
 8003a3a:	e079      	b.n	8003b30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d01d      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10d      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d031      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
 8003a68:	e02c      	b.n	8003ac4 <HAL_DMA_IRQHandler+0x2a0>
 8003a6a:	bf00      	nop
 8003a6c:	20000000 	.word	0x20000000
 8003a70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d023      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	4798      	blx	r3
 8003a84:	e01e      	b.n	8003ac4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10f      	bne.n	8003ab4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0210 	bic.w	r2, r2, #16
 8003aa2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d032      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d022      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2205      	movs	r2, #5
 8003adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	3301      	adds	r3, #1
 8003af4:	60bb      	str	r3, [r7, #8]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d307      	bcc.n	8003b0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f2      	bne.n	8003af0 <HAL_DMA_IRQHandler+0x2cc>
 8003b0a:	e000      	b.n	8003b0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	4798      	blx	r3
 8003b2e:	e000      	b.n	8003b32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b30:	bf00      	nop
    }
  }
}
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	3b10      	subs	r3, #16
 8003b48:	4a14      	ldr	r2, [pc, #80]	; (8003b9c <DMA_CalcBaseAndBitshift+0x64>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b52:	4a13      	ldr	r2, [pc, #76]	; (8003ba0 <DMA_CalcBaseAndBitshift+0x68>)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d909      	bls.n	8003b7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	1d1a      	adds	r2, r3, #4
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	659a      	str	r2, [r3, #88]	; 0x58
 8003b78:	e007      	b.n	8003b8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b82:	f023 0303 	bic.w	r3, r3, #3
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	aaaaaaab 	.word	0xaaaaaaab
 8003ba0:	08009f4c 	.word	0x08009f4c

08003ba4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d11f      	bne.n	8003bfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d856      	bhi.n	8003c72 <DMA_CheckFifoParam+0xce>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <DMA_CheckFifoParam+0x28>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003bdd 	.word	0x08003bdd
 8003bd0:	08003bef 	.word	0x08003bef
 8003bd4:	08003bdd 	.word	0x08003bdd
 8003bd8:	08003c73 	.word	0x08003c73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d046      	beq.n	8003c76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bec:	e043      	b.n	8003c76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bf6:	d140      	bne.n	8003c7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bfc:	e03d      	b.n	8003c7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c06:	d121      	bne.n	8003c4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d837      	bhi.n	8003c7e <DMA_CheckFifoParam+0xda>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <DMA_CheckFifoParam+0x70>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c25 	.word	0x08003c25
 8003c18:	08003c2b 	.word	0x08003c2b
 8003c1c:	08003c25 	.word	0x08003c25
 8003c20:	08003c3d 	.word	0x08003c3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	73fb      	strb	r3, [r7, #15]
      break;
 8003c28:	e030      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d025      	beq.n	8003c82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c3a:	e022      	b.n	8003c82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c44:	d11f      	bne.n	8003c86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c4a:	e01c      	b.n	8003c86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d903      	bls.n	8003c5a <DMA_CheckFifoParam+0xb6>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d003      	beq.n	8003c60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c58:	e018      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c5e:	e015      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00e      	beq.n	8003c8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c70:	e00b      	b.n	8003c8a <DMA_CheckFifoParam+0xe6>
      break;
 8003c72:	bf00      	nop
 8003c74:	e00a      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
      break;
 8003c76:	bf00      	nop
 8003c78:	e008      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
      break;
 8003c7a:	bf00      	nop
 8003c7c:	e006      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e004      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
      break;
 8003c82:	bf00      	nop
 8003c84:	e002      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
      break;   
 8003c86:	bf00      	nop
 8003c88:	e000      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
      break;
 8003c8a:	bf00      	nop
    }
  } 
  
  return status; 
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop

08003c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b089      	sub	sp, #36	; 0x24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	e159      	b.n	8003f6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cb8:	2201      	movs	r2, #1
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	f040 8148 	bne.w	8003f66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d005      	beq.n	8003cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d130      	bne.n	8003d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d24:	2201      	movs	r2, #1
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 0201 	and.w	r2, r3, #1
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d017      	beq.n	8003d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	2203      	movs	r2, #3
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d123      	bne.n	8003de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	08da      	lsrs	r2, r3, #3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3208      	adds	r2, #8
 8003da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	220f      	movs	r2, #15
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	08da      	lsrs	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3208      	adds	r2, #8
 8003dda:	69b9      	ldr	r1, [r7, #24]
 8003ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	2203      	movs	r2, #3
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 0203 	and.w	r2, r3, #3
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80a2 	beq.w	8003f66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	4b57      	ldr	r3, [pc, #348]	; (8003f84 <HAL_GPIO_Init+0x2e8>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	4a56      	ldr	r2, [pc, #344]	; (8003f84 <HAL_GPIO_Init+0x2e8>)
 8003e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e30:	6453      	str	r3, [r2, #68]	; 0x44
 8003e32:	4b54      	ldr	r3, [pc, #336]	; (8003f84 <HAL_GPIO_Init+0x2e8>)
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e3e:	4a52      	ldr	r2, [pc, #328]	; (8003f88 <HAL_GPIO_Init+0x2ec>)
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	3302      	adds	r3, #2
 8003e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	220f      	movs	r2, #15
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a49      	ldr	r2, [pc, #292]	; (8003f8c <HAL_GPIO_Init+0x2f0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d019      	beq.n	8003e9e <HAL_GPIO_Init+0x202>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a48      	ldr	r2, [pc, #288]	; (8003f90 <HAL_GPIO_Init+0x2f4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <HAL_GPIO_Init+0x1fe>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a47      	ldr	r2, [pc, #284]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00d      	beq.n	8003e96 <HAL_GPIO_Init+0x1fa>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a46      	ldr	r2, [pc, #280]	; (8003f98 <HAL_GPIO_Init+0x2fc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <HAL_GPIO_Init+0x1f6>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a45      	ldr	r2, [pc, #276]	; (8003f9c <HAL_GPIO_Init+0x300>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_GPIO_Init+0x1f2>
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	e008      	b.n	8003ea0 <HAL_GPIO_Init+0x204>
 8003e8e:	2307      	movs	r3, #7
 8003e90:	e006      	b.n	8003ea0 <HAL_GPIO_Init+0x204>
 8003e92:	2303      	movs	r3, #3
 8003e94:	e004      	b.n	8003ea0 <HAL_GPIO_Init+0x204>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e002      	b.n	8003ea0 <HAL_GPIO_Init+0x204>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <HAL_GPIO_Init+0x204>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	f002 0203 	and.w	r2, r2, #3
 8003ea6:	0092      	lsls	r2, r2, #2
 8003ea8:	4093      	lsls	r3, r2
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003eb0:	4935      	ldr	r1, [pc, #212]	; (8003f88 <HAL_GPIO_Init+0x2ec>)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	089b      	lsrs	r3, r3, #2
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ebe:	4b38      	ldr	r3, [pc, #224]	; (8003fa0 <HAL_GPIO_Init+0x304>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ee2:	4a2f      	ldr	r2, [pc, #188]	; (8003fa0 <HAL_GPIO_Init+0x304>)
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ee8:	4b2d      	ldr	r3, [pc, #180]	; (8003fa0 <HAL_GPIO_Init+0x304>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f0c:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <HAL_GPIO_Init+0x304>)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f12:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <HAL_GPIO_Init+0x304>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f36:	4a1a      	ldr	r2, [pc, #104]	; (8003fa0 <HAL_GPIO_Init+0x304>)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f3c:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <HAL_GPIO_Init+0x304>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f60:	4a0f      	ldr	r2, [pc, #60]	; (8003fa0 <HAL_GPIO_Init+0x304>)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	61fb      	str	r3, [r7, #28]
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	2b0f      	cmp	r3, #15
 8003f70:	f67f aea2 	bls.w	8003cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	3724      	adds	r7, #36	; 0x24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40013800 	.word	0x40013800
 8003f8c:	40020000 	.word	0x40020000
 8003f90:	40020400 	.word	0x40020400
 8003f94:	40020800 	.word	0x40020800
 8003f98:	40020c00 	.word	0x40020c00
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40013c00 	.word	0x40013c00

08003fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	807b      	strh	r3, [r7, #2]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fb4:	787b      	ldrb	r3, [r7, #1]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fc0:	e003      	b.n	8003fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fc2:	887b      	ldrh	r3, [r7, #2]
 8003fc4:	041a      	lsls	r2, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	619a      	str	r2, [r3, #24]
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e267      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d075      	beq.n	80040e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ff6:	4b88      	ldr	r3, [pc, #544]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d00c      	beq.n	800401c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004002:	4b85      	ldr	r3, [pc, #532]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800400a:	2b08      	cmp	r3, #8
 800400c:	d112      	bne.n	8004034 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800400e:	4b82      	ldr	r3, [pc, #520]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800401a:	d10b      	bne.n	8004034 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401c:	4b7e      	ldr	r3, [pc, #504]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d05b      	beq.n	80040e0 <HAL_RCC_OscConfig+0x108>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d157      	bne.n	80040e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e242      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403c:	d106      	bne.n	800404c <HAL_RCC_OscConfig+0x74>
 800403e:	4b76      	ldr	r3, [pc, #472]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a75      	ldr	r2, [pc, #468]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e01d      	b.n	8004088 <HAL_RCC_OscConfig+0xb0>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004054:	d10c      	bne.n	8004070 <HAL_RCC_OscConfig+0x98>
 8004056:	4b70      	ldr	r3, [pc, #448]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a6f      	ldr	r2, [pc, #444]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 800405c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	4b6d      	ldr	r3, [pc, #436]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a6c      	ldr	r2, [pc, #432]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 8004068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	e00b      	b.n	8004088 <HAL_RCC_OscConfig+0xb0>
 8004070:	4b69      	ldr	r3, [pc, #420]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a68      	ldr	r2, [pc, #416]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 8004076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	4b66      	ldr	r3, [pc, #408]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a65      	ldr	r2, [pc, #404]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 8004082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d013      	beq.n	80040b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004090:	f7fe fdbc 	bl	8002c0c <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004098:	f7fe fdb8 	bl	8002c0c <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e207      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	4b5b      	ldr	r3, [pc, #364]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0xc0>
 80040b6:	e014      	b.n	80040e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fe fda8 	bl	8002c0c <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c0:	f7fe fda4 	bl	8002c0c <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e1f3      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d2:	4b51      	ldr	r3, [pc, #324]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0xe8>
 80040de:	e000      	b.n	80040e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d063      	beq.n	80041b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040ee:	4b4a      	ldr	r3, [pc, #296]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00b      	beq.n	8004112 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040fa:	4b47      	ldr	r3, [pc, #284]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004102:	2b08      	cmp	r3, #8
 8004104:	d11c      	bne.n	8004140 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004106:	4b44      	ldr	r3, [pc, #272]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d116      	bne.n	8004140 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004112:	4b41      	ldr	r3, [pc, #260]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <HAL_RCC_OscConfig+0x152>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d001      	beq.n	800412a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e1c7      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412a:	4b3b      	ldr	r3, [pc, #236]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4937      	ldr	r1, [pc, #220]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 800413a:	4313      	orrs	r3, r2
 800413c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413e:	e03a      	b.n	80041b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d020      	beq.n	800418a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004148:	4b34      	ldr	r3, [pc, #208]	; (800421c <HAL_RCC_OscConfig+0x244>)
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414e:	f7fe fd5d 	bl	8002c0c <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004156:	f7fe fd59 	bl	8002c0c <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e1a8      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004168:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004174:	4b28      	ldr	r3, [pc, #160]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4925      	ldr	r1, [pc, #148]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 8004184:	4313      	orrs	r3, r2
 8004186:	600b      	str	r3, [r1, #0]
 8004188:	e015      	b.n	80041b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800418a:	4b24      	ldr	r3, [pc, #144]	; (800421c <HAL_RCC_OscConfig+0x244>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fe fd3c 	bl	8002c0c <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004198:	f7fe fd38 	bl	8002c0c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e187      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041aa:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d036      	beq.n	8004230 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d016      	beq.n	80041f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <HAL_RCC_OscConfig+0x248>)
 80041cc:	2201      	movs	r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fe fd1c 	bl	8002c0c <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d8:	f7fe fd18 	bl	8002c0c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e167      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ea:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCC_OscConfig+0x240>)
 80041ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0x200>
 80041f6:	e01b      	b.n	8004230 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f8:	4b09      	ldr	r3, [pc, #36]	; (8004220 <HAL_RCC_OscConfig+0x248>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fe:	f7fe fd05 	bl	8002c0c <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004204:	e00e      	b.n	8004224 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004206:	f7fe fd01 	bl	8002c0c <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d907      	bls.n	8004224 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e150      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
 8004218:	40023800 	.word	0x40023800
 800421c:	42470000 	.word	0x42470000
 8004220:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004224:	4b88      	ldr	r3, [pc, #544]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 8004226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1ea      	bne.n	8004206 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8097 	beq.w	800436c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423e:	2300      	movs	r3, #0
 8004240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004242:	4b81      	ldr	r3, [pc, #516]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10f      	bne.n	800426e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	4b7d      	ldr	r3, [pc, #500]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	4a7c      	ldr	r2, [pc, #496]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 8004258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425c:	6413      	str	r3, [r2, #64]	; 0x40
 800425e:	4b7a      	ldr	r3, [pc, #488]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426e:	4b77      	ldr	r3, [pc, #476]	; (800444c <HAL_RCC_OscConfig+0x474>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d118      	bne.n	80042ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800427a:	4b74      	ldr	r3, [pc, #464]	; (800444c <HAL_RCC_OscConfig+0x474>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a73      	ldr	r2, [pc, #460]	; (800444c <HAL_RCC_OscConfig+0x474>)
 8004280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004286:	f7fe fcc1 	bl	8002c0c <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428e:	f7fe fcbd 	bl	8002c0c <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e10c      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a0:	4b6a      	ldr	r3, [pc, #424]	; (800444c <HAL_RCC_OscConfig+0x474>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f0      	beq.n	800428e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d106      	bne.n	80042c2 <HAL_RCC_OscConfig+0x2ea>
 80042b4:	4b64      	ldr	r3, [pc, #400]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	4a63      	ldr	r2, [pc, #396]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	6713      	str	r3, [r2, #112]	; 0x70
 80042c0:	e01c      	b.n	80042fc <HAL_RCC_OscConfig+0x324>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b05      	cmp	r3, #5
 80042c8:	d10c      	bne.n	80042e4 <HAL_RCC_OscConfig+0x30c>
 80042ca:	4b5f      	ldr	r3, [pc, #380]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	4a5e      	ldr	r2, [pc, #376]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 80042d0:	f043 0304 	orr.w	r3, r3, #4
 80042d4:	6713      	str	r3, [r2, #112]	; 0x70
 80042d6:	4b5c      	ldr	r3, [pc, #368]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	4a5b      	ldr	r2, [pc, #364]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	6713      	str	r3, [r2, #112]	; 0x70
 80042e2:	e00b      	b.n	80042fc <HAL_RCC_OscConfig+0x324>
 80042e4:	4b58      	ldr	r3, [pc, #352]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e8:	4a57      	ldr	r2, [pc, #348]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 80042ea:	f023 0301 	bic.w	r3, r3, #1
 80042ee:	6713      	str	r3, [r2, #112]	; 0x70
 80042f0:	4b55      	ldr	r3, [pc, #340]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	4a54      	ldr	r2, [pc, #336]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 80042f6:	f023 0304 	bic.w	r3, r3, #4
 80042fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d015      	beq.n	8004330 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004304:	f7fe fc82 	bl	8002c0c <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430a:	e00a      	b.n	8004322 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800430c:	f7fe fc7e 	bl	8002c0c <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	; 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e0cb      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004322:	4b49      	ldr	r3, [pc, #292]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0ee      	beq.n	800430c <HAL_RCC_OscConfig+0x334>
 800432e:	e014      	b.n	800435a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004330:	f7fe fc6c 	bl	8002c0c <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004336:	e00a      	b.n	800434e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004338:	f7fe fc68 	bl	8002c0c <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	; 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e0b5      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434e:	4b3e      	ldr	r3, [pc, #248]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1ee      	bne.n	8004338 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800435a:	7dfb      	ldrb	r3, [r7, #23]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d105      	bne.n	800436c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004360:	4b39      	ldr	r3, [pc, #228]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	4a38      	ldr	r2, [pc, #224]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 8004366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80a1 	beq.w	80044b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004376:	4b34      	ldr	r3, [pc, #208]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b08      	cmp	r3, #8
 8004380:	d05c      	beq.n	800443c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d141      	bne.n	800440e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438a:	4b31      	ldr	r3, [pc, #196]	; (8004450 <HAL_RCC_OscConfig+0x478>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fe fc3c 	bl	8002c0c <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004398:	f7fe fc38 	bl	8002c0c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e087      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043aa:	4b27      	ldr	r3, [pc, #156]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69da      	ldr	r2, [r3, #28]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	019b      	lsls	r3, r3, #6
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043cc:	085b      	lsrs	r3, r3, #1
 80043ce:	3b01      	subs	r3, #1
 80043d0:	041b      	lsls	r3, r3, #16
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	061b      	lsls	r3, r3, #24
 80043da:	491b      	ldr	r1, [pc, #108]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043e0:	4b1b      	ldr	r3, [pc, #108]	; (8004450 <HAL_RCC_OscConfig+0x478>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e6:	f7fe fc11 	bl	8002c0c <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ee:	f7fe fc0d 	bl	8002c0c <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e05c      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004400:	4b11      	ldr	r3, [pc, #68]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <HAL_RCC_OscConfig+0x416>
 800440c:	e054      	b.n	80044b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440e:	4b10      	ldr	r3, [pc, #64]	; (8004450 <HAL_RCC_OscConfig+0x478>)
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7fe fbfa 	bl	8002c0c <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800441c:	f7fe fbf6 	bl	8002c0c <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e045      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	4b06      	ldr	r3, [pc, #24]	; (8004448 <HAL_RCC_OscConfig+0x470>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x444>
 800443a:	e03d      	b.n	80044b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d107      	bne.n	8004454 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e038      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
 8004448:	40023800 	.word	0x40023800
 800444c:	40007000 	.word	0x40007000
 8004450:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004454:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <HAL_RCC_OscConfig+0x4ec>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d028      	beq.n	80044b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800446c:	429a      	cmp	r2, r3
 800446e:	d121      	bne.n	80044b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447a:	429a      	cmp	r2, r3
 800447c:	d11a      	bne.n	80044b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004484:	4013      	ands	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800448a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800448c:	4293      	cmp	r3, r2
 800448e:	d111      	bne.n	80044b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	3b01      	subs	r3, #1
 800449e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d107      	bne.n	80044b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40023800 	.word	0x40023800

080044c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0cc      	b.n	8004676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044dc:	4b68      	ldr	r3, [pc, #416]	; (8004680 <HAL_RCC_ClockConfig+0x1b8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d90c      	bls.n	8004504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ea:	4b65      	ldr	r3, [pc, #404]	; (8004680 <HAL_RCC_ClockConfig+0x1b8>)
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f2:	4b63      	ldr	r3, [pc, #396]	; (8004680 <HAL_RCC_ClockConfig+0x1b8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d001      	beq.n	8004504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0b8      	b.n	8004676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d020      	beq.n	8004552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800451c:	4b59      	ldr	r3, [pc, #356]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4a58      	ldr	r2, [pc, #352]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004534:	4b53      	ldr	r3, [pc, #332]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	4a52      	ldr	r2, [pc, #328]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800453e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004540:	4b50      	ldr	r3, [pc, #320]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	494d      	ldr	r1, [pc, #308]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d044      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d107      	bne.n	8004576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004566:	4b47      	ldr	r3, [pc, #284]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d119      	bne.n	80045a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e07f      	b.n	8004676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d003      	beq.n	8004586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004582:	2b03      	cmp	r3, #3
 8004584:	d107      	bne.n	8004596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004586:	4b3f      	ldr	r3, [pc, #252]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e06f      	b.n	8004676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004596:	4b3b      	ldr	r3, [pc, #236]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e067      	b.n	8004676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045a6:	4b37      	ldr	r3, [pc, #220]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f023 0203 	bic.w	r2, r3, #3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	4934      	ldr	r1, [pc, #208]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045b8:	f7fe fb28 	bl	8002c0c <HAL_GetTick>
 80045bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045be:	e00a      	b.n	80045d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c0:	f7fe fb24 	bl	8002c0c <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e04f      	b.n	8004676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d6:	4b2b      	ldr	r3, [pc, #172]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 020c 	and.w	r2, r3, #12
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d1eb      	bne.n	80045c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045e8:	4b25      	ldr	r3, [pc, #148]	; (8004680 <HAL_RCC_ClockConfig+0x1b8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d20c      	bcs.n	8004610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f6:	4b22      	ldr	r3, [pc, #136]	; (8004680 <HAL_RCC_ClockConfig+0x1b8>)
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	4b20      	ldr	r3, [pc, #128]	; (8004680 <HAL_RCC_ClockConfig+0x1b8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e032      	b.n	8004676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d008      	beq.n	800462e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800461c:	4b19      	ldr	r3, [pc, #100]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4916      	ldr	r1, [pc, #88]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	4313      	orrs	r3, r2
 800462c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d009      	beq.n	800464e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800463a:	4b12      	ldr	r3, [pc, #72]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	490e      	ldr	r1, [pc, #56]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800464e:	f000 f821 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 8004652:	4602      	mov	r2, r0
 8004654:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	091b      	lsrs	r3, r3, #4
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	490a      	ldr	r1, [pc, #40]	; (8004688 <HAL_RCC_ClockConfig+0x1c0>)
 8004660:	5ccb      	ldrb	r3, [r1, r3]
 8004662:	fa22 f303 	lsr.w	r3, r2, r3
 8004666:	4a09      	ldr	r2, [pc, #36]	; (800468c <HAL_RCC_ClockConfig+0x1c4>)
 8004668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800466a:	4b09      	ldr	r3, [pc, #36]	; (8004690 <HAL_RCC_ClockConfig+0x1c8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe fa88 	bl	8002b84 <HAL_InitTick>

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40023c00 	.word	0x40023c00
 8004684:	40023800 	.word	0x40023800
 8004688:	08009f34 	.word	0x08009f34
 800468c:	20000000 	.word	0x20000000
 8004690:	20000004 	.word	0x20000004

08004694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004698:	b090      	sub	sp, #64	; 0x40
 800469a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	637b      	str	r3, [r7, #52]	; 0x34
 80046a0:	2300      	movs	r3, #0
 80046a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046a4:	2300      	movs	r3, #0
 80046a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ac:	4b59      	ldr	r3, [pc, #356]	; (8004814 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 030c 	and.w	r3, r3, #12
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d00d      	beq.n	80046d4 <HAL_RCC_GetSysClockFreq+0x40>
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	f200 80a1 	bhi.w	8004800 <HAL_RCC_GetSysClockFreq+0x16c>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x34>
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d003      	beq.n	80046ce <HAL_RCC_GetSysClockFreq+0x3a>
 80046c6:	e09b      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046c8:	4b53      	ldr	r3, [pc, #332]	; (8004818 <HAL_RCC_GetSysClockFreq+0x184>)
 80046ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80046cc:	e09b      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ce:	4b53      	ldr	r3, [pc, #332]	; (800481c <HAL_RCC_GetSysClockFreq+0x188>)
 80046d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046d2:	e098      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046d4:	4b4f      	ldr	r3, [pc, #316]	; (8004814 <HAL_RCC_GetSysClockFreq+0x180>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046de:	4b4d      	ldr	r3, [pc, #308]	; (8004814 <HAL_RCC_GetSysClockFreq+0x180>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d028      	beq.n	800473c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ea:	4b4a      	ldr	r3, [pc, #296]	; (8004814 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	099b      	lsrs	r3, r3, #6
 80046f0:	2200      	movs	r2, #0
 80046f2:	623b      	str	r3, [r7, #32]
 80046f4:	627a      	str	r2, [r7, #36]	; 0x24
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046fc:	2100      	movs	r1, #0
 80046fe:	4b47      	ldr	r3, [pc, #284]	; (800481c <HAL_RCC_GetSysClockFreq+0x188>)
 8004700:	fb03 f201 	mul.w	r2, r3, r1
 8004704:	2300      	movs	r3, #0
 8004706:	fb00 f303 	mul.w	r3, r0, r3
 800470a:	4413      	add	r3, r2
 800470c:	4a43      	ldr	r2, [pc, #268]	; (800481c <HAL_RCC_GetSysClockFreq+0x188>)
 800470e:	fba0 1202 	umull	r1, r2, r0, r2
 8004712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004714:	460a      	mov	r2, r1
 8004716:	62ba      	str	r2, [r7, #40]	; 0x28
 8004718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800471a:	4413      	add	r3, r2
 800471c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800471e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004720:	2200      	movs	r2, #0
 8004722:	61bb      	str	r3, [r7, #24]
 8004724:	61fa      	str	r2, [r7, #28]
 8004726:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800472a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800472e:	f7fc fa83 	bl	8000c38 <__aeabi_uldivmod>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4613      	mov	r3, r2
 8004738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800473a:	e053      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800473c:	4b35      	ldr	r3, [pc, #212]	; (8004814 <HAL_RCC_GetSysClockFreq+0x180>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	099b      	lsrs	r3, r3, #6
 8004742:	2200      	movs	r2, #0
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	617a      	str	r2, [r7, #20]
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800474e:	f04f 0b00 	mov.w	fp, #0
 8004752:	4652      	mov	r2, sl
 8004754:	465b      	mov	r3, fp
 8004756:	f04f 0000 	mov.w	r0, #0
 800475a:	f04f 0100 	mov.w	r1, #0
 800475e:	0159      	lsls	r1, r3, #5
 8004760:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004764:	0150      	lsls	r0, r2, #5
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	ebb2 080a 	subs.w	r8, r2, sl
 800476e:	eb63 090b 	sbc.w	r9, r3, fp
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800477e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004782:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004786:	ebb2 0408 	subs.w	r4, r2, r8
 800478a:	eb63 0509 	sbc.w	r5, r3, r9
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	00eb      	lsls	r3, r5, #3
 8004798:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800479c:	00e2      	lsls	r2, r4, #3
 800479e:	4614      	mov	r4, r2
 80047a0:	461d      	mov	r5, r3
 80047a2:	eb14 030a 	adds.w	r3, r4, sl
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	eb45 030b 	adc.w	r3, r5, fp
 80047ac:	607b      	str	r3, [r7, #4]
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047ba:	4629      	mov	r1, r5
 80047bc:	028b      	lsls	r3, r1, #10
 80047be:	4621      	mov	r1, r4
 80047c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047c4:	4621      	mov	r1, r4
 80047c6:	028a      	lsls	r2, r1, #10
 80047c8:	4610      	mov	r0, r2
 80047ca:	4619      	mov	r1, r3
 80047cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ce:	2200      	movs	r2, #0
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	60fa      	str	r2, [r7, #12]
 80047d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047d8:	f7fc fa2e 	bl	8000c38 <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4613      	mov	r3, r2
 80047e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <HAL_RCC_GetSysClockFreq+0x180>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	0c1b      	lsrs	r3, r3, #16
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	3301      	adds	r3, #1
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80047f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047fe:	e002      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCC_GetSysClockFreq+0x184>)
 8004802:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004808:	4618      	mov	r0, r3
 800480a:	3740      	adds	r7, #64	; 0x40
 800480c:	46bd      	mov	sp, r7
 800480e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004812:	bf00      	nop
 8004814:	40023800 	.word	0x40023800
 8004818:	00f42400 	.word	0x00f42400
 800481c:	017d7840 	.word	0x017d7840

08004820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004824:	4b03      	ldr	r3, [pc, #12]	; (8004834 <HAL_RCC_GetHCLKFreq+0x14>)
 8004826:	681b      	ldr	r3, [r3, #0]
}
 8004828:	4618      	mov	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000000 	.word	0x20000000

08004838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800483c:	f7ff fff0 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8004840:	4602      	mov	r2, r0
 8004842:	4b05      	ldr	r3, [pc, #20]	; (8004858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	0a9b      	lsrs	r3, r3, #10
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	4903      	ldr	r1, [pc, #12]	; (800485c <HAL_RCC_GetPCLK1Freq+0x24>)
 800484e:	5ccb      	ldrb	r3, [r1, r3]
 8004850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004854:	4618      	mov	r0, r3
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40023800 	.word	0x40023800
 800485c:	08009f44 	.word	0x08009f44

08004860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004864:	f7ff ffdc 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8004868:	4602      	mov	r2, r0
 800486a:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	0b5b      	lsrs	r3, r3, #13
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	4903      	ldr	r1, [pc, #12]	; (8004884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004876:	5ccb      	ldrb	r3, [r1, r3]
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40023800 	.word	0x40023800
 8004884:	08009f44 	.word	0x08009f44

08004888 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e07b      	b.n	8004992 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d108      	bne.n	80048b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048aa:	d009      	beq.n	80048c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	61da      	str	r2, [r3, #28]
 80048b2:	e005      	b.n	80048c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fd fe80 	bl	80025e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004944:	ea42 0103 	orr.w	r1, r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	0c1b      	lsrs	r3, r3, #16
 800495e:	f003 0104 	and.w	r1, r3, #4
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	f003 0210 	and.w	r2, r3, #16
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69da      	ldr	r2, [r3, #28]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004980:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e041      	b.n	8004a30 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d106      	bne.n	80049c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7fd fe55 	bl	8002670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3304      	adds	r3, #4
 80049d6:	4619      	mov	r1, r3
 80049d8:	4610      	mov	r0, r2
 80049da:	f000 fc8b 	bl	80052f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d001      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e044      	b.n	8004ada <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a1e      	ldr	r2, [pc, #120]	; (8004ae8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d018      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x6c>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7a:	d013      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x6c>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1a      	ldr	r2, [pc, #104]	; (8004aec <HAL_TIM_Base_Start_IT+0xb4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00e      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x6c>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a19      	ldr	r2, [pc, #100]	; (8004af0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d009      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x6c>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a17      	ldr	r2, [pc, #92]	; (8004af4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x6c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a16      	ldr	r2, [pc, #88]	; (8004af8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d111      	bne.n	8004ac8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b06      	cmp	r3, #6
 8004ab4:	d010      	beq.n	8004ad8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0201 	orr.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac6:	e007      	b.n	8004ad8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40010000 	.word	0x40010000
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40000800 	.word	0x40000800
 8004af4:	40000c00 	.word	0x40000c00
 8004af8:	40014000 	.word	0x40014000

08004afc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6a1a      	ldr	r2, [r3, #32]
 8004b1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10f      	bne.n	8004b44 <HAL_TIM_Base_Stop_IT+0x48>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6a1a      	ldr	r2, [r3, #32]
 8004b2a:	f240 4344 	movw	r3, #1092	; 0x444
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d107      	bne.n	8004b44 <HAL_TIM_Base_Stop_IT+0x48>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0201 	bic.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e041      	b.n	8004bf0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f839 	bl	8004bf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3304      	adds	r3, #4
 8004b96:	4619      	mov	r1, r3
 8004b98:	4610      	mov	r0, r2
 8004b9a:	f000 fbab 	bl	80052f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d109      	bne.n	8004c30 <HAL_TIM_PWM_Start+0x24>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	bf14      	ite	ne
 8004c28:	2301      	movne	r3, #1
 8004c2a:	2300      	moveq	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	e022      	b.n	8004c76 <HAL_TIM_PWM_Start+0x6a>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d109      	bne.n	8004c4a <HAL_TIM_PWM_Start+0x3e>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	bf14      	ite	ne
 8004c42:	2301      	movne	r3, #1
 8004c44:	2300      	moveq	r3, #0
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	e015      	b.n	8004c76 <HAL_TIM_PWM_Start+0x6a>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d109      	bne.n	8004c64 <HAL_TIM_PWM_Start+0x58>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	bf14      	ite	ne
 8004c5c:	2301      	movne	r3, #1
 8004c5e:	2300      	moveq	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e008      	b.n	8004c76 <HAL_TIM_PWM_Start+0x6a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	bf14      	ite	ne
 8004c70:	2301      	movne	r3, #1
 8004c72:	2300      	moveq	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e068      	b.n	8004d50 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d104      	bne.n	8004c8e <HAL_TIM_PWM_Start+0x82>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c8c:	e013      	b.n	8004cb6 <HAL_TIM_PWM_Start+0xaa>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d104      	bne.n	8004c9e <HAL_TIM_PWM_Start+0x92>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c9c:	e00b      	b.n	8004cb6 <HAL_TIM_PWM_Start+0xaa>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d104      	bne.n	8004cae <HAL_TIM_PWM_Start+0xa2>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cac:	e003      	b.n	8004cb6 <HAL_TIM_PWM_Start+0xaa>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	6839      	ldr	r1, [r7, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fdbe 	bl	8005840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a23      	ldr	r2, [pc, #140]	; (8004d58 <HAL_TIM_PWM_Start+0x14c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d107      	bne.n	8004cde <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1d      	ldr	r2, [pc, #116]	; (8004d58 <HAL_TIM_PWM_Start+0x14c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d018      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x10e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf0:	d013      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x10e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <HAL_TIM_PWM_Start+0x150>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00e      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x10e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a17      	ldr	r2, [pc, #92]	; (8004d60 <HAL_TIM_PWM_Start+0x154>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d009      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x10e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a16      	ldr	r2, [pc, #88]	; (8004d64 <HAL_TIM_PWM_Start+0x158>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x10e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a14      	ldr	r2, [pc, #80]	; (8004d68 <HAL_TIM_PWM_Start+0x15c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d111      	bne.n	8004d3e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b06      	cmp	r3, #6
 8004d2a:	d010      	beq.n	8004d4e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3c:	e007      	b.n	8004d4e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40010000 	.word	0x40010000
 8004d5c:	40000400 	.word	0x40000400
 8004d60:	40000800 	.word	0x40000800
 8004d64:	40000c00 	.word	0x40000c00
 8004d68:	40014000 	.word	0x40014000

08004d6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d122      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d11b      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0202 	mvn.w	r2, #2
 8004d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fa81 	bl	80052b6 <HAL_TIM_IC_CaptureCallback>
 8004db4:	e005      	b.n	8004dc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fa73 	bl	80052a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fa84 	bl	80052ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d122      	bne.n	8004e1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d11b      	bne.n	8004e1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0204 	mvn.w	r2, #4
 8004dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fa57 	bl	80052b6 <HAL_TIM_IC_CaptureCallback>
 8004e08:	e005      	b.n	8004e16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fa49 	bl	80052a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fa5a 	bl	80052ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b08      	cmp	r3, #8
 8004e28:	d122      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d11b      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0208 	mvn.w	r2, #8
 8004e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2204      	movs	r2, #4
 8004e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fa2d 	bl	80052b6 <HAL_TIM_IC_CaptureCallback>
 8004e5c:	e005      	b.n	8004e6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fa1f 	bl	80052a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fa30 	bl	80052ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	2b10      	cmp	r3, #16
 8004e7c:	d122      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0310 	and.w	r3, r3, #16
 8004e88:	2b10      	cmp	r3, #16
 8004e8a:	d11b      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0210 	mvn.w	r2, #16
 8004e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2208      	movs	r2, #8
 8004e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fa03 	bl	80052b6 <HAL_TIM_IC_CaptureCallback>
 8004eb0:	e005      	b.n	8004ebe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f9f5 	bl	80052a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fa06 	bl	80052ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d10e      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d107      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0201 	mvn.w	r2, #1
 8004ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f9cf 	bl	800528e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b80      	cmp	r3, #128	; 0x80
 8004efc:	d10e      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f08:	2b80      	cmp	r3, #128	; 0x80
 8004f0a:	d107      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fd82 	bl	8005a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f26:	2b40      	cmp	r3, #64	; 0x40
 8004f28:	d10e      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f34:	2b40      	cmp	r3, #64	; 0x40
 8004f36:	d107      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f9cb 	bl	80052de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d10e      	bne.n	8004f74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0320 	and.w	r3, r3, #32
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d107      	bne.n	8004f74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0220 	mvn.w	r2, #32
 8004f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fd4c 	bl	8005a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f74:	bf00      	nop
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f96:	2302      	movs	r3, #2
 8004f98:	e0ae      	b.n	80050f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b0c      	cmp	r3, #12
 8004fa6:	f200 809f 	bhi.w	80050e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004faa:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08004fe5 	.word	0x08004fe5
 8004fb4:	080050e9 	.word	0x080050e9
 8004fb8:	080050e9 	.word	0x080050e9
 8004fbc:	080050e9 	.word	0x080050e9
 8004fc0:	08005025 	.word	0x08005025
 8004fc4:	080050e9 	.word	0x080050e9
 8004fc8:	080050e9 	.word	0x080050e9
 8004fcc:	080050e9 	.word	0x080050e9
 8004fd0:	08005067 	.word	0x08005067
 8004fd4:	080050e9 	.word	0x080050e9
 8004fd8:	080050e9 	.word	0x080050e9
 8004fdc:	080050e9 	.word	0x080050e9
 8004fe0:	080050a7 	.word	0x080050a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fa02 	bl	80053f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0208 	orr.w	r2, r2, #8
 8004ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0204 	bic.w	r2, r2, #4
 800500e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6999      	ldr	r1, [r3, #24]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	619a      	str	r2, [r3, #24]
      break;
 8005022:	e064      	b.n	80050ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fa48 	bl	80054c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800503e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6999      	ldr	r1, [r3, #24]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	021a      	lsls	r2, r3, #8
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	619a      	str	r2, [r3, #24]
      break;
 8005064:	e043      	b.n	80050ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fa93 	bl	8005598 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69da      	ldr	r2, [r3, #28]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0208 	orr.w	r2, r2, #8
 8005080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0204 	bic.w	r2, r2, #4
 8005090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69d9      	ldr	r1, [r3, #28]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	61da      	str	r2, [r3, #28]
      break;
 80050a4:	e023      	b.n	80050ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fadd 	bl	800566c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69da      	ldr	r2, [r3, #28]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69da      	ldr	r2, [r3, #28]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69d9      	ldr	r1, [r3, #28]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	021a      	lsls	r2, r3, #8
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	61da      	str	r2, [r3, #28]
      break;
 80050e6:	e002      	b.n	80050ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	75fb      	strb	r3, [r7, #23]
      break;
 80050ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_TIM_ConfigClockSource+0x1c>
 8005118:	2302      	movs	r3, #2
 800511a:	e0b4      	b.n	8005286 <HAL_TIM_ConfigClockSource+0x186>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800513a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005154:	d03e      	beq.n	80051d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515a:	f200 8087 	bhi.w	800526c <HAL_TIM_ConfigClockSource+0x16c>
 800515e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005162:	f000 8086 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x172>
 8005166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516a:	d87f      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x16c>
 800516c:	2b70      	cmp	r3, #112	; 0x70
 800516e:	d01a      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005170:	2b70      	cmp	r3, #112	; 0x70
 8005172:	d87b      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x16c>
 8005174:	2b60      	cmp	r3, #96	; 0x60
 8005176:	d050      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x11a>
 8005178:	2b60      	cmp	r3, #96	; 0x60
 800517a:	d877      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x16c>
 800517c:	2b50      	cmp	r3, #80	; 0x50
 800517e:	d03c      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0xfa>
 8005180:	2b50      	cmp	r3, #80	; 0x50
 8005182:	d873      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x16c>
 8005184:	2b40      	cmp	r3, #64	; 0x40
 8005186:	d058      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x13a>
 8005188:	2b40      	cmp	r3, #64	; 0x40
 800518a:	d86f      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x16c>
 800518c:	2b30      	cmp	r3, #48	; 0x30
 800518e:	d064      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x15a>
 8005190:	2b30      	cmp	r3, #48	; 0x30
 8005192:	d86b      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x16c>
 8005194:	2b20      	cmp	r3, #32
 8005196:	d060      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x15a>
 8005198:	2b20      	cmp	r3, #32
 800519a:	d867      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x16c>
 800519c:	2b00      	cmp	r3, #0
 800519e:	d05c      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x15a>
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d05a      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x15a>
 80051a4:	e062      	b.n	800526c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6899      	ldr	r1, [r3, #8]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f000 fb23 	bl	8005800 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	609a      	str	r2, [r3, #8]
      break;
 80051d2:	e04f      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	6899      	ldr	r1, [r3, #8]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f000 fb0c 	bl	8005800 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051f6:	609a      	str	r2, [r3, #8]
      break;
 80051f8:	e03c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6859      	ldr	r1, [r3, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	461a      	mov	r2, r3
 8005208:	f000 fa80 	bl	800570c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2150      	movs	r1, #80	; 0x50
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fad9 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8005218:	e02c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	461a      	mov	r2, r3
 8005228:	f000 fa9f 	bl	800576a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2160      	movs	r1, #96	; 0x60
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fac9 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8005238:	e01c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6859      	ldr	r1, [r3, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	461a      	mov	r2, r3
 8005248:	f000 fa60 	bl	800570c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2140      	movs	r1, #64	; 0x40
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fab9 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8005258:	e00c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4619      	mov	r1, r3
 8005264:	4610      	mov	r0, r2
 8005266:	f000 fab0 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 800526a:	e003      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
      break;
 8005270:	e000      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005284:	7bfb      	ldrb	r3, [r7, #15]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a34      	ldr	r2, [pc, #208]	; (80053d8 <TIM_Base_SetConfig+0xe4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00f      	beq.n	800532c <TIM_Base_SetConfig+0x38>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005312:	d00b      	beq.n	800532c <TIM_Base_SetConfig+0x38>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a31      	ldr	r2, [pc, #196]	; (80053dc <TIM_Base_SetConfig+0xe8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d007      	beq.n	800532c <TIM_Base_SetConfig+0x38>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a30      	ldr	r2, [pc, #192]	; (80053e0 <TIM_Base_SetConfig+0xec>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_Base_SetConfig+0x38>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a2f      	ldr	r2, [pc, #188]	; (80053e4 <TIM_Base_SetConfig+0xf0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d108      	bne.n	800533e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a25      	ldr	r2, [pc, #148]	; (80053d8 <TIM_Base_SetConfig+0xe4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01b      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534c:	d017      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a22      	ldr	r2, [pc, #136]	; (80053dc <TIM_Base_SetConfig+0xe8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a21      	ldr	r2, [pc, #132]	; (80053e0 <TIM_Base_SetConfig+0xec>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00f      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a20      	ldr	r2, [pc, #128]	; (80053e4 <TIM_Base_SetConfig+0xf0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00b      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a1f      	ldr	r2, [pc, #124]	; (80053e8 <TIM_Base_SetConfig+0xf4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a1e      	ldr	r2, [pc, #120]	; (80053ec <TIM_Base_SetConfig+0xf8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1d      	ldr	r2, [pc, #116]	; (80053f0 <TIM_Base_SetConfig+0xfc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d108      	bne.n	8005390 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a08      	ldr	r2, [pc, #32]	; (80053d8 <TIM_Base_SetConfig+0xe4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d103      	bne.n	80053c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	615a      	str	r2, [r3, #20]
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40014400 	.word	0x40014400
 80053f0:	40014800 	.word	0x40014800

080053f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f023 0201 	bic.w	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0303 	bic.w	r3, r3, #3
 800542a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f023 0302 	bic.w	r3, r3, #2
 800543c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <TIM_OC1_SetConfig+0xc8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10c      	bne.n	800546a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f023 0308 	bic.w	r3, r3, #8
 8005456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f023 0304 	bic.w	r3, r3, #4
 8005468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a13      	ldr	r2, [pc, #76]	; (80054bc <TIM_OC1_SetConfig+0xc8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d111      	bne.n	8005496 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	621a      	str	r2, [r3, #32]
}
 80054b0:	bf00      	nop
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	40010000 	.word	0x40010000

080054c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f023 0210 	bic.w	r2, r3, #16
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f023 0320 	bic.w	r3, r3, #32
 800550a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <TIM_OC2_SetConfig+0xd4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d10d      	bne.n	800553c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800553a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a15      	ldr	r2, [pc, #84]	; (8005594 <TIM_OC2_SetConfig+0xd4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d113      	bne.n	800556c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800554a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	621a      	str	r2, [r3, #32]
}
 8005586:	bf00      	nop
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	40010000 	.word	0x40010000

08005598 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0303 	bic.w	r3, r3, #3
 80055ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	021b      	lsls	r3, r3, #8
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1d      	ldr	r2, [pc, #116]	; (8005668 <TIM_OC3_SetConfig+0xd0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d10d      	bne.n	8005612 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a14      	ldr	r2, [pc, #80]	; (8005668 <TIM_OC3_SetConfig+0xd0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d113      	bne.n	8005642 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	621a      	str	r2, [r3, #32]
}
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	40010000 	.word	0x40010000

0800566c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	031b      	lsls	r3, r3, #12
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a10      	ldr	r2, [pc, #64]	; (8005708 <TIM_OC4_SetConfig+0x9c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d109      	bne.n	80056e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	019b      	lsls	r3, r3, #6
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40010000 	.word	0x40010000

0800570c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f023 0201 	bic.w	r2, r3, #1
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f023 030a 	bic.w	r3, r3, #10
 8005748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	621a      	str	r2, [r3, #32]
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800576a:	b480      	push	{r7}
 800576c:	b087      	sub	sp, #28
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f023 0210 	bic.w	r2, r3, #16
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005794:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	031b      	lsls	r3, r3, #12
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f043 0307 	orr.w	r3, r3, #7
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	609a      	str	r2, [r3, #8]
}
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800581a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	021a      	lsls	r2, r3, #8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	431a      	orrs	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4313      	orrs	r3, r2
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	2201      	movs	r2, #1
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1a      	ldr	r2, [r3, #32]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	43db      	mvns	r3, r3
 8005862:	401a      	ands	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	fa01 f303 	lsl.w	r3, r1, r3
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e050      	b.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a1c      	ldr	r2, [pc, #112]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d018      	beq.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f0:	d013      	beq.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a18      	ldr	r2, [pc, #96]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00e      	beq.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a16      	ldr	r2, [pc, #88]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d009      	beq.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a15      	ldr	r2, [pc, #84]	; (8005960 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d004      	beq.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a13      	ldr	r2, [pc, #76]	; (8005964 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d10c      	bne.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005920:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	4313      	orrs	r3, r2
 800592a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40010000 	.word	0x40010000
 8005958:	40000400 	.word	0x40000400
 800595c:	40000800 	.word	0x40000800
 8005960:	40000c00 	.word	0x40000c00
 8005964:	40014000 	.word	0x40014000

08005968 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005980:	2302      	movs	r3, #2
 8005982:	e03d      	b.n	8005a00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e03f      	b.n	8005ac6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fc fe9c 	bl	8002798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2224      	movs	r2, #36	; 0x24
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fcdf 	bl	800643c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695a      	ldr	r2, [r3, #20]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d11d      	bne.n	8005b24 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_UART_Receive_IT+0x26>
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e016      	b.n	8005b26 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_UART_Receive_IT+0x38>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e00f      	b.n	8005b26 <HAL_UART_Receive_IT+0x58>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b14:	88fb      	ldrh	r3, [r7, #6]
 8005b16:	461a      	mov	r2, r3
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 fab6 	bl	800608c <UART_Start_Receive_IT>
 8005b20:	4603      	mov	r3, r0
 8005b22:	e000      	b.n	8005b26 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b24:	2302      	movs	r3, #2
  }
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b0ba      	sub	sp, #232	; 0xe8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10f      	bne.n	8005b96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <HAL_UART_IRQHandler+0x66>
 8005b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fb99 	bl	80062c6 <UART_Receive_IT>
      return;
 8005b94:	e256      	b.n	8006044 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 80de 	beq.w	8005d5c <HAL_UART_IRQHandler+0x22c>
 8005ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d106      	bne.n	8005bba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 80d1 	beq.w	8005d5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00b      	beq.n	8005bde <HAL_UART_IRQHandler+0xae>
 8005bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d005      	beq.n	8005bde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	f043 0201 	orr.w	r2, r3, #1
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00b      	beq.n	8005c02 <HAL_UART_IRQHandler+0xd2>
 8005bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d005      	beq.n	8005c02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	f043 0202 	orr.w	r2, r3, #2
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00b      	beq.n	8005c26 <HAL_UART_IRQHandler+0xf6>
 8005c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f043 0204 	orr.w	r2, r3, #4
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d011      	beq.n	8005c56 <HAL_UART_IRQHandler+0x126>
 8005c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d105      	bne.n	8005c4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	f043 0208 	orr.w	r2, r3, #8
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 81ed 	beq.w	800603a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d008      	beq.n	8005c7e <HAL_UART_IRQHandler+0x14e>
 8005c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fb24 	bl	80062c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c88:	2b40      	cmp	r3, #64	; 0x40
 8005c8a:	bf0c      	ite	eq
 8005c8c:	2301      	moveq	r3, #1
 8005c8e:	2300      	movne	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d103      	bne.n	8005caa <HAL_UART_IRQHandler+0x17a>
 8005ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d04f      	beq.n	8005d4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fa2c 	bl	8006108 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cba:	2b40      	cmp	r3, #64	; 0x40
 8005cbc:	d141      	bne.n	8005d42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3314      	adds	r3, #20
 8005cc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3314      	adds	r3, #20
 8005ce6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1d9      	bne.n	8005cbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d013      	beq.n	8005d3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	4a7d      	ldr	r2, [pc, #500]	; (8005f0c <HAL_UART_IRQHandler+0x3dc>)
 8005d18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fd fd5e 	bl	80037e0 <HAL_DMA_Abort_IT>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d016      	beq.n	8005d58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d38:	e00e      	b.n	8005d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f990 	bl	8006060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d40:	e00a      	b.n	8005d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f98c 	bl	8006060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d48:	e006      	b.n	8005d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f988 	bl	8006060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d56:	e170      	b.n	800603a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d58:	bf00      	nop
    return;
 8005d5a:	e16e      	b.n	800603a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	f040 814a 	bne.w	8005ffa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6a:	f003 0310 	and.w	r3, r3, #16
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 8143 	beq.w	8005ffa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 813c 	beq.w	8005ffa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d82:	2300      	movs	r3, #0
 8005d84:	60bb      	str	r3, [r7, #8]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60bb      	str	r3, [r7, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	60bb      	str	r3, [r7, #8]
 8005d96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da2:	2b40      	cmp	r3, #64	; 0x40
 8005da4:	f040 80b4 	bne.w	8005f10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005db4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 8140 	beq.w	800603e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	f080 8139 	bcs.w	800603e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dde:	f000 8088 	beq.w	8005ef2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	330c      	adds	r3, #12
 8005de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	330c      	adds	r3, #12
 8005e0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1d9      	bne.n	8005de2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3314      	adds	r3, #20
 8005e34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e40:	f023 0301 	bic.w	r3, r3, #1
 8005e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3314      	adds	r3, #20
 8005e4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e1      	bne.n	8005e2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3314      	adds	r3, #20
 8005e70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e74:	e853 3f00 	ldrex	r3, [r3]
 8005e78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3314      	adds	r3, #20
 8005e8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e3      	bne.n	8005e6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	330c      	adds	r3, #12
 8005eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec2:	f023 0310 	bic.w	r3, r3, #16
 8005ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	330c      	adds	r3, #12
 8005ed0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ed4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ed6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e3      	bne.n	8005eb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fd fc07 	bl	8003700 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	4619      	mov	r1, r3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f8b6 	bl	8006074 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f08:	e099      	b.n	800603e <HAL_UART_IRQHandler+0x50e>
 8005f0a:	bf00      	nop
 8005f0c:	080061cf 	.word	0x080061cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 808b 	beq.w	8006042 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 8086 	beq.w	8006042 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	330c      	adds	r3, #12
 8005f56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f5a:	647a      	str	r2, [r7, #68]	; 0x44
 8005f5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e3      	bne.n	8005f36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3314      	adds	r3, #20
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	f023 0301 	bic.w	r3, r3, #1
 8005f84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3314      	adds	r3, #20
 8005f8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f92:	633a      	str	r2, [r7, #48]	; 0x30
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e3      	bne.n	8005f6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0310 	bic.w	r3, r3, #16
 8005fca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005fd8:	61fa      	str	r2, [r7, #28]
 8005fda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	69b9      	ldr	r1, [r7, #24]
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e3      	bne.n	8005fb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f83e 	bl	8006074 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ff8:	e023      	b.n	8006042 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006002:	2b00      	cmp	r3, #0
 8006004:	d009      	beq.n	800601a <HAL_UART_IRQHandler+0x4ea>
 8006006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800600a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f8ef 	bl	80061f6 <UART_Transmit_IT>
    return;
 8006018:	e014      	b.n	8006044 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800601a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00e      	beq.n	8006044 <HAL_UART_IRQHandler+0x514>
 8006026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800602a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602e:	2b00      	cmp	r3, #0
 8006030:	d008      	beq.n	8006044 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f92f 	bl	8006296 <UART_EndTransmit_IT>
    return;
 8006038:	e004      	b.n	8006044 <HAL_UART_IRQHandler+0x514>
    return;
 800603a:	bf00      	nop
 800603c:	e002      	b.n	8006044 <HAL_UART_IRQHandler+0x514>
      return;
 800603e:	bf00      	nop
 8006040:	e000      	b.n	8006044 <HAL_UART_IRQHandler+0x514>
      return;
 8006042:	bf00      	nop
  }
}
 8006044:	37e8      	adds	r7, #232	; 0xe8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop

0800604c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	88fa      	ldrh	r2, [r7, #6]
 80060a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	88fa      	ldrh	r2, [r7, #6]
 80060aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2222      	movs	r2, #34	; 0x22
 80060b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d007      	beq.n	80060da <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	695a      	ldr	r2, [r3, #20]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f042 0201 	orr.w	r2, r2, #1
 80060e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0220 	orr.w	r2, r2, #32
 80060f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006108:	b480      	push	{r7}
 800610a:	b095      	sub	sp, #84	; 0x54
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	330c      	adds	r3, #12
 8006116:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006130:	643a      	str	r2, [r7, #64]	; 0x40
 8006132:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006136:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e5      	bne.n	8006110 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3314      	adds	r3, #20
 800614a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	61fb      	str	r3, [r7, #28]
   return(result);
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f023 0301 	bic.w	r3, r3, #1
 800615a:	64bb      	str	r3, [r7, #72]	; 0x48
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3314      	adds	r3, #20
 8006162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006164:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006166:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800616a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e5      	bne.n	8006144 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617c:	2b01      	cmp	r3, #1
 800617e:	d119      	bne.n	80061b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	330c      	adds	r3, #12
 8006186:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	e853 3f00 	ldrex	r3, [r3]
 800618e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f023 0310 	bic.w	r3, r3, #16
 8006196:	647b      	str	r3, [r7, #68]	; 0x44
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	330c      	adds	r3, #12
 800619e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061a0:	61ba      	str	r2, [r7, #24]
 80061a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	6979      	ldr	r1, [r7, #20]
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	e841 2300 	strex	r3, r2, [r1]
 80061ac:	613b      	str	r3, [r7, #16]
   return(result);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1e5      	bne.n	8006180 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2220      	movs	r2, #32
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061c2:	bf00      	nop
 80061c4:	3754      	adds	r7, #84	; 0x54
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f7ff ff39 	bl	8006060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b085      	sub	sp, #20
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b21      	cmp	r3, #33	; 0x21
 8006208:	d13e      	bne.n	8006288 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006212:	d114      	bne.n	800623e <UART_Transmit_IT+0x48>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d110      	bne.n	800623e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006230:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	1c9a      	adds	r2, r3, #2
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	621a      	str	r2, [r3, #32]
 800623c:	e008      	b.n	8006250 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	1c59      	adds	r1, r3, #1
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6211      	str	r1, [r2, #32]
 8006248:	781a      	ldrb	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006254:	b29b      	uxth	r3, r3
 8006256:	3b01      	subs	r3, #1
 8006258:	b29b      	uxth	r3, r3
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	4619      	mov	r1, r3
 800625e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10f      	bne.n	8006284 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006272:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006282:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	e000      	b.n	800628a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006288:	2302      	movs	r3, #2
  }
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff fec8 	bl	800604c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b08c      	sub	sp, #48	; 0x30
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b22      	cmp	r3, #34	; 0x22
 80062d8:	f040 80ab 	bne.w	8006432 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e4:	d117      	bne.n	8006316 <UART_Receive_IT+0x50>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d113      	bne.n	8006316 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006304:	b29a      	uxth	r2, r3
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630e:	1c9a      	adds	r2, r3, #2
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	629a      	str	r2, [r3, #40]	; 0x28
 8006314:	e026      	b.n	8006364 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800631c:	2300      	movs	r3, #0
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006328:	d007      	beq.n	800633a <UART_Receive_IT+0x74>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <UART_Receive_IT+0x82>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	b2da      	uxtb	r2, r3
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e008      	b.n	800635a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006354:	b2da      	uxtb	r2, r3
 8006356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006358:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006368:	b29b      	uxth	r3, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	b29b      	uxth	r3, r3
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	4619      	mov	r1, r3
 8006372:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006374:	2b00      	cmp	r3, #0
 8006376:	d15a      	bne.n	800642e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0220 	bic.w	r2, r2, #32
 8006386:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006396:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695a      	ldr	r2, [r3, #20]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0201 	bic.w	r2, r2, #1
 80063a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d135      	bne.n	8006424 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	330c      	adds	r3, #12
 80063c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	613b      	str	r3, [r7, #16]
   return(result);
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f023 0310 	bic.w	r3, r3, #16
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	330c      	adds	r3, #12
 80063dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063de:	623a      	str	r2, [r7, #32]
 80063e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	69f9      	ldr	r1, [r7, #28]
 80063e4:	6a3a      	ldr	r2, [r7, #32]
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e5      	bne.n	80063be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	2b10      	cmp	r3, #16
 80063fe:	d10a      	bne.n	8006416 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff fe29 	bl	8006074 <HAL_UARTEx_RxEventCallback>
 8006422:	e002      	b.n	800642a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7fb fe33 	bl	8002090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	e002      	b.n	8006434 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	e000      	b.n	8006434 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006432:	2302      	movs	r3, #2
  }
}
 8006434:	4618      	mov	r0, r3
 8006436:	3730      	adds	r7, #48	; 0x30
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800643c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006440:	b0c0      	sub	sp, #256	; 0x100
 8006442:	af00      	add	r7, sp, #0
 8006444:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	68d9      	ldr	r1, [r3, #12]
 800645a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	ea40 0301 	orr.w	r3, r0, r1
 8006464:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	431a      	orrs	r2, r3
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	431a      	orrs	r2, r3
 800647c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	4313      	orrs	r3, r2
 8006484:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006494:	f021 010c 	bic.w	r1, r1, #12
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064a2:	430b      	orrs	r3, r1
 80064a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b6:	6999      	ldr	r1, [r3, #24]
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	ea40 0301 	orr.w	r3, r0, r1
 80064c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	4b8f      	ldr	r3, [pc, #572]	; (8006708 <UART_SetConfig+0x2cc>)
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d005      	beq.n	80064dc <UART_SetConfig+0xa0>
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b8d      	ldr	r3, [pc, #564]	; (800670c <UART_SetConfig+0x2d0>)
 80064d8:	429a      	cmp	r2, r3
 80064da:	d104      	bne.n	80064e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064dc:	f7fe f9c0 	bl	8004860 <HAL_RCC_GetPCLK2Freq>
 80064e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80064e4:	e003      	b.n	80064ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064e6:	f7fe f9a7 	bl	8004838 <HAL_RCC_GetPCLK1Freq>
 80064ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064f8:	f040 810c 	bne.w	8006714 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006500:	2200      	movs	r2, #0
 8006502:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006506:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800650a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800650e:	4622      	mov	r2, r4
 8006510:	462b      	mov	r3, r5
 8006512:	1891      	adds	r1, r2, r2
 8006514:	65b9      	str	r1, [r7, #88]	; 0x58
 8006516:	415b      	adcs	r3, r3
 8006518:	65fb      	str	r3, [r7, #92]	; 0x5c
 800651a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800651e:	4621      	mov	r1, r4
 8006520:	eb12 0801 	adds.w	r8, r2, r1
 8006524:	4629      	mov	r1, r5
 8006526:	eb43 0901 	adc.w	r9, r3, r1
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800653a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800653e:	4690      	mov	r8, r2
 8006540:	4699      	mov	r9, r3
 8006542:	4623      	mov	r3, r4
 8006544:	eb18 0303 	adds.w	r3, r8, r3
 8006548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800654c:	462b      	mov	r3, r5
 800654e:	eb49 0303 	adc.w	r3, r9, r3
 8006552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006562:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006566:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800656a:	460b      	mov	r3, r1
 800656c:	18db      	adds	r3, r3, r3
 800656e:	653b      	str	r3, [r7, #80]	; 0x50
 8006570:	4613      	mov	r3, r2
 8006572:	eb42 0303 	adc.w	r3, r2, r3
 8006576:	657b      	str	r3, [r7, #84]	; 0x54
 8006578:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800657c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006580:	f7fa fb5a 	bl	8000c38 <__aeabi_uldivmod>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4b61      	ldr	r3, [pc, #388]	; (8006710 <UART_SetConfig+0x2d4>)
 800658a:	fba3 2302 	umull	r2, r3, r3, r2
 800658e:	095b      	lsrs	r3, r3, #5
 8006590:	011c      	lsls	r4, r3, #4
 8006592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006596:	2200      	movs	r2, #0
 8006598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800659c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065a4:	4642      	mov	r2, r8
 80065a6:	464b      	mov	r3, r9
 80065a8:	1891      	adds	r1, r2, r2
 80065aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80065ac:	415b      	adcs	r3, r3
 80065ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065b4:	4641      	mov	r1, r8
 80065b6:	eb12 0a01 	adds.w	sl, r2, r1
 80065ba:	4649      	mov	r1, r9
 80065bc:	eb43 0b01 	adc.w	fp, r3, r1
 80065c0:	f04f 0200 	mov.w	r2, #0
 80065c4:	f04f 0300 	mov.w	r3, #0
 80065c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065d4:	4692      	mov	sl, r2
 80065d6:	469b      	mov	fp, r3
 80065d8:	4643      	mov	r3, r8
 80065da:	eb1a 0303 	adds.w	r3, sl, r3
 80065de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065e2:	464b      	mov	r3, r9
 80065e4:	eb4b 0303 	adc.w	r3, fp, r3
 80065e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80065fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006600:	460b      	mov	r3, r1
 8006602:	18db      	adds	r3, r3, r3
 8006604:	643b      	str	r3, [r7, #64]	; 0x40
 8006606:	4613      	mov	r3, r2
 8006608:	eb42 0303 	adc.w	r3, r2, r3
 800660c:	647b      	str	r3, [r7, #68]	; 0x44
 800660e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006612:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006616:	f7fa fb0f 	bl	8000c38 <__aeabi_uldivmod>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	4611      	mov	r1, r2
 8006620:	4b3b      	ldr	r3, [pc, #236]	; (8006710 <UART_SetConfig+0x2d4>)
 8006622:	fba3 2301 	umull	r2, r3, r3, r1
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	2264      	movs	r2, #100	; 0x64
 800662a:	fb02 f303 	mul.w	r3, r2, r3
 800662e:	1acb      	subs	r3, r1, r3
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006636:	4b36      	ldr	r3, [pc, #216]	; (8006710 <UART_SetConfig+0x2d4>)
 8006638:	fba3 2302 	umull	r2, r3, r3, r2
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006644:	441c      	add	r4, r3
 8006646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800664a:	2200      	movs	r2, #0
 800664c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006650:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006654:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006658:	4642      	mov	r2, r8
 800665a:	464b      	mov	r3, r9
 800665c:	1891      	adds	r1, r2, r2
 800665e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006660:	415b      	adcs	r3, r3
 8006662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006664:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006668:	4641      	mov	r1, r8
 800666a:	1851      	adds	r1, r2, r1
 800666c:	6339      	str	r1, [r7, #48]	; 0x30
 800666e:	4649      	mov	r1, r9
 8006670:	414b      	adcs	r3, r1
 8006672:	637b      	str	r3, [r7, #52]	; 0x34
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006680:	4659      	mov	r1, fp
 8006682:	00cb      	lsls	r3, r1, #3
 8006684:	4651      	mov	r1, sl
 8006686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668a:	4651      	mov	r1, sl
 800668c:	00ca      	lsls	r2, r1, #3
 800668e:	4610      	mov	r0, r2
 8006690:	4619      	mov	r1, r3
 8006692:	4603      	mov	r3, r0
 8006694:	4642      	mov	r2, r8
 8006696:	189b      	adds	r3, r3, r2
 8006698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800669c:	464b      	mov	r3, r9
 800669e:	460a      	mov	r2, r1
 80066a0:	eb42 0303 	adc.w	r3, r2, r3
 80066a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066bc:	460b      	mov	r3, r1
 80066be:	18db      	adds	r3, r3, r3
 80066c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c2:	4613      	mov	r3, r2
 80066c4:	eb42 0303 	adc.w	r3, r2, r3
 80066c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80066d2:	f7fa fab1 	bl	8000c38 <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <UART_SetConfig+0x2d4>)
 80066dc:	fba3 1302 	umull	r1, r3, r3, r2
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	2164      	movs	r1, #100	; 0x64
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	3332      	adds	r3, #50	; 0x32
 80066ee:	4a08      	ldr	r2, [pc, #32]	; (8006710 <UART_SetConfig+0x2d4>)
 80066f0:	fba2 2303 	umull	r2, r3, r2, r3
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	f003 0207 	and.w	r2, r3, #7
 80066fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4422      	add	r2, r4
 8006702:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006704:	e106      	b.n	8006914 <UART_SetConfig+0x4d8>
 8006706:	bf00      	nop
 8006708:	40011000 	.word	0x40011000
 800670c:	40011400 	.word	0x40011400
 8006710:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006718:	2200      	movs	r2, #0
 800671a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800671e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006722:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006726:	4642      	mov	r2, r8
 8006728:	464b      	mov	r3, r9
 800672a:	1891      	adds	r1, r2, r2
 800672c:	6239      	str	r1, [r7, #32]
 800672e:	415b      	adcs	r3, r3
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
 8006732:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006736:	4641      	mov	r1, r8
 8006738:	1854      	adds	r4, r2, r1
 800673a:	4649      	mov	r1, r9
 800673c:	eb43 0501 	adc.w	r5, r3, r1
 8006740:	f04f 0200 	mov.w	r2, #0
 8006744:	f04f 0300 	mov.w	r3, #0
 8006748:	00eb      	lsls	r3, r5, #3
 800674a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800674e:	00e2      	lsls	r2, r4, #3
 8006750:	4614      	mov	r4, r2
 8006752:	461d      	mov	r5, r3
 8006754:	4643      	mov	r3, r8
 8006756:	18e3      	adds	r3, r4, r3
 8006758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800675c:	464b      	mov	r3, r9
 800675e:	eb45 0303 	adc.w	r3, r5, r3
 8006762:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006772:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006782:	4629      	mov	r1, r5
 8006784:	008b      	lsls	r3, r1, #2
 8006786:	4621      	mov	r1, r4
 8006788:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800678c:	4621      	mov	r1, r4
 800678e:	008a      	lsls	r2, r1, #2
 8006790:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006794:	f7fa fa50 	bl	8000c38 <__aeabi_uldivmod>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4b60      	ldr	r3, [pc, #384]	; (8006920 <UART_SetConfig+0x4e4>)
 800679e:	fba3 2302 	umull	r2, r3, r3, r2
 80067a2:	095b      	lsrs	r3, r3, #5
 80067a4:	011c      	lsls	r4, r3, #4
 80067a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067b8:	4642      	mov	r2, r8
 80067ba:	464b      	mov	r3, r9
 80067bc:	1891      	adds	r1, r2, r2
 80067be:	61b9      	str	r1, [r7, #24]
 80067c0:	415b      	adcs	r3, r3
 80067c2:	61fb      	str	r3, [r7, #28]
 80067c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067c8:	4641      	mov	r1, r8
 80067ca:	1851      	adds	r1, r2, r1
 80067cc:	6139      	str	r1, [r7, #16]
 80067ce:	4649      	mov	r1, r9
 80067d0:	414b      	adcs	r3, r1
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067e0:	4659      	mov	r1, fp
 80067e2:	00cb      	lsls	r3, r1, #3
 80067e4:	4651      	mov	r1, sl
 80067e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ea:	4651      	mov	r1, sl
 80067ec:	00ca      	lsls	r2, r1, #3
 80067ee:	4610      	mov	r0, r2
 80067f0:	4619      	mov	r1, r3
 80067f2:	4603      	mov	r3, r0
 80067f4:	4642      	mov	r2, r8
 80067f6:	189b      	adds	r3, r3, r2
 80067f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067fc:	464b      	mov	r3, r9
 80067fe:	460a      	mov	r2, r1
 8006800:	eb42 0303 	adc.w	r3, r2, r3
 8006804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	67bb      	str	r3, [r7, #120]	; 0x78
 8006812:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006814:	f04f 0200 	mov.w	r2, #0
 8006818:	f04f 0300 	mov.w	r3, #0
 800681c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006820:	4649      	mov	r1, r9
 8006822:	008b      	lsls	r3, r1, #2
 8006824:	4641      	mov	r1, r8
 8006826:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800682a:	4641      	mov	r1, r8
 800682c:	008a      	lsls	r2, r1, #2
 800682e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006832:	f7fa fa01 	bl	8000c38 <__aeabi_uldivmod>
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	4611      	mov	r1, r2
 800683c:	4b38      	ldr	r3, [pc, #224]	; (8006920 <UART_SetConfig+0x4e4>)
 800683e:	fba3 2301 	umull	r2, r3, r3, r1
 8006842:	095b      	lsrs	r3, r3, #5
 8006844:	2264      	movs	r2, #100	; 0x64
 8006846:	fb02 f303 	mul.w	r3, r2, r3
 800684a:	1acb      	subs	r3, r1, r3
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	3332      	adds	r3, #50	; 0x32
 8006850:	4a33      	ldr	r2, [pc, #204]	; (8006920 <UART_SetConfig+0x4e4>)
 8006852:	fba2 2303 	umull	r2, r3, r2, r3
 8006856:	095b      	lsrs	r3, r3, #5
 8006858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800685c:	441c      	add	r4, r3
 800685e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006862:	2200      	movs	r2, #0
 8006864:	673b      	str	r3, [r7, #112]	; 0x70
 8006866:	677a      	str	r2, [r7, #116]	; 0x74
 8006868:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800686c:	4642      	mov	r2, r8
 800686e:	464b      	mov	r3, r9
 8006870:	1891      	adds	r1, r2, r2
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	415b      	adcs	r3, r3
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800687c:	4641      	mov	r1, r8
 800687e:	1851      	adds	r1, r2, r1
 8006880:	6039      	str	r1, [r7, #0]
 8006882:	4649      	mov	r1, r9
 8006884:	414b      	adcs	r3, r1
 8006886:	607b      	str	r3, [r7, #4]
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006894:	4659      	mov	r1, fp
 8006896:	00cb      	lsls	r3, r1, #3
 8006898:	4651      	mov	r1, sl
 800689a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800689e:	4651      	mov	r1, sl
 80068a0:	00ca      	lsls	r2, r1, #3
 80068a2:	4610      	mov	r0, r2
 80068a4:	4619      	mov	r1, r3
 80068a6:	4603      	mov	r3, r0
 80068a8:	4642      	mov	r2, r8
 80068aa:	189b      	adds	r3, r3, r2
 80068ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80068ae:	464b      	mov	r3, r9
 80068b0:	460a      	mov	r2, r1
 80068b2:	eb42 0303 	adc.w	r3, r2, r3
 80068b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	663b      	str	r3, [r7, #96]	; 0x60
 80068c2:	667a      	str	r2, [r7, #100]	; 0x64
 80068c4:	f04f 0200 	mov.w	r2, #0
 80068c8:	f04f 0300 	mov.w	r3, #0
 80068cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80068d0:	4649      	mov	r1, r9
 80068d2:	008b      	lsls	r3, r1, #2
 80068d4:	4641      	mov	r1, r8
 80068d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068da:	4641      	mov	r1, r8
 80068dc:	008a      	lsls	r2, r1, #2
 80068de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80068e2:	f7fa f9a9 	bl	8000c38 <__aeabi_uldivmod>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	4b0d      	ldr	r3, [pc, #52]	; (8006920 <UART_SetConfig+0x4e4>)
 80068ec:	fba3 1302 	umull	r1, r3, r3, r2
 80068f0:	095b      	lsrs	r3, r3, #5
 80068f2:	2164      	movs	r1, #100	; 0x64
 80068f4:	fb01 f303 	mul.w	r3, r1, r3
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	3332      	adds	r3, #50	; 0x32
 80068fe:	4a08      	ldr	r2, [pc, #32]	; (8006920 <UART_SetConfig+0x4e4>)
 8006900:	fba2 2303 	umull	r2, r3, r2, r3
 8006904:	095b      	lsrs	r3, r3, #5
 8006906:	f003 020f 	and.w	r2, r3, #15
 800690a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4422      	add	r2, r4
 8006912:	609a      	str	r2, [r3, #8]
}
 8006914:	bf00      	nop
 8006916:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800691a:	46bd      	mov	sp, r7
 800691c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006920:	51eb851f 	.word	0x51eb851f

08006924 <srand>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	4b10      	ldr	r3, [pc, #64]	; (8006968 <srand+0x44>)
 8006928:	681d      	ldr	r5, [r3, #0]
 800692a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800692c:	4604      	mov	r4, r0
 800692e:	b9b3      	cbnz	r3, 800695e <srand+0x3a>
 8006930:	2018      	movs	r0, #24
 8006932:	f001 fd41 	bl	80083b8 <malloc>
 8006936:	4602      	mov	r2, r0
 8006938:	6328      	str	r0, [r5, #48]	; 0x30
 800693a:	b920      	cbnz	r0, 8006946 <srand+0x22>
 800693c:	4b0b      	ldr	r3, [pc, #44]	; (800696c <srand+0x48>)
 800693e:	480c      	ldr	r0, [pc, #48]	; (8006970 <srand+0x4c>)
 8006940:	2146      	movs	r1, #70	; 0x46
 8006942:	f001 f977 	bl	8007c34 <__assert_func>
 8006946:	490b      	ldr	r1, [pc, #44]	; (8006974 <srand+0x50>)
 8006948:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <srand+0x54>)
 800694a:	e9c0 1300 	strd	r1, r3, [r0]
 800694e:	4b0b      	ldr	r3, [pc, #44]	; (800697c <srand+0x58>)
 8006950:	6083      	str	r3, [r0, #8]
 8006952:	230b      	movs	r3, #11
 8006954:	8183      	strh	r3, [r0, #12]
 8006956:	2100      	movs	r1, #0
 8006958:	2001      	movs	r0, #1
 800695a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800695e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006960:	2200      	movs	r2, #0
 8006962:	611c      	str	r4, [r3, #16]
 8006964:	615a      	str	r2, [r3, #20]
 8006966:	bd38      	pop	{r3, r4, r5, pc}
 8006968:	200001d0 	.word	0x200001d0
 800696c:	08009f54 	.word	0x08009f54
 8006970:	08009f6b 	.word	0x08009f6b
 8006974:	abcd330e 	.word	0xabcd330e
 8006978:	e66d1234 	.word	0xe66d1234
 800697c:	0005deec 	.word	0x0005deec

08006980 <rand>:
 8006980:	4b16      	ldr	r3, [pc, #88]	; (80069dc <rand+0x5c>)
 8006982:	b510      	push	{r4, lr}
 8006984:	681c      	ldr	r4, [r3, #0]
 8006986:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006988:	b9b3      	cbnz	r3, 80069b8 <rand+0x38>
 800698a:	2018      	movs	r0, #24
 800698c:	f001 fd14 	bl	80083b8 <malloc>
 8006990:	4602      	mov	r2, r0
 8006992:	6320      	str	r0, [r4, #48]	; 0x30
 8006994:	b920      	cbnz	r0, 80069a0 <rand+0x20>
 8006996:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <rand+0x60>)
 8006998:	4812      	ldr	r0, [pc, #72]	; (80069e4 <rand+0x64>)
 800699a:	2152      	movs	r1, #82	; 0x52
 800699c:	f001 f94a 	bl	8007c34 <__assert_func>
 80069a0:	4911      	ldr	r1, [pc, #68]	; (80069e8 <rand+0x68>)
 80069a2:	4b12      	ldr	r3, [pc, #72]	; (80069ec <rand+0x6c>)
 80069a4:	e9c0 1300 	strd	r1, r3, [r0]
 80069a8:	4b11      	ldr	r3, [pc, #68]	; (80069f0 <rand+0x70>)
 80069aa:	6083      	str	r3, [r0, #8]
 80069ac:	230b      	movs	r3, #11
 80069ae:	8183      	strh	r3, [r0, #12]
 80069b0:	2100      	movs	r1, #0
 80069b2:	2001      	movs	r0, #1
 80069b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80069b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80069ba:	480e      	ldr	r0, [pc, #56]	; (80069f4 <rand+0x74>)
 80069bc:	690b      	ldr	r3, [r1, #16]
 80069be:	694c      	ldr	r4, [r1, #20]
 80069c0:	4a0d      	ldr	r2, [pc, #52]	; (80069f8 <rand+0x78>)
 80069c2:	4358      	muls	r0, r3
 80069c4:	fb02 0004 	mla	r0, r2, r4, r0
 80069c8:	fba3 3202 	umull	r3, r2, r3, r2
 80069cc:	3301      	adds	r3, #1
 80069ce:	eb40 0002 	adc.w	r0, r0, r2
 80069d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80069d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80069da:	bd10      	pop	{r4, pc}
 80069dc:	200001d0 	.word	0x200001d0
 80069e0:	08009f54 	.word	0x08009f54
 80069e4:	08009f6b 	.word	0x08009f6b
 80069e8:	abcd330e 	.word	0xabcd330e
 80069ec:	e66d1234 	.word	0xe66d1234
 80069f0:	0005deec 	.word	0x0005deec
 80069f4:	5851f42d 	.word	0x5851f42d
 80069f8:	4c957f2d 	.word	0x4c957f2d

080069fc <sulp>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	4604      	mov	r4, r0
 8006a00:	460d      	mov	r5, r1
 8006a02:	ec45 4b10 	vmov	d0, r4, r5
 8006a06:	4616      	mov	r6, r2
 8006a08:	f002 f908 	bl	8008c1c <__ulp>
 8006a0c:	ec51 0b10 	vmov	r0, r1, d0
 8006a10:	b17e      	cbz	r6, 8006a32 <sulp+0x36>
 8006a12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006a16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	dd09      	ble.n	8006a32 <sulp+0x36>
 8006a1e:	051b      	lsls	r3, r3, #20
 8006a20:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006a24:	2400      	movs	r4, #0
 8006a26:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006a2a:	4622      	mov	r2, r4
 8006a2c:	462b      	mov	r3, r5
 8006a2e:	f7f9 fde3 	bl	80005f8 <__aeabi_dmul>
 8006a32:	bd70      	pop	{r4, r5, r6, pc}
 8006a34:	0000      	movs	r0, r0
	...

08006a38 <_strtod_l>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	ed2d 8b02 	vpush	{d8}
 8006a40:	b09b      	sub	sp, #108	; 0x6c
 8006a42:	4604      	mov	r4, r0
 8006a44:	9213      	str	r2, [sp, #76]	; 0x4c
 8006a46:	2200      	movs	r2, #0
 8006a48:	9216      	str	r2, [sp, #88]	; 0x58
 8006a4a:	460d      	mov	r5, r1
 8006a4c:	f04f 0800 	mov.w	r8, #0
 8006a50:	f04f 0900 	mov.w	r9, #0
 8006a54:	460a      	mov	r2, r1
 8006a56:	9215      	str	r2, [sp, #84]	; 0x54
 8006a58:	7811      	ldrb	r1, [r2, #0]
 8006a5a:	292b      	cmp	r1, #43	; 0x2b
 8006a5c:	d04c      	beq.n	8006af8 <_strtod_l+0xc0>
 8006a5e:	d83a      	bhi.n	8006ad6 <_strtod_l+0x9e>
 8006a60:	290d      	cmp	r1, #13
 8006a62:	d834      	bhi.n	8006ace <_strtod_l+0x96>
 8006a64:	2908      	cmp	r1, #8
 8006a66:	d834      	bhi.n	8006ad2 <_strtod_l+0x9a>
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	d03d      	beq.n	8006ae8 <_strtod_l+0xb0>
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	920a      	str	r2, [sp, #40]	; 0x28
 8006a70:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006a72:	7832      	ldrb	r2, [r6, #0]
 8006a74:	2a30      	cmp	r2, #48	; 0x30
 8006a76:	f040 80b4 	bne.w	8006be2 <_strtod_l+0x1aa>
 8006a7a:	7872      	ldrb	r2, [r6, #1]
 8006a7c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006a80:	2a58      	cmp	r2, #88	; 0x58
 8006a82:	d170      	bne.n	8006b66 <_strtod_l+0x12e>
 8006a84:	9302      	str	r3, [sp, #8]
 8006a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	ab16      	add	r3, sp, #88	; 0x58
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	4a8e      	ldr	r2, [pc, #568]	; (8006cc8 <_strtod_l+0x290>)
 8006a90:	ab17      	add	r3, sp, #92	; 0x5c
 8006a92:	a915      	add	r1, sp, #84	; 0x54
 8006a94:	4620      	mov	r0, r4
 8006a96:	f001 f99f 	bl	8007dd8 <__gethex>
 8006a9a:	f010 070f 	ands.w	r7, r0, #15
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	d005      	beq.n	8006aae <_strtod_l+0x76>
 8006aa2:	2f06      	cmp	r7, #6
 8006aa4:	d12a      	bne.n	8006afc <_strtod_l+0xc4>
 8006aa6:	3601      	adds	r6, #1
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	9615      	str	r6, [sp, #84]	; 0x54
 8006aac:	930a      	str	r3, [sp, #40]	; 0x28
 8006aae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f040 857f 	bne.w	80075b4 <_strtod_l+0xb7c>
 8006ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab8:	b1db      	cbz	r3, 8006af2 <_strtod_l+0xba>
 8006aba:	4642      	mov	r2, r8
 8006abc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006ac0:	ec43 2b10 	vmov	d0, r2, r3
 8006ac4:	b01b      	add	sp, #108	; 0x6c
 8006ac6:	ecbd 8b02 	vpop	{d8}
 8006aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ace:	2920      	cmp	r1, #32
 8006ad0:	d1cc      	bne.n	8006a6c <_strtod_l+0x34>
 8006ad2:	3201      	adds	r2, #1
 8006ad4:	e7bf      	b.n	8006a56 <_strtod_l+0x1e>
 8006ad6:	292d      	cmp	r1, #45	; 0x2d
 8006ad8:	d1c8      	bne.n	8006a6c <_strtod_l+0x34>
 8006ada:	2101      	movs	r1, #1
 8006adc:	910a      	str	r1, [sp, #40]	; 0x28
 8006ade:	1c51      	adds	r1, r2, #1
 8006ae0:	9115      	str	r1, [sp, #84]	; 0x54
 8006ae2:	7852      	ldrb	r2, [r2, #1]
 8006ae4:	2a00      	cmp	r2, #0
 8006ae6:	d1c3      	bne.n	8006a70 <_strtod_l+0x38>
 8006ae8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006aea:	9515      	str	r5, [sp, #84]	; 0x54
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f040 855f 	bne.w	80075b0 <_strtod_l+0xb78>
 8006af2:	4642      	mov	r2, r8
 8006af4:	464b      	mov	r3, r9
 8006af6:	e7e3      	b.n	8006ac0 <_strtod_l+0x88>
 8006af8:	2100      	movs	r1, #0
 8006afa:	e7ef      	b.n	8006adc <_strtod_l+0xa4>
 8006afc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006afe:	b13a      	cbz	r2, 8006b10 <_strtod_l+0xd8>
 8006b00:	2135      	movs	r1, #53	; 0x35
 8006b02:	a818      	add	r0, sp, #96	; 0x60
 8006b04:	f002 f987 	bl	8008e16 <__copybits>
 8006b08:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f001 fd5a 	bl	80085c4 <_Bfree>
 8006b10:	3f01      	subs	r7, #1
 8006b12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b14:	2f04      	cmp	r7, #4
 8006b16:	d806      	bhi.n	8006b26 <_strtod_l+0xee>
 8006b18:	e8df f007 	tbb	[pc, r7]
 8006b1c:	201d0314 	.word	0x201d0314
 8006b20:	14          	.byte	0x14
 8006b21:	00          	.byte	0x00
 8006b22:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006b26:	05e9      	lsls	r1, r5, #23
 8006b28:	bf48      	it	mi
 8006b2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006b2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b32:	0d1b      	lsrs	r3, r3, #20
 8006b34:	051b      	lsls	r3, r3, #20
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1b9      	bne.n	8006aae <_strtod_l+0x76>
 8006b3a:	f001 f831 	bl	8007ba0 <__errno>
 8006b3e:	2322      	movs	r3, #34	; 0x22
 8006b40:	6003      	str	r3, [r0, #0]
 8006b42:	e7b4      	b.n	8006aae <_strtod_l+0x76>
 8006b44:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006b48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006b4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006b54:	e7e7      	b.n	8006b26 <_strtod_l+0xee>
 8006b56:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006cd0 <_strtod_l+0x298>
 8006b5a:	e7e4      	b.n	8006b26 <_strtod_l+0xee>
 8006b5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006b60:	f04f 38ff 	mov.w	r8, #4294967295
 8006b64:	e7df      	b.n	8006b26 <_strtod_l+0xee>
 8006b66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	9215      	str	r2, [sp, #84]	; 0x54
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	2b30      	cmp	r3, #48	; 0x30
 8006b70:	d0f9      	beq.n	8006b66 <_strtod_l+0x12e>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d09b      	beq.n	8006aae <_strtod_l+0x76>
 8006b76:	2301      	movs	r3, #1
 8006b78:	f04f 0a00 	mov.w	sl, #0
 8006b7c:	9304      	str	r3, [sp, #16]
 8006b7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b80:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b82:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006b86:	46d3      	mov	fp, sl
 8006b88:	220a      	movs	r2, #10
 8006b8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006b8c:	7806      	ldrb	r6, [r0, #0]
 8006b8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006b92:	b2d9      	uxtb	r1, r3
 8006b94:	2909      	cmp	r1, #9
 8006b96:	d926      	bls.n	8006be6 <_strtod_l+0x1ae>
 8006b98:	494c      	ldr	r1, [pc, #304]	; (8006ccc <_strtod_l+0x294>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f000 ff4b 	bl	8007a36 <strncmp>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d030      	beq.n	8006c06 <_strtod_l+0x1ce>
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	4632      	mov	r2, r6
 8006ba8:	9005      	str	r0, [sp, #20]
 8006baa:	465e      	mov	r6, fp
 8006bac:	4603      	mov	r3, r0
 8006bae:	2a65      	cmp	r2, #101	; 0x65
 8006bb0:	d001      	beq.n	8006bb6 <_strtod_l+0x17e>
 8006bb2:	2a45      	cmp	r2, #69	; 0x45
 8006bb4:	d113      	bne.n	8006bde <_strtod_l+0x1a6>
 8006bb6:	b91e      	cbnz	r6, 8006bc0 <_strtod_l+0x188>
 8006bb8:	9a04      	ldr	r2, [sp, #16]
 8006bba:	4302      	orrs	r2, r0
 8006bbc:	d094      	beq.n	8006ae8 <_strtod_l+0xb0>
 8006bbe:	2600      	movs	r6, #0
 8006bc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006bc2:	1c6a      	adds	r2, r5, #1
 8006bc4:	9215      	str	r2, [sp, #84]	; 0x54
 8006bc6:	786a      	ldrb	r2, [r5, #1]
 8006bc8:	2a2b      	cmp	r2, #43	; 0x2b
 8006bca:	d074      	beq.n	8006cb6 <_strtod_l+0x27e>
 8006bcc:	2a2d      	cmp	r2, #45	; 0x2d
 8006bce:	d078      	beq.n	8006cc2 <_strtod_l+0x28a>
 8006bd0:	f04f 0c00 	mov.w	ip, #0
 8006bd4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006bd8:	2909      	cmp	r1, #9
 8006bda:	d97f      	bls.n	8006cdc <_strtod_l+0x2a4>
 8006bdc:	9515      	str	r5, [sp, #84]	; 0x54
 8006bde:	2700      	movs	r7, #0
 8006be0:	e09e      	b.n	8006d20 <_strtod_l+0x2e8>
 8006be2:	2300      	movs	r3, #0
 8006be4:	e7c8      	b.n	8006b78 <_strtod_l+0x140>
 8006be6:	f1bb 0f08 	cmp.w	fp, #8
 8006bea:	bfd8      	it	le
 8006bec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006bee:	f100 0001 	add.w	r0, r0, #1
 8006bf2:	bfda      	itte	le
 8006bf4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006bf8:	9309      	strle	r3, [sp, #36]	; 0x24
 8006bfa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006bfe:	f10b 0b01 	add.w	fp, fp, #1
 8006c02:	9015      	str	r0, [sp, #84]	; 0x54
 8006c04:	e7c1      	b.n	8006b8a <_strtod_l+0x152>
 8006c06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	9215      	str	r2, [sp, #84]	; 0x54
 8006c0c:	785a      	ldrb	r2, [r3, #1]
 8006c0e:	f1bb 0f00 	cmp.w	fp, #0
 8006c12:	d037      	beq.n	8006c84 <_strtod_l+0x24c>
 8006c14:	9005      	str	r0, [sp, #20]
 8006c16:	465e      	mov	r6, fp
 8006c18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006c1c:	2b09      	cmp	r3, #9
 8006c1e:	d912      	bls.n	8006c46 <_strtod_l+0x20e>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e7c4      	b.n	8006bae <_strtod_l+0x176>
 8006c24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c26:	1c5a      	adds	r2, r3, #1
 8006c28:	9215      	str	r2, [sp, #84]	; 0x54
 8006c2a:	785a      	ldrb	r2, [r3, #1]
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	2a30      	cmp	r2, #48	; 0x30
 8006c30:	d0f8      	beq.n	8006c24 <_strtod_l+0x1ec>
 8006c32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006c36:	2b08      	cmp	r3, #8
 8006c38:	f200 84c1 	bhi.w	80075be <_strtod_l+0xb86>
 8006c3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c3e:	9005      	str	r0, [sp, #20]
 8006c40:	2000      	movs	r0, #0
 8006c42:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c44:	4606      	mov	r6, r0
 8006c46:	3a30      	subs	r2, #48	; 0x30
 8006c48:	f100 0301 	add.w	r3, r0, #1
 8006c4c:	d014      	beq.n	8006c78 <_strtod_l+0x240>
 8006c4e:	9905      	ldr	r1, [sp, #20]
 8006c50:	4419      	add	r1, r3
 8006c52:	9105      	str	r1, [sp, #20]
 8006c54:	4633      	mov	r3, r6
 8006c56:	eb00 0c06 	add.w	ip, r0, r6
 8006c5a:	210a      	movs	r1, #10
 8006c5c:	4563      	cmp	r3, ip
 8006c5e:	d113      	bne.n	8006c88 <_strtod_l+0x250>
 8006c60:	1833      	adds	r3, r6, r0
 8006c62:	2b08      	cmp	r3, #8
 8006c64:	f106 0601 	add.w	r6, r6, #1
 8006c68:	4406      	add	r6, r0
 8006c6a:	dc1a      	bgt.n	8006ca2 <_strtod_l+0x26a>
 8006c6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c6e:	230a      	movs	r3, #10
 8006c70:	fb03 2301 	mla	r3, r3, r1, r2
 8006c74:	9309      	str	r3, [sp, #36]	; 0x24
 8006c76:	2300      	movs	r3, #0
 8006c78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006c7a:	1c51      	adds	r1, r2, #1
 8006c7c:	9115      	str	r1, [sp, #84]	; 0x54
 8006c7e:	7852      	ldrb	r2, [r2, #1]
 8006c80:	4618      	mov	r0, r3
 8006c82:	e7c9      	b.n	8006c18 <_strtod_l+0x1e0>
 8006c84:	4658      	mov	r0, fp
 8006c86:	e7d2      	b.n	8006c2e <_strtod_l+0x1f6>
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	f103 0301 	add.w	r3, r3, #1
 8006c8e:	dc03      	bgt.n	8006c98 <_strtod_l+0x260>
 8006c90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006c92:	434f      	muls	r7, r1
 8006c94:	9709      	str	r7, [sp, #36]	; 0x24
 8006c96:	e7e1      	b.n	8006c5c <_strtod_l+0x224>
 8006c98:	2b10      	cmp	r3, #16
 8006c9a:	bfd8      	it	le
 8006c9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006ca0:	e7dc      	b.n	8006c5c <_strtod_l+0x224>
 8006ca2:	2e10      	cmp	r6, #16
 8006ca4:	bfdc      	itt	le
 8006ca6:	230a      	movle	r3, #10
 8006ca8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006cac:	e7e3      	b.n	8006c76 <_strtod_l+0x23e>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	9305      	str	r3, [sp, #20]
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e780      	b.n	8006bb8 <_strtod_l+0x180>
 8006cb6:	f04f 0c00 	mov.w	ip, #0
 8006cba:	1caa      	adds	r2, r5, #2
 8006cbc:	9215      	str	r2, [sp, #84]	; 0x54
 8006cbe:	78aa      	ldrb	r2, [r5, #2]
 8006cc0:	e788      	b.n	8006bd4 <_strtod_l+0x19c>
 8006cc2:	f04f 0c01 	mov.w	ip, #1
 8006cc6:	e7f8      	b.n	8006cba <_strtod_l+0x282>
 8006cc8:	08009fd4 	.word	0x08009fd4
 8006ccc:	08009fc3 	.word	0x08009fc3
 8006cd0:	7ff00000 	.word	0x7ff00000
 8006cd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006cd6:	1c51      	adds	r1, r2, #1
 8006cd8:	9115      	str	r1, [sp, #84]	; 0x54
 8006cda:	7852      	ldrb	r2, [r2, #1]
 8006cdc:	2a30      	cmp	r2, #48	; 0x30
 8006cde:	d0f9      	beq.n	8006cd4 <_strtod_l+0x29c>
 8006ce0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006ce4:	2908      	cmp	r1, #8
 8006ce6:	f63f af7a 	bhi.w	8006bde <_strtod_l+0x1a6>
 8006cea:	3a30      	subs	r2, #48	; 0x30
 8006cec:	9208      	str	r2, [sp, #32]
 8006cee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006cf0:	920c      	str	r2, [sp, #48]	; 0x30
 8006cf2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006cf4:	1c57      	adds	r7, r2, #1
 8006cf6:	9715      	str	r7, [sp, #84]	; 0x54
 8006cf8:	7852      	ldrb	r2, [r2, #1]
 8006cfa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006cfe:	f1be 0f09 	cmp.w	lr, #9
 8006d02:	d938      	bls.n	8006d76 <_strtod_l+0x33e>
 8006d04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d06:	1a7f      	subs	r7, r7, r1
 8006d08:	2f08      	cmp	r7, #8
 8006d0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006d0e:	dc03      	bgt.n	8006d18 <_strtod_l+0x2e0>
 8006d10:	9908      	ldr	r1, [sp, #32]
 8006d12:	428f      	cmp	r7, r1
 8006d14:	bfa8      	it	ge
 8006d16:	460f      	movge	r7, r1
 8006d18:	f1bc 0f00 	cmp.w	ip, #0
 8006d1c:	d000      	beq.n	8006d20 <_strtod_l+0x2e8>
 8006d1e:	427f      	negs	r7, r7
 8006d20:	2e00      	cmp	r6, #0
 8006d22:	d14f      	bne.n	8006dc4 <_strtod_l+0x38c>
 8006d24:	9904      	ldr	r1, [sp, #16]
 8006d26:	4301      	orrs	r1, r0
 8006d28:	f47f aec1 	bne.w	8006aae <_strtod_l+0x76>
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f47f aedb 	bne.w	8006ae8 <_strtod_l+0xb0>
 8006d32:	2a69      	cmp	r2, #105	; 0x69
 8006d34:	d029      	beq.n	8006d8a <_strtod_l+0x352>
 8006d36:	dc26      	bgt.n	8006d86 <_strtod_l+0x34e>
 8006d38:	2a49      	cmp	r2, #73	; 0x49
 8006d3a:	d026      	beq.n	8006d8a <_strtod_l+0x352>
 8006d3c:	2a4e      	cmp	r2, #78	; 0x4e
 8006d3e:	f47f aed3 	bne.w	8006ae8 <_strtod_l+0xb0>
 8006d42:	499b      	ldr	r1, [pc, #620]	; (8006fb0 <_strtod_l+0x578>)
 8006d44:	a815      	add	r0, sp, #84	; 0x54
 8006d46:	f001 fa87 	bl	8008258 <__match>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	f43f aecc 	beq.w	8006ae8 <_strtod_l+0xb0>
 8006d50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b28      	cmp	r3, #40	; 0x28
 8006d56:	d12f      	bne.n	8006db8 <_strtod_l+0x380>
 8006d58:	4996      	ldr	r1, [pc, #600]	; (8006fb4 <_strtod_l+0x57c>)
 8006d5a:	aa18      	add	r2, sp, #96	; 0x60
 8006d5c:	a815      	add	r0, sp, #84	; 0x54
 8006d5e:	f001 fa8f 	bl	8008280 <__hexnan>
 8006d62:	2805      	cmp	r0, #5
 8006d64:	d128      	bne.n	8006db8 <_strtod_l+0x380>
 8006d66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006d70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006d74:	e69b      	b.n	8006aae <_strtod_l+0x76>
 8006d76:	9f08      	ldr	r7, [sp, #32]
 8006d78:	210a      	movs	r1, #10
 8006d7a:	fb01 2107 	mla	r1, r1, r7, r2
 8006d7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006d82:	9208      	str	r2, [sp, #32]
 8006d84:	e7b5      	b.n	8006cf2 <_strtod_l+0x2ba>
 8006d86:	2a6e      	cmp	r2, #110	; 0x6e
 8006d88:	e7d9      	b.n	8006d3e <_strtod_l+0x306>
 8006d8a:	498b      	ldr	r1, [pc, #556]	; (8006fb8 <_strtod_l+0x580>)
 8006d8c:	a815      	add	r0, sp, #84	; 0x54
 8006d8e:	f001 fa63 	bl	8008258 <__match>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	f43f aea8 	beq.w	8006ae8 <_strtod_l+0xb0>
 8006d98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d9a:	4988      	ldr	r1, [pc, #544]	; (8006fbc <_strtod_l+0x584>)
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	a815      	add	r0, sp, #84	; 0x54
 8006da0:	9315      	str	r3, [sp, #84]	; 0x54
 8006da2:	f001 fa59 	bl	8008258 <__match>
 8006da6:	b910      	cbnz	r0, 8006dae <_strtod_l+0x376>
 8006da8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006daa:	3301      	adds	r3, #1
 8006dac:	9315      	str	r3, [sp, #84]	; 0x54
 8006dae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006fcc <_strtod_l+0x594>
 8006db2:	f04f 0800 	mov.w	r8, #0
 8006db6:	e67a      	b.n	8006aae <_strtod_l+0x76>
 8006db8:	4881      	ldr	r0, [pc, #516]	; (8006fc0 <_strtod_l+0x588>)
 8006dba:	f000 ff2d 	bl	8007c18 <nan>
 8006dbe:	ec59 8b10 	vmov	r8, r9, d0
 8006dc2:	e674      	b.n	8006aae <_strtod_l+0x76>
 8006dc4:	9b05      	ldr	r3, [sp, #20]
 8006dc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dc8:	1afb      	subs	r3, r7, r3
 8006dca:	f1bb 0f00 	cmp.w	fp, #0
 8006dce:	bf08      	it	eq
 8006dd0:	46b3      	moveq	fp, r6
 8006dd2:	2e10      	cmp	r6, #16
 8006dd4:	9308      	str	r3, [sp, #32]
 8006dd6:	4635      	mov	r5, r6
 8006dd8:	bfa8      	it	ge
 8006dda:	2510      	movge	r5, #16
 8006ddc:	f7f9 fb92 	bl	8000504 <__aeabi_ui2d>
 8006de0:	2e09      	cmp	r6, #9
 8006de2:	4680      	mov	r8, r0
 8006de4:	4689      	mov	r9, r1
 8006de6:	dd13      	ble.n	8006e10 <_strtod_l+0x3d8>
 8006de8:	4b76      	ldr	r3, [pc, #472]	; (8006fc4 <_strtod_l+0x58c>)
 8006dea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006dee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006df2:	f7f9 fc01 	bl	80005f8 <__aeabi_dmul>
 8006df6:	4680      	mov	r8, r0
 8006df8:	4650      	mov	r0, sl
 8006dfa:	4689      	mov	r9, r1
 8006dfc:	f7f9 fb82 	bl	8000504 <__aeabi_ui2d>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4640      	mov	r0, r8
 8006e06:	4649      	mov	r1, r9
 8006e08:	f7f9 fa40 	bl	800028c <__adddf3>
 8006e0c:	4680      	mov	r8, r0
 8006e0e:	4689      	mov	r9, r1
 8006e10:	2e0f      	cmp	r6, #15
 8006e12:	dc38      	bgt.n	8006e86 <_strtod_l+0x44e>
 8006e14:	9b08      	ldr	r3, [sp, #32]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f43f ae49 	beq.w	8006aae <_strtod_l+0x76>
 8006e1c:	dd24      	ble.n	8006e68 <_strtod_l+0x430>
 8006e1e:	2b16      	cmp	r3, #22
 8006e20:	dc0b      	bgt.n	8006e3a <_strtod_l+0x402>
 8006e22:	4968      	ldr	r1, [pc, #416]	; (8006fc4 <_strtod_l+0x58c>)
 8006e24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e2c:	4642      	mov	r2, r8
 8006e2e:	464b      	mov	r3, r9
 8006e30:	f7f9 fbe2 	bl	80005f8 <__aeabi_dmul>
 8006e34:	4680      	mov	r8, r0
 8006e36:	4689      	mov	r9, r1
 8006e38:	e639      	b.n	8006aae <_strtod_l+0x76>
 8006e3a:	9a08      	ldr	r2, [sp, #32]
 8006e3c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006e40:	4293      	cmp	r3, r2
 8006e42:	db20      	blt.n	8006e86 <_strtod_l+0x44e>
 8006e44:	4c5f      	ldr	r4, [pc, #380]	; (8006fc4 <_strtod_l+0x58c>)
 8006e46:	f1c6 060f 	rsb	r6, r6, #15
 8006e4a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006e4e:	4642      	mov	r2, r8
 8006e50:	464b      	mov	r3, r9
 8006e52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e56:	f7f9 fbcf 	bl	80005f8 <__aeabi_dmul>
 8006e5a:	9b08      	ldr	r3, [sp, #32]
 8006e5c:	1b9e      	subs	r6, r3, r6
 8006e5e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006e62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006e66:	e7e3      	b.n	8006e30 <_strtod_l+0x3f8>
 8006e68:	9b08      	ldr	r3, [sp, #32]
 8006e6a:	3316      	adds	r3, #22
 8006e6c:	db0b      	blt.n	8006e86 <_strtod_l+0x44e>
 8006e6e:	9b05      	ldr	r3, [sp, #20]
 8006e70:	1bdf      	subs	r7, r3, r7
 8006e72:	4b54      	ldr	r3, [pc, #336]	; (8006fc4 <_strtod_l+0x58c>)
 8006e74:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e7c:	4640      	mov	r0, r8
 8006e7e:	4649      	mov	r1, r9
 8006e80:	f7f9 fce4 	bl	800084c <__aeabi_ddiv>
 8006e84:	e7d6      	b.n	8006e34 <_strtod_l+0x3fc>
 8006e86:	9b08      	ldr	r3, [sp, #32]
 8006e88:	1b75      	subs	r5, r6, r5
 8006e8a:	441d      	add	r5, r3
 8006e8c:	2d00      	cmp	r5, #0
 8006e8e:	dd70      	ble.n	8006f72 <_strtod_l+0x53a>
 8006e90:	f015 030f 	ands.w	r3, r5, #15
 8006e94:	d00a      	beq.n	8006eac <_strtod_l+0x474>
 8006e96:	494b      	ldr	r1, [pc, #300]	; (8006fc4 <_strtod_l+0x58c>)
 8006e98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e9c:	4642      	mov	r2, r8
 8006e9e:	464b      	mov	r3, r9
 8006ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ea4:	f7f9 fba8 	bl	80005f8 <__aeabi_dmul>
 8006ea8:	4680      	mov	r8, r0
 8006eaa:	4689      	mov	r9, r1
 8006eac:	f035 050f 	bics.w	r5, r5, #15
 8006eb0:	d04d      	beq.n	8006f4e <_strtod_l+0x516>
 8006eb2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006eb6:	dd22      	ble.n	8006efe <_strtod_l+0x4c6>
 8006eb8:	2500      	movs	r5, #0
 8006eba:	46ab      	mov	fp, r5
 8006ebc:	9509      	str	r5, [sp, #36]	; 0x24
 8006ebe:	9505      	str	r5, [sp, #20]
 8006ec0:	2322      	movs	r3, #34	; 0x22
 8006ec2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006fcc <_strtod_l+0x594>
 8006ec6:	6023      	str	r3, [r4, #0]
 8006ec8:	f04f 0800 	mov.w	r8, #0
 8006ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f43f aded 	beq.w	8006aae <_strtod_l+0x76>
 8006ed4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f001 fb74 	bl	80085c4 <_Bfree>
 8006edc:	9905      	ldr	r1, [sp, #20]
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f001 fb70 	bl	80085c4 <_Bfree>
 8006ee4:	4659      	mov	r1, fp
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f001 fb6c 	bl	80085c4 <_Bfree>
 8006eec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f001 fb68 	bl	80085c4 <_Bfree>
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f001 fb64 	bl	80085c4 <_Bfree>
 8006efc:	e5d7      	b.n	8006aae <_strtod_l+0x76>
 8006efe:	4b32      	ldr	r3, [pc, #200]	; (8006fc8 <_strtod_l+0x590>)
 8006f00:	9304      	str	r3, [sp, #16]
 8006f02:	2300      	movs	r3, #0
 8006f04:	112d      	asrs	r5, r5, #4
 8006f06:	4640      	mov	r0, r8
 8006f08:	4649      	mov	r1, r9
 8006f0a:	469a      	mov	sl, r3
 8006f0c:	2d01      	cmp	r5, #1
 8006f0e:	dc21      	bgt.n	8006f54 <_strtod_l+0x51c>
 8006f10:	b10b      	cbz	r3, 8006f16 <_strtod_l+0x4de>
 8006f12:	4680      	mov	r8, r0
 8006f14:	4689      	mov	r9, r1
 8006f16:	492c      	ldr	r1, [pc, #176]	; (8006fc8 <_strtod_l+0x590>)
 8006f18:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006f1c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006f20:	4642      	mov	r2, r8
 8006f22:	464b      	mov	r3, r9
 8006f24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f28:	f7f9 fb66 	bl	80005f8 <__aeabi_dmul>
 8006f2c:	4b27      	ldr	r3, [pc, #156]	; (8006fcc <_strtod_l+0x594>)
 8006f2e:	460a      	mov	r2, r1
 8006f30:	400b      	ands	r3, r1
 8006f32:	4927      	ldr	r1, [pc, #156]	; (8006fd0 <_strtod_l+0x598>)
 8006f34:	428b      	cmp	r3, r1
 8006f36:	4680      	mov	r8, r0
 8006f38:	d8be      	bhi.n	8006eb8 <_strtod_l+0x480>
 8006f3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006f3e:	428b      	cmp	r3, r1
 8006f40:	bf86      	itte	hi
 8006f42:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006fd4 <_strtod_l+0x59c>
 8006f46:	f04f 38ff 	movhi.w	r8, #4294967295
 8006f4a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006f4e:	2300      	movs	r3, #0
 8006f50:	9304      	str	r3, [sp, #16]
 8006f52:	e07b      	b.n	800704c <_strtod_l+0x614>
 8006f54:	07ea      	lsls	r2, r5, #31
 8006f56:	d505      	bpl.n	8006f64 <_strtod_l+0x52c>
 8006f58:	9b04      	ldr	r3, [sp, #16]
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 fb4b 	bl	80005f8 <__aeabi_dmul>
 8006f62:	2301      	movs	r3, #1
 8006f64:	9a04      	ldr	r2, [sp, #16]
 8006f66:	3208      	adds	r2, #8
 8006f68:	f10a 0a01 	add.w	sl, sl, #1
 8006f6c:	106d      	asrs	r5, r5, #1
 8006f6e:	9204      	str	r2, [sp, #16]
 8006f70:	e7cc      	b.n	8006f0c <_strtod_l+0x4d4>
 8006f72:	d0ec      	beq.n	8006f4e <_strtod_l+0x516>
 8006f74:	426d      	negs	r5, r5
 8006f76:	f015 020f 	ands.w	r2, r5, #15
 8006f7a:	d00a      	beq.n	8006f92 <_strtod_l+0x55a>
 8006f7c:	4b11      	ldr	r3, [pc, #68]	; (8006fc4 <_strtod_l+0x58c>)
 8006f7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f82:	4640      	mov	r0, r8
 8006f84:	4649      	mov	r1, r9
 8006f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8a:	f7f9 fc5f 	bl	800084c <__aeabi_ddiv>
 8006f8e:	4680      	mov	r8, r0
 8006f90:	4689      	mov	r9, r1
 8006f92:	112d      	asrs	r5, r5, #4
 8006f94:	d0db      	beq.n	8006f4e <_strtod_l+0x516>
 8006f96:	2d1f      	cmp	r5, #31
 8006f98:	dd1e      	ble.n	8006fd8 <_strtod_l+0x5a0>
 8006f9a:	2500      	movs	r5, #0
 8006f9c:	46ab      	mov	fp, r5
 8006f9e:	9509      	str	r5, [sp, #36]	; 0x24
 8006fa0:	9505      	str	r5, [sp, #20]
 8006fa2:	2322      	movs	r3, #34	; 0x22
 8006fa4:	f04f 0800 	mov.w	r8, #0
 8006fa8:	f04f 0900 	mov.w	r9, #0
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	e78d      	b.n	8006ecc <_strtod_l+0x494>
 8006fb0:	08009fce 	.word	0x08009fce
 8006fb4:	08009fe8 	.word	0x08009fe8
 8006fb8:	08009fc5 	.word	0x08009fc5
 8006fbc:	08009fc8 	.word	0x08009fc8
 8006fc0:	0800a1c6 	.word	0x0800a1c6
 8006fc4:	0800a2c0 	.word	0x0800a2c0
 8006fc8:	0800a298 	.word	0x0800a298
 8006fcc:	7ff00000 	.word	0x7ff00000
 8006fd0:	7ca00000 	.word	0x7ca00000
 8006fd4:	7fefffff 	.word	0x7fefffff
 8006fd8:	f015 0310 	ands.w	r3, r5, #16
 8006fdc:	bf18      	it	ne
 8006fde:	236a      	movne	r3, #106	; 0x6a
 8006fe0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007384 <_strtod_l+0x94c>
 8006fe4:	9304      	str	r3, [sp, #16]
 8006fe6:	4640      	mov	r0, r8
 8006fe8:	4649      	mov	r1, r9
 8006fea:	2300      	movs	r3, #0
 8006fec:	07ea      	lsls	r2, r5, #31
 8006fee:	d504      	bpl.n	8006ffa <_strtod_l+0x5c2>
 8006ff0:	e9da 2300 	ldrd	r2, r3, [sl]
 8006ff4:	f7f9 fb00 	bl	80005f8 <__aeabi_dmul>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	106d      	asrs	r5, r5, #1
 8006ffc:	f10a 0a08 	add.w	sl, sl, #8
 8007000:	d1f4      	bne.n	8006fec <_strtod_l+0x5b4>
 8007002:	b10b      	cbz	r3, 8007008 <_strtod_l+0x5d0>
 8007004:	4680      	mov	r8, r0
 8007006:	4689      	mov	r9, r1
 8007008:	9b04      	ldr	r3, [sp, #16]
 800700a:	b1bb      	cbz	r3, 800703c <_strtod_l+0x604>
 800700c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007010:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007014:	2b00      	cmp	r3, #0
 8007016:	4649      	mov	r1, r9
 8007018:	dd10      	ble.n	800703c <_strtod_l+0x604>
 800701a:	2b1f      	cmp	r3, #31
 800701c:	f340 811e 	ble.w	800725c <_strtod_l+0x824>
 8007020:	2b34      	cmp	r3, #52	; 0x34
 8007022:	bfde      	ittt	le
 8007024:	f04f 33ff 	movle.w	r3, #4294967295
 8007028:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800702c:	4093      	lslle	r3, r2
 800702e:	f04f 0800 	mov.w	r8, #0
 8007032:	bfcc      	ite	gt
 8007034:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007038:	ea03 0901 	andle.w	r9, r3, r1
 800703c:	2200      	movs	r2, #0
 800703e:	2300      	movs	r3, #0
 8007040:	4640      	mov	r0, r8
 8007042:	4649      	mov	r1, r9
 8007044:	f7f9 fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 8007048:	2800      	cmp	r0, #0
 800704a:	d1a6      	bne.n	8006f9a <_strtod_l+0x562>
 800704c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007052:	4633      	mov	r3, r6
 8007054:	465a      	mov	r2, fp
 8007056:	4620      	mov	r0, r4
 8007058:	f001 fb1c 	bl	8008694 <__s2b>
 800705c:	9009      	str	r0, [sp, #36]	; 0x24
 800705e:	2800      	cmp	r0, #0
 8007060:	f43f af2a 	beq.w	8006eb8 <_strtod_l+0x480>
 8007064:	9a08      	ldr	r2, [sp, #32]
 8007066:	9b05      	ldr	r3, [sp, #20]
 8007068:	2a00      	cmp	r2, #0
 800706a:	eba3 0307 	sub.w	r3, r3, r7
 800706e:	bfa8      	it	ge
 8007070:	2300      	movge	r3, #0
 8007072:	930c      	str	r3, [sp, #48]	; 0x30
 8007074:	2500      	movs	r5, #0
 8007076:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800707a:	9312      	str	r3, [sp, #72]	; 0x48
 800707c:	46ab      	mov	fp, r5
 800707e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007080:	4620      	mov	r0, r4
 8007082:	6859      	ldr	r1, [r3, #4]
 8007084:	f001 fa5e 	bl	8008544 <_Balloc>
 8007088:	9005      	str	r0, [sp, #20]
 800708a:	2800      	cmp	r0, #0
 800708c:	f43f af18 	beq.w	8006ec0 <_strtod_l+0x488>
 8007090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	3202      	adds	r2, #2
 8007096:	f103 010c 	add.w	r1, r3, #12
 800709a:	0092      	lsls	r2, r2, #2
 800709c:	300c      	adds	r0, #12
 800709e:	f000 fdac 	bl	8007bfa <memcpy>
 80070a2:	ec49 8b10 	vmov	d0, r8, r9
 80070a6:	aa18      	add	r2, sp, #96	; 0x60
 80070a8:	a917      	add	r1, sp, #92	; 0x5c
 80070aa:	4620      	mov	r0, r4
 80070ac:	f001 fe26 	bl	8008cfc <__d2b>
 80070b0:	ec49 8b18 	vmov	d8, r8, r9
 80070b4:	9016      	str	r0, [sp, #88]	; 0x58
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f43f af02 	beq.w	8006ec0 <_strtod_l+0x488>
 80070bc:	2101      	movs	r1, #1
 80070be:	4620      	mov	r0, r4
 80070c0:	f001 fb80 	bl	80087c4 <__i2b>
 80070c4:	4683      	mov	fp, r0
 80070c6:	2800      	cmp	r0, #0
 80070c8:	f43f aefa 	beq.w	8006ec0 <_strtod_l+0x488>
 80070cc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80070ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80070d0:	2e00      	cmp	r6, #0
 80070d2:	bfab      	itete	ge
 80070d4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80070d6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80070d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80070da:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80070de:	bfac      	ite	ge
 80070e0:	eb06 0a03 	addge.w	sl, r6, r3
 80070e4:	1b9f      	sublt	r7, r3, r6
 80070e6:	9b04      	ldr	r3, [sp, #16]
 80070e8:	1af6      	subs	r6, r6, r3
 80070ea:	4416      	add	r6, r2
 80070ec:	4ba0      	ldr	r3, [pc, #640]	; (8007370 <_strtod_l+0x938>)
 80070ee:	3e01      	subs	r6, #1
 80070f0:	429e      	cmp	r6, r3
 80070f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80070f6:	f280 80c4 	bge.w	8007282 <_strtod_l+0x84a>
 80070fa:	1b9b      	subs	r3, r3, r6
 80070fc:	2b1f      	cmp	r3, #31
 80070fe:	eba2 0203 	sub.w	r2, r2, r3
 8007102:	f04f 0101 	mov.w	r1, #1
 8007106:	f300 80b0 	bgt.w	800726a <_strtod_l+0x832>
 800710a:	fa01 f303 	lsl.w	r3, r1, r3
 800710e:	930e      	str	r3, [sp, #56]	; 0x38
 8007110:	2300      	movs	r3, #0
 8007112:	930d      	str	r3, [sp, #52]	; 0x34
 8007114:	eb0a 0602 	add.w	r6, sl, r2
 8007118:	9b04      	ldr	r3, [sp, #16]
 800711a:	45b2      	cmp	sl, r6
 800711c:	4417      	add	r7, r2
 800711e:	441f      	add	r7, r3
 8007120:	4653      	mov	r3, sl
 8007122:	bfa8      	it	ge
 8007124:	4633      	movge	r3, r6
 8007126:	42bb      	cmp	r3, r7
 8007128:	bfa8      	it	ge
 800712a:	463b      	movge	r3, r7
 800712c:	2b00      	cmp	r3, #0
 800712e:	bfc2      	ittt	gt
 8007130:	1af6      	subgt	r6, r6, r3
 8007132:	1aff      	subgt	r7, r7, r3
 8007134:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800713a:	2b00      	cmp	r3, #0
 800713c:	dd17      	ble.n	800716e <_strtod_l+0x736>
 800713e:	4659      	mov	r1, fp
 8007140:	461a      	mov	r2, r3
 8007142:	4620      	mov	r0, r4
 8007144:	f001 fbfe 	bl	8008944 <__pow5mult>
 8007148:	4683      	mov	fp, r0
 800714a:	2800      	cmp	r0, #0
 800714c:	f43f aeb8 	beq.w	8006ec0 <_strtod_l+0x488>
 8007150:	4601      	mov	r1, r0
 8007152:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007154:	4620      	mov	r0, r4
 8007156:	f001 fb4b 	bl	80087f0 <__multiply>
 800715a:	900b      	str	r0, [sp, #44]	; 0x2c
 800715c:	2800      	cmp	r0, #0
 800715e:	f43f aeaf 	beq.w	8006ec0 <_strtod_l+0x488>
 8007162:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007164:	4620      	mov	r0, r4
 8007166:	f001 fa2d 	bl	80085c4 <_Bfree>
 800716a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800716c:	9316      	str	r3, [sp, #88]	; 0x58
 800716e:	2e00      	cmp	r6, #0
 8007170:	f300 808c 	bgt.w	800728c <_strtod_l+0x854>
 8007174:	9b08      	ldr	r3, [sp, #32]
 8007176:	2b00      	cmp	r3, #0
 8007178:	dd08      	ble.n	800718c <_strtod_l+0x754>
 800717a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800717c:	9905      	ldr	r1, [sp, #20]
 800717e:	4620      	mov	r0, r4
 8007180:	f001 fbe0 	bl	8008944 <__pow5mult>
 8007184:	9005      	str	r0, [sp, #20]
 8007186:	2800      	cmp	r0, #0
 8007188:	f43f ae9a 	beq.w	8006ec0 <_strtod_l+0x488>
 800718c:	2f00      	cmp	r7, #0
 800718e:	dd08      	ble.n	80071a2 <_strtod_l+0x76a>
 8007190:	9905      	ldr	r1, [sp, #20]
 8007192:	463a      	mov	r2, r7
 8007194:	4620      	mov	r0, r4
 8007196:	f001 fc2f 	bl	80089f8 <__lshift>
 800719a:	9005      	str	r0, [sp, #20]
 800719c:	2800      	cmp	r0, #0
 800719e:	f43f ae8f 	beq.w	8006ec0 <_strtod_l+0x488>
 80071a2:	f1ba 0f00 	cmp.w	sl, #0
 80071a6:	dd08      	ble.n	80071ba <_strtod_l+0x782>
 80071a8:	4659      	mov	r1, fp
 80071aa:	4652      	mov	r2, sl
 80071ac:	4620      	mov	r0, r4
 80071ae:	f001 fc23 	bl	80089f8 <__lshift>
 80071b2:	4683      	mov	fp, r0
 80071b4:	2800      	cmp	r0, #0
 80071b6:	f43f ae83 	beq.w	8006ec0 <_strtod_l+0x488>
 80071ba:	9a05      	ldr	r2, [sp, #20]
 80071bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80071be:	4620      	mov	r0, r4
 80071c0:	f001 fca2 	bl	8008b08 <__mdiff>
 80071c4:	4605      	mov	r5, r0
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f43f ae7a 	beq.w	8006ec0 <_strtod_l+0x488>
 80071cc:	68c3      	ldr	r3, [r0, #12]
 80071ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80071d0:	2300      	movs	r3, #0
 80071d2:	60c3      	str	r3, [r0, #12]
 80071d4:	4659      	mov	r1, fp
 80071d6:	f001 fc7b 	bl	8008ad0 <__mcmp>
 80071da:	2800      	cmp	r0, #0
 80071dc:	da60      	bge.n	80072a0 <_strtod_l+0x868>
 80071de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071e0:	ea53 0308 	orrs.w	r3, r3, r8
 80071e4:	f040 8084 	bne.w	80072f0 <_strtod_l+0x8b8>
 80071e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d17f      	bne.n	80072f0 <_strtod_l+0x8b8>
 80071f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071f4:	0d1b      	lsrs	r3, r3, #20
 80071f6:	051b      	lsls	r3, r3, #20
 80071f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80071fc:	d978      	bls.n	80072f0 <_strtod_l+0x8b8>
 80071fe:	696b      	ldr	r3, [r5, #20]
 8007200:	b913      	cbnz	r3, 8007208 <_strtod_l+0x7d0>
 8007202:	692b      	ldr	r3, [r5, #16]
 8007204:	2b01      	cmp	r3, #1
 8007206:	dd73      	ble.n	80072f0 <_strtod_l+0x8b8>
 8007208:	4629      	mov	r1, r5
 800720a:	2201      	movs	r2, #1
 800720c:	4620      	mov	r0, r4
 800720e:	f001 fbf3 	bl	80089f8 <__lshift>
 8007212:	4659      	mov	r1, fp
 8007214:	4605      	mov	r5, r0
 8007216:	f001 fc5b 	bl	8008ad0 <__mcmp>
 800721a:	2800      	cmp	r0, #0
 800721c:	dd68      	ble.n	80072f0 <_strtod_l+0x8b8>
 800721e:	9904      	ldr	r1, [sp, #16]
 8007220:	4a54      	ldr	r2, [pc, #336]	; (8007374 <_strtod_l+0x93c>)
 8007222:	464b      	mov	r3, r9
 8007224:	2900      	cmp	r1, #0
 8007226:	f000 8084 	beq.w	8007332 <_strtod_l+0x8fa>
 800722a:	ea02 0109 	and.w	r1, r2, r9
 800722e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007232:	dc7e      	bgt.n	8007332 <_strtod_l+0x8fa>
 8007234:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007238:	f77f aeb3 	ble.w	8006fa2 <_strtod_l+0x56a>
 800723c:	4b4e      	ldr	r3, [pc, #312]	; (8007378 <_strtod_l+0x940>)
 800723e:	4640      	mov	r0, r8
 8007240:	4649      	mov	r1, r9
 8007242:	2200      	movs	r2, #0
 8007244:	f7f9 f9d8 	bl	80005f8 <__aeabi_dmul>
 8007248:	4b4a      	ldr	r3, [pc, #296]	; (8007374 <_strtod_l+0x93c>)
 800724a:	400b      	ands	r3, r1
 800724c:	4680      	mov	r8, r0
 800724e:	4689      	mov	r9, r1
 8007250:	2b00      	cmp	r3, #0
 8007252:	f47f ae3f 	bne.w	8006ed4 <_strtod_l+0x49c>
 8007256:	2322      	movs	r3, #34	; 0x22
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	e63b      	b.n	8006ed4 <_strtod_l+0x49c>
 800725c:	f04f 32ff 	mov.w	r2, #4294967295
 8007260:	fa02 f303 	lsl.w	r3, r2, r3
 8007264:	ea03 0808 	and.w	r8, r3, r8
 8007268:	e6e8      	b.n	800703c <_strtod_l+0x604>
 800726a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800726e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007272:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007276:	36e2      	adds	r6, #226	; 0xe2
 8007278:	fa01 f306 	lsl.w	r3, r1, r6
 800727c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007280:	e748      	b.n	8007114 <_strtod_l+0x6dc>
 8007282:	2100      	movs	r1, #0
 8007284:	2301      	movs	r3, #1
 8007286:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800728a:	e743      	b.n	8007114 <_strtod_l+0x6dc>
 800728c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800728e:	4632      	mov	r2, r6
 8007290:	4620      	mov	r0, r4
 8007292:	f001 fbb1 	bl	80089f8 <__lshift>
 8007296:	9016      	str	r0, [sp, #88]	; 0x58
 8007298:	2800      	cmp	r0, #0
 800729a:	f47f af6b 	bne.w	8007174 <_strtod_l+0x73c>
 800729e:	e60f      	b.n	8006ec0 <_strtod_l+0x488>
 80072a0:	46ca      	mov	sl, r9
 80072a2:	d171      	bne.n	8007388 <_strtod_l+0x950>
 80072a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072aa:	b352      	cbz	r2, 8007302 <_strtod_l+0x8ca>
 80072ac:	4a33      	ldr	r2, [pc, #204]	; (800737c <_strtod_l+0x944>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d12a      	bne.n	8007308 <_strtod_l+0x8d0>
 80072b2:	9b04      	ldr	r3, [sp, #16]
 80072b4:	4641      	mov	r1, r8
 80072b6:	b1fb      	cbz	r3, 80072f8 <_strtod_l+0x8c0>
 80072b8:	4b2e      	ldr	r3, [pc, #184]	; (8007374 <_strtod_l+0x93c>)
 80072ba:	ea09 0303 	and.w	r3, r9, r3
 80072be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80072c2:	f04f 32ff 	mov.w	r2, #4294967295
 80072c6:	d81a      	bhi.n	80072fe <_strtod_l+0x8c6>
 80072c8:	0d1b      	lsrs	r3, r3, #20
 80072ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072ce:	fa02 f303 	lsl.w	r3, r2, r3
 80072d2:	4299      	cmp	r1, r3
 80072d4:	d118      	bne.n	8007308 <_strtod_l+0x8d0>
 80072d6:	4b2a      	ldr	r3, [pc, #168]	; (8007380 <_strtod_l+0x948>)
 80072d8:	459a      	cmp	sl, r3
 80072da:	d102      	bne.n	80072e2 <_strtod_l+0x8aa>
 80072dc:	3101      	adds	r1, #1
 80072de:	f43f adef 	beq.w	8006ec0 <_strtod_l+0x488>
 80072e2:	4b24      	ldr	r3, [pc, #144]	; (8007374 <_strtod_l+0x93c>)
 80072e4:	ea0a 0303 	and.w	r3, sl, r3
 80072e8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80072ec:	f04f 0800 	mov.w	r8, #0
 80072f0:	9b04      	ldr	r3, [sp, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1a2      	bne.n	800723c <_strtod_l+0x804>
 80072f6:	e5ed      	b.n	8006ed4 <_strtod_l+0x49c>
 80072f8:	f04f 33ff 	mov.w	r3, #4294967295
 80072fc:	e7e9      	b.n	80072d2 <_strtod_l+0x89a>
 80072fe:	4613      	mov	r3, r2
 8007300:	e7e7      	b.n	80072d2 <_strtod_l+0x89a>
 8007302:	ea53 0308 	orrs.w	r3, r3, r8
 8007306:	d08a      	beq.n	800721e <_strtod_l+0x7e6>
 8007308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800730a:	b1e3      	cbz	r3, 8007346 <_strtod_l+0x90e>
 800730c:	ea13 0f0a 	tst.w	r3, sl
 8007310:	d0ee      	beq.n	80072f0 <_strtod_l+0x8b8>
 8007312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007314:	9a04      	ldr	r2, [sp, #16]
 8007316:	4640      	mov	r0, r8
 8007318:	4649      	mov	r1, r9
 800731a:	b1c3      	cbz	r3, 800734e <_strtod_l+0x916>
 800731c:	f7ff fb6e 	bl	80069fc <sulp>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	ec51 0b18 	vmov	r0, r1, d8
 8007328:	f7f8 ffb0 	bl	800028c <__adddf3>
 800732c:	4680      	mov	r8, r0
 800732e:	4689      	mov	r9, r1
 8007330:	e7de      	b.n	80072f0 <_strtod_l+0x8b8>
 8007332:	4013      	ands	r3, r2
 8007334:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007338:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800733c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007340:	f04f 38ff 	mov.w	r8, #4294967295
 8007344:	e7d4      	b.n	80072f0 <_strtod_l+0x8b8>
 8007346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007348:	ea13 0f08 	tst.w	r3, r8
 800734c:	e7e0      	b.n	8007310 <_strtod_l+0x8d8>
 800734e:	f7ff fb55 	bl	80069fc <sulp>
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	ec51 0b18 	vmov	r0, r1, d8
 800735a:	f7f8 ff95 	bl	8000288 <__aeabi_dsub>
 800735e:	2200      	movs	r2, #0
 8007360:	2300      	movs	r3, #0
 8007362:	4680      	mov	r8, r0
 8007364:	4689      	mov	r9, r1
 8007366:	f7f9 fbaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800736a:	2800      	cmp	r0, #0
 800736c:	d0c0      	beq.n	80072f0 <_strtod_l+0x8b8>
 800736e:	e618      	b.n	8006fa2 <_strtod_l+0x56a>
 8007370:	fffffc02 	.word	0xfffffc02
 8007374:	7ff00000 	.word	0x7ff00000
 8007378:	39500000 	.word	0x39500000
 800737c:	000fffff 	.word	0x000fffff
 8007380:	7fefffff 	.word	0x7fefffff
 8007384:	0800a000 	.word	0x0800a000
 8007388:	4659      	mov	r1, fp
 800738a:	4628      	mov	r0, r5
 800738c:	f001 fd10 	bl	8008db0 <__ratio>
 8007390:	ec57 6b10 	vmov	r6, r7, d0
 8007394:	ee10 0a10 	vmov	r0, s0
 8007398:	2200      	movs	r2, #0
 800739a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800739e:	4639      	mov	r1, r7
 80073a0:	f7f9 fba6 	bl	8000af0 <__aeabi_dcmple>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d071      	beq.n	800748c <_strtod_l+0xa54>
 80073a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d17c      	bne.n	80074a8 <_strtod_l+0xa70>
 80073ae:	f1b8 0f00 	cmp.w	r8, #0
 80073b2:	d15a      	bne.n	800746a <_strtod_l+0xa32>
 80073b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d15d      	bne.n	8007478 <_strtod_l+0xa40>
 80073bc:	4b90      	ldr	r3, [pc, #576]	; (8007600 <_strtod_l+0xbc8>)
 80073be:	2200      	movs	r2, #0
 80073c0:	4630      	mov	r0, r6
 80073c2:	4639      	mov	r1, r7
 80073c4:	f7f9 fb8a 	bl	8000adc <__aeabi_dcmplt>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d15c      	bne.n	8007486 <_strtod_l+0xa4e>
 80073cc:	4630      	mov	r0, r6
 80073ce:	4639      	mov	r1, r7
 80073d0:	4b8c      	ldr	r3, [pc, #560]	; (8007604 <_strtod_l+0xbcc>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	f7f9 f910 	bl	80005f8 <__aeabi_dmul>
 80073d8:	4606      	mov	r6, r0
 80073da:	460f      	mov	r7, r1
 80073dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80073e0:	9606      	str	r6, [sp, #24]
 80073e2:	9307      	str	r3, [sp, #28]
 80073e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80073ec:	4b86      	ldr	r3, [pc, #536]	; (8007608 <_strtod_l+0xbd0>)
 80073ee:	ea0a 0303 	and.w	r3, sl, r3
 80073f2:	930d      	str	r3, [sp, #52]	; 0x34
 80073f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073f6:	4b85      	ldr	r3, [pc, #532]	; (800760c <_strtod_l+0xbd4>)
 80073f8:	429a      	cmp	r2, r3
 80073fa:	f040 8090 	bne.w	800751e <_strtod_l+0xae6>
 80073fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007402:	ec49 8b10 	vmov	d0, r8, r9
 8007406:	f001 fc09 	bl	8008c1c <__ulp>
 800740a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800740e:	ec51 0b10 	vmov	r0, r1, d0
 8007412:	f7f9 f8f1 	bl	80005f8 <__aeabi_dmul>
 8007416:	4642      	mov	r2, r8
 8007418:	464b      	mov	r3, r9
 800741a:	f7f8 ff37 	bl	800028c <__adddf3>
 800741e:	460b      	mov	r3, r1
 8007420:	4979      	ldr	r1, [pc, #484]	; (8007608 <_strtod_l+0xbd0>)
 8007422:	4a7b      	ldr	r2, [pc, #492]	; (8007610 <_strtod_l+0xbd8>)
 8007424:	4019      	ands	r1, r3
 8007426:	4291      	cmp	r1, r2
 8007428:	4680      	mov	r8, r0
 800742a:	d944      	bls.n	80074b6 <_strtod_l+0xa7e>
 800742c:	ee18 2a90 	vmov	r2, s17
 8007430:	4b78      	ldr	r3, [pc, #480]	; (8007614 <_strtod_l+0xbdc>)
 8007432:	429a      	cmp	r2, r3
 8007434:	d104      	bne.n	8007440 <_strtod_l+0xa08>
 8007436:	ee18 3a10 	vmov	r3, s16
 800743a:	3301      	adds	r3, #1
 800743c:	f43f ad40 	beq.w	8006ec0 <_strtod_l+0x488>
 8007440:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007614 <_strtod_l+0xbdc>
 8007444:	f04f 38ff 	mov.w	r8, #4294967295
 8007448:	9916      	ldr	r1, [sp, #88]	; 0x58
 800744a:	4620      	mov	r0, r4
 800744c:	f001 f8ba 	bl	80085c4 <_Bfree>
 8007450:	9905      	ldr	r1, [sp, #20]
 8007452:	4620      	mov	r0, r4
 8007454:	f001 f8b6 	bl	80085c4 <_Bfree>
 8007458:	4659      	mov	r1, fp
 800745a:	4620      	mov	r0, r4
 800745c:	f001 f8b2 	bl	80085c4 <_Bfree>
 8007460:	4629      	mov	r1, r5
 8007462:	4620      	mov	r0, r4
 8007464:	f001 f8ae 	bl	80085c4 <_Bfree>
 8007468:	e609      	b.n	800707e <_strtod_l+0x646>
 800746a:	f1b8 0f01 	cmp.w	r8, #1
 800746e:	d103      	bne.n	8007478 <_strtod_l+0xa40>
 8007470:	f1b9 0f00 	cmp.w	r9, #0
 8007474:	f43f ad95 	beq.w	8006fa2 <_strtod_l+0x56a>
 8007478:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80075d0 <_strtod_l+0xb98>
 800747c:	4f60      	ldr	r7, [pc, #384]	; (8007600 <_strtod_l+0xbc8>)
 800747e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007482:	2600      	movs	r6, #0
 8007484:	e7ae      	b.n	80073e4 <_strtod_l+0x9ac>
 8007486:	4f5f      	ldr	r7, [pc, #380]	; (8007604 <_strtod_l+0xbcc>)
 8007488:	2600      	movs	r6, #0
 800748a:	e7a7      	b.n	80073dc <_strtod_l+0x9a4>
 800748c:	4b5d      	ldr	r3, [pc, #372]	; (8007604 <_strtod_l+0xbcc>)
 800748e:	4630      	mov	r0, r6
 8007490:	4639      	mov	r1, r7
 8007492:	2200      	movs	r2, #0
 8007494:	f7f9 f8b0 	bl	80005f8 <__aeabi_dmul>
 8007498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800749a:	4606      	mov	r6, r0
 800749c:	460f      	mov	r7, r1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d09c      	beq.n	80073dc <_strtod_l+0x9a4>
 80074a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80074a6:	e79d      	b.n	80073e4 <_strtod_l+0x9ac>
 80074a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80075d8 <_strtod_l+0xba0>
 80074ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80074b0:	ec57 6b17 	vmov	r6, r7, d7
 80074b4:	e796      	b.n	80073e4 <_strtod_l+0x9ac>
 80074b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80074ba:	9b04      	ldr	r3, [sp, #16]
 80074bc:	46ca      	mov	sl, r9
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1c2      	bne.n	8007448 <_strtod_l+0xa10>
 80074c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074c8:	0d1b      	lsrs	r3, r3, #20
 80074ca:	051b      	lsls	r3, r3, #20
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d1bb      	bne.n	8007448 <_strtod_l+0xa10>
 80074d0:	4630      	mov	r0, r6
 80074d2:	4639      	mov	r1, r7
 80074d4:	f7f9 fbc8 	bl	8000c68 <__aeabi_d2lz>
 80074d8:	f7f9 f860 	bl	800059c <__aeabi_l2d>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	4630      	mov	r0, r6
 80074e2:	4639      	mov	r1, r7
 80074e4:	f7f8 fed0 	bl	8000288 <__aeabi_dsub>
 80074e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074ee:	ea43 0308 	orr.w	r3, r3, r8
 80074f2:	4313      	orrs	r3, r2
 80074f4:	4606      	mov	r6, r0
 80074f6:	460f      	mov	r7, r1
 80074f8:	d054      	beq.n	80075a4 <_strtod_l+0xb6c>
 80074fa:	a339      	add	r3, pc, #228	; (adr r3, 80075e0 <_strtod_l+0xba8>)
 80074fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007500:	f7f9 faec 	bl	8000adc <__aeabi_dcmplt>
 8007504:	2800      	cmp	r0, #0
 8007506:	f47f ace5 	bne.w	8006ed4 <_strtod_l+0x49c>
 800750a:	a337      	add	r3, pc, #220	; (adr r3, 80075e8 <_strtod_l+0xbb0>)
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	4630      	mov	r0, r6
 8007512:	4639      	mov	r1, r7
 8007514:	f7f9 fb00 	bl	8000b18 <__aeabi_dcmpgt>
 8007518:	2800      	cmp	r0, #0
 800751a:	d095      	beq.n	8007448 <_strtod_l+0xa10>
 800751c:	e4da      	b.n	8006ed4 <_strtod_l+0x49c>
 800751e:	9b04      	ldr	r3, [sp, #16]
 8007520:	b333      	cbz	r3, 8007570 <_strtod_l+0xb38>
 8007522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007524:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007528:	d822      	bhi.n	8007570 <_strtod_l+0xb38>
 800752a:	a331      	add	r3, pc, #196	; (adr r3, 80075f0 <_strtod_l+0xbb8>)
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	4630      	mov	r0, r6
 8007532:	4639      	mov	r1, r7
 8007534:	f7f9 fadc 	bl	8000af0 <__aeabi_dcmple>
 8007538:	b1a0      	cbz	r0, 8007564 <_strtod_l+0xb2c>
 800753a:	4639      	mov	r1, r7
 800753c:	4630      	mov	r0, r6
 800753e:	f7f9 fb0b 	bl	8000b58 <__aeabi_d2uiz>
 8007542:	2801      	cmp	r0, #1
 8007544:	bf38      	it	cc
 8007546:	2001      	movcc	r0, #1
 8007548:	f7f8 ffdc 	bl	8000504 <__aeabi_ui2d>
 800754c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800754e:	4606      	mov	r6, r0
 8007550:	460f      	mov	r7, r1
 8007552:	bb23      	cbnz	r3, 800759e <_strtod_l+0xb66>
 8007554:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007558:	9010      	str	r0, [sp, #64]	; 0x40
 800755a:	9311      	str	r3, [sp, #68]	; 0x44
 800755c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007560:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007566:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007568:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800756c:	1a9b      	subs	r3, r3, r2
 800756e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007570:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007574:	eeb0 0a48 	vmov.f32	s0, s16
 8007578:	eef0 0a68 	vmov.f32	s1, s17
 800757c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007580:	f001 fb4c 	bl	8008c1c <__ulp>
 8007584:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007588:	ec53 2b10 	vmov	r2, r3, d0
 800758c:	f7f9 f834 	bl	80005f8 <__aeabi_dmul>
 8007590:	ec53 2b18 	vmov	r2, r3, d8
 8007594:	f7f8 fe7a 	bl	800028c <__adddf3>
 8007598:	4680      	mov	r8, r0
 800759a:	4689      	mov	r9, r1
 800759c:	e78d      	b.n	80074ba <_strtod_l+0xa82>
 800759e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80075a2:	e7db      	b.n	800755c <_strtod_l+0xb24>
 80075a4:	a314      	add	r3, pc, #80	; (adr r3, 80075f8 <_strtod_l+0xbc0>)
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	f7f9 fa97 	bl	8000adc <__aeabi_dcmplt>
 80075ae:	e7b3      	b.n	8007518 <_strtod_l+0xae0>
 80075b0:	2300      	movs	r3, #0
 80075b2:	930a      	str	r3, [sp, #40]	; 0x28
 80075b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80075b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	f7ff ba7c 	b.w	8006ab6 <_strtod_l+0x7e>
 80075be:	2a65      	cmp	r2, #101	; 0x65
 80075c0:	f43f ab75 	beq.w	8006cae <_strtod_l+0x276>
 80075c4:	2a45      	cmp	r2, #69	; 0x45
 80075c6:	f43f ab72 	beq.w	8006cae <_strtod_l+0x276>
 80075ca:	2301      	movs	r3, #1
 80075cc:	f7ff bbaa 	b.w	8006d24 <_strtod_l+0x2ec>
 80075d0:	00000000 	.word	0x00000000
 80075d4:	bff00000 	.word	0xbff00000
 80075d8:	00000000 	.word	0x00000000
 80075dc:	3ff00000 	.word	0x3ff00000
 80075e0:	94a03595 	.word	0x94a03595
 80075e4:	3fdfffff 	.word	0x3fdfffff
 80075e8:	35afe535 	.word	0x35afe535
 80075ec:	3fe00000 	.word	0x3fe00000
 80075f0:	ffc00000 	.word	0xffc00000
 80075f4:	41dfffff 	.word	0x41dfffff
 80075f8:	94a03595 	.word	0x94a03595
 80075fc:	3fcfffff 	.word	0x3fcfffff
 8007600:	3ff00000 	.word	0x3ff00000
 8007604:	3fe00000 	.word	0x3fe00000
 8007608:	7ff00000 	.word	0x7ff00000
 800760c:	7fe00000 	.word	0x7fe00000
 8007610:	7c9fffff 	.word	0x7c9fffff
 8007614:	7fefffff 	.word	0x7fefffff

08007618 <strtof>:
 8007618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800761c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80076e0 <strtof+0xc8>
 8007620:	4b2a      	ldr	r3, [pc, #168]	; (80076cc <strtof+0xb4>)
 8007622:	460a      	mov	r2, r1
 8007624:	ed2d 8b02 	vpush	{d8}
 8007628:	4601      	mov	r1, r0
 800762a:	f8d8 0000 	ldr.w	r0, [r8]
 800762e:	f7ff fa03 	bl	8006a38 <_strtod_l>
 8007632:	ec55 4b10 	vmov	r4, r5, d0
 8007636:	ee10 2a10 	vmov	r2, s0
 800763a:	ee10 0a10 	vmov	r0, s0
 800763e:	462b      	mov	r3, r5
 8007640:	4629      	mov	r1, r5
 8007642:	f7f9 fa73 	bl	8000b2c <__aeabi_dcmpun>
 8007646:	b190      	cbz	r0, 800766e <strtof+0x56>
 8007648:	2d00      	cmp	r5, #0
 800764a:	4821      	ldr	r0, [pc, #132]	; (80076d0 <strtof+0xb8>)
 800764c:	da09      	bge.n	8007662 <strtof+0x4a>
 800764e:	f000 faeb 	bl	8007c28 <nanf>
 8007652:	eeb1 8a40 	vneg.f32	s16, s0
 8007656:	eeb0 0a48 	vmov.f32	s0, s16
 800765a:	ecbd 8b02 	vpop	{d8}
 800765e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007662:	ecbd 8b02 	vpop	{d8}
 8007666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800766a:	f000 badd 	b.w	8007c28 <nanf>
 800766e:	4620      	mov	r0, r4
 8007670:	4629      	mov	r1, r5
 8007672:	f7f9 fa91 	bl	8000b98 <__aeabi_d2f>
 8007676:	ee08 0a10 	vmov	s16, r0
 800767a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80076d4 <strtof+0xbc>
 800767e:	eeb0 7ac8 	vabs.f32	s14, s16
 8007682:	eeb4 7a67 	vcmp.f32	s14, s15
 8007686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800768a:	dd11      	ble.n	80076b0 <strtof+0x98>
 800768c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8007690:	4b11      	ldr	r3, [pc, #68]	; (80076d8 <strtof+0xc0>)
 8007692:	f04f 32ff 	mov.w	r2, #4294967295
 8007696:	4620      	mov	r0, r4
 8007698:	4639      	mov	r1, r7
 800769a:	f7f9 fa47 	bl	8000b2c <__aeabi_dcmpun>
 800769e:	b980      	cbnz	r0, 80076c2 <strtof+0xaa>
 80076a0:	4b0d      	ldr	r3, [pc, #52]	; (80076d8 <strtof+0xc0>)
 80076a2:	f04f 32ff 	mov.w	r2, #4294967295
 80076a6:	4620      	mov	r0, r4
 80076a8:	4639      	mov	r1, r7
 80076aa:	f7f9 fa21 	bl	8000af0 <__aeabi_dcmple>
 80076ae:	b940      	cbnz	r0, 80076c2 <strtof+0xaa>
 80076b0:	ee18 3a10 	vmov	r3, s16
 80076b4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80076b8:	d1cd      	bne.n	8007656 <strtof+0x3e>
 80076ba:	4b08      	ldr	r3, [pc, #32]	; (80076dc <strtof+0xc4>)
 80076bc:	402b      	ands	r3, r5
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0c9      	beq.n	8007656 <strtof+0x3e>
 80076c2:	f8d8 3000 	ldr.w	r3, [r8]
 80076c6:	2222      	movs	r2, #34	; 0x22
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	e7c4      	b.n	8007656 <strtof+0x3e>
 80076cc:	20000018 	.word	0x20000018
 80076d0:	0800a1c6 	.word	0x0800a1c6
 80076d4:	7f7fffff 	.word	0x7f7fffff
 80076d8:	7fefffff 	.word	0x7fefffff
 80076dc:	7ff00000 	.word	0x7ff00000
 80076e0:	200001d0 	.word	0x200001d0

080076e4 <_strtoul_l.constprop.0>:
 80076e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076e8:	4f36      	ldr	r7, [pc, #216]	; (80077c4 <_strtoul_l.constprop.0+0xe0>)
 80076ea:	4686      	mov	lr, r0
 80076ec:	460d      	mov	r5, r1
 80076ee:	4628      	mov	r0, r5
 80076f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076f4:	5d3e      	ldrb	r6, [r7, r4]
 80076f6:	f016 0608 	ands.w	r6, r6, #8
 80076fa:	d1f8      	bne.n	80076ee <_strtoul_l.constprop.0+0xa>
 80076fc:	2c2d      	cmp	r4, #45	; 0x2d
 80076fe:	d130      	bne.n	8007762 <_strtoul_l.constprop.0+0x7e>
 8007700:	782c      	ldrb	r4, [r5, #0]
 8007702:	2601      	movs	r6, #1
 8007704:	1c85      	adds	r5, r0, #2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d057      	beq.n	80077ba <_strtoul_l.constprop.0+0xd6>
 800770a:	2b10      	cmp	r3, #16
 800770c:	d109      	bne.n	8007722 <_strtoul_l.constprop.0+0x3e>
 800770e:	2c30      	cmp	r4, #48	; 0x30
 8007710:	d107      	bne.n	8007722 <_strtoul_l.constprop.0+0x3e>
 8007712:	7828      	ldrb	r0, [r5, #0]
 8007714:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007718:	2858      	cmp	r0, #88	; 0x58
 800771a:	d149      	bne.n	80077b0 <_strtoul_l.constprop.0+0xcc>
 800771c:	786c      	ldrb	r4, [r5, #1]
 800771e:	2310      	movs	r3, #16
 8007720:	3502      	adds	r5, #2
 8007722:	f04f 38ff 	mov.w	r8, #4294967295
 8007726:	2700      	movs	r7, #0
 8007728:	fbb8 f8f3 	udiv	r8, r8, r3
 800772c:	fb03 f908 	mul.w	r9, r3, r8
 8007730:	ea6f 0909 	mvn.w	r9, r9
 8007734:	4638      	mov	r0, r7
 8007736:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800773a:	f1bc 0f09 	cmp.w	ip, #9
 800773e:	d815      	bhi.n	800776c <_strtoul_l.constprop.0+0x88>
 8007740:	4664      	mov	r4, ip
 8007742:	42a3      	cmp	r3, r4
 8007744:	dd23      	ble.n	800778e <_strtoul_l.constprop.0+0xaa>
 8007746:	f1b7 3fff 	cmp.w	r7, #4294967295
 800774a:	d007      	beq.n	800775c <_strtoul_l.constprop.0+0x78>
 800774c:	4580      	cmp	r8, r0
 800774e:	d31b      	bcc.n	8007788 <_strtoul_l.constprop.0+0xa4>
 8007750:	d101      	bne.n	8007756 <_strtoul_l.constprop.0+0x72>
 8007752:	45a1      	cmp	r9, r4
 8007754:	db18      	blt.n	8007788 <_strtoul_l.constprop.0+0xa4>
 8007756:	fb00 4003 	mla	r0, r0, r3, r4
 800775a:	2701      	movs	r7, #1
 800775c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007760:	e7e9      	b.n	8007736 <_strtoul_l.constprop.0+0x52>
 8007762:	2c2b      	cmp	r4, #43	; 0x2b
 8007764:	bf04      	itt	eq
 8007766:	782c      	ldrbeq	r4, [r5, #0]
 8007768:	1c85      	addeq	r5, r0, #2
 800776a:	e7cc      	b.n	8007706 <_strtoul_l.constprop.0+0x22>
 800776c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007770:	f1bc 0f19 	cmp.w	ip, #25
 8007774:	d801      	bhi.n	800777a <_strtoul_l.constprop.0+0x96>
 8007776:	3c37      	subs	r4, #55	; 0x37
 8007778:	e7e3      	b.n	8007742 <_strtoul_l.constprop.0+0x5e>
 800777a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800777e:	f1bc 0f19 	cmp.w	ip, #25
 8007782:	d804      	bhi.n	800778e <_strtoul_l.constprop.0+0xaa>
 8007784:	3c57      	subs	r4, #87	; 0x57
 8007786:	e7dc      	b.n	8007742 <_strtoul_l.constprop.0+0x5e>
 8007788:	f04f 37ff 	mov.w	r7, #4294967295
 800778c:	e7e6      	b.n	800775c <_strtoul_l.constprop.0+0x78>
 800778e:	1c7b      	adds	r3, r7, #1
 8007790:	d106      	bne.n	80077a0 <_strtoul_l.constprop.0+0xbc>
 8007792:	2322      	movs	r3, #34	; 0x22
 8007794:	f8ce 3000 	str.w	r3, [lr]
 8007798:	4638      	mov	r0, r7
 800779a:	b932      	cbnz	r2, 80077aa <_strtoul_l.constprop.0+0xc6>
 800779c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077a0:	b106      	cbz	r6, 80077a4 <_strtoul_l.constprop.0+0xc0>
 80077a2:	4240      	negs	r0, r0
 80077a4:	2a00      	cmp	r2, #0
 80077a6:	d0f9      	beq.n	800779c <_strtoul_l.constprop.0+0xb8>
 80077a8:	b107      	cbz	r7, 80077ac <_strtoul_l.constprop.0+0xc8>
 80077aa:	1e69      	subs	r1, r5, #1
 80077ac:	6011      	str	r1, [r2, #0]
 80077ae:	e7f5      	b.n	800779c <_strtoul_l.constprop.0+0xb8>
 80077b0:	2430      	movs	r4, #48	; 0x30
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1b5      	bne.n	8007722 <_strtoul_l.constprop.0+0x3e>
 80077b6:	2308      	movs	r3, #8
 80077b8:	e7b3      	b.n	8007722 <_strtoul_l.constprop.0+0x3e>
 80077ba:	2c30      	cmp	r4, #48	; 0x30
 80077bc:	d0a9      	beq.n	8007712 <_strtoul_l.constprop.0+0x2e>
 80077be:	230a      	movs	r3, #10
 80077c0:	e7af      	b.n	8007722 <_strtoul_l.constprop.0+0x3e>
 80077c2:	bf00      	nop
 80077c4:	0800a029 	.word	0x0800a029

080077c8 <strtoul>:
 80077c8:	4613      	mov	r3, r2
 80077ca:	460a      	mov	r2, r1
 80077cc:	4601      	mov	r1, r0
 80077ce:	4802      	ldr	r0, [pc, #8]	; (80077d8 <strtoul+0x10>)
 80077d0:	6800      	ldr	r0, [r0, #0]
 80077d2:	f7ff bf87 	b.w	80076e4 <_strtoul_l.constprop.0>
 80077d6:	bf00      	nop
 80077d8:	200001d0 	.word	0x200001d0

080077dc <std>:
 80077dc:	2300      	movs	r3, #0
 80077de:	b510      	push	{r4, lr}
 80077e0:	4604      	mov	r4, r0
 80077e2:	e9c0 3300 	strd	r3, r3, [r0]
 80077e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077ea:	6083      	str	r3, [r0, #8]
 80077ec:	8181      	strh	r1, [r0, #12]
 80077ee:	6643      	str	r3, [r0, #100]	; 0x64
 80077f0:	81c2      	strh	r2, [r0, #14]
 80077f2:	6183      	str	r3, [r0, #24]
 80077f4:	4619      	mov	r1, r3
 80077f6:	2208      	movs	r2, #8
 80077f8:	305c      	adds	r0, #92	; 0x5c
 80077fa:	f000 f914 	bl	8007a26 <memset>
 80077fe:	4b0d      	ldr	r3, [pc, #52]	; (8007834 <std+0x58>)
 8007800:	6263      	str	r3, [r4, #36]	; 0x24
 8007802:	4b0d      	ldr	r3, [pc, #52]	; (8007838 <std+0x5c>)
 8007804:	62a3      	str	r3, [r4, #40]	; 0x28
 8007806:	4b0d      	ldr	r3, [pc, #52]	; (800783c <std+0x60>)
 8007808:	62e3      	str	r3, [r4, #44]	; 0x2c
 800780a:	4b0d      	ldr	r3, [pc, #52]	; (8007840 <std+0x64>)
 800780c:	6323      	str	r3, [r4, #48]	; 0x30
 800780e:	4b0d      	ldr	r3, [pc, #52]	; (8007844 <std+0x68>)
 8007810:	6224      	str	r4, [r4, #32]
 8007812:	429c      	cmp	r4, r3
 8007814:	d006      	beq.n	8007824 <std+0x48>
 8007816:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800781a:	4294      	cmp	r4, r2
 800781c:	d002      	beq.n	8007824 <std+0x48>
 800781e:	33d0      	adds	r3, #208	; 0xd0
 8007820:	429c      	cmp	r4, r3
 8007822:	d105      	bne.n	8007830 <std+0x54>
 8007824:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800782c:	f000 b9e2 	b.w	8007bf4 <__retarget_lock_init_recursive>
 8007830:	bd10      	pop	{r4, pc}
 8007832:	bf00      	nop
 8007834:	080079a1 	.word	0x080079a1
 8007838:	080079c3 	.word	0x080079c3
 800783c:	080079fb 	.word	0x080079fb
 8007840:	08007a1f 	.word	0x08007a1f
 8007844:	20000650 	.word	0x20000650

08007848 <stdio_exit_handler>:
 8007848:	4a02      	ldr	r2, [pc, #8]	; (8007854 <stdio_exit_handler+0xc>)
 800784a:	4903      	ldr	r1, [pc, #12]	; (8007858 <stdio_exit_handler+0x10>)
 800784c:	4803      	ldr	r0, [pc, #12]	; (800785c <stdio_exit_handler+0x14>)
 800784e:	f000 b869 	b.w	8007924 <_fwalk_sglue>
 8007852:	bf00      	nop
 8007854:	2000000c 	.word	0x2000000c
 8007858:	08009595 	.word	0x08009595
 800785c:	20000184 	.word	0x20000184

08007860 <cleanup_stdio>:
 8007860:	6841      	ldr	r1, [r0, #4]
 8007862:	4b0c      	ldr	r3, [pc, #48]	; (8007894 <cleanup_stdio+0x34>)
 8007864:	4299      	cmp	r1, r3
 8007866:	b510      	push	{r4, lr}
 8007868:	4604      	mov	r4, r0
 800786a:	d001      	beq.n	8007870 <cleanup_stdio+0x10>
 800786c:	f001 fe92 	bl	8009594 <_fflush_r>
 8007870:	68a1      	ldr	r1, [r4, #8]
 8007872:	4b09      	ldr	r3, [pc, #36]	; (8007898 <cleanup_stdio+0x38>)
 8007874:	4299      	cmp	r1, r3
 8007876:	d002      	beq.n	800787e <cleanup_stdio+0x1e>
 8007878:	4620      	mov	r0, r4
 800787a:	f001 fe8b 	bl	8009594 <_fflush_r>
 800787e:	68e1      	ldr	r1, [r4, #12]
 8007880:	4b06      	ldr	r3, [pc, #24]	; (800789c <cleanup_stdio+0x3c>)
 8007882:	4299      	cmp	r1, r3
 8007884:	d004      	beq.n	8007890 <cleanup_stdio+0x30>
 8007886:	4620      	mov	r0, r4
 8007888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800788c:	f001 be82 	b.w	8009594 <_fflush_r>
 8007890:	bd10      	pop	{r4, pc}
 8007892:	bf00      	nop
 8007894:	20000650 	.word	0x20000650
 8007898:	200006b8 	.word	0x200006b8
 800789c:	20000720 	.word	0x20000720

080078a0 <global_stdio_init.part.0>:
 80078a0:	b510      	push	{r4, lr}
 80078a2:	4b0b      	ldr	r3, [pc, #44]	; (80078d0 <global_stdio_init.part.0+0x30>)
 80078a4:	4c0b      	ldr	r4, [pc, #44]	; (80078d4 <global_stdio_init.part.0+0x34>)
 80078a6:	4a0c      	ldr	r2, [pc, #48]	; (80078d8 <global_stdio_init.part.0+0x38>)
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	4620      	mov	r0, r4
 80078ac:	2200      	movs	r2, #0
 80078ae:	2104      	movs	r1, #4
 80078b0:	f7ff ff94 	bl	80077dc <std>
 80078b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80078b8:	2201      	movs	r2, #1
 80078ba:	2109      	movs	r1, #9
 80078bc:	f7ff ff8e 	bl	80077dc <std>
 80078c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80078c4:	2202      	movs	r2, #2
 80078c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ca:	2112      	movs	r1, #18
 80078cc:	f7ff bf86 	b.w	80077dc <std>
 80078d0:	20000788 	.word	0x20000788
 80078d4:	20000650 	.word	0x20000650
 80078d8:	08007849 	.word	0x08007849

080078dc <__sfp_lock_acquire>:
 80078dc:	4801      	ldr	r0, [pc, #4]	; (80078e4 <__sfp_lock_acquire+0x8>)
 80078de:	f000 b98a 	b.w	8007bf6 <__retarget_lock_acquire_recursive>
 80078e2:	bf00      	nop
 80078e4:	20000791 	.word	0x20000791

080078e8 <__sfp_lock_release>:
 80078e8:	4801      	ldr	r0, [pc, #4]	; (80078f0 <__sfp_lock_release+0x8>)
 80078ea:	f000 b985 	b.w	8007bf8 <__retarget_lock_release_recursive>
 80078ee:	bf00      	nop
 80078f0:	20000791 	.word	0x20000791

080078f4 <__sinit>:
 80078f4:	b510      	push	{r4, lr}
 80078f6:	4604      	mov	r4, r0
 80078f8:	f7ff fff0 	bl	80078dc <__sfp_lock_acquire>
 80078fc:	6a23      	ldr	r3, [r4, #32]
 80078fe:	b11b      	cbz	r3, 8007908 <__sinit+0x14>
 8007900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007904:	f7ff bff0 	b.w	80078e8 <__sfp_lock_release>
 8007908:	4b04      	ldr	r3, [pc, #16]	; (800791c <__sinit+0x28>)
 800790a:	6223      	str	r3, [r4, #32]
 800790c:	4b04      	ldr	r3, [pc, #16]	; (8007920 <__sinit+0x2c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1f5      	bne.n	8007900 <__sinit+0xc>
 8007914:	f7ff ffc4 	bl	80078a0 <global_stdio_init.part.0>
 8007918:	e7f2      	b.n	8007900 <__sinit+0xc>
 800791a:	bf00      	nop
 800791c:	08007861 	.word	0x08007861
 8007920:	20000788 	.word	0x20000788

08007924 <_fwalk_sglue>:
 8007924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007928:	4607      	mov	r7, r0
 800792a:	4688      	mov	r8, r1
 800792c:	4614      	mov	r4, r2
 800792e:	2600      	movs	r6, #0
 8007930:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007934:	f1b9 0901 	subs.w	r9, r9, #1
 8007938:	d505      	bpl.n	8007946 <_fwalk_sglue+0x22>
 800793a:	6824      	ldr	r4, [r4, #0]
 800793c:	2c00      	cmp	r4, #0
 800793e:	d1f7      	bne.n	8007930 <_fwalk_sglue+0xc>
 8007940:	4630      	mov	r0, r6
 8007942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007946:	89ab      	ldrh	r3, [r5, #12]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d907      	bls.n	800795c <_fwalk_sglue+0x38>
 800794c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007950:	3301      	adds	r3, #1
 8007952:	d003      	beq.n	800795c <_fwalk_sglue+0x38>
 8007954:	4629      	mov	r1, r5
 8007956:	4638      	mov	r0, r7
 8007958:	47c0      	blx	r8
 800795a:	4306      	orrs	r6, r0
 800795c:	3568      	adds	r5, #104	; 0x68
 800795e:	e7e9      	b.n	8007934 <_fwalk_sglue+0x10>

08007960 <siprintf>:
 8007960:	b40e      	push	{r1, r2, r3}
 8007962:	b500      	push	{lr}
 8007964:	b09c      	sub	sp, #112	; 0x70
 8007966:	ab1d      	add	r3, sp, #116	; 0x74
 8007968:	9002      	str	r0, [sp, #8]
 800796a:	9006      	str	r0, [sp, #24]
 800796c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007970:	4809      	ldr	r0, [pc, #36]	; (8007998 <siprintf+0x38>)
 8007972:	9107      	str	r1, [sp, #28]
 8007974:	9104      	str	r1, [sp, #16]
 8007976:	4909      	ldr	r1, [pc, #36]	; (800799c <siprintf+0x3c>)
 8007978:	f853 2b04 	ldr.w	r2, [r3], #4
 800797c:	9105      	str	r1, [sp, #20]
 800797e:	6800      	ldr	r0, [r0, #0]
 8007980:	9301      	str	r3, [sp, #4]
 8007982:	a902      	add	r1, sp, #8
 8007984:	f001 faf2 	bl	8008f6c <_svfiprintf_r>
 8007988:	9b02      	ldr	r3, [sp, #8]
 800798a:	2200      	movs	r2, #0
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	b01c      	add	sp, #112	; 0x70
 8007990:	f85d eb04 	ldr.w	lr, [sp], #4
 8007994:	b003      	add	sp, #12
 8007996:	4770      	bx	lr
 8007998:	200001d0 	.word	0x200001d0
 800799c:	ffff0208 	.word	0xffff0208

080079a0 <__sread>:
 80079a0:	b510      	push	{r4, lr}
 80079a2:	460c      	mov	r4, r1
 80079a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a8:	f000 f8d6 	bl	8007b58 <_read_r>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	bfab      	itete	ge
 80079b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079b2:	89a3      	ldrhlt	r3, [r4, #12]
 80079b4:	181b      	addge	r3, r3, r0
 80079b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079ba:	bfac      	ite	ge
 80079bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80079be:	81a3      	strhlt	r3, [r4, #12]
 80079c0:	bd10      	pop	{r4, pc}

080079c2 <__swrite>:
 80079c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c6:	461f      	mov	r7, r3
 80079c8:	898b      	ldrh	r3, [r1, #12]
 80079ca:	05db      	lsls	r3, r3, #23
 80079cc:	4605      	mov	r5, r0
 80079ce:	460c      	mov	r4, r1
 80079d0:	4616      	mov	r6, r2
 80079d2:	d505      	bpl.n	80079e0 <__swrite+0x1e>
 80079d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d8:	2302      	movs	r3, #2
 80079da:	2200      	movs	r2, #0
 80079dc:	f000 f8aa 	bl	8007b34 <_lseek_r>
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079ea:	81a3      	strh	r3, [r4, #12]
 80079ec:	4632      	mov	r2, r6
 80079ee:	463b      	mov	r3, r7
 80079f0:	4628      	mov	r0, r5
 80079f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079f6:	f000 b8c1 	b.w	8007b7c <_write_r>

080079fa <__sseek>:
 80079fa:	b510      	push	{r4, lr}
 80079fc:	460c      	mov	r4, r1
 80079fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a02:	f000 f897 	bl	8007b34 <_lseek_r>
 8007a06:	1c43      	adds	r3, r0, #1
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	bf15      	itete	ne
 8007a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a16:	81a3      	strheq	r3, [r4, #12]
 8007a18:	bf18      	it	ne
 8007a1a:	81a3      	strhne	r3, [r4, #12]
 8007a1c:	bd10      	pop	{r4, pc}

08007a1e <__sclose>:
 8007a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a22:	f000 b877 	b.w	8007b14 <_close_r>

08007a26 <memset>:
 8007a26:	4402      	add	r2, r0
 8007a28:	4603      	mov	r3, r0
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d100      	bne.n	8007a30 <memset+0xa>
 8007a2e:	4770      	bx	lr
 8007a30:	f803 1b01 	strb.w	r1, [r3], #1
 8007a34:	e7f9      	b.n	8007a2a <memset+0x4>

08007a36 <strncmp>:
 8007a36:	b510      	push	{r4, lr}
 8007a38:	b16a      	cbz	r2, 8007a56 <strncmp+0x20>
 8007a3a:	3901      	subs	r1, #1
 8007a3c:	1884      	adds	r4, r0, r2
 8007a3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a42:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d103      	bne.n	8007a52 <strncmp+0x1c>
 8007a4a:	42a0      	cmp	r0, r4
 8007a4c:	d001      	beq.n	8007a52 <strncmp+0x1c>
 8007a4e:	2a00      	cmp	r2, #0
 8007a50:	d1f5      	bne.n	8007a3e <strncmp+0x8>
 8007a52:	1ad0      	subs	r0, r2, r3
 8007a54:	bd10      	pop	{r4, pc}
 8007a56:	4610      	mov	r0, r2
 8007a58:	e7fc      	b.n	8007a54 <strncmp+0x1e>
	...

08007a5c <strtok>:
 8007a5c:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <strtok+0x5c>)
 8007a5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a60:	681e      	ldr	r6, [r3, #0]
 8007a62:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8007a64:	4605      	mov	r5, r0
 8007a66:	b9fc      	cbnz	r4, 8007aa8 <strtok+0x4c>
 8007a68:	2050      	movs	r0, #80	; 0x50
 8007a6a:	9101      	str	r1, [sp, #4]
 8007a6c:	f000 fca4 	bl	80083b8 <malloc>
 8007a70:	9901      	ldr	r1, [sp, #4]
 8007a72:	6470      	str	r0, [r6, #68]	; 0x44
 8007a74:	4602      	mov	r2, r0
 8007a76:	b920      	cbnz	r0, 8007a82 <strtok+0x26>
 8007a78:	4b10      	ldr	r3, [pc, #64]	; (8007abc <strtok+0x60>)
 8007a7a:	4811      	ldr	r0, [pc, #68]	; (8007ac0 <strtok+0x64>)
 8007a7c:	215b      	movs	r1, #91	; 0x5b
 8007a7e:	f000 f8d9 	bl	8007c34 <__assert_func>
 8007a82:	e9c0 4400 	strd	r4, r4, [r0]
 8007a86:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007a8a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007a8e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007a92:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007a96:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007a9a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007a9e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007aa2:	6184      	str	r4, [r0, #24]
 8007aa4:	7704      	strb	r4, [r0, #28]
 8007aa6:	6244      	str	r4, [r0, #36]	; 0x24
 8007aa8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8007aaa:	2301      	movs	r3, #1
 8007aac:	4628      	mov	r0, r5
 8007aae:	b002      	add	sp, #8
 8007ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ab4:	f000 b806 	b.w	8007ac4 <__strtok_r>
 8007ab8:	200001d0 	.word	0x200001d0
 8007abc:	08009f54 	.word	0x08009f54
 8007ac0:	0800a129 	.word	0x0800a129

08007ac4 <__strtok_r>:
 8007ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ac6:	b908      	cbnz	r0, 8007acc <__strtok_r+0x8>
 8007ac8:	6810      	ldr	r0, [r2, #0]
 8007aca:	b188      	cbz	r0, 8007af0 <__strtok_r+0x2c>
 8007acc:	4604      	mov	r4, r0
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007ad4:	460f      	mov	r7, r1
 8007ad6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007ada:	b91e      	cbnz	r6, 8007ae4 <__strtok_r+0x20>
 8007adc:	b965      	cbnz	r5, 8007af8 <__strtok_r+0x34>
 8007ade:	6015      	str	r5, [r2, #0]
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	e005      	b.n	8007af0 <__strtok_r+0x2c>
 8007ae4:	42b5      	cmp	r5, r6
 8007ae6:	d1f6      	bne.n	8007ad6 <__strtok_r+0x12>
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1f0      	bne.n	8007ace <__strtok_r+0xa>
 8007aec:	6014      	str	r4, [r2, #0]
 8007aee:	7003      	strb	r3, [r0, #0]
 8007af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007af2:	461c      	mov	r4, r3
 8007af4:	e00c      	b.n	8007b10 <__strtok_r+0x4c>
 8007af6:	b915      	cbnz	r5, 8007afe <__strtok_r+0x3a>
 8007af8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007afc:	460e      	mov	r6, r1
 8007afe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007b02:	42ab      	cmp	r3, r5
 8007b04:	d1f7      	bne.n	8007af6 <__strtok_r+0x32>
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0f3      	beq.n	8007af2 <__strtok_r+0x2e>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007b10:	6014      	str	r4, [r2, #0]
 8007b12:	e7ed      	b.n	8007af0 <__strtok_r+0x2c>

08007b14 <_close_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	4d06      	ldr	r5, [pc, #24]	; (8007b30 <_close_r+0x1c>)
 8007b18:	2300      	movs	r3, #0
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	4608      	mov	r0, r1
 8007b1e:	602b      	str	r3, [r5, #0]
 8007b20:	f7fa ff67 	bl	80029f2 <_close>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d102      	bne.n	8007b2e <_close_r+0x1a>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	b103      	cbz	r3, 8007b2e <_close_r+0x1a>
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
 8007b30:	2000078c 	.word	0x2000078c

08007b34 <_lseek_r>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	4d07      	ldr	r5, [pc, #28]	; (8007b54 <_lseek_r+0x20>)
 8007b38:	4604      	mov	r4, r0
 8007b3a:	4608      	mov	r0, r1
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	2200      	movs	r2, #0
 8007b40:	602a      	str	r2, [r5, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	f7fa ff7c 	bl	8002a40 <_lseek>
 8007b48:	1c43      	adds	r3, r0, #1
 8007b4a:	d102      	bne.n	8007b52 <_lseek_r+0x1e>
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	b103      	cbz	r3, 8007b52 <_lseek_r+0x1e>
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	bd38      	pop	{r3, r4, r5, pc}
 8007b54:	2000078c 	.word	0x2000078c

08007b58 <_read_r>:
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	4d07      	ldr	r5, [pc, #28]	; (8007b78 <_read_r+0x20>)
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	4608      	mov	r0, r1
 8007b60:	4611      	mov	r1, r2
 8007b62:	2200      	movs	r2, #0
 8007b64:	602a      	str	r2, [r5, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	f7fa ff0a 	bl	8002980 <_read>
 8007b6c:	1c43      	adds	r3, r0, #1
 8007b6e:	d102      	bne.n	8007b76 <_read_r+0x1e>
 8007b70:	682b      	ldr	r3, [r5, #0]
 8007b72:	b103      	cbz	r3, 8007b76 <_read_r+0x1e>
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	bd38      	pop	{r3, r4, r5, pc}
 8007b78:	2000078c 	.word	0x2000078c

08007b7c <_write_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4d07      	ldr	r5, [pc, #28]	; (8007b9c <_write_r+0x20>)
 8007b80:	4604      	mov	r4, r0
 8007b82:	4608      	mov	r0, r1
 8007b84:	4611      	mov	r1, r2
 8007b86:	2200      	movs	r2, #0
 8007b88:	602a      	str	r2, [r5, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f7fa ff15 	bl	80029ba <_write>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d102      	bne.n	8007b9a <_write_r+0x1e>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	b103      	cbz	r3, 8007b9a <_write_r+0x1e>
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	2000078c 	.word	0x2000078c

08007ba0 <__errno>:
 8007ba0:	4b01      	ldr	r3, [pc, #4]	; (8007ba8 <__errno+0x8>)
 8007ba2:	6818      	ldr	r0, [r3, #0]
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	200001d0 	.word	0x200001d0

08007bac <__libc_init_array>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	4d0d      	ldr	r5, [pc, #52]	; (8007be4 <__libc_init_array+0x38>)
 8007bb0:	4c0d      	ldr	r4, [pc, #52]	; (8007be8 <__libc_init_array+0x3c>)
 8007bb2:	1b64      	subs	r4, r4, r5
 8007bb4:	10a4      	asrs	r4, r4, #2
 8007bb6:	2600      	movs	r6, #0
 8007bb8:	42a6      	cmp	r6, r4
 8007bba:	d109      	bne.n	8007bd0 <__libc_init_array+0x24>
 8007bbc:	4d0b      	ldr	r5, [pc, #44]	; (8007bec <__libc_init_array+0x40>)
 8007bbe:	4c0c      	ldr	r4, [pc, #48]	; (8007bf0 <__libc_init_array+0x44>)
 8007bc0:	f002 f842 	bl	8009c48 <_init>
 8007bc4:	1b64      	subs	r4, r4, r5
 8007bc6:	10a4      	asrs	r4, r4, #2
 8007bc8:	2600      	movs	r6, #0
 8007bca:	42a6      	cmp	r6, r4
 8007bcc:	d105      	bne.n	8007bda <__libc_init_array+0x2e>
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd4:	4798      	blx	r3
 8007bd6:	3601      	adds	r6, #1
 8007bd8:	e7ee      	b.n	8007bb8 <__libc_init_array+0xc>
 8007bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bde:	4798      	blx	r3
 8007be0:	3601      	adds	r6, #1
 8007be2:	e7f2      	b.n	8007bca <__libc_init_array+0x1e>
 8007be4:	0800a3d0 	.word	0x0800a3d0
 8007be8:	0800a3d0 	.word	0x0800a3d0
 8007bec:	0800a3d0 	.word	0x0800a3d0
 8007bf0:	0800a3d4 	.word	0x0800a3d4

08007bf4 <__retarget_lock_init_recursive>:
 8007bf4:	4770      	bx	lr

08007bf6 <__retarget_lock_acquire_recursive>:
 8007bf6:	4770      	bx	lr

08007bf8 <__retarget_lock_release_recursive>:
 8007bf8:	4770      	bx	lr

08007bfa <memcpy>:
 8007bfa:	440a      	add	r2, r1
 8007bfc:	4291      	cmp	r1, r2
 8007bfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c02:	d100      	bne.n	8007c06 <memcpy+0xc>
 8007c04:	4770      	bx	lr
 8007c06:	b510      	push	{r4, lr}
 8007c08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c10:	4291      	cmp	r1, r2
 8007c12:	d1f9      	bne.n	8007c08 <memcpy+0xe>
 8007c14:	bd10      	pop	{r4, pc}
	...

08007c18 <nan>:
 8007c18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007c20 <nan+0x8>
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	00000000 	.word	0x00000000
 8007c24:	7ff80000 	.word	0x7ff80000

08007c28 <nanf>:
 8007c28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007c30 <nanf+0x8>
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	7fc00000 	.word	0x7fc00000

08007c34 <__assert_func>:
 8007c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c36:	4614      	mov	r4, r2
 8007c38:	461a      	mov	r2, r3
 8007c3a:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <__assert_func+0x2c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4605      	mov	r5, r0
 8007c40:	68d8      	ldr	r0, [r3, #12]
 8007c42:	b14c      	cbz	r4, 8007c58 <__assert_func+0x24>
 8007c44:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <__assert_func+0x30>)
 8007c46:	9100      	str	r1, [sp, #0]
 8007c48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c4c:	4906      	ldr	r1, [pc, #24]	; (8007c68 <__assert_func+0x34>)
 8007c4e:	462b      	mov	r3, r5
 8007c50:	f001 fcc8 	bl	80095e4 <fiprintf>
 8007c54:	f001 fd02 	bl	800965c <abort>
 8007c58:	4b04      	ldr	r3, [pc, #16]	; (8007c6c <__assert_func+0x38>)
 8007c5a:	461c      	mov	r4, r3
 8007c5c:	e7f3      	b.n	8007c46 <__assert_func+0x12>
 8007c5e:	bf00      	nop
 8007c60:	200001d0 	.word	0x200001d0
 8007c64:	0800a18b 	.word	0x0800a18b
 8007c68:	0800a198 	.word	0x0800a198
 8007c6c:	0800a1c6 	.word	0x0800a1c6

08007c70 <_free_r>:
 8007c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c72:	2900      	cmp	r1, #0
 8007c74:	d044      	beq.n	8007d00 <_free_r+0x90>
 8007c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c7a:	9001      	str	r0, [sp, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f1a1 0404 	sub.w	r4, r1, #4
 8007c82:	bfb8      	it	lt
 8007c84:	18e4      	addlt	r4, r4, r3
 8007c86:	f000 fc51 	bl	800852c <__malloc_lock>
 8007c8a:	4a1e      	ldr	r2, [pc, #120]	; (8007d04 <_free_r+0x94>)
 8007c8c:	9801      	ldr	r0, [sp, #4]
 8007c8e:	6813      	ldr	r3, [r2, #0]
 8007c90:	b933      	cbnz	r3, 8007ca0 <_free_r+0x30>
 8007c92:	6063      	str	r3, [r4, #4]
 8007c94:	6014      	str	r4, [r2, #0]
 8007c96:	b003      	add	sp, #12
 8007c98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c9c:	f000 bc4c 	b.w	8008538 <__malloc_unlock>
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	d908      	bls.n	8007cb6 <_free_r+0x46>
 8007ca4:	6825      	ldr	r5, [r4, #0]
 8007ca6:	1961      	adds	r1, r4, r5
 8007ca8:	428b      	cmp	r3, r1
 8007caa:	bf01      	itttt	eq
 8007cac:	6819      	ldreq	r1, [r3, #0]
 8007cae:	685b      	ldreq	r3, [r3, #4]
 8007cb0:	1949      	addeq	r1, r1, r5
 8007cb2:	6021      	streq	r1, [r4, #0]
 8007cb4:	e7ed      	b.n	8007c92 <_free_r+0x22>
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	b10b      	cbz	r3, 8007cc0 <_free_r+0x50>
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	d9fa      	bls.n	8007cb6 <_free_r+0x46>
 8007cc0:	6811      	ldr	r1, [r2, #0]
 8007cc2:	1855      	adds	r5, r2, r1
 8007cc4:	42a5      	cmp	r5, r4
 8007cc6:	d10b      	bne.n	8007ce0 <_free_r+0x70>
 8007cc8:	6824      	ldr	r4, [r4, #0]
 8007cca:	4421      	add	r1, r4
 8007ccc:	1854      	adds	r4, r2, r1
 8007cce:	42a3      	cmp	r3, r4
 8007cd0:	6011      	str	r1, [r2, #0]
 8007cd2:	d1e0      	bne.n	8007c96 <_free_r+0x26>
 8007cd4:	681c      	ldr	r4, [r3, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	6053      	str	r3, [r2, #4]
 8007cda:	440c      	add	r4, r1
 8007cdc:	6014      	str	r4, [r2, #0]
 8007cde:	e7da      	b.n	8007c96 <_free_r+0x26>
 8007ce0:	d902      	bls.n	8007ce8 <_free_r+0x78>
 8007ce2:	230c      	movs	r3, #12
 8007ce4:	6003      	str	r3, [r0, #0]
 8007ce6:	e7d6      	b.n	8007c96 <_free_r+0x26>
 8007ce8:	6825      	ldr	r5, [r4, #0]
 8007cea:	1961      	adds	r1, r4, r5
 8007cec:	428b      	cmp	r3, r1
 8007cee:	bf04      	itt	eq
 8007cf0:	6819      	ldreq	r1, [r3, #0]
 8007cf2:	685b      	ldreq	r3, [r3, #4]
 8007cf4:	6063      	str	r3, [r4, #4]
 8007cf6:	bf04      	itt	eq
 8007cf8:	1949      	addeq	r1, r1, r5
 8007cfa:	6021      	streq	r1, [r4, #0]
 8007cfc:	6054      	str	r4, [r2, #4]
 8007cfe:	e7ca      	b.n	8007c96 <_free_r+0x26>
 8007d00:	b003      	add	sp, #12
 8007d02:	bd30      	pop	{r4, r5, pc}
 8007d04:	20000794 	.word	0x20000794

08007d08 <rshift>:
 8007d08:	6903      	ldr	r3, [r0, #16]
 8007d0a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007d0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d12:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007d16:	f100 0414 	add.w	r4, r0, #20
 8007d1a:	dd45      	ble.n	8007da8 <rshift+0xa0>
 8007d1c:	f011 011f 	ands.w	r1, r1, #31
 8007d20:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007d24:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007d28:	d10c      	bne.n	8007d44 <rshift+0x3c>
 8007d2a:	f100 0710 	add.w	r7, r0, #16
 8007d2e:	4629      	mov	r1, r5
 8007d30:	42b1      	cmp	r1, r6
 8007d32:	d334      	bcc.n	8007d9e <rshift+0x96>
 8007d34:	1a9b      	subs	r3, r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	1eea      	subs	r2, r5, #3
 8007d3a:	4296      	cmp	r6, r2
 8007d3c:	bf38      	it	cc
 8007d3e:	2300      	movcc	r3, #0
 8007d40:	4423      	add	r3, r4
 8007d42:	e015      	b.n	8007d70 <rshift+0x68>
 8007d44:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007d48:	f1c1 0820 	rsb	r8, r1, #32
 8007d4c:	40cf      	lsrs	r7, r1
 8007d4e:	f105 0e04 	add.w	lr, r5, #4
 8007d52:	46a1      	mov	r9, r4
 8007d54:	4576      	cmp	r6, lr
 8007d56:	46f4      	mov	ip, lr
 8007d58:	d815      	bhi.n	8007d86 <rshift+0x7e>
 8007d5a:	1a9a      	subs	r2, r3, r2
 8007d5c:	0092      	lsls	r2, r2, #2
 8007d5e:	3a04      	subs	r2, #4
 8007d60:	3501      	adds	r5, #1
 8007d62:	42ae      	cmp	r6, r5
 8007d64:	bf38      	it	cc
 8007d66:	2200      	movcc	r2, #0
 8007d68:	18a3      	adds	r3, r4, r2
 8007d6a:	50a7      	str	r7, [r4, r2]
 8007d6c:	b107      	cbz	r7, 8007d70 <rshift+0x68>
 8007d6e:	3304      	adds	r3, #4
 8007d70:	1b1a      	subs	r2, r3, r4
 8007d72:	42a3      	cmp	r3, r4
 8007d74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007d78:	bf08      	it	eq
 8007d7a:	2300      	moveq	r3, #0
 8007d7c:	6102      	str	r2, [r0, #16]
 8007d7e:	bf08      	it	eq
 8007d80:	6143      	streq	r3, [r0, #20]
 8007d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d86:	f8dc c000 	ldr.w	ip, [ip]
 8007d8a:	fa0c fc08 	lsl.w	ip, ip, r8
 8007d8e:	ea4c 0707 	orr.w	r7, ip, r7
 8007d92:	f849 7b04 	str.w	r7, [r9], #4
 8007d96:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d9a:	40cf      	lsrs	r7, r1
 8007d9c:	e7da      	b.n	8007d54 <rshift+0x4c>
 8007d9e:	f851 cb04 	ldr.w	ip, [r1], #4
 8007da2:	f847 cf04 	str.w	ip, [r7, #4]!
 8007da6:	e7c3      	b.n	8007d30 <rshift+0x28>
 8007da8:	4623      	mov	r3, r4
 8007daa:	e7e1      	b.n	8007d70 <rshift+0x68>

08007dac <__hexdig_fun>:
 8007dac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007db0:	2b09      	cmp	r3, #9
 8007db2:	d802      	bhi.n	8007dba <__hexdig_fun+0xe>
 8007db4:	3820      	subs	r0, #32
 8007db6:	b2c0      	uxtb	r0, r0
 8007db8:	4770      	bx	lr
 8007dba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007dbe:	2b05      	cmp	r3, #5
 8007dc0:	d801      	bhi.n	8007dc6 <__hexdig_fun+0x1a>
 8007dc2:	3847      	subs	r0, #71	; 0x47
 8007dc4:	e7f7      	b.n	8007db6 <__hexdig_fun+0xa>
 8007dc6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007dca:	2b05      	cmp	r3, #5
 8007dcc:	d801      	bhi.n	8007dd2 <__hexdig_fun+0x26>
 8007dce:	3827      	subs	r0, #39	; 0x27
 8007dd0:	e7f1      	b.n	8007db6 <__hexdig_fun+0xa>
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	4770      	bx	lr
	...

08007dd8 <__gethex>:
 8007dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ddc:	4617      	mov	r7, r2
 8007dde:	680a      	ldr	r2, [r1, #0]
 8007de0:	b085      	sub	sp, #20
 8007de2:	f102 0b02 	add.w	fp, r2, #2
 8007de6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007dea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007dee:	4681      	mov	r9, r0
 8007df0:	468a      	mov	sl, r1
 8007df2:	9302      	str	r3, [sp, #8]
 8007df4:	32fe      	adds	r2, #254	; 0xfe
 8007df6:	eb02 030b 	add.w	r3, r2, fp
 8007dfa:	46d8      	mov	r8, fp
 8007dfc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007e00:	9301      	str	r3, [sp, #4]
 8007e02:	2830      	cmp	r0, #48	; 0x30
 8007e04:	d0f7      	beq.n	8007df6 <__gethex+0x1e>
 8007e06:	f7ff ffd1 	bl	8007dac <__hexdig_fun>
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d138      	bne.n	8007e82 <__gethex+0xaa>
 8007e10:	49a7      	ldr	r1, [pc, #668]	; (80080b0 <__gethex+0x2d8>)
 8007e12:	2201      	movs	r2, #1
 8007e14:	4640      	mov	r0, r8
 8007e16:	f7ff fe0e 	bl	8007a36 <strncmp>
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d169      	bne.n	8007ef4 <__gethex+0x11c>
 8007e20:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007e24:	465d      	mov	r5, fp
 8007e26:	f7ff ffc1 	bl	8007dac <__hexdig_fun>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d064      	beq.n	8007ef8 <__gethex+0x120>
 8007e2e:	465a      	mov	r2, fp
 8007e30:	7810      	ldrb	r0, [r2, #0]
 8007e32:	2830      	cmp	r0, #48	; 0x30
 8007e34:	4690      	mov	r8, r2
 8007e36:	f102 0201 	add.w	r2, r2, #1
 8007e3a:	d0f9      	beq.n	8007e30 <__gethex+0x58>
 8007e3c:	f7ff ffb6 	bl	8007dac <__hexdig_fun>
 8007e40:	2301      	movs	r3, #1
 8007e42:	fab0 f480 	clz	r4, r0
 8007e46:	0964      	lsrs	r4, r4, #5
 8007e48:	465e      	mov	r6, fp
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	4642      	mov	r2, r8
 8007e4e:	4615      	mov	r5, r2
 8007e50:	3201      	adds	r2, #1
 8007e52:	7828      	ldrb	r0, [r5, #0]
 8007e54:	f7ff ffaa 	bl	8007dac <__hexdig_fun>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d1f8      	bne.n	8007e4e <__gethex+0x76>
 8007e5c:	4994      	ldr	r1, [pc, #592]	; (80080b0 <__gethex+0x2d8>)
 8007e5e:	2201      	movs	r2, #1
 8007e60:	4628      	mov	r0, r5
 8007e62:	f7ff fde8 	bl	8007a36 <strncmp>
 8007e66:	b978      	cbnz	r0, 8007e88 <__gethex+0xb0>
 8007e68:	b946      	cbnz	r6, 8007e7c <__gethex+0xa4>
 8007e6a:	1c6e      	adds	r6, r5, #1
 8007e6c:	4632      	mov	r2, r6
 8007e6e:	4615      	mov	r5, r2
 8007e70:	3201      	adds	r2, #1
 8007e72:	7828      	ldrb	r0, [r5, #0]
 8007e74:	f7ff ff9a 	bl	8007dac <__hexdig_fun>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d1f8      	bne.n	8007e6e <__gethex+0x96>
 8007e7c:	1b73      	subs	r3, r6, r5
 8007e7e:	009e      	lsls	r6, r3, #2
 8007e80:	e004      	b.n	8007e8c <__gethex+0xb4>
 8007e82:	2400      	movs	r4, #0
 8007e84:	4626      	mov	r6, r4
 8007e86:	e7e1      	b.n	8007e4c <__gethex+0x74>
 8007e88:	2e00      	cmp	r6, #0
 8007e8a:	d1f7      	bne.n	8007e7c <__gethex+0xa4>
 8007e8c:	782b      	ldrb	r3, [r5, #0]
 8007e8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e92:	2b50      	cmp	r3, #80	; 0x50
 8007e94:	d13d      	bne.n	8007f12 <__gethex+0x13a>
 8007e96:	786b      	ldrb	r3, [r5, #1]
 8007e98:	2b2b      	cmp	r3, #43	; 0x2b
 8007e9a:	d02f      	beq.n	8007efc <__gethex+0x124>
 8007e9c:	2b2d      	cmp	r3, #45	; 0x2d
 8007e9e:	d031      	beq.n	8007f04 <__gethex+0x12c>
 8007ea0:	1c69      	adds	r1, r5, #1
 8007ea2:	f04f 0b00 	mov.w	fp, #0
 8007ea6:	7808      	ldrb	r0, [r1, #0]
 8007ea8:	f7ff ff80 	bl	8007dac <__hexdig_fun>
 8007eac:	1e42      	subs	r2, r0, #1
 8007eae:	b2d2      	uxtb	r2, r2
 8007eb0:	2a18      	cmp	r2, #24
 8007eb2:	d82e      	bhi.n	8007f12 <__gethex+0x13a>
 8007eb4:	f1a0 0210 	sub.w	r2, r0, #16
 8007eb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007ebc:	f7ff ff76 	bl	8007dac <__hexdig_fun>
 8007ec0:	f100 3cff 	add.w	ip, r0, #4294967295
 8007ec4:	fa5f fc8c 	uxtb.w	ip, ip
 8007ec8:	f1bc 0f18 	cmp.w	ip, #24
 8007ecc:	d91d      	bls.n	8007f0a <__gethex+0x132>
 8007ece:	f1bb 0f00 	cmp.w	fp, #0
 8007ed2:	d000      	beq.n	8007ed6 <__gethex+0xfe>
 8007ed4:	4252      	negs	r2, r2
 8007ed6:	4416      	add	r6, r2
 8007ed8:	f8ca 1000 	str.w	r1, [sl]
 8007edc:	b1dc      	cbz	r4, 8007f16 <__gethex+0x13e>
 8007ede:	9b01      	ldr	r3, [sp, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	bf14      	ite	ne
 8007ee4:	f04f 0800 	movne.w	r8, #0
 8007ee8:	f04f 0806 	moveq.w	r8, #6
 8007eec:	4640      	mov	r0, r8
 8007eee:	b005      	add	sp, #20
 8007ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef4:	4645      	mov	r5, r8
 8007ef6:	4626      	mov	r6, r4
 8007ef8:	2401      	movs	r4, #1
 8007efa:	e7c7      	b.n	8007e8c <__gethex+0xb4>
 8007efc:	f04f 0b00 	mov.w	fp, #0
 8007f00:	1ca9      	adds	r1, r5, #2
 8007f02:	e7d0      	b.n	8007ea6 <__gethex+0xce>
 8007f04:	f04f 0b01 	mov.w	fp, #1
 8007f08:	e7fa      	b.n	8007f00 <__gethex+0x128>
 8007f0a:	230a      	movs	r3, #10
 8007f0c:	fb03 0002 	mla	r0, r3, r2, r0
 8007f10:	e7d0      	b.n	8007eb4 <__gethex+0xdc>
 8007f12:	4629      	mov	r1, r5
 8007f14:	e7e0      	b.n	8007ed8 <__gethex+0x100>
 8007f16:	eba5 0308 	sub.w	r3, r5, r8
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	2b07      	cmp	r3, #7
 8007f20:	dc0a      	bgt.n	8007f38 <__gethex+0x160>
 8007f22:	4648      	mov	r0, r9
 8007f24:	f000 fb0e 	bl	8008544 <_Balloc>
 8007f28:	4604      	mov	r4, r0
 8007f2a:	b940      	cbnz	r0, 8007f3e <__gethex+0x166>
 8007f2c:	4b61      	ldr	r3, [pc, #388]	; (80080b4 <__gethex+0x2dc>)
 8007f2e:	4602      	mov	r2, r0
 8007f30:	21e4      	movs	r1, #228	; 0xe4
 8007f32:	4861      	ldr	r0, [pc, #388]	; (80080b8 <__gethex+0x2e0>)
 8007f34:	f7ff fe7e 	bl	8007c34 <__assert_func>
 8007f38:	3101      	adds	r1, #1
 8007f3a:	105b      	asrs	r3, r3, #1
 8007f3c:	e7ef      	b.n	8007f1e <__gethex+0x146>
 8007f3e:	f100 0a14 	add.w	sl, r0, #20
 8007f42:	2300      	movs	r3, #0
 8007f44:	495a      	ldr	r1, [pc, #360]	; (80080b0 <__gethex+0x2d8>)
 8007f46:	f8cd a004 	str.w	sl, [sp, #4]
 8007f4a:	469b      	mov	fp, r3
 8007f4c:	45a8      	cmp	r8, r5
 8007f4e:	d342      	bcc.n	8007fd6 <__gethex+0x1fe>
 8007f50:	9801      	ldr	r0, [sp, #4]
 8007f52:	f840 bb04 	str.w	fp, [r0], #4
 8007f56:	eba0 000a 	sub.w	r0, r0, sl
 8007f5a:	1080      	asrs	r0, r0, #2
 8007f5c:	6120      	str	r0, [r4, #16]
 8007f5e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8007f62:	4658      	mov	r0, fp
 8007f64:	f000 fbe0 	bl	8008728 <__hi0bits>
 8007f68:	683d      	ldr	r5, [r7, #0]
 8007f6a:	eba8 0000 	sub.w	r0, r8, r0
 8007f6e:	42a8      	cmp	r0, r5
 8007f70:	dd59      	ble.n	8008026 <__gethex+0x24e>
 8007f72:	eba0 0805 	sub.w	r8, r0, r5
 8007f76:	4641      	mov	r1, r8
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f000 ff6f 	bl	8008e5c <__any_on>
 8007f7e:	4683      	mov	fp, r0
 8007f80:	b1b8      	cbz	r0, 8007fb2 <__gethex+0x1da>
 8007f82:	f108 33ff 	add.w	r3, r8, #4294967295
 8007f86:	1159      	asrs	r1, r3, #5
 8007f88:	f003 021f 	and.w	r2, r3, #31
 8007f8c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007f90:	f04f 0b01 	mov.w	fp, #1
 8007f94:	fa0b f202 	lsl.w	r2, fp, r2
 8007f98:	420a      	tst	r2, r1
 8007f9a:	d00a      	beq.n	8007fb2 <__gethex+0x1da>
 8007f9c:	455b      	cmp	r3, fp
 8007f9e:	dd06      	ble.n	8007fae <__gethex+0x1d6>
 8007fa0:	f1a8 0102 	sub.w	r1, r8, #2
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f000 ff59 	bl	8008e5c <__any_on>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d138      	bne.n	8008020 <__gethex+0x248>
 8007fae:	f04f 0b02 	mov.w	fp, #2
 8007fb2:	4641      	mov	r1, r8
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f7ff fea7 	bl	8007d08 <rshift>
 8007fba:	4446      	add	r6, r8
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	42b3      	cmp	r3, r6
 8007fc0:	da41      	bge.n	8008046 <__gethex+0x26e>
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	4648      	mov	r0, r9
 8007fc6:	f000 fafd 	bl	80085c4 <_Bfree>
 8007fca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fcc:	2300      	movs	r3, #0
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007fd4:	e78a      	b.n	8007eec <__gethex+0x114>
 8007fd6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007fda:	2a2e      	cmp	r2, #46	; 0x2e
 8007fdc:	d014      	beq.n	8008008 <__gethex+0x230>
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	d106      	bne.n	8007ff0 <__gethex+0x218>
 8007fe2:	9b01      	ldr	r3, [sp, #4]
 8007fe4:	f843 bb04 	str.w	fp, [r3], #4
 8007fe8:	f04f 0b00 	mov.w	fp, #0
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	465b      	mov	r3, fp
 8007ff0:	7828      	ldrb	r0, [r5, #0]
 8007ff2:	9303      	str	r3, [sp, #12]
 8007ff4:	f7ff feda 	bl	8007dac <__hexdig_fun>
 8007ff8:	9b03      	ldr	r3, [sp, #12]
 8007ffa:	f000 000f 	and.w	r0, r0, #15
 8007ffe:	4098      	lsls	r0, r3
 8008000:	ea4b 0b00 	orr.w	fp, fp, r0
 8008004:	3304      	adds	r3, #4
 8008006:	e7a1      	b.n	8007f4c <__gethex+0x174>
 8008008:	45a8      	cmp	r8, r5
 800800a:	d8e8      	bhi.n	8007fde <__gethex+0x206>
 800800c:	2201      	movs	r2, #1
 800800e:	4628      	mov	r0, r5
 8008010:	9303      	str	r3, [sp, #12]
 8008012:	f7ff fd10 	bl	8007a36 <strncmp>
 8008016:	4926      	ldr	r1, [pc, #152]	; (80080b0 <__gethex+0x2d8>)
 8008018:	9b03      	ldr	r3, [sp, #12]
 800801a:	2800      	cmp	r0, #0
 800801c:	d1df      	bne.n	8007fde <__gethex+0x206>
 800801e:	e795      	b.n	8007f4c <__gethex+0x174>
 8008020:	f04f 0b03 	mov.w	fp, #3
 8008024:	e7c5      	b.n	8007fb2 <__gethex+0x1da>
 8008026:	da0b      	bge.n	8008040 <__gethex+0x268>
 8008028:	eba5 0800 	sub.w	r8, r5, r0
 800802c:	4621      	mov	r1, r4
 800802e:	4642      	mov	r2, r8
 8008030:	4648      	mov	r0, r9
 8008032:	f000 fce1 	bl	80089f8 <__lshift>
 8008036:	eba6 0608 	sub.w	r6, r6, r8
 800803a:	4604      	mov	r4, r0
 800803c:	f100 0a14 	add.w	sl, r0, #20
 8008040:	f04f 0b00 	mov.w	fp, #0
 8008044:	e7ba      	b.n	8007fbc <__gethex+0x1e4>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	42b3      	cmp	r3, r6
 800804a:	dd73      	ble.n	8008134 <__gethex+0x35c>
 800804c:	1b9e      	subs	r6, r3, r6
 800804e:	42b5      	cmp	r5, r6
 8008050:	dc34      	bgt.n	80080bc <__gethex+0x2e4>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b02      	cmp	r3, #2
 8008056:	d023      	beq.n	80080a0 <__gethex+0x2c8>
 8008058:	2b03      	cmp	r3, #3
 800805a:	d025      	beq.n	80080a8 <__gethex+0x2d0>
 800805c:	2b01      	cmp	r3, #1
 800805e:	d115      	bne.n	800808c <__gethex+0x2b4>
 8008060:	42b5      	cmp	r5, r6
 8008062:	d113      	bne.n	800808c <__gethex+0x2b4>
 8008064:	2d01      	cmp	r5, #1
 8008066:	d10b      	bne.n	8008080 <__gethex+0x2a8>
 8008068:	9a02      	ldr	r2, [sp, #8]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6013      	str	r3, [r2, #0]
 800806e:	2301      	movs	r3, #1
 8008070:	6123      	str	r3, [r4, #16]
 8008072:	f8ca 3000 	str.w	r3, [sl]
 8008076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008078:	f04f 0862 	mov.w	r8, #98	; 0x62
 800807c:	601c      	str	r4, [r3, #0]
 800807e:	e735      	b.n	8007eec <__gethex+0x114>
 8008080:	1e69      	subs	r1, r5, #1
 8008082:	4620      	mov	r0, r4
 8008084:	f000 feea 	bl	8008e5c <__any_on>
 8008088:	2800      	cmp	r0, #0
 800808a:	d1ed      	bne.n	8008068 <__gethex+0x290>
 800808c:	4621      	mov	r1, r4
 800808e:	4648      	mov	r0, r9
 8008090:	f000 fa98 	bl	80085c4 <_Bfree>
 8008094:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008096:	2300      	movs	r3, #0
 8008098:	6013      	str	r3, [r2, #0]
 800809a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800809e:	e725      	b.n	8007eec <__gethex+0x114>
 80080a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1f2      	bne.n	800808c <__gethex+0x2b4>
 80080a6:	e7df      	b.n	8008068 <__gethex+0x290>
 80080a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1dc      	bne.n	8008068 <__gethex+0x290>
 80080ae:	e7ed      	b.n	800808c <__gethex+0x2b4>
 80080b0:	08009fc3 	.word	0x08009fc3
 80080b4:	0800a1c7 	.word	0x0800a1c7
 80080b8:	0800a1d8 	.word	0x0800a1d8
 80080bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80080c0:	f1bb 0f00 	cmp.w	fp, #0
 80080c4:	d133      	bne.n	800812e <__gethex+0x356>
 80080c6:	f1b8 0f00 	cmp.w	r8, #0
 80080ca:	d004      	beq.n	80080d6 <__gethex+0x2fe>
 80080cc:	4641      	mov	r1, r8
 80080ce:	4620      	mov	r0, r4
 80080d0:	f000 fec4 	bl	8008e5c <__any_on>
 80080d4:	4683      	mov	fp, r0
 80080d6:	ea4f 1268 	mov.w	r2, r8, asr #5
 80080da:	2301      	movs	r3, #1
 80080dc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80080e0:	f008 081f 	and.w	r8, r8, #31
 80080e4:	fa03 f308 	lsl.w	r3, r3, r8
 80080e8:	4213      	tst	r3, r2
 80080ea:	4631      	mov	r1, r6
 80080ec:	4620      	mov	r0, r4
 80080ee:	bf18      	it	ne
 80080f0:	f04b 0b02 	orrne.w	fp, fp, #2
 80080f4:	1bad      	subs	r5, r5, r6
 80080f6:	f7ff fe07 	bl	8007d08 <rshift>
 80080fa:	687e      	ldr	r6, [r7, #4]
 80080fc:	f04f 0802 	mov.w	r8, #2
 8008100:	f1bb 0f00 	cmp.w	fp, #0
 8008104:	d04a      	beq.n	800819c <__gethex+0x3c4>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2b02      	cmp	r3, #2
 800810a:	d016      	beq.n	800813a <__gethex+0x362>
 800810c:	2b03      	cmp	r3, #3
 800810e:	d018      	beq.n	8008142 <__gethex+0x36a>
 8008110:	2b01      	cmp	r3, #1
 8008112:	d109      	bne.n	8008128 <__gethex+0x350>
 8008114:	f01b 0f02 	tst.w	fp, #2
 8008118:	d006      	beq.n	8008128 <__gethex+0x350>
 800811a:	f8da 3000 	ldr.w	r3, [sl]
 800811e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008122:	f01b 0f01 	tst.w	fp, #1
 8008126:	d10f      	bne.n	8008148 <__gethex+0x370>
 8008128:	f048 0810 	orr.w	r8, r8, #16
 800812c:	e036      	b.n	800819c <__gethex+0x3c4>
 800812e:	f04f 0b01 	mov.w	fp, #1
 8008132:	e7d0      	b.n	80080d6 <__gethex+0x2fe>
 8008134:	f04f 0801 	mov.w	r8, #1
 8008138:	e7e2      	b.n	8008100 <__gethex+0x328>
 800813a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800813c:	f1c3 0301 	rsb	r3, r3, #1
 8008140:	930f      	str	r3, [sp, #60]	; 0x3c
 8008142:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008144:	2b00      	cmp	r3, #0
 8008146:	d0ef      	beq.n	8008128 <__gethex+0x350>
 8008148:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800814c:	f104 0214 	add.w	r2, r4, #20
 8008150:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008154:	9301      	str	r3, [sp, #4]
 8008156:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800815a:	2300      	movs	r3, #0
 800815c:	4694      	mov	ip, r2
 800815e:	f852 1b04 	ldr.w	r1, [r2], #4
 8008162:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008166:	d01e      	beq.n	80081a6 <__gethex+0x3ce>
 8008168:	3101      	adds	r1, #1
 800816a:	f8cc 1000 	str.w	r1, [ip]
 800816e:	f1b8 0f02 	cmp.w	r8, #2
 8008172:	f104 0214 	add.w	r2, r4, #20
 8008176:	d13d      	bne.n	80081f4 <__gethex+0x41c>
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	3b01      	subs	r3, #1
 800817c:	42ab      	cmp	r3, r5
 800817e:	d10b      	bne.n	8008198 <__gethex+0x3c0>
 8008180:	1169      	asrs	r1, r5, #5
 8008182:	2301      	movs	r3, #1
 8008184:	f005 051f 	and.w	r5, r5, #31
 8008188:	fa03 f505 	lsl.w	r5, r3, r5
 800818c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008190:	421d      	tst	r5, r3
 8008192:	bf18      	it	ne
 8008194:	f04f 0801 	movne.w	r8, #1
 8008198:	f048 0820 	orr.w	r8, r8, #32
 800819c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800819e:	601c      	str	r4, [r3, #0]
 80081a0:	9b02      	ldr	r3, [sp, #8]
 80081a2:	601e      	str	r6, [r3, #0]
 80081a4:	e6a2      	b.n	8007eec <__gethex+0x114>
 80081a6:	4290      	cmp	r0, r2
 80081a8:	f842 3c04 	str.w	r3, [r2, #-4]
 80081ac:	d8d6      	bhi.n	800815c <__gethex+0x384>
 80081ae:	68a2      	ldr	r2, [r4, #8]
 80081b0:	4593      	cmp	fp, r2
 80081b2:	db17      	blt.n	80081e4 <__gethex+0x40c>
 80081b4:	6861      	ldr	r1, [r4, #4]
 80081b6:	4648      	mov	r0, r9
 80081b8:	3101      	adds	r1, #1
 80081ba:	f000 f9c3 	bl	8008544 <_Balloc>
 80081be:	4682      	mov	sl, r0
 80081c0:	b918      	cbnz	r0, 80081ca <__gethex+0x3f2>
 80081c2:	4b1b      	ldr	r3, [pc, #108]	; (8008230 <__gethex+0x458>)
 80081c4:	4602      	mov	r2, r0
 80081c6:	2184      	movs	r1, #132	; 0x84
 80081c8:	e6b3      	b.n	8007f32 <__gethex+0x15a>
 80081ca:	6922      	ldr	r2, [r4, #16]
 80081cc:	3202      	adds	r2, #2
 80081ce:	f104 010c 	add.w	r1, r4, #12
 80081d2:	0092      	lsls	r2, r2, #2
 80081d4:	300c      	adds	r0, #12
 80081d6:	f7ff fd10 	bl	8007bfa <memcpy>
 80081da:	4621      	mov	r1, r4
 80081dc:	4648      	mov	r0, r9
 80081de:	f000 f9f1 	bl	80085c4 <_Bfree>
 80081e2:	4654      	mov	r4, sl
 80081e4:	6922      	ldr	r2, [r4, #16]
 80081e6:	1c51      	adds	r1, r2, #1
 80081e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80081ec:	6121      	str	r1, [r4, #16]
 80081ee:	2101      	movs	r1, #1
 80081f0:	6151      	str	r1, [r2, #20]
 80081f2:	e7bc      	b.n	800816e <__gethex+0x396>
 80081f4:	6921      	ldr	r1, [r4, #16]
 80081f6:	4559      	cmp	r1, fp
 80081f8:	dd0b      	ble.n	8008212 <__gethex+0x43a>
 80081fa:	2101      	movs	r1, #1
 80081fc:	4620      	mov	r0, r4
 80081fe:	f7ff fd83 	bl	8007d08 <rshift>
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	3601      	adds	r6, #1
 8008206:	42b3      	cmp	r3, r6
 8008208:	f6ff aedb 	blt.w	8007fc2 <__gethex+0x1ea>
 800820c:	f04f 0801 	mov.w	r8, #1
 8008210:	e7c2      	b.n	8008198 <__gethex+0x3c0>
 8008212:	f015 051f 	ands.w	r5, r5, #31
 8008216:	d0f9      	beq.n	800820c <__gethex+0x434>
 8008218:	9b01      	ldr	r3, [sp, #4]
 800821a:	441a      	add	r2, r3
 800821c:	f1c5 0520 	rsb	r5, r5, #32
 8008220:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008224:	f000 fa80 	bl	8008728 <__hi0bits>
 8008228:	42a8      	cmp	r0, r5
 800822a:	dbe6      	blt.n	80081fa <__gethex+0x422>
 800822c:	e7ee      	b.n	800820c <__gethex+0x434>
 800822e:	bf00      	nop
 8008230:	0800a1c7 	.word	0x0800a1c7

08008234 <L_shift>:
 8008234:	f1c2 0208 	rsb	r2, r2, #8
 8008238:	0092      	lsls	r2, r2, #2
 800823a:	b570      	push	{r4, r5, r6, lr}
 800823c:	f1c2 0620 	rsb	r6, r2, #32
 8008240:	6843      	ldr	r3, [r0, #4]
 8008242:	6804      	ldr	r4, [r0, #0]
 8008244:	fa03 f506 	lsl.w	r5, r3, r6
 8008248:	432c      	orrs	r4, r5
 800824a:	40d3      	lsrs	r3, r2
 800824c:	6004      	str	r4, [r0, #0]
 800824e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008252:	4288      	cmp	r0, r1
 8008254:	d3f4      	bcc.n	8008240 <L_shift+0xc>
 8008256:	bd70      	pop	{r4, r5, r6, pc}

08008258 <__match>:
 8008258:	b530      	push	{r4, r5, lr}
 800825a:	6803      	ldr	r3, [r0, #0]
 800825c:	3301      	adds	r3, #1
 800825e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008262:	b914      	cbnz	r4, 800826a <__match+0x12>
 8008264:	6003      	str	r3, [r0, #0]
 8008266:	2001      	movs	r0, #1
 8008268:	bd30      	pop	{r4, r5, pc}
 800826a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800826e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008272:	2d19      	cmp	r5, #25
 8008274:	bf98      	it	ls
 8008276:	3220      	addls	r2, #32
 8008278:	42a2      	cmp	r2, r4
 800827a:	d0f0      	beq.n	800825e <__match+0x6>
 800827c:	2000      	movs	r0, #0
 800827e:	e7f3      	b.n	8008268 <__match+0x10>

08008280 <__hexnan>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	680b      	ldr	r3, [r1, #0]
 8008286:	6801      	ldr	r1, [r0, #0]
 8008288:	115e      	asrs	r6, r3, #5
 800828a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800828e:	f013 031f 	ands.w	r3, r3, #31
 8008292:	b087      	sub	sp, #28
 8008294:	bf18      	it	ne
 8008296:	3604      	addne	r6, #4
 8008298:	2500      	movs	r5, #0
 800829a:	1f37      	subs	r7, r6, #4
 800829c:	4682      	mov	sl, r0
 800829e:	4690      	mov	r8, r2
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80082a6:	46b9      	mov	r9, r7
 80082a8:	463c      	mov	r4, r7
 80082aa:	9502      	str	r5, [sp, #8]
 80082ac:	46ab      	mov	fp, r5
 80082ae:	784a      	ldrb	r2, [r1, #1]
 80082b0:	1c4b      	adds	r3, r1, #1
 80082b2:	9303      	str	r3, [sp, #12]
 80082b4:	b342      	cbz	r2, 8008308 <__hexnan+0x88>
 80082b6:	4610      	mov	r0, r2
 80082b8:	9105      	str	r1, [sp, #20]
 80082ba:	9204      	str	r2, [sp, #16]
 80082bc:	f7ff fd76 	bl	8007dac <__hexdig_fun>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d14f      	bne.n	8008364 <__hexnan+0xe4>
 80082c4:	9a04      	ldr	r2, [sp, #16]
 80082c6:	9905      	ldr	r1, [sp, #20]
 80082c8:	2a20      	cmp	r2, #32
 80082ca:	d818      	bhi.n	80082fe <__hexnan+0x7e>
 80082cc:	9b02      	ldr	r3, [sp, #8]
 80082ce:	459b      	cmp	fp, r3
 80082d0:	dd13      	ble.n	80082fa <__hexnan+0x7a>
 80082d2:	454c      	cmp	r4, r9
 80082d4:	d206      	bcs.n	80082e4 <__hexnan+0x64>
 80082d6:	2d07      	cmp	r5, #7
 80082d8:	dc04      	bgt.n	80082e4 <__hexnan+0x64>
 80082da:	462a      	mov	r2, r5
 80082dc:	4649      	mov	r1, r9
 80082de:	4620      	mov	r0, r4
 80082e0:	f7ff ffa8 	bl	8008234 <L_shift>
 80082e4:	4544      	cmp	r4, r8
 80082e6:	d950      	bls.n	800838a <__hexnan+0x10a>
 80082e8:	2300      	movs	r3, #0
 80082ea:	f1a4 0904 	sub.w	r9, r4, #4
 80082ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80082f2:	f8cd b008 	str.w	fp, [sp, #8]
 80082f6:	464c      	mov	r4, r9
 80082f8:	461d      	mov	r5, r3
 80082fa:	9903      	ldr	r1, [sp, #12]
 80082fc:	e7d7      	b.n	80082ae <__hexnan+0x2e>
 80082fe:	2a29      	cmp	r2, #41	; 0x29
 8008300:	d155      	bne.n	80083ae <__hexnan+0x12e>
 8008302:	3102      	adds	r1, #2
 8008304:	f8ca 1000 	str.w	r1, [sl]
 8008308:	f1bb 0f00 	cmp.w	fp, #0
 800830c:	d04f      	beq.n	80083ae <__hexnan+0x12e>
 800830e:	454c      	cmp	r4, r9
 8008310:	d206      	bcs.n	8008320 <__hexnan+0xa0>
 8008312:	2d07      	cmp	r5, #7
 8008314:	dc04      	bgt.n	8008320 <__hexnan+0xa0>
 8008316:	462a      	mov	r2, r5
 8008318:	4649      	mov	r1, r9
 800831a:	4620      	mov	r0, r4
 800831c:	f7ff ff8a 	bl	8008234 <L_shift>
 8008320:	4544      	cmp	r4, r8
 8008322:	d934      	bls.n	800838e <__hexnan+0x10e>
 8008324:	f1a8 0204 	sub.w	r2, r8, #4
 8008328:	4623      	mov	r3, r4
 800832a:	f853 1b04 	ldr.w	r1, [r3], #4
 800832e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008332:	429f      	cmp	r7, r3
 8008334:	d2f9      	bcs.n	800832a <__hexnan+0xaa>
 8008336:	1b3b      	subs	r3, r7, r4
 8008338:	f023 0303 	bic.w	r3, r3, #3
 800833c:	3304      	adds	r3, #4
 800833e:	3e03      	subs	r6, #3
 8008340:	3401      	adds	r4, #1
 8008342:	42a6      	cmp	r6, r4
 8008344:	bf38      	it	cc
 8008346:	2304      	movcc	r3, #4
 8008348:	4443      	add	r3, r8
 800834a:	2200      	movs	r2, #0
 800834c:	f843 2b04 	str.w	r2, [r3], #4
 8008350:	429f      	cmp	r7, r3
 8008352:	d2fb      	bcs.n	800834c <__hexnan+0xcc>
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	b91b      	cbnz	r3, 8008360 <__hexnan+0xe0>
 8008358:	4547      	cmp	r7, r8
 800835a:	d126      	bne.n	80083aa <__hexnan+0x12a>
 800835c:	2301      	movs	r3, #1
 800835e:	603b      	str	r3, [r7, #0]
 8008360:	2005      	movs	r0, #5
 8008362:	e025      	b.n	80083b0 <__hexnan+0x130>
 8008364:	3501      	adds	r5, #1
 8008366:	2d08      	cmp	r5, #8
 8008368:	f10b 0b01 	add.w	fp, fp, #1
 800836c:	dd06      	ble.n	800837c <__hexnan+0xfc>
 800836e:	4544      	cmp	r4, r8
 8008370:	d9c3      	bls.n	80082fa <__hexnan+0x7a>
 8008372:	2300      	movs	r3, #0
 8008374:	f844 3c04 	str.w	r3, [r4, #-4]
 8008378:	2501      	movs	r5, #1
 800837a:	3c04      	subs	r4, #4
 800837c:	6822      	ldr	r2, [r4, #0]
 800837e:	f000 000f 	and.w	r0, r0, #15
 8008382:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008386:	6020      	str	r0, [r4, #0]
 8008388:	e7b7      	b.n	80082fa <__hexnan+0x7a>
 800838a:	2508      	movs	r5, #8
 800838c:	e7b5      	b.n	80082fa <__hexnan+0x7a>
 800838e:	9b01      	ldr	r3, [sp, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d0df      	beq.n	8008354 <__hexnan+0xd4>
 8008394:	f1c3 0320 	rsb	r3, r3, #32
 8008398:	f04f 32ff 	mov.w	r2, #4294967295
 800839c:	40da      	lsrs	r2, r3
 800839e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80083a2:	4013      	ands	r3, r2
 80083a4:	f846 3c04 	str.w	r3, [r6, #-4]
 80083a8:	e7d4      	b.n	8008354 <__hexnan+0xd4>
 80083aa:	3f04      	subs	r7, #4
 80083ac:	e7d2      	b.n	8008354 <__hexnan+0xd4>
 80083ae:	2004      	movs	r0, #4
 80083b0:	b007      	add	sp, #28
 80083b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080083b8 <malloc>:
 80083b8:	4b02      	ldr	r3, [pc, #8]	; (80083c4 <malloc+0xc>)
 80083ba:	4601      	mov	r1, r0
 80083bc:	6818      	ldr	r0, [r3, #0]
 80083be:	f000 b823 	b.w	8008408 <_malloc_r>
 80083c2:	bf00      	nop
 80083c4:	200001d0 	.word	0x200001d0

080083c8 <sbrk_aligned>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	4e0e      	ldr	r6, [pc, #56]	; (8008404 <sbrk_aligned+0x3c>)
 80083cc:	460c      	mov	r4, r1
 80083ce:	6831      	ldr	r1, [r6, #0]
 80083d0:	4605      	mov	r5, r0
 80083d2:	b911      	cbnz	r1, 80083da <sbrk_aligned+0x12>
 80083d4:	f001 f932 	bl	800963c <_sbrk_r>
 80083d8:	6030      	str	r0, [r6, #0]
 80083da:	4621      	mov	r1, r4
 80083dc:	4628      	mov	r0, r5
 80083de:	f001 f92d 	bl	800963c <_sbrk_r>
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	d00a      	beq.n	80083fc <sbrk_aligned+0x34>
 80083e6:	1cc4      	adds	r4, r0, #3
 80083e8:	f024 0403 	bic.w	r4, r4, #3
 80083ec:	42a0      	cmp	r0, r4
 80083ee:	d007      	beq.n	8008400 <sbrk_aligned+0x38>
 80083f0:	1a21      	subs	r1, r4, r0
 80083f2:	4628      	mov	r0, r5
 80083f4:	f001 f922 	bl	800963c <_sbrk_r>
 80083f8:	3001      	adds	r0, #1
 80083fa:	d101      	bne.n	8008400 <sbrk_aligned+0x38>
 80083fc:	f04f 34ff 	mov.w	r4, #4294967295
 8008400:	4620      	mov	r0, r4
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	20000798 	.word	0x20000798

08008408 <_malloc_r>:
 8008408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800840c:	1ccd      	adds	r5, r1, #3
 800840e:	f025 0503 	bic.w	r5, r5, #3
 8008412:	3508      	adds	r5, #8
 8008414:	2d0c      	cmp	r5, #12
 8008416:	bf38      	it	cc
 8008418:	250c      	movcc	r5, #12
 800841a:	2d00      	cmp	r5, #0
 800841c:	4607      	mov	r7, r0
 800841e:	db01      	blt.n	8008424 <_malloc_r+0x1c>
 8008420:	42a9      	cmp	r1, r5
 8008422:	d905      	bls.n	8008430 <_malloc_r+0x28>
 8008424:	230c      	movs	r3, #12
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	2600      	movs	r6, #0
 800842a:	4630      	mov	r0, r6
 800842c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008430:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008504 <_malloc_r+0xfc>
 8008434:	f000 f87a 	bl	800852c <__malloc_lock>
 8008438:	f8d8 3000 	ldr.w	r3, [r8]
 800843c:	461c      	mov	r4, r3
 800843e:	bb5c      	cbnz	r4, 8008498 <_malloc_r+0x90>
 8008440:	4629      	mov	r1, r5
 8008442:	4638      	mov	r0, r7
 8008444:	f7ff ffc0 	bl	80083c8 <sbrk_aligned>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	4604      	mov	r4, r0
 800844c:	d155      	bne.n	80084fa <_malloc_r+0xf2>
 800844e:	f8d8 4000 	ldr.w	r4, [r8]
 8008452:	4626      	mov	r6, r4
 8008454:	2e00      	cmp	r6, #0
 8008456:	d145      	bne.n	80084e4 <_malloc_r+0xdc>
 8008458:	2c00      	cmp	r4, #0
 800845a:	d048      	beq.n	80084ee <_malloc_r+0xe6>
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	4631      	mov	r1, r6
 8008460:	4638      	mov	r0, r7
 8008462:	eb04 0903 	add.w	r9, r4, r3
 8008466:	f001 f8e9 	bl	800963c <_sbrk_r>
 800846a:	4581      	cmp	r9, r0
 800846c:	d13f      	bne.n	80084ee <_malloc_r+0xe6>
 800846e:	6821      	ldr	r1, [r4, #0]
 8008470:	1a6d      	subs	r5, r5, r1
 8008472:	4629      	mov	r1, r5
 8008474:	4638      	mov	r0, r7
 8008476:	f7ff ffa7 	bl	80083c8 <sbrk_aligned>
 800847a:	3001      	adds	r0, #1
 800847c:	d037      	beq.n	80084ee <_malloc_r+0xe6>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	442b      	add	r3, r5
 8008482:	6023      	str	r3, [r4, #0]
 8008484:	f8d8 3000 	ldr.w	r3, [r8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d038      	beq.n	80084fe <_malloc_r+0xf6>
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	42a2      	cmp	r2, r4
 8008490:	d12b      	bne.n	80084ea <_malloc_r+0xe2>
 8008492:	2200      	movs	r2, #0
 8008494:	605a      	str	r2, [r3, #4]
 8008496:	e00f      	b.n	80084b8 <_malloc_r+0xb0>
 8008498:	6822      	ldr	r2, [r4, #0]
 800849a:	1b52      	subs	r2, r2, r5
 800849c:	d41f      	bmi.n	80084de <_malloc_r+0xd6>
 800849e:	2a0b      	cmp	r2, #11
 80084a0:	d917      	bls.n	80084d2 <_malloc_r+0xca>
 80084a2:	1961      	adds	r1, r4, r5
 80084a4:	42a3      	cmp	r3, r4
 80084a6:	6025      	str	r5, [r4, #0]
 80084a8:	bf18      	it	ne
 80084aa:	6059      	strne	r1, [r3, #4]
 80084ac:	6863      	ldr	r3, [r4, #4]
 80084ae:	bf08      	it	eq
 80084b0:	f8c8 1000 	streq.w	r1, [r8]
 80084b4:	5162      	str	r2, [r4, r5]
 80084b6:	604b      	str	r3, [r1, #4]
 80084b8:	4638      	mov	r0, r7
 80084ba:	f104 060b 	add.w	r6, r4, #11
 80084be:	f000 f83b 	bl	8008538 <__malloc_unlock>
 80084c2:	f026 0607 	bic.w	r6, r6, #7
 80084c6:	1d23      	adds	r3, r4, #4
 80084c8:	1af2      	subs	r2, r6, r3
 80084ca:	d0ae      	beq.n	800842a <_malloc_r+0x22>
 80084cc:	1b9b      	subs	r3, r3, r6
 80084ce:	50a3      	str	r3, [r4, r2]
 80084d0:	e7ab      	b.n	800842a <_malloc_r+0x22>
 80084d2:	42a3      	cmp	r3, r4
 80084d4:	6862      	ldr	r2, [r4, #4]
 80084d6:	d1dd      	bne.n	8008494 <_malloc_r+0x8c>
 80084d8:	f8c8 2000 	str.w	r2, [r8]
 80084dc:	e7ec      	b.n	80084b8 <_malloc_r+0xb0>
 80084de:	4623      	mov	r3, r4
 80084e0:	6864      	ldr	r4, [r4, #4]
 80084e2:	e7ac      	b.n	800843e <_malloc_r+0x36>
 80084e4:	4634      	mov	r4, r6
 80084e6:	6876      	ldr	r6, [r6, #4]
 80084e8:	e7b4      	b.n	8008454 <_malloc_r+0x4c>
 80084ea:	4613      	mov	r3, r2
 80084ec:	e7cc      	b.n	8008488 <_malloc_r+0x80>
 80084ee:	230c      	movs	r3, #12
 80084f0:	603b      	str	r3, [r7, #0]
 80084f2:	4638      	mov	r0, r7
 80084f4:	f000 f820 	bl	8008538 <__malloc_unlock>
 80084f8:	e797      	b.n	800842a <_malloc_r+0x22>
 80084fa:	6025      	str	r5, [r4, #0]
 80084fc:	e7dc      	b.n	80084b8 <_malloc_r+0xb0>
 80084fe:	605b      	str	r3, [r3, #4]
 8008500:	deff      	udf	#255	; 0xff
 8008502:	bf00      	nop
 8008504:	20000794 	.word	0x20000794

08008508 <__ascii_mbtowc>:
 8008508:	b082      	sub	sp, #8
 800850a:	b901      	cbnz	r1, 800850e <__ascii_mbtowc+0x6>
 800850c:	a901      	add	r1, sp, #4
 800850e:	b142      	cbz	r2, 8008522 <__ascii_mbtowc+0x1a>
 8008510:	b14b      	cbz	r3, 8008526 <__ascii_mbtowc+0x1e>
 8008512:	7813      	ldrb	r3, [r2, #0]
 8008514:	600b      	str	r3, [r1, #0]
 8008516:	7812      	ldrb	r2, [r2, #0]
 8008518:	1e10      	subs	r0, r2, #0
 800851a:	bf18      	it	ne
 800851c:	2001      	movne	r0, #1
 800851e:	b002      	add	sp, #8
 8008520:	4770      	bx	lr
 8008522:	4610      	mov	r0, r2
 8008524:	e7fb      	b.n	800851e <__ascii_mbtowc+0x16>
 8008526:	f06f 0001 	mvn.w	r0, #1
 800852a:	e7f8      	b.n	800851e <__ascii_mbtowc+0x16>

0800852c <__malloc_lock>:
 800852c:	4801      	ldr	r0, [pc, #4]	; (8008534 <__malloc_lock+0x8>)
 800852e:	f7ff bb62 	b.w	8007bf6 <__retarget_lock_acquire_recursive>
 8008532:	bf00      	nop
 8008534:	20000790 	.word	0x20000790

08008538 <__malloc_unlock>:
 8008538:	4801      	ldr	r0, [pc, #4]	; (8008540 <__malloc_unlock+0x8>)
 800853a:	f7ff bb5d 	b.w	8007bf8 <__retarget_lock_release_recursive>
 800853e:	bf00      	nop
 8008540:	20000790 	.word	0x20000790

08008544 <_Balloc>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	69c6      	ldr	r6, [r0, #28]
 8008548:	4604      	mov	r4, r0
 800854a:	460d      	mov	r5, r1
 800854c:	b976      	cbnz	r6, 800856c <_Balloc+0x28>
 800854e:	2010      	movs	r0, #16
 8008550:	f7ff ff32 	bl	80083b8 <malloc>
 8008554:	4602      	mov	r2, r0
 8008556:	61e0      	str	r0, [r4, #28]
 8008558:	b920      	cbnz	r0, 8008564 <_Balloc+0x20>
 800855a:	4b18      	ldr	r3, [pc, #96]	; (80085bc <_Balloc+0x78>)
 800855c:	4818      	ldr	r0, [pc, #96]	; (80085c0 <_Balloc+0x7c>)
 800855e:	216b      	movs	r1, #107	; 0x6b
 8008560:	f7ff fb68 	bl	8007c34 <__assert_func>
 8008564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008568:	6006      	str	r6, [r0, #0]
 800856a:	60c6      	str	r6, [r0, #12]
 800856c:	69e6      	ldr	r6, [r4, #28]
 800856e:	68f3      	ldr	r3, [r6, #12]
 8008570:	b183      	cbz	r3, 8008594 <_Balloc+0x50>
 8008572:	69e3      	ldr	r3, [r4, #28]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800857a:	b9b8      	cbnz	r0, 80085ac <_Balloc+0x68>
 800857c:	2101      	movs	r1, #1
 800857e:	fa01 f605 	lsl.w	r6, r1, r5
 8008582:	1d72      	adds	r2, r6, #5
 8008584:	0092      	lsls	r2, r2, #2
 8008586:	4620      	mov	r0, r4
 8008588:	f001 f86f 	bl	800966a <_calloc_r>
 800858c:	b160      	cbz	r0, 80085a8 <_Balloc+0x64>
 800858e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008592:	e00e      	b.n	80085b2 <_Balloc+0x6e>
 8008594:	2221      	movs	r2, #33	; 0x21
 8008596:	2104      	movs	r1, #4
 8008598:	4620      	mov	r0, r4
 800859a:	f001 f866 	bl	800966a <_calloc_r>
 800859e:	69e3      	ldr	r3, [r4, #28]
 80085a0:	60f0      	str	r0, [r6, #12]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e4      	bne.n	8008572 <_Balloc+0x2e>
 80085a8:	2000      	movs	r0, #0
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	6802      	ldr	r2, [r0, #0]
 80085ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085b2:	2300      	movs	r3, #0
 80085b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085b8:	e7f7      	b.n	80085aa <_Balloc+0x66>
 80085ba:	bf00      	nop
 80085bc:	08009f54 	.word	0x08009f54
 80085c0:	0800a238 	.word	0x0800a238

080085c4 <_Bfree>:
 80085c4:	b570      	push	{r4, r5, r6, lr}
 80085c6:	69c6      	ldr	r6, [r0, #28]
 80085c8:	4605      	mov	r5, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	b976      	cbnz	r6, 80085ec <_Bfree+0x28>
 80085ce:	2010      	movs	r0, #16
 80085d0:	f7ff fef2 	bl	80083b8 <malloc>
 80085d4:	4602      	mov	r2, r0
 80085d6:	61e8      	str	r0, [r5, #28]
 80085d8:	b920      	cbnz	r0, 80085e4 <_Bfree+0x20>
 80085da:	4b09      	ldr	r3, [pc, #36]	; (8008600 <_Bfree+0x3c>)
 80085dc:	4809      	ldr	r0, [pc, #36]	; (8008604 <_Bfree+0x40>)
 80085de:	218f      	movs	r1, #143	; 0x8f
 80085e0:	f7ff fb28 	bl	8007c34 <__assert_func>
 80085e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085e8:	6006      	str	r6, [r0, #0]
 80085ea:	60c6      	str	r6, [r0, #12]
 80085ec:	b13c      	cbz	r4, 80085fe <_Bfree+0x3a>
 80085ee:	69eb      	ldr	r3, [r5, #28]
 80085f0:	6862      	ldr	r2, [r4, #4]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085f8:	6021      	str	r1, [r4, #0]
 80085fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085fe:	bd70      	pop	{r4, r5, r6, pc}
 8008600:	08009f54 	.word	0x08009f54
 8008604:	0800a238 	.word	0x0800a238

08008608 <__multadd>:
 8008608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800860c:	690d      	ldr	r5, [r1, #16]
 800860e:	4607      	mov	r7, r0
 8008610:	460c      	mov	r4, r1
 8008612:	461e      	mov	r6, r3
 8008614:	f101 0c14 	add.w	ip, r1, #20
 8008618:	2000      	movs	r0, #0
 800861a:	f8dc 3000 	ldr.w	r3, [ip]
 800861e:	b299      	uxth	r1, r3
 8008620:	fb02 6101 	mla	r1, r2, r1, r6
 8008624:	0c1e      	lsrs	r6, r3, #16
 8008626:	0c0b      	lsrs	r3, r1, #16
 8008628:	fb02 3306 	mla	r3, r2, r6, r3
 800862c:	b289      	uxth	r1, r1
 800862e:	3001      	adds	r0, #1
 8008630:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008634:	4285      	cmp	r5, r0
 8008636:	f84c 1b04 	str.w	r1, [ip], #4
 800863a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800863e:	dcec      	bgt.n	800861a <__multadd+0x12>
 8008640:	b30e      	cbz	r6, 8008686 <__multadd+0x7e>
 8008642:	68a3      	ldr	r3, [r4, #8]
 8008644:	42ab      	cmp	r3, r5
 8008646:	dc19      	bgt.n	800867c <__multadd+0x74>
 8008648:	6861      	ldr	r1, [r4, #4]
 800864a:	4638      	mov	r0, r7
 800864c:	3101      	adds	r1, #1
 800864e:	f7ff ff79 	bl	8008544 <_Balloc>
 8008652:	4680      	mov	r8, r0
 8008654:	b928      	cbnz	r0, 8008662 <__multadd+0x5a>
 8008656:	4602      	mov	r2, r0
 8008658:	4b0c      	ldr	r3, [pc, #48]	; (800868c <__multadd+0x84>)
 800865a:	480d      	ldr	r0, [pc, #52]	; (8008690 <__multadd+0x88>)
 800865c:	21ba      	movs	r1, #186	; 0xba
 800865e:	f7ff fae9 	bl	8007c34 <__assert_func>
 8008662:	6922      	ldr	r2, [r4, #16]
 8008664:	3202      	adds	r2, #2
 8008666:	f104 010c 	add.w	r1, r4, #12
 800866a:	0092      	lsls	r2, r2, #2
 800866c:	300c      	adds	r0, #12
 800866e:	f7ff fac4 	bl	8007bfa <memcpy>
 8008672:	4621      	mov	r1, r4
 8008674:	4638      	mov	r0, r7
 8008676:	f7ff ffa5 	bl	80085c4 <_Bfree>
 800867a:	4644      	mov	r4, r8
 800867c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008680:	3501      	adds	r5, #1
 8008682:	615e      	str	r6, [r3, #20]
 8008684:	6125      	str	r5, [r4, #16]
 8008686:	4620      	mov	r0, r4
 8008688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800868c:	0800a1c7 	.word	0x0800a1c7
 8008690:	0800a238 	.word	0x0800a238

08008694 <__s2b>:
 8008694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008698:	460c      	mov	r4, r1
 800869a:	4615      	mov	r5, r2
 800869c:	461f      	mov	r7, r3
 800869e:	2209      	movs	r2, #9
 80086a0:	3308      	adds	r3, #8
 80086a2:	4606      	mov	r6, r0
 80086a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80086a8:	2100      	movs	r1, #0
 80086aa:	2201      	movs	r2, #1
 80086ac:	429a      	cmp	r2, r3
 80086ae:	db09      	blt.n	80086c4 <__s2b+0x30>
 80086b0:	4630      	mov	r0, r6
 80086b2:	f7ff ff47 	bl	8008544 <_Balloc>
 80086b6:	b940      	cbnz	r0, 80086ca <__s2b+0x36>
 80086b8:	4602      	mov	r2, r0
 80086ba:	4b19      	ldr	r3, [pc, #100]	; (8008720 <__s2b+0x8c>)
 80086bc:	4819      	ldr	r0, [pc, #100]	; (8008724 <__s2b+0x90>)
 80086be:	21d3      	movs	r1, #211	; 0xd3
 80086c0:	f7ff fab8 	bl	8007c34 <__assert_func>
 80086c4:	0052      	lsls	r2, r2, #1
 80086c6:	3101      	adds	r1, #1
 80086c8:	e7f0      	b.n	80086ac <__s2b+0x18>
 80086ca:	9b08      	ldr	r3, [sp, #32]
 80086cc:	6143      	str	r3, [r0, #20]
 80086ce:	2d09      	cmp	r5, #9
 80086d0:	f04f 0301 	mov.w	r3, #1
 80086d4:	6103      	str	r3, [r0, #16]
 80086d6:	dd16      	ble.n	8008706 <__s2b+0x72>
 80086d8:	f104 0909 	add.w	r9, r4, #9
 80086dc:	46c8      	mov	r8, r9
 80086de:	442c      	add	r4, r5
 80086e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80086e4:	4601      	mov	r1, r0
 80086e6:	3b30      	subs	r3, #48	; 0x30
 80086e8:	220a      	movs	r2, #10
 80086ea:	4630      	mov	r0, r6
 80086ec:	f7ff ff8c 	bl	8008608 <__multadd>
 80086f0:	45a0      	cmp	r8, r4
 80086f2:	d1f5      	bne.n	80086e0 <__s2b+0x4c>
 80086f4:	f1a5 0408 	sub.w	r4, r5, #8
 80086f8:	444c      	add	r4, r9
 80086fa:	1b2d      	subs	r5, r5, r4
 80086fc:	1963      	adds	r3, r4, r5
 80086fe:	42bb      	cmp	r3, r7
 8008700:	db04      	blt.n	800870c <__s2b+0x78>
 8008702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008706:	340a      	adds	r4, #10
 8008708:	2509      	movs	r5, #9
 800870a:	e7f6      	b.n	80086fa <__s2b+0x66>
 800870c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008710:	4601      	mov	r1, r0
 8008712:	3b30      	subs	r3, #48	; 0x30
 8008714:	220a      	movs	r2, #10
 8008716:	4630      	mov	r0, r6
 8008718:	f7ff ff76 	bl	8008608 <__multadd>
 800871c:	e7ee      	b.n	80086fc <__s2b+0x68>
 800871e:	bf00      	nop
 8008720:	0800a1c7 	.word	0x0800a1c7
 8008724:	0800a238 	.word	0x0800a238

08008728 <__hi0bits>:
 8008728:	0c03      	lsrs	r3, r0, #16
 800872a:	041b      	lsls	r3, r3, #16
 800872c:	b9d3      	cbnz	r3, 8008764 <__hi0bits+0x3c>
 800872e:	0400      	lsls	r0, r0, #16
 8008730:	2310      	movs	r3, #16
 8008732:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008736:	bf04      	itt	eq
 8008738:	0200      	lsleq	r0, r0, #8
 800873a:	3308      	addeq	r3, #8
 800873c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008740:	bf04      	itt	eq
 8008742:	0100      	lsleq	r0, r0, #4
 8008744:	3304      	addeq	r3, #4
 8008746:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800874a:	bf04      	itt	eq
 800874c:	0080      	lsleq	r0, r0, #2
 800874e:	3302      	addeq	r3, #2
 8008750:	2800      	cmp	r0, #0
 8008752:	db05      	blt.n	8008760 <__hi0bits+0x38>
 8008754:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008758:	f103 0301 	add.w	r3, r3, #1
 800875c:	bf08      	it	eq
 800875e:	2320      	moveq	r3, #32
 8008760:	4618      	mov	r0, r3
 8008762:	4770      	bx	lr
 8008764:	2300      	movs	r3, #0
 8008766:	e7e4      	b.n	8008732 <__hi0bits+0xa>

08008768 <__lo0bits>:
 8008768:	6803      	ldr	r3, [r0, #0]
 800876a:	f013 0207 	ands.w	r2, r3, #7
 800876e:	d00c      	beq.n	800878a <__lo0bits+0x22>
 8008770:	07d9      	lsls	r1, r3, #31
 8008772:	d422      	bmi.n	80087ba <__lo0bits+0x52>
 8008774:	079a      	lsls	r2, r3, #30
 8008776:	bf49      	itett	mi
 8008778:	085b      	lsrmi	r3, r3, #1
 800877a:	089b      	lsrpl	r3, r3, #2
 800877c:	6003      	strmi	r3, [r0, #0]
 800877e:	2201      	movmi	r2, #1
 8008780:	bf5c      	itt	pl
 8008782:	6003      	strpl	r3, [r0, #0]
 8008784:	2202      	movpl	r2, #2
 8008786:	4610      	mov	r0, r2
 8008788:	4770      	bx	lr
 800878a:	b299      	uxth	r1, r3
 800878c:	b909      	cbnz	r1, 8008792 <__lo0bits+0x2a>
 800878e:	0c1b      	lsrs	r3, r3, #16
 8008790:	2210      	movs	r2, #16
 8008792:	b2d9      	uxtb	r1, r3
 8008794:	b909      	cbnz	r1, 800879a <__lo0bits+0x32>
 8008796:	3208      	adds	r2, #8
 8008798:	0a1b      	lsrs	r3, r3, #8
 800879a:	0719      	lsls	r1, r3, #28
 800879c:	bf04      	itt	eq
 800879e:	091b      	lsreq	r3, r3, #4
 80087a0:	3204      	addeq	r2, #4
 80087a2:	0799      	lsls	r1, r3, #30
 80087a4:	bf04      	itt	eq
 80087a6:	089b      	lsreq	r3, r3, #2
 80087a8:	3202      	addeq	r2, #2
 80087aa:	07d9      	lsls	r1, r3, #31
 80087ac:	d403      	bmi.n	80087b6 <__lo0bits+0x4e>
 80087ae:	085b      	lsrs	r3, r3, #1
 80087b0:	f102 0201 	add.w	r2, r2, #1
 80087b4:	d003      	beq.n	80087be <__lo0bits+0x56>
 80087b6:	6003      	str	r3, [r0, #0]
 80087b8:	e7e5      	b.n	8008786 <__lo0bits+0x1e>
 80087ba:	2200      	movs	r2, #0
 80087bc:	e7e3      	b.n	8008786 <__lo0bits+0x1e>
 80087be:	2220      	movs	r2, #32
 80087c0:	e7e1      	b.n	8008786 <__lo0bits+0x1e>
	...

080087c4 <__i2b>:
 80087c4:	b510      	push	{r4, lr}
 80087c6:	460c      	mov	r4, r1
 80087c8:	2101      	movs	r1, #1
 80087ca:	f7ff febb 	bl	8008544 <_Balloc>
 80087ce:	4602      	mov	r2, r0
 80087d0:	b928      	cbnz	r0, 80087de <__i2b+0x1a>
 80087d2:	4b05      	ldr	r3, [pc, #20]	; (80087e8 <__i2b+0x24>)
 80087d4:	4805      	ldr	r0, [pc, #20]	; (80087ec <__i2b+0x28>)
 80087d6:	f240 1145 	movw	r1, #325	; 0x145
 80087da:	f7ff fa2b 	bl	8007c34 <__assert_func>
 80087de:	2301      	movs	r3, #1
 80087e0:	6144      	str	r4, [r0, #20]
 80087e2:	6103      	str	r3, [r0, #16]
 80087e4:	bd10      	pop	{r4, pc}
 80087e6:	bf00      	nop
 80087e8:	0800a1c7 	.word	0x0800a1c7
 80087ec:	0800a238 	.word	0x0800a238

080087f0 <__multiply>:
 80087f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f4:	4691      	mov	r9, r2
 80087f6:	690a      	ldr	r2, [r1, #16]
 80087f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	bfb8      	it	lt
 8008800:	460b      	movlt	r3, r1
 8008802:	460c      	mov	r4, r1
 8008804:	bfbc      	itt	lt
 8008806:	464c      	movlt	r4, r9
 8008808:	4699      	movlt	r9, r3
 800880a:	6927      	ldr	r7, [r4, #16]
 800880c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008810:	68a3      	ldr	r3, [r4, #8]
 8008812:	6861      	ldr	r1, [r4, #4]
 8008814:	eb07 060a 	add.w	r6, r7, sl
 8008818:	42b3      	cmp	r3, r6
 800881a:	b085      	sub	sp, #20
 800881c:	bfb8      	it	lt
 800881e:	3101      	addlt	r1, #1
 8008820:	f7ff fe90 	bl	8008544 <_Balloc>
 8008824:	b930      	cbnz	r0, 8008834 <__multiply+0x44>
 8008826:	4602      	mov	r2, r0
 8008828:	4b44      	ldr	r3, [pc, #272]	; (800893c <__multiply+0x14c>)
 800882a:	4845      	ldr	r0, [pc, #276]	; (8008940 <__multiply+0x150>)
 800882c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008830:	f7ff fa00 	bl	8007c34 <__assert_func>
 8008834:	f100 0514 	add.w	r5, r0, #20
 8008838:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800883c:	462b      	mov	r3, r5
 800883e:	2200      	movs	r2, #0
 8008840:	4543      	cmp	r3, r8
 8008842:	d321      	bcc.n	8008888 <__multiply+0x98>
 8008844:	f104 0314 	add.w	r3, r4, #20
 8008848:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800884c:	f109 0314 	add.w	r3, r9, #20
 8008850:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008854:	9202      	str	r2, [sp, #8]
 8008856:	1b3a      	subs	r2, r7, r4
 8008858:	3a15      	subs	r2, #21
 800885a:	f022 0203 	bic.w	r2, r2, #3
 800885e:	3204      	adds	r2, #4
 8008860:	f104 0115 	add.w	r1, r4, #21
 8008864:	428f      	cmp	r7, r1
 8008866:	bf38      	it	cc
 8008868:	2204      	movcc	r2, #4
 800886a:	9201      	str	r2, [sp, #4]
 800886c:	9a02      	ldr	r2, [sp, #8]
 800886e:	9303      	str	r3, [sp, #12]
 8008870:	429a      	cmp	r2, r3
 8008872:	d80c      	bhi.n	800888e <__multiply+0x9e>
 8008874:	2e00      	cmp	r6, #0
 8008876:	dd03      	ble.n	8008880 <__multiply+0x90>
 8008878:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800887c:	2b00      	cmp	r3, #0
 800887e:	d05b      	beq.n	8008938 <__multiply+0x148>
 8008880:	6106      	str	r6, [r0, #16]
 8008882:	b005      	add	sp, #20
 8008884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008888:	f843 2b04 	str.w	r2, [r3], #4
 800888c:	e7d8      	b.n	8008840 <__multiply+0x50>
 800888e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008892:	f1ba 0f00 	cmp.w	sl, #0
 8008896:	d024      	beq.n	80088e2 <__multiply+0xf2>
 8008898:	f104 0e14 	add.w	lr, r4, #20
 800889c:	46a9      	mov	r9, r5
 800889e:	f04f 0c00 	mov.w	ip, #0
 80088a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80088a6:	f8d9 1000 	ldr.w	r1, [r9]
 80088aa:	fa1f fb82 	uxth.w	fp, r2
 80088ae:	b289      	uxth	r1, r1
 80088b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80088b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80088b8:	f8d9 2000 	ldr.w	r2, [r9]
 80088bc:	4461      	add	r1, ip
 80088be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80088c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088ca:	b289      	uxth	r1, r1
 80088cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088d0:	4577      	cmp	r7, lr
 80088d2:	f849 1b04 	str.w	r1, [r9], #4
 80088d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088da:	d8e2      	bhi.n	80088a2 <__multiply+0xb2>
 80088dc:	9a01      	ldr	r2, [sp, #4]
 80088de:	f845 c002 	str.w	ip, [r5, r2]
 80088e2:	9a03      	ldr	r2, [sp, #12]
 80088e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80088e8:	3304      	adds	r3, #4
 80088ea:	f1b9 0f00 	cmp.w	r9, #0
 80088ee:	d021      	beq.n	8008934 <__multiply+0x144>
 80088f0:	6829      	ldr	r1, [r5, #0]
 80088f2:	f104 0c14 	add.w	ip, r4, #20
 80088f6:	46ae      	mov	lr, r5
 80088f8:	f04f 0a00 	mov.w	sl, #0
 80088fc:	f8bc b000 	ldrh.w	fp, [ip]
 8008900:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008904:	fb09 220b 	mla	r2, r9, fp, r2
 8008908:	4452      	add	r2, sl
 800890a:	b289      	uxth	r1, r1
 800890c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008910:	f84e 1b04 	str.w	r1, [lr], #4
 8008914:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008918:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800891c:	f8be 1000 	ldrh.w	r1, [lr]
 8008920:	fb09 110a 	mla	r1, r9, sl, r1
 8008924:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008928:	4567      	cmp	r7, ip
 800892a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800892e:	d8e5      	bhi.n	80088fc <__multiply+0x10c>
 8008930:	9a01      	ldr	r2, [sp, #4]
 8008932:	50a9      	str	r1, [r5, r2]
 8008934:	3504      	adds	r5, #4
 8008936:	e799      	b.n	800886c <__multiply+0x7c>
 8008938:	3e01      	subs	r6, #1
 800893a:	e79b      	b.n	8008874 <__multiply+0x84>
 800893c:	0800a1c7 	.word	0x0800a1c7
 8008940:	0800a238 	.word	0x0800a238

08008944 <__pow5mult>:
 8008944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008948:	4615      	mov	r5, r2
 800894a:	f012 0203 	ands.w	r2, r2, #3
 800894e:	4606      	mov	r6, r0
 8008950:	460f      	mov	r7, r1
 8008952:	d007      	beq.n	8008964 <__pow5mult+0x20>
 8008954:	4c25      	ldr	r4, [pc, #148]	; (80089ec <__pow5mult+0xa8>)
 8008956:	3a01      	subs	r2, #1
 8008958:	2300      	movs	r3, #0
 800895a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800895e:	f7ff fe53 	bl	8008608 <__multadd>
 8008962:	4607      	mov	r7, r0
 8008964:	10ad      	asrs	r5, r5, #2
 8008966:	d03d      	beq.n	80089e4 <__pow5mult+0xa0>
 8008968:	69f4      	ldr	r4, [r6, #28]
 800896a:	b97c      	cbnz	r4, 800898c <__pow5mult+0x48>
 800896c:	2010      	movs	r0, #16
 800896e:	f7ff fd23 	bl	80083b8 <malloc>
 8008972:	4602      	mov	r2, r0
 8008974:	61f0      	str	r0, [r6, #28]
 8008976:	b928      	cbnz	r0, 8008984 <__pow5mult+0x40>
 8008978:	4b1d      	ldr	r3, [pc, #116]	; (80089f0 <__pow5mult+0xac>)
 800897a:	481e      	ldr	r0, [pc, #120]	; (80089f4 <__pow5mult+0xb0>)
 800897c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008980:	f7ff f958 	bl	8007c34 <__assert_func>
 8008984:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008988:	6004      	str	r4, [r0, #0]
 800898a:	60c4      	str	r4, [r0, #12]
 800898c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008990:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008994:	b94c      	cbnz	r4, 80089aa <__pow5mult+0x66>
 8008996:	f240 2171 	movw	r1, #625	; 0x271
 800899a:	4630      	mov	r0, r6
 800899c:	f7ff ff12 	bl	80087c4 <__i2b>
 80089a0:	2300      	movs	r3, #0
 80089a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80089a6:	4604      	mov	r4, r0
 80089a8:	6003      	str	r3, [r0, #0]
 80089aa:	f04f 0900 	mov.w	r9, #0
 80089ae:	07eb      	lsls	r3, r5, #31
 80089b0:	d50a      	bpl.n	80089c8 <__pow5mult+0x84>
 80089b2:	4639      	mov	r1, r7
 80089b4:	4622      	mov	r2, r4
 80089b6:	4630      	mov	r0, r6
 80089b8:	f7ff ff1a 	bl	80087f0 <__multiply>
 80089bc:	4639      	mov	r1, r7
 80089be:	4680      	mov	r8, r0
 80089c0:	4630      	mov	r0, r6
 80089c2:	f7ff fdff 	bl	80085c4 <_Bfree>
 80089c6:	4647      	mov	r7, r8
 80089c8:	106d      	asrs	r5, r5, #1
 80089ca:	d00b      	beq.n	80089e4 <__pow5mult+0xa0>
 80089cc:	6820      	ldr	r0, [r4, #0]
 80089ce:	b938      	cbnz	r0, 80089e0 <__pow5mult+0x9c>
 80089d0:	4622      	mov	r2, r4
 80089d2:	4621      	mov	r1, r4
 80089d4:	4630      	mov	r0, r6
 80089d6:	f7ff ff0b 	bl	80087f0 <__multiply>
 80089da:	6020      	str	r0, [r4, #0]
 80089dc:	f8c0 9000 	str.w	r9, [r0]
 80089e0:	4604      	mov	r4, r0
 80089e2:	e7e4      	b.n	80089ae <__pow5mult+0x6a>
 80089e4:	4638      	mov	r0, r7
 80089e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ea:	bf00      	nop
 80089ec:	0800a388 	.word	0x0800a388
 80089f0:	08009f54 	.word	0x08009f54
 80089f4:	0800a238 	.word	0x0800a238

080089f8 <__lshift>:
 80089f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089fc:	460c      	mov	r4, r1
 80089fe:	6849      	ldr	r1, [r1, #4]
 8008a00:	6923      	ldr	r3, [r4, #16]
 8008a02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a06:	68a3      	ldr	r3, [r4, #8]
 8008a08:	4607      	mov	r7, r0
 8008a0a:	4691      	mov	r9, r2
 8008a0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a10:	f108 0601 	add.w	r6, r8, #1
 8008a14:	42b3      	cmp	r3, r6
 8008a16:	db0b      	blt.n	8008a30 <__lshift+0x38>
 8008a18:	4638      	mov	r0, r7
 8008a1a:	f7ff fd93 	bl	8008544 <_Balloc>
 8008a1e:	4605      	mov	r5, r0
 8008a20:	b948      	cbnz	r0, 8008a36 <__lshift+0x3e>
 8008a22:	4602      	mov	r2, r0
 8008a24:	4b28      	ldr	r3, [pc, #160]	; (8008ac8 <__lshift+0xd0>)
 8008a26:	4829      	ldr	r0, [pc, #164]	; (8008acc <__lshift+0xd4>)
 8008a28:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008a2c:	f7ff f902 	bl	8007c34 <__assert_func>
 8008a30:	3101      	adds	r1, #1
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	e7ee      	b.n	8008a14 <__lshift+0x1c>
 8008a36:	2300      	movs	r3, #0
 8008a38:	f100 0114 	add.w	r1, r0, #20
 8008a3c:	f100 0210 	add.w	r2, r0, #16
 8008a40:	4618      	mov	r0, r3
 8008a42:	4553      	cmp	r3, sl
 8008a44:	db33      	blt.n	8008aae <__lshift+0xb6>
 8008a46:	6920      	ldr	r0, [r4, #16]
 8008a48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a4c:	f104 0314 	add.w	r3, r4, #20
 8008a50:	f019 091f 	ands.w	r9, r9, #31
 8008a54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a5c:	d02b      	beq.n	8008ab6 <__lshift+0xbe>
 8008a5e:	f1c9 0e20 	rsb	lr, r9, #32
 8008a62:	468a      	mov	sl, r1
 8008a64:	2200      	movs	r2, #0
 8008a66:	6818      	ldr	r0, [r3, #0]
 8008a68:	fa00 f009 	lsl.w	r0, r0, r9
 8008a6c:	4310      	orrs	r0, r2
 8008a6e:	f84a 0b04 	str.w	r0, [sl], #4
 8008a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a76:	459c      	cmp	ip, r3
 8008a78:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a7c:	d8f3      	bhi.n	8008a66 <__lshift+0x6e>
 8008a7e:	ebac 0304 	sub.w	r3, ip, r4
 8008a82:	3b15      	subs	r3, #21
 8008a84:	f023 0303 	bic.w	r3, r3, #3
 8008a88:	3304      	adds	r3, #4
 8008a8a:	f104 0015 	add.w	r0, r4, #21
 8008a8e:	4584      	cmp	ip, r0
 8008a90:	bf38      	it	cc
 8008a92:	2304      	movcc	r3, #4
 8008a94:	50ca      	str	r2, [r1, r3]
 8008a96:	b10a      	cbz	r2, 8008a9c <__lshift+0xa4>
 8008a98:	f108 0602 	add.w	r6, r8, #2
 8008a9c:	3e01      	subs	r6, #1
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	612e      	str	r6, [r5, #16]
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	f7ff fd8e 	bl	80085c4 <_Bfree>
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aae:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	e7c5      	b.n	8008a42 <__lshift+0x4a>
 8008ab6:	3904      	subs	r1, #4
 8008ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008abc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ac0:	459c      	cmp	ip, r3
 8008ac2:	d8f9      	bhi.n	8008ab8 <__lshift+0xc0>
 8008ac4:	e7ea      	b.n	8008a9c <__lshift+0xa4>
 8008ac6:	bf00      	nop
 8008ac8:	0800a1c7 	.word	0x0800a1c7
 8008acc:	0800a238 	.word	0x0800a238

08008ad0 <__mcmp>:
 8008ad0:	b530      	push	{r4, r5, lr}
 8008ad2:	6902      	ldr	r2, [r0, #16]
 8008ad4:	690c      	ldr	r4, [r1, #16]
 8008ad6:	1b12      	subs	r2, r2, r4
 8008ad8:	d10e      	bne.n	8008af8 <__mcmp+0x28>
 8008ada:	f100 0314 	add.w	r3, r0, #20
 8008ade:	3114      	adds	r1, #20
 8008ae0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ae4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ae8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008aec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008af0:	42a5      	cmp	r5, r4
 8008af2:	d003      	beq.n	8008afc <__mcmp+0x2c>
 8008af4:	d305      	bcc.n	8008b02 <__mcmp+0x32>
 8008af6:	2201      	movs	r2, #1
 8008af8:	4610      	mov	r0, r2
 8008afa:	bd30      	pop	{r4, r5, pc}
 8008afc:	4283      	cmp	r3, r0
 8008afe:	d3f3      	bcc.n	8008ae8 <__mcmp+0x18>
 8008b00:	e7fa      	b.n	8008af8 <__mcmp+0x28>
 8008b02:	f04f 32ff 	mov.w	r2, #4294967295
 8008b06:	e7f7      	b.n	8008af8 <__mcmp+0x28>

08008b08 <__mdiff>:
 8008b08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	460c      	mov	r4, r1
 8008b0e:	4606      	mov	r6, r0
 8008b10:	4611      	mov	r1, r2
 8008b12:	4620      	mov	r0, r4
 8008b14:	4690      	mov	r8, r2
 8008b16:	f7ff ffdb 	bl	8008ad0 <__mcmp>
 8008b1a:	1e05      	subs	r5, r0, #0
 8008b1c:	d110      	bne.n	8008b40 <__mdiff+0x38>
 8008b1e:	4629      	mov	r1, r5
 8008b20:	4630      	mov	r0, r6
 8008b22:	f7ff fd0f 	bl	8008544 <_Balloc>
 8008b26:	b930      	cbnz	r0, 8008b36 <__mdiff+0x2e>
 8008b28:	4b3a      	ldr	r3, [pc, #232]	; (8008c14 <__mdiff+0x10c>)
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	f240 2137 	movw	r1, #567	; 0x237
 8008b30:	4839      	ldr	r0, [pc, #228]	; (8008c18 <__mdiff+0x110>)
 8008b32:	f7ff f87f 	bl	8007c34 <__assert_func>
 8008b36:	2301      	movs	r3, #1
 8008b38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b40:	bfa4      	itt	ge
 8008b42:	4643      	movge	r3, r8
 8008b44:	46a0      	movge	r8, r4
 8008b46:	4630      	mov	r0, r6
 8008b48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b4c:	bfa6      	itte	ge
 8008b4e:	461c      	movge	r4, r3
 8008b50:	2500      	movge	r5, #0
 8008b52:	2501      	movlt	r5, #1
 8008b54:	f7ff fcf6 	bl	8008544 <_Balloc>
 8008b58:	b920      	cbnz	r0, 8008b64 <__mdiff+0x5c>
 8008b5a:	4b2e      	ldr	r3, [pc, #184]	; (8008c14 <__mdiff+0x10c>)
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	f240 2145 	movw	r1, #581	; 0x245
 8008b62:	e7e5      	b.n	8008b30 <__mdiff+0x28>
 8008b64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b68:	6926      	ldr	r6, [r4, #16]
 8008b6a:	60c5      	str	r5, [r0, #12]
 8008b6c:	f104 0914 	add.w	r9, r4, #20
 8008b70:	f108 0514 	add.w	r5, r8, #20
 8008b74:	f100 0e14 	add.w	lr, r0, #20
 8008b78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b80:	f108 0210 	add.w	r2, r8, #16
 8008b84:	46f2      	mov	sl, lr
 8008b86:	2100      	movs	r1, #0
 8008b88:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b90:	fa11 f88b 	uxtah	r8, r1, fp
 8008b94:	b299      	uxth	r1, r3
 8008b96:	0c1b      	lsrs	r3, r3, #16
 8008b98:	eba8 0801 	sub.w	r8, r8, r1
 8008b9c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ba0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ba4:	fa1f f888 	uxth.w	r8, r8
 8008ba8:	1419      	asrs	r1, r3, #16
 8008baa:	454e      	cmp	r6, r9
 8008bac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008bb0:	f84a 3b04 	str.w	r3, [sl], #4
 8008bb4:	d8e8      	bhi.n	8008b88 <__mdiff+0x80>
 8008bb6:	1b33      	subs	r3, r6, r4
 8008bb8:	3b15      	subs	r3, #21
 8008bba:	f023 0303 	bic.w	r3, r3, #3
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	3415      	adds	r4, #21
 8008bc2:	42a6      	cmp	r6, r4
 8008bc4:	bf38      	it	cc
 8008bc6:	2304      	movcc	r3, #4
 8008bc8:	441d      	add	r5, r3
 8008bca:	4473      	add	r3, lr
 8008bcc:	469e      	mov	lr, r3
 8008bce:	462e      	mov	r6, r5
 8008bd0:	4566      	cmp	r6, ip
 8008bd2:	d30e      	bcc.n	8008bf2 <__mdiff+0xea>
 8008bd4:	f10c 0203 	add.w	r2, ip, #3
 8008bd8:	1b52      	subs	r2, r2, r5
 8008bda:	f022 0203 	bic.w	r2, r2, #3
 8008bde:	3d03      	subs	r5, #3
 8008be0:	45ac      	cmp	ip, r5
 8008be2:	bf38      	it	cc
 8008be4:	2200      	movcc	r2, #0
 8008be6:	4413      	add	r3, r2
 8008be8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008bec:	b17a      	cbz	r2, 8008c0e <__mdiff+0x106>
 8008bee:	6107      	str	r7, [r0, #16]
 8008bf0:	e7a4      	b.n	8008b3c <__mdiff+0x34>
 8008bf2:	f856 8b04 	ldr.w	r8, [r6], #4
 8008bf6:	fa11 f288 	uxtah	r2, r1, r8
 8008bfa:	1414      	asrs	r4, r2, #16
 8008bfc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c00:	b292      	uxth	r2, r2
 8008c02:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008c06:	f84e 2b04 	str.w	r2, [lr], #4
 8008c0a:	1421      	asrs	r1, r4, #16
 8008c0c:	e7e0      	b.n	8008bd0 <__mdiff+0xc8>
 8008c0e:	3f01      	subs	r7, #1
 8008c10:	e7ea      	b.n	8008be8 <__mdiff+0xe0>
 8008c12:	bf00      	nop
 8008c14:	0800a1c7 	.word	0x0800a1c7
 8008c18:	0800a238 	.word	0x0800a238

08008c1c <__ulp>:
 8008c1c:	b082      	sub	sp, #8
 8008c1e:	ed8d 0b00 	vstr	d0, [sp]
 8008c22:	9a01      	ldr	r2, [sp, #4]
 8008c24:	4b0f      	ldr	r3, [pc, #60]	; (8008c64 <__ulp+0x48>)
 8008c26:	4013      	ands	r3, r2
 8008c28:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	dc08      	bgt.n	8008c42 <__ulp+0x26>
 8008c30:	425b      	negs	r3, r3
 8008c32:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008c36:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008c3a:	da04      	bge.n	8008c46 <__ulp+0x2a>
 8008c3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008c40:	4113      	asrs	r3, r2
 8008c42:	2200      	movs	r2, #0
 8008c44:	e008      	b.n	8008c58 <__ulp+0x3c>
 8008c46:	f1a2 0314 	sub.w	r3, r2, #20
 8008c4a:	2b1e      	cmp	r3, #30
 8008c4c:	bfda      	itte	le
 8008c4e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008c52:	40da      	lsrle	r2, r3
 8008c54:	2201      	movgt	r2, #1
 8008c56:	2300      	movs	r3, #0
 8008c58:	4619      	mov	r1, r3
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	ec41 0b10 	vmov	d0, r0, r1
 8008c60:	b002      	add	sp, #8
 8008c62:	4770      	bx	lr
 8008c64:	7ff00000 	.word	0x7ff00000

08008c68 <__b2d>:
 8008c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c6c:	6906      	ldr	r6, [r0, #16]
 8008c6e:	f100 0814 	add.w	r8, r0, #20
 8008c72:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008c76:	1f37      	subs	r7, r6, #4
 8008c78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	f7ff fd53 	bl	8008728 <__hi0bits>
 8008c82:	f1c0 0320 	rsb	r3, r0, #32
 8008c86:	280a      	cmp	r0, #10
 8008c88:	600b      	str	r3, [r1, #0]
 8008c8a:	491b      	ldr	r1, [pc, #108]	; (8008cf8 <__b2d+0x90>)
 8008c8c:	dc15      	bgt.n	8008cba <__b2d+0x52>
 8008c8e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008c92:	fa22 f30c 	lsr.w	r3, r2, ip
 8008c96:	45b8      	cmp	r8, r7
 8008c98:	ea43 0501 	orr.w	r5, r3, r1
 8008c9c:	bf34      	ite	cc
 8008c9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008ca2:	2300      	movcs	r3, #0
 8008ca4:	3015      	adds	r0, #21
 8008ca6:	fa02 f000 	lsl.w	r0, r2, r0
 8008caa:	fa23 f30c 	lsr.w	r3, r3, ip
 8008cae:	4303      	orrs	r3, r0
 8008cb0:	461c      	mov	r4, r3
 8008cb2:	ec45 4b10 	vmov	d0, r4, r5
 8008cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cba:	45b8      	cmp	r8, r7
 8008cbc:	bf3a      	itte	cc
 8008cbe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008cc2:	f1a6 0708 	subcc.w	r7, r6, #8
 8008cc6:	2300      	movcs	r3, #0
 8008cc8:	380b      	subs	r0, #11
 8008cca:	d012      	beq.n	8008cf2 <__b2d+0x8a>
 8008ccc:	f1c0 0120 	rsb	r1, r0, #32
 8008cd0:	fa23 f401 	lsr.w	r4, r3, r1
 8008cd4:	4082      	lsls	r2, r0
 8008cd6:	4322      	orrs	r2, r4
 8008cd8:	4547      	cmp	r7, r8
 8008cda:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008cde:	bf8c      	ite	hi
 8008ce0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008ce4:	2200      	movls	r2, #0
 8008ce6:	4083      	lsls	r3, r0
 8008ce8:	40ca      	lsrs	r2, r1
 8008cea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	e7de      	b.n	8008cb0 <__b2d+0x48>
 8008cf2:	ea42 0501 	orr.w	r5, r2, r1
 8008cf6:	e7db      	b.n	8008cb0 <__b2d+0x48>
 8008cf8:	3ff00000 	.word	0x3ff00000

08008cfc <__d2b>:
 8008cfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d00:	460f      	mov	r7, r1
 8008d02:	2101      	movs	r1, #1
 8008d04:	ec59 8b10 	vmov	r8, r9, d0
 8008d08:	4616      	mov	r6, r2
 8008d0a:	f7ff fc1b 	bl	8008544 <_Balloc>
 8008d0e:	4604      	mov	r4, r0
 8008d10:	b930      	cbnz	r0, 8008d20 <__d2b+0x24>
 8008d12:	4602      	mov	r2, r0
 8008d14:	4b24      	ldr	r3, [pc, #144]	; (8008da8 <__d2b+0xac>)
 8008d16:	4825      	ldr	r0, [pc, #148]	; (8008dac <__d2b+0xb0>)
 8008d18:	f240 310f 	movw	r1, #783	; 0x30f
 8008d1c:	f7fe ff8a 	bl	8007c34 <__assert_func>
 8008d20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d28:	bb2d      	cbnz	r5, 8008d76 <__d2b+0x7a>
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	f1b8 0300 	subs.w	r3, r8, #0
 8008d30:	d026      	beq.n	8008d80 <__d2b+0x84>
 8008d32:	4668      	mov	r0, sp
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	f7ff fd17 	bl	8008768 <__lo0bits>
 8008d3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d3e:	b1e8      	cbz	r0, 8008d7c <__d2b+0x80>
 8008d40:	f1c0 0320 	rsb	r3, r0, #32
 8008d44:	fa02 f303 	lsl.w	r3, r2, r3
 8008d48:	430b      	orrs	r3, r1
 8008d4a:	40c2      	lsrs	r2, r0
 8008d4c:	6163      	str	r3, [r4, #20]
 8008d4e:	9201      	str	r2, [sp, #4]
 8008d50:	9b01      	ldr	r3, [sp, #4]
 8008d52:	61a3      	str	r3, [r4, #24]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	bf14      	ite	ne
 8008d58:	2202      	movne	r2, #2
 8008d5a:	2201      	moveq	r2, #1
 8008d5c:	6122      	str	r2, [r4, #16]
 8008d5e:	b1bd      	cbz	r5, 8008d90 <__d2b+0x94>
 8008d60:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d64:	4405      	add	r5, r0
 8008d66:	603d      	str	r5, [r7, #0]
 8008d68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d6c:	6030      	str	r0, [r6, #0]
 8008d6e:	4620      	mov	r0, r4
 8008d70:	b003      	add	sp, #12
 8008d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d7a:	e7d6      	b.n	8008d2a <__d2b+0x2e>
 8008d7c:	6161      	str	r1, [r4, #20]
 8008d7e:	e7e7      	b.n	8008d50 <__d2b+0x54>
 8008d80:	a801      	add	r0, sp, #4
 8008d82:	f7ff fcf1 	bl	8008768 <__lo0bits>
 8008d86:	9b01      	ldr	r3, [sp, #4]
 8008d88:	6163      	str	r3, [r4, #20]
 8008d8a:	3020      	adds	r0, #32
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	e7e5      	b.n	8008d5c <__d2b+0x60>
 8008d90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d98:	6038      	str	r0, [r7, #0]
 8008d9a:	6918      	ldr	r0, [r3, #16]
 8008d9c:	f7ff fcc4 	bl	8008728 <__hi0bits>
 8008da0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008da4:	e7e2      	b.n	8008d6c <__d2b+0x70>
 8008da6:	bf00      	nop
 8008da8:	0800a1c7 	.word	0x0800a1c7
 8008dac:	0800a238 	.word	0x0800a238

08008db0 <__ratio>:
 8008db0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db4:	4688      	mov	r8, r1
 8008db6:	4669      	mov	r1, sp
 8008db8:	4681      	mov	r9, r0
 8008dba:	f7ff ff55 	bl	8008c68 <__b2d>
 8008dbe:	a901      	add	r1, sp, #4
 8008dc0:	4640      	mov	r0, r8
 8008dc2:	ec55 4b10 	vmov	r4, r5, d0
 8008dc6:	f7ff ff4f 	bl	8008c68 <__b2d>
 8008dca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008dce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008dd2:	eba3 0c02 	sub.w	ip, r3, r2
 8008dd6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008dda:	1a9b      	subs	r3, r3, r2
 8008ddc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008de0:	ec51 0b10 	vmov	r0, r1, d0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	bfd6      	itet	le
 8008de8:	460a      	movle	r2, r1
 8008dea:	462a      	movgt	r2, r5
 8008dec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008df0:	468b      	mov	fp, r1
 8008df2:	462f      	mov	r7, r5
 8008df4:	bfd4      	ite	le
 8008df6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008dfa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008dfe:	4620      	mov	r0, r4
 8008e00:	ee10 2a10 	vmov	r2, s0
 8008e04:	465b      	mov	r3, fp
 8008e06:	4639      	mov	r1, r7
 8008e08:	f7f7 fd20 	bl	800084c <__aeabi_ddiv>
 8008e0c:	ec41 0b10 	vmov	d0, r0, r1
 8008e10:	b003      	add	sp, #12
 8008e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e16 <__copybits>:
 8008e16:	3901      	subs	r1, #1
 8008e18:	b570      	push	{r4, r5, r6, lr}
 8008e1a:	1149      	asrs	r1, r1, #5
 8008e1c:	6914      	ldr	r4, [r2, #16]
 8008e1e:	3101      	adds	r1, #1
 8008e20:	f102 0314 	add.w	r3, r2, #20
 8008e24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e2c:	1f05      	subs	r5, r0, #4
 8008e2e:	42a3      	cmp	r3, r4
 8008e30:	d30c      	bcc.n	8008e4c <__copybits+0x36>
 8008e32:	1aa3      	subs	r3, r4, r2
 8008e34:	3b11      	subs	r3, #17
 8008e36:	f023 0303 	bic.w	r3, r3, #3
 8008e3a:	3211      	adds	r2, #17
 8008e3c:	42a2      	cmp	r2, r4
 8008e3e:	bf88      	it	hi
 8008e40:	2300      	movhi	r3, #0
 8008e42:	4418      	add	r0, r3
 8008e44:	2300      	movs	r3, #0
 8008e46:	4288      	cmp	r0, r1
 8008e48:	d305      	bcc.n	8008e56 <__copybits+0x40>
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}
 8008e4c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008e50:	f845 6f04 	str.w	r6, [r5, #4]!
 8008e54:	e7eb      	b.n	8008e2e <__copybits+0x18>
 8008e56:	f840 3b04 	str.w	r3, [r0], #4
 8008e5a:	e7f4      	b.n	8008e46 <__copybits+0x30>

08008e5c <__any_on>:
 8008e5c:	f100 0214 	add.w	r2, r0, #20
 8008e60:	6900      	ldr	r0, [r0, #16]
 8008e62:	114b      	asrs	r3, r1, #5
 8008e64:	4298      	cmp	r0, r3
 8008e66:	b510      	push	{r4, lr}
 8008e68:	db11      	blt.n	8008e8e <__any_on+0x32>
 8008e6a:	dd0a      	ble.n	8008e82 <__any_on+0x26>
 8008e6c:	f011 011f 	ands.w	r1, r1, #31
 8008e70:	d007      	beq.n	8008e82 <__any_on+0x26>
 8008e72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e76:	fa24 f001 	lsr.w	r0, r4, r1
 8008e7a:	fa00 f101 	lsl.w	r1, r0, r1
 8008e7e:	428c      	cmp	r4, r1
 8008e80:	d10b      	bne.n	8008e9a <__any_on+0x3e>
 8008e82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d803      	bhi.n	8008e92 <__any_on+0x36>
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	bd10      	pop	{r4, pc}
 8008e8e:	4603      	mov	r3, r0
 8008e90:	e7f7      	b.n	8008e82 <__any_on+0x26>
 8008e92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e96:	2900      	cmp	r1, #0
 8008e98:	d0f5      	beq.n	8008e86 <__any_on+0x2a>
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	e7f6      	b.n	8008e8c <__any_on+0x30>

08008e9e <__ascii_wctomb>:
 8008e9e:	b149      	cbz	r1, 8008eb4 <__ascii_wctomb+0x16>
 8008ea0:	2aff      	cmp	r2, #255	; 0xff
 8008ea2:	bf85      	ittet	hi
 8008ea4:	238a      	movhi	r3, #138	; 0x8a
 8008ea6:	6003      	strhi	r3, [r0, #0]
 8008ea8:	700a      	strbls	r2, [r1, #0]
 8008eaa:	f04f 30ff 	movhi.w	r0, #4294967295
 8008eae:	bf98      	it	ls
 8008eb0:	2001      	movls	r0, #1
 8008eb2:	4770      	bx	lr
 8008eb4:	4608      	mov	r0, r1
 8008eb6:	4770      	bx	lr

08008eb8 <__ssputs_r>:
 8008eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ebc:	688e      	ldr	r6, [r1, #8]
 8008ebe:	461f      	mov	r7, r3
 8008ec0:	42be      	cmp	r6, r7
 8008ec2:	680b      	ldr	r3, [r1, #0]
 8008ec4:	4682      	mov	sl, r0
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	4690      	mov	r8, r2
 8008eca:	d82c      	bhi.n	8008f26 <__ssputs_r+0x6e>
 8008ecc:	898a      	ldrh	r2, [r1, #12]
 8008ece:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ed2:	d026      	beq.n	8008f22 <__ssputs_r+0x6a>
 8008ed4:	6965      	ldr	r5, [r4, #20]
 8008ed6:	6909      	ldr	r1, [r1, #16]
 8008ed8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008edc:	eba3 0901 	sub.w	r9, r3, r1
 8008ee0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ee4:	1c7b      	adds	r3, r7, #1
 8008ee6:	444b      	add	r3, r9
 8008ee8:	106d      	asrs	r5, r5, #1
 8008eea:	429d      	cmp	r5, r3
 8008eec:	bf38      	it	cc
 8008eee:	461d      	movcc	r5, r3
 8008ef0:	0553      	lsls	r3, r2, #21
 8008ef2:	d527      	bpl.n	8008f44 <__ssputs_r+0x8c>
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	f7ff fa87 	bl	8008408 <_malloc_r>
 8008efa:	4606      	mov	r6, r0
 8008efc:	b360      	cbz	r0, 8008f58 <__ssputs_r+0xa0>
 8008efe:	6921      	ldr	r1, [r4, #16]
 8008f00:	464a      	mov	r2, r9
 8008f02:	f7fe fe7a 	bl	8007bfa <memcpy>
 8008f06:	89a3      	ldrh	r3, [r4, #12]
 8008f08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f10:	81a3      	strh	r3, [r4, #12]
 8008f12:	6126      	str	r6, [r4, #16]
 8008f14:	6165      	str	r5, [r4, #20]
 8008f16:	444e      	add	r6, r9
 8008f18:	eba5 0509 	sub.w	r5, r5, r9
 8008f1c:	6026      	str	r6, [r4, #0]
 8008f1e:	60a5      	str	r5, [r4, #8]
 8008f20:	463e      	mov	r6, r7
 8008f22:	42be      	cmp	r6, r7
 8008f24:	d900      	bls.n	8008f28 <__ssputs_r+0x70>
 8008f26:	463e      	mov	r6, r7
 8008f28:	6820      	ldr	r0, [r4, #0]
 8008f2a:	4632      	mov	r2, r6
 8008f2c:	4641      	mov	r1, r8
 8008f2e:	f000 fb6b 	bl	8009608 <memmove>
 8008f32:	68a3      	ldr	r3, [r4, #8]
 8008f34:	1b9b      	subs	r3, r3, r6
 8008f36:	60a3      	str	r3, [r4, #8]
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	4433      	add	r3, r6
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	2000      	movs	r0, #0
 8008f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f44:	462a      	mov	r2, r5
 8008f46:	f000 fba6 	bl	8009696 <_realloc_r>
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d1e0      	bne.n	8008f12 <__ssputs_r+0x5a>
 8008f50:	6921      	ldr	r1, [r4, #16]
 8008f52:	4650      	mov	r0, sl
 8008f54:	f7fe fe8c 	bl	8007c70 <_free_r>
 8008f58:	230c      	movs	r3, #12
 8008f5a:	f8ca 3000 	str.w	r3, [sl]
 8008f5e:	89a3      	ldrh	r3, [r4, #12]
 8008f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f64:	81a3      	strh	r3, [r4, #12]
 8008f66:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6a:	e7e9      	b.n	8008f40 <__ssputs_r+0x88>

08008f6c <_svfiprintf_r>:
 8008f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f70:	4698      	mov	r8, r3
 8008f72:	898b      	ldrh	r3, [r1, #12]
 8008f74:	061b      	lsls	r3, r3, #24
 8008f76:	b09d      	sub	sp, #116	; 0x74
 8008f78:	4607      	mov	r7, r0
 8008f7a:	460d      	mov	r5, r1
 8008f7c:	4614      	mov	r4, r2
 8008f7e:	d50e      	bpl.n	8008f9e <_svfiprintf_r+0x32>
 8008f80:	690b      	ldr	r3, [r1, #16]
 8008f82:	b963      	cbnz	r3, 8008f9e <_svfiprintf_r+0x32>
 8008f84:	2140      	movs	r1, #64	; 0x40
 8008f86:	f7ff fa3f 	bl	8008408 <_malloc_r>
 8008f8a:	6028      	str	r0, [r5, #0]
 8008f8c:	6128      	str	r0, [r5, #16]
 8008f8e:	b920      	cbnz	r0, 8008f9a <_svfiprintf_r+0x2e>
 8008f90:	230c      	movs	r3, #12
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	f04f 30ff 	mov.w	r0, #4294967295
 8008f98:	e0d0      	b.n	800913c <_svfiprintf_r+0x1d0>
 8008f9a:	2340      	movs	r3, #64	; 0x40
 8008f9c:	616b      	str	r3, [r5, #20]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fa2:	2320      	movs	r3, #32
 8008fa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fac:	2330      	movs	r3, #48	; 0x30
 8008fae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009154 <_svfiprintf_r+0x1e8>
 8008fb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fb6:	f04f 0901 	mov.w	r9, #1
 8008fba:	4623      	mov	r3, r4
 8008fbc:	469a      	mov	sl, r3
 8008fbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fc2:	b10a      	cbz	r2, 8008fc8 <_svfiprintf_r+0x5c>
 8008fc4:	2a25      	cmp	r2, #37	; 0x25
 8008fc6:	d1f9      	bne.n	8008fbc <_svfiprintf_r+0x50>
 8008fc8:	ebba 0b04 	subs.w	fp, sl, r4
 8008fcc:	d00b      	beq.n	8008fe6 <_svfiprintf_r+0x7a>
 8008fce:	465b      	mov	r3, fp
 8008fd0:	4622      	mov	r2, r4
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	f7ff ff6f 	bl	8008eb8 <__ssputs_r>
 8008fda:	3001      	adds	r0, #1
 8008fdc:	f000 80a9 	beq.w	8009132 <_svfiprintf_r+0x1c6>
 8008fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fe2:	445a      	add	r2, fp
 8008fe4:	9209      	str	r2, [sp, #36]	; 0x24
 8008fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 80a1 	beq.w	8009132 <_svfiprintf_r+0x1c6>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ffa:	f10a 0a01 	add.w	sl, sl, #1
 8008ffe:	9304      	str	r3, [sp, #16]
 8009000:	9307      	str	r3, [sp, #28]
 8009002:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009006:	931a      	str	r3, [sp, #104]	; 0x68
 8009008:	4654      	mov	r4, sl
 800900a:	2205      	movs	r2, #5
 800900c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009010:	4850      	ldr	r0, [pc, #320]	; (8009154 <_svfiprintf_r+0x1e8>)
 8009012:	f7f7 f8e5 	bl	80001e0 <memchr>
 8009016:	9a04      	ldr	r2, [sp, #16]
 8009018:	b9d8      	cbnz	r0, 8009052 <_svfiprintf_r+0xe6>
 800901a:	06d0      	lsls	r0, r2, #27
 800901c:	bf44      	itt	mi
 800901e:	2320      	movmi	r3, #32
 8009020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009024:	0711      	lsls	r1, r2, #28
 8009026:	bf44      	itt	mi
 8009028:	232b      	movmi	r3, #43	; 0x2b
 800902a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800902e:	f89a 3000 	ldrb.w	r3, [sl]
 8009032:	2b2a      	cmp	r3, #42	; 0x2a
 8009034:	d015      	beq.n	8009062 <_svfiprintf_r+0xf6>
 8009036:	9a07      	ldr	r2, [sp, #28]
 8009038:	4654      	mov	r4, sl
 800903a:	2000      	movs	r0, #0
 800903c:	f04f 0c0a 	mov.w	ip, #10
 8009040:	4621      	mov	r1, r4
 8009042:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009046:	3b30      	subs	r3, #48	; 0x30
 8009048:	2b09      	cmp	r3, #9
 800904a:	d94d      	bls.n	80090e8 <_svfiprintf_r+0x17c>
 800904c:	b1b0      	cbz	r0, 800907c <_svfiprintf_r+0x110>
 800904e:	9207      	str	r2, [sp, #28]
 8009050:	e014      	b.n	800907c <_svfiprintf_r+0x110>
 8009052:	eba0 0308 	sub.w	r3, r0, r8
 8009056:	fa09 f303 	lsl.w	r3, r9, r3
 800905a:	4313      	orrs	r3, r2
 800905c:	9304      	str	r3, [sp, #16]
 800905e:	46a2      	mov	sl, r4
 8009060:	e7d2      	b.n	8009008 <_svfiprintf_r+0x9c>
 8009062:	9b03      	ldr	r3, [sp, #12]
 8009064:	1d19      	adds	r1, r3, #4
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	9103      	str	r1, [sp, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	bfbb      	ittet	lt
 800906e:	425b      	neglt	r3, r3
 8009070:	f042 0202 	orrlt.w	r2, r2, #2
 8009074:	9307      	strge	r3, [sp, #28]
 8009076:	9307      	strlt	r3, [sp, #28]
 8009078:	bfb8      	it	lt
 800907a:	9204      	strlt	r2, [sp, #16]
 800907c:	7823      	ldrb	r3, [r4, #0]
 800907e:	2b2e      	cmp	r3, #46	; 0x2e
 8009080:	d10c      	bne.n	800909c <_svfiprintf_r+0x130>
 8009082:	7863      	ldrb	r3, [r4, #1]
 8009084:	2b2a      	cmp	r3, #42	; 0x2a
 8009086:	d134      	bne.n	80090f2 <_svfiprintf_r+0x186>
 8009088:	9b03      	ldr	r3, [sp, #12]
 800908a:	1d1a      	adds	r2, r3, #4
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	9203      	str	r2, [sp, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	bfb8      	it	lt
 8009094:	f04f 33ff 	movlt.w	r3, #4294967295
 8009098:	3402      	adds	r4, #2
 800909a:	9305      	str	r3, [sp, #20]
 800909c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009164 <_svfiprintf_r+0x1f8>
 80090a0:	7821      	ldrb	r1, [r4, #0]
 80090a2:	2203      	movs	r2, #3
 80090a4:	4650      	mov	r0, sl
 80090a6:	f7f7 f89b 	bl	80001e0 <memchr>
 80090aa:	b138      	cbz	r0, 80090bc <_svfiprintf_r+0x150>
 80090ac:	9b04      	ldr	r3, [sp, #16]
 80090ae:	eba0 000a 	sub.w	r0, r0, sl
 80090b2:	2240      	movs	r2, #64	; 0x40
 80090b4:	4082      	lsls	r2, r0
 80090b6:	4313      	orrs	r3, r2
 80090b8:	3401      	adds	r4, #1
 80090ba:	9304      	str	r3, [sp, #16]
 80090bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c0:	4825      	ldr	r0, [pc, #148]	; (8009158 <_svfiprintf_r+0x1ec>)
 80090c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090c6:	2206      	movs	r2, #6
 80090c8:	f7f7 f88a 	bl	80001e0 <memchr>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d038      	beq.n	8009142 <_svfiprintf_r+0x1d6>
 80090d0:	4b22      	ldr	r3, [pc, #136]	; (800915c <_svfiprintf_r+0x1f0>)
 80090d2:	bb1b      	cbnz	r3, 800911c <_svfiprintf_r+0x1b0>
 80090d4:	9b03      	ldr	r3, [sp, #12]
 80090d6:	3307      	adds	r3, #7
 80090d8:	f023 0307 	bic.w	r3, r3, #7
 80090dc:	3308      	adds	r3, #8
 80090de:	9303      	str	r3, [sp, #12]
 80090e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e2:	4433      	add	r3, r6
 80090e4:	9309      	str	r3, [sp, #36]	; 0x24
 80090e6:	e768      	b.n	8008fba <_svfiprintf_r+0x4e>
 80090e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80090ec:	460c      	mov	r4, r1
 80090ee:	2001      	movs	r0, #1
 80090f0:	e7a6      	b.n	8009040 <_svfiprintf_r+0xd4>
 80090f2:	2300      	movs	r3, #0
 80090f4:	3401      	adds	r4, #1
 80090f6:	9305      	str	r3, [sp, #20]
 80090f8:	4619      	mov	r1, r3
 80090fa:	f04f 0c0a 	mov.w	ip, #10
 80090fe:	4620      	mov	r0, r4
 8009100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009104:	3a30      	subs	r2, #48	; 0x30
 8009106:	2a09      	cmp	r2, #9
 8009108:	d903      	bls.n	8009112 <_svfiprintf_r+0x1a6>
 800910a:	2b00      	cmp	r3, #0
 800910c:	d0c6      	beq.n	800909c <_svfiprintf_r+0x130>
 800910e:	9105      	str	r1, [sp, #20]
 8009110:	e7c4      	b.n	800909c <_svfiprintf_r+0x130>
 8009112:	fb0c 2101 	mla	r1, ip, r1, r2
 8009116:	4604      	mov	r4, r0
 8009118:	2301      	movs	r3, #1
 800911a:	e7f0      	b.n	80090fe <_svfiprintf_r+0x192>
 800911c:	ab03      	add	r3, sp, #12
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	462a      	mov	r2, r5
 8009122:	4b0f      	ldr	r3, [pc, #60]	; (8009160 <_svfiprintf_r+0x1f4>)
 8009124:	a904      	add	r1, sp, #16
 8009126:	4638      	mov	r0, r7
 8009128:	f3af 8000 	nop.w
 800912c:	1c42      	adds	r2, r0, #1
 800912e:	4606      	mov	r6, r0
 8009130:	d1d6      	bne.n	80090e0 <_svfiprintf_r+0x174>
 8009132:	89ab      	ldrh	r3, [r5, #12]
 8009134:	065b      	lsls	r3, r3, #25
 8009136:	f53f af2d 	bmi.w	8008f94 <_svfiprintf_r+0x28>
 800913a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800913c:	b01d      	add	sp, #116	; 0x74
 800913e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009142:	ab03      	add	r3, sp, #12
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	462a      	mov	r2, r5
 8009148:	4b05      	ldr	r3, [pc, #20]	; (8009160 <_svfiprintf_r+0x1f4>)
 800914a:	a904      	add	r1, sp, #16
 800914c:	4638      	mov	r0, r7
 800914e:	f000 f879 	bl	8009244 <_printf_i>
 8009152:	e7eb      	b.n	800912c <_svfiprintf_r+0x1c0>
 8009154:	0800a394 	.word	0x0800a394
 8009158:	0800a39e 	.word	0x0800a39e
 800915c:	00000000 	.word	0x00000000
 8009160:	08008eb9 	.word	0x08008eb9
 8009164:	0800a39a 	.word	0x0800a39a

08009168 <_printf_common>:
 8009168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800916c:	4616      	mov	r6, r2
 800916e:	4699      	mov	r9, r3
 8009170:	688a      	ldr	r2, [r1, #8]
 8009172:	690b      	ldr	r3, [r1, #16]
 8009174:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009178:	4293      	cmp	r3, r2
 800917a:	bfb8      	it	lt
 800917c:	4613      	movlt	r3, r2
 800917e:	6033      	str	r3, [r6, #0]
 8009180:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009184:	4607      	mov	r7, r0
 8009186:	460c      	mov	r4, r1
 8009188:	b10a      	cbz	r2, 800918e <_printf_common+0x26>
 800918a:	3301      	adds	r3, #1
 800918c:	6033      	str	r3, [r6, #0]
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	0699      	lsls	r1, r3, #26
 8009192:	bf42      	ittt	mi
 8009194:	6833      	ldrmi	r3, [r6, #0]
 8009196:	3302      	addmi	r3, #2
 8009198:	6033      	strmi	r3, [r6, #0]
 800919a:	6825      	ldr	r5, [r4, #0]
 800919c:	f015 0506 	ands.w	r5, r5, #6
 80091a0:	d106      	bne.n	80091b0 <_printf_common+0x48>
 80091a2:	f104 0a19 	add.w	sl, r4, #25
 80091a6:	68e3      	ldr	r3, [r4, #12]
 80091a8:	6832      	ldr	r2, [r6, #0]
 80091aa:	1a9b      	subs	r3, r3, r2
 80091ac:	42ab      	cmp	r3, r5
 80091ae:	dc26      	bgt.n	80091fe <_printf_common+0x96>
 80091b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091b4:	1e13      	subs	r3, r2, #0
 80091b6:	6822      	ldr	r2, [r4, #0]
 80091b8:	bf18      	it	ne
 80091ba:	2301      	movne	r3, #1
 80091bc:	0692      	lsls	r2, r2, #26
 80091be:	d42b      	bmi.n	8009218 <_printf_common+0xb0>
 80091c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091c4:	4649      	mov	r1, r9
 80091c6:	4638      	mov	r0, r7
 80091c8:	47c0      	blx	r8
 80091ca:	3001      	adds	r0, #1
 80091cc:	d01e      	beq.n	800920c <_printf_common+0xa4>
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	6922      	ldr	r2, [r4, #16]
 80091d2:	f003 0306 	and.w	r3, r3, #6
 80091d6:	2b04      	cmp	r3, #4
 80091d8:	bf02      	ittt	eq
 80091da:	68e5      	ldreq	r5, [r4, #12]
 80091dc:	6833      	ldreq	r3, [r6, #0]
 80091de:	1aed      	subeq	r5, r5, r3
 80091e0:	68a3      	ldr	r3, [r4, #8]
 80091e2:	bf0c      	ite	eq
 80091e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091e8:	2500      	movne	r5, #0
 80091ea:	4293      	cmp	r3, r2
 80091ec:	bfc4      	itt	gt
 80091ee:	1a9b      	subgt	r3, r3, r2
 80091f0:	18ed      	addgt	r5, r5, r3
 80091f2:	2600      	movs	r6, #0
 80091f4:	341a      	adds	r4, #26
 80091f6:	42b5      	cmp	r5, r6
 80091f8:	d11a      	bne.n	8009230 <_printf_common+0xc8>
 80091fa:	2000      	movs	r0, #0
 80091fc:	e008      	b.n	8009210 <_printf_common+0xa8>
 80091fe:	2301      	movs	r3, #1
 8009200:	4652      	mov	r2, sl
 8009202:	4649      	mov	r1, r9
 8009204:	4638      	mov	r0, r7
 8009206:	47c0      	blx	r8
 8009208:	3001      	adds	r0, #1
 800920a:	d103      	bne.n	8009214 <_printf_common+0xac>
 800920c:	f04f 30ff 	mov.w	r0, #4294967295
 8009210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009214:	3501      	adds	r5, #1
 8009216:	e7c6      	b.n	80091a6 <_printf_common+0x3e>
 8009218:	18e1      	adds	r1, r4, r3
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	2030      	movs	r0, #48	; 0x30
 800921e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009222:	4422      	add	r2, r4
 8009224:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009228:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800922c:	3302      	adds	r3, #2
 800922e:	e7c7      	b.n	80091c0 <_printf_common+0x58>
 8009230:	2301      	movs	r3, #1
 8009232:	4622      	mov	r2, r4
 8009234:	4649      	mov	r1, r9
 8009236:	4638      	mov	r0, r7
 8009238:	47c0      	blx	r8
 800923a:	3001      	adds	r0, #1
 800923c:	d0e6      	beq.n	800920c <_printf_common+0xa4>
 800923e:	3601      	adds	r6, #1
 8009240:	e7d9      	b.n	80091f6 <_printf_common+0x8e>
	...

08009244 <_printf_i>:
 8009244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009248:	7e0f      	ldrb	r7, [r1, #24]
 800924a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800924c:	2f78      	cmp	r7, #120	; 0x78
 800924e:	4691      	mov	r9, r2
 8009250:	4680      	mov	r8, r0
 8009252:	460c      	mov	r4, r1
 8009254:	469a      	mov	sl, r3
 8009256:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800925a:	d807      	bhi.n	800926c <_printf_i+0x28>
 800925c:	2f62      	cmp	r7, #98	; 0x62
 800925e:	d80a      	bhi.n	8009276 <_printf_i+0x32>
 8009260:	2f00      	cmp	r7, #0
 8009262:	f000 80d4 	beq.w	800940e <_printf_i+0x1ca>
 8009266:	2f58      	cmp	r7, #88	; 0x58
 8009268:	f000 80c0 	beq.w	80093ec <_printf_i+0x1a8>
 800926c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009270:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009274:	e03a      	b.n	80092ec <_printf_i+0xa8>
 8009276:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800927a:	2b15      	cmp	r3, #21
 800927c:	d8f6      	bhi.n	800926c <_printf_i+0x28>
 800927e:	a101      	add	r1, pc, #4	; (adr r1, 8009284 <_printf_i+0x40>)
 8009280:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009284:	080092dd 	.word	0x080092dd
 8009288:	080092f1 	.word	0x080092f1
 800928c:	0800926d 	.word	0x0800926d
 8009290:	0800926d 	.word	0x0800926d
 8009294:	0800926d 	.word	0x0800926d
 8009298:	0800926d 	.word	0x0800926d
 800929c:	080092f1 	.word	0x080092f1
 80092a0:	0800926d 	.word	0x0800926d
 80092a4:	0800926d 	.word	0x0800926d
 80092a8:	0800926d 	.word	0x0800926d
 80092ac:	0800926d 	.word	0x0800926d
 80092b0:	080093f5 	.word	0x080093f5
 80092b4:	0800931d 	.word	0x0800931d
 80092b8:	080093af 	.word	0x080093af
 80092bc:	0800926d 	.word	0x0800926d
 80092c0:	0800926d 	.word	0x0800926d
 80092c4:	08009417 	.word	0x08009417
 80092c8:	0800926d 	.word	0x0800926d
 80092cc:	0800931d 	.word	0x0800931d
 80092d0:	0800926d 	.word	0x0800926d
 80092d4:	0800926d 	.word	0x0800926d
 80092d8:	080093b7 	.word	0x080093b7
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	1d1a      	adds	r2, r3, #4
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	602a      	str	r2, [r5, #0]
 80092e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092ec:	2301      	movs	r3, #1
 80092ee:	e09f      	b.n	8009430 <_printf_i+0x1ec>
 80092f0:	6820      	ldr	r0, [r4, #0]
 80092f2:	682b      	ldr	r3, [r5, #0]
 80092f4:	0607      	lsls	r7, r0, #24
 80092f6:	f103 0104 	add.w	r1, r3, #4
 80092fa:	6029      	str	r1, [r5, #0]
 80092fc:	d501      	bpl.n	8009302 <_printf_i+0xbe>
 80092fe:	681e      	ldr	r6, [r3, #0]
 8009300:	e003      	b.n	800930a <_printf_i+0xc6>
 8009302:	0646      	lsls	r6, r0, #25
 8009304:	d5fb      	bpl.n	80092fe <_printf_i+0xba>
 8009306:	f9b3 6000 	ldrsh.w	r6, [r3]
 800930a:	2e00      	cmp	r6, #0
 800930c:	da03      	bge.n	8009316 <_printf_i+0xd2>
 800930e:	232d      	movs	r3, #45	; 0x2d
 8009310:	4276      	negs	r6, r6
 8009312:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009316:	485a      	ldr	r0, [pc, #360]	; (8009480 <_printf_i+0x23c>)
 8009318:	230a      	movs	r3, #10
 800931a:	e012      	b.n	8009342 <_printf_i+0xfe>
 800931c:	682b      	ldr	r3, [r5, #0]
 800931e:	6820      	ldr	r0, [r4, #0]
 8009320:	1d19      	adds	r1, r3, #4
 8009322:	6029      	str	r1, [r5, #0]
 8009324:	0605      	lsls	r5, r0, #24
 8009326:	d501      	bpl.n	800932c <_printf_i+0xe8>
 8009328:	681e      	ldr	r6, [r3, #0]
 800932a:	e002      	b.n	8009332 <_printf_i+0xee>
 800932c:	0641      	lsls	r1, r0, #25
 800932e:	d5fb      	bpl.n	8009328 <_printf_i+0xe4>
 8009330:	881e      	ldrh	r6, [r3, #0]
 8009332:	4853      	ldr	r0, [pc, #332]	; (8009480 <_printf_i+0x23c>)
 8009334:	2f6f      	cmp	r7, #111	; 0x6f
 8009336:	bf0c      	ite	eq
 8009338:	2308      	moveq	r3, #8
 800933a:	230a      	movne	r3, #10
 800933c:	2100      	movs	r1, #0
 800933e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009342:	6865      	ldr	r5, [r4, #4]
 8009344:	60a5      	str	r5, [r4, #8]
 8009346:	2d00      	cmp	r5, #0
 8009348:	bfa2      	ittt	ge
 800934a:	6821      	ldrge	r1, [r4, #0]
 800934c:	f021 0104 	bicge.w	r1, r1, #4
 8009350:	6021      	strge	r1, [r4, #0]
 8009352:	b90e      	cbnz	r6, 8009358 <_printf_i+0x114>
 8009354:	2d00      	cmp	r5, #0
 8009356:	d04b      	beq.n	80093f0 <_printf_i+0x1ac>
 8009358:	4615      	mov	r5, r2
 800935a:	fbb6 f1f3 	udiv	r1, r6, r3
 800935e:	fb03 6711 	mls	r7, r3, r1, r6
 8009362:	5dc7      	ldrb	r7, [r0, r7]
 8009364:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009368:	4637      	mov	r7, r6
 800936a:	42bb      	cmp	r3, r7
 800936c:	460e      	mov	r6, r1
 800936e:	d9f4      	bls.n	800935a <_printf_i+0x116>
 8009370:	2b08      	cmp	r3, #8
 8009372:	d10b      	bne.n	800938c <_printf_i+0x148>
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	07de      	lsls	r6, r3, #31
 8009378:	d508      	bpl.n	800938c <_printf_i+0x148>
 800937a:	6923      	ldr	r3, [r4, #16]
 800937c:	6861      	ldr	r1, [r4, #4]
 800937e:	4299      	cmp	r1, r3
 8009380:	bfde      	ittt	le
 8009382:	2330      	movle	r3, #48	; 0x30
 8009384:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009388:	f105 35ff 	addle.w	r5, r5, #4294967295
 800938c:	1b52      	subs	r2, r2, r5
 800938e:	6122      	str	r2, [r4, #16]
 8009390:	f8cd a000 	str.w	sl, [sp]
 8009394:	464b      	mov	r3, r9
 8009396:	aa03      	add	r2, sp, #12
 8009398:	4621      	mov	r1, r4
 800939a:	4640      	mov	r0, r8
 800939c:	f7ff fee4 	bl	8009168 <_printf_common>
 80093a0:	3001      	adds	r0, #1
 80093a2:	d14a      	bne.n	800943a <_printf_i+0x1f6>
 80093a4:	f04f 30ff 	mov.w	r0, #4294967295
 80093a8:	b004      	add	sp, #16
 80093aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	f043 0320 	orr.w	r3, r3, #32
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	4833      	ldr	r0, [pc, #204]	; (8009484 <_printf_i+0x240>)
 80093b8:	2778      	movs	r7, #120	; 0x78
 80093ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	6829      	ldr	r1, [r5, #0]
 80093c2:	061f      	lsls	r7, r3, #24
 80093c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80093c8:	d402      	bmi.n	80093d0 <_printf_i+0x18c>
 80093ca:	065f      	lsls	r7, r3, #25
 80093cc:	bf48      	it	mi
 80093ce:	b2b6      	uxthmi	r6, r6
 80093d0:	07df      	lsls	r7, r3, #31
 80093d2:	bf48      	it	mi
 80093d4:	f043 0320 	orrmi.w	r3, r3, #32
 80093d8:	6029      	str	r1, [r5, #0]
 80093da:	bf48      	it	mi
 80093dc:	6023      	strmi	r3, [r4, #0]
 80093de:	b91e      	cbnz	r6, 80093e8 <_printf_i+0x1a4>
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	f023 0320 	bic.w	r3, r3, #32
 80093e6:	6023      	str	r3, [r4, #0]
 80093e8:	2310      	movs	r3, #16
 80093ea:	e7a7      	b.n	800933c <_printf_i+0xf8>
 80093ec:	4824      	ldr	r0, [pc, #144]	; (8009480 <_printf_i+0x23c>)
 80093ee:	e7e4      	b.n	80093ba <_printf_i+0x176>
 80093f0:	4615      	mov	r5, r2
 80093f2:	e7bd      	b.n	8009370 <_printf_i+0x12c>
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	6826      	ldr	r6, [r4, #0]
 80093f8:	6961      	ldr	r1, [r4, #20]
 80093fa:	1d18      	adds	r0, r3, #4
 80093fc:	6028      	str	r0, [r5, #0]
 80093fe:	0635      	lsls	r5, r6, #24
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	d501      	bpl.n	8009408 <_printf_i+0x1c4>
 8009404:	6019      	str	r1, [r3, #0]
 8009406:	e002      	b.n	800940e <_printf_i+0x1ca>
 8009408:	0670      	lsls	r0, r6, #25
 800940a:	d5fb      	bpl.n	8009404 <_printf_i+0x1c0>
 800940c:	8019      	strh	r1, [r3, #0]
 800940e:	2300      	movs	r3, #0
 8009410:	6123      	str	r3, [r4, #16]
 8009412:	4615      	mov	r5, r2
 8009414:	e7bc      	b.n	8009390 <_printf_i+0x14c>
 8009416:	682b      	ldr	r3, [r5, #0]
 8009418:	1d1a      	adds	r2, r3, #4
 800941a:	602a      	str	r2, [r5, #0]
 800941c:	681d      	ldr	r5, [r3, #0]
 800941e:	6862      	ldr	r2, [r4, #4]
 8009420:	2100      	movs	r1, #0
 8009422:	4628      	mov	r0, r5
 8009424:	f7f6 fedc 	bl	80001e0 <memchr>
 8009428:	b108      	cbz	r0, 800942e <_printf_i+0x1ea>
 800942a:	1b40      	subs	r0, r0, r5
 800942c:	6060      	str	r0, [r4, #4]
 800942e:	6863      	ldr	r3, [r4, #4]
 8009430:	6123      	str	r3, [r4, #16]
 8009432:	2300      	movs	r3, #0
 8009434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009438:	e7aa      	b.n	8009390 <_printf_i+0x14c>
 800943a:	6923      	ldr	r3, [r4, #16]
 800943c:	462a      	mov	r2, r5
 800943e:	4649      	mov	r1, r9
 8009440:	4640      	mov	r0, r8
 8009442:	47d0      	blx	sl
 8009444:	3001      	adds	r0, #1
 8009446:	d0ad      	beq.n	80093a4 <_printf_i+0x160>
 8009448:	6823      	ldr	r3, [r4, #0]
 800944a:	079b      	lsls	r3, r3, #30
 800944c:	d413      	bmi.n	8009476 <_printf_i+0x232>
 800944e:	68e0      	ldr	r0, [r4, #12]
 8009450:	9b03      	ldr	r3, [sp, #12]
 8009452:	4298      	cmp	r0, r3
 8009454:	bfb8      	it	lt
 8009456:	4618      	movlt	r0, r3
 8009458:	e7a6      	b.n	80093a8 <_printf_i+0x164>
 800945a:	2301      	movs	r3, #1
 800945c:	4632      	mov	r2, r6
 800945e:	4649      	mov	r1, r9
 8009460:	4640      	mov	r0, r8
 8009462:	47d0      	blx	sl
 8009464:	3001      	adds	r0, #1
 8009466:	d09d      	beq.n	80093a4 <_printf_i+0x160>
 8009468:	3501      	adds	r5, #1
 800946a:	68e3      	ldr	r3, [r4, #12]
 800946c:	9903      	ldr	r1, [sp, #12]
 800946e:	1a5b      	subs	r3, r3, r1
 8009470:	42ab      	cmp	r3, r5
 8009472:	dcf2      	bgt.n	800945a <_printf_i+0x216>
 8009474:	e7eb      	b.n	800944e <_printf_i+0x20a>
 8009476:	2500      	movs	r5, #0
 8009478:	f104 0619 	add.w	r6, r4, #25
 800947c:	e7f5      	b.n	800946a <_printf_i+0x226>
 800947e:	bf00      	nop
 8009480:	0800a3a5 	.word	0x0800a3a5
 8009484:	0800a3b6 	.word	0x0800a3b6

08009488 <__sflush_r>:
 8009488:	898a      	ldrh	r2, [r1, #12]
 800948a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800948e:	4605      	mov	r5, r0
 8009490:	0710      	lsls	r0, r2, #28
 8009492:	460c      	mov	r4, r1
 8009494:	d458      	bmi.n	8009548 <__sflush_r+0xc0>
 8009496:	684b      	ldr	r3, [r1, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	dc05      	bgt.n	80094a8 <__sflush_r+0x20>
 800949c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800949e:	2b00      	cmp	r3, #0
 80094a0:	dc02      	bgt.n	80094a8 <__sflush_r+0x20>
 80094a2:	2000      	movs	r0, #0
 80094a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094aa:	2e00      	cmp	r6, #0
 80094ac:	d0f9      	beq.n	80094a2 <__sflush_r+0x1a>
 80094ae:	2300      	movs	r3, #0
 80094b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094b4:	682f      	ldr	r7, [r5, #0]
 80094b6:	6a21      	ldr	r1, [r4, #32]
 80094b8:	602b      	str	r3, [r5, #0]
 80094ba:	d032      	beq.n	8009522 <__sflush_r+0x9a>
 80094bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	075a      	lsls	r2, r3, #29
 80094c2:	d505      	bpl.n	80094d0 <__sflush_r+0x48>
 80094c4:	6863      	ldr	r3, [r4, #4]
 80094c6:	1ac0      	subs	r0, r0, r3
 80094c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094ca:	b10b      	cbz	r3, 80094d0 <__sflush_r+0x48>
 80094cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094ce:	1ac0      	subs	r0, r0, r3
 80094d0:	2300      	movs	r3, #0
 80094d2:	4602      	mov	r2, r0
 80094d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094d6:	6a21      	ldr	r1, [r4, #32]
 80094d8:	4628      	mov	r0, r5
 80094da:	47b0      	blx	r6
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	89a3      	ldrh	r3, [r4, #12]
 80094e0:	d106      	bne.n	80094f0 <__sflush_r+0x68>
 80094e2:	6829      	ldr	r1, [r5, #0]
 80094e4:	291d      	cmp	r1, #29
 80094e6:	d82b      	bhi.n	8009540 <__sflush_r+0xb8>
 80094e8:	4a29      	ldr	r2, [pc, #164]	; (8009590 <__sflush_r+0x108>)
 80094ea:	410a      	asrs	r2, r1
 80094ec:	07d6      	lsls	r6, r2, #31
 80094ee:	d427      	bmi.n	8009540 <__sflush_r+0xb8>
 80094f0:	2200      	movs	r2, #0
 80094f2:	6062      	str	r2, [r4, #4]
 80094f4:	04d9      	lsls	r1, r3, #19
 80094f6:	6922      	ldr	r2, [r4, #16]
 80094f8:	6022      	str	r2, [r4, #0]
 80094fa:	d504      	bpl.n	8009506 <__sflush_r+0x7e>
 80094fc:	1c42      	adds	r2, r0, #1
 80094fe:	d101      	bne.n	8009504 <__sflush_r+0x7c>
 8009500:	682b      	ldr	r3, [r5, #0]
 8009502:	b903      	cbnz	r3, 8009506 <__sflush_r+0x7e>
 8009504:	6560      	str	r0, [r4, #84]	; 0x54
 8009506:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009508:	602f      	str	r7, [r5, #0]
 800950a:	2900      	cmp	r1, #0
 800950c:	d0c9      	beq.n	80094a2 <__sflush_r+0x1a>
 800950e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009512:	4299      	cmp	r1, r3
 8009514:	d002      	beq.n	800951c <__sflush_r+0x94>
 8009516:	4628      	mov	r0, r5
 8009518:	f7fe fbaa 	bl	8007c70 <_free_r>
 800951c:	2000      	movs	r0, #0
 800951e:	6360      	str	r0, [r4, #52]	; 0x34
 8009520:	e7c0      	b.n	80094a4 <__sflush_r+0x1c>
 8009522:	2301      	movs	r3, #1
 8009524:	4628      	mov	r0, r5
 8009526:	47b0      	blx	r6
 8009528:	1c41      	adds	r1, r0, #1
 800952a:	d1c8      	bne.n	80094be <__sflush_r+0x36>
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0c5      	beq.n	80094be <__sflush_r+0x36>
 8009532:	2b1d      	cmp	r3, #29
 8009534:	d001      	beq.n	800953a <__sflush_r+0xb2>
 8009536:	2b16      	cmp	r3, #22
 8009538:	d101      	bne.n	800953e <__sflush_r+0xb6>
 800953a:	602f      	str	r7, [r5, #0]
 800953c:	e7b1      	b.n	80094a2 <__sflush_r+0x1a>
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009544:	81a3      	strh	r3, [r4, #12]
 8009546:	e7ad      	b.n	80094a4 <__sflush_r+0x1c>
 8009548:	690f      	ldr	r7, [r1, #16]
 800954a:	2f00      	cmp	r7, #0
 800954c:	d0a9      	beq.n	80094a2 <__sflush_r+0x1a>
 800954e:	0793      	lsls	r3, r2, #30
 8009550:	680e      	ldr	r6, [r1, #0]
 8009552:	bf08      	it	eq
 8009554:	694b      	ldreq	r3, [r1, #20]
 8009556:	600f      	str	r7, [r1, #0]
 8009558:	bf18      	it	ne
 800955a:	2300      	movne	r3, #0
 800955c:	eba6 0807 	sub.w	r8, r6, r7
 8009560:	608b      	str	r3, [r1, #8]
 8009562:	f1b8 0f00 	cmp.w	r8, #0
 8009566:	dd9c      	ble.n	80094a2 <__sflush_r+0x1a>
 8009568:	6a21      	ldr	r1, [r4, #32]
 800956a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800956c:	4643      	mov	r3, r8
 800956e:	463a      	mov	r2, r7
 8009570:	4628      	mov	r0, r5
 8009572:	47b0      	blx	r6
 8009574:	2800      	cmp	r0, #0
 8009576:	dc06      	bgt.n	8009586 <__sflush_r+0xfe>
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800957e:	81a3      	strh	r3, [r4, #12]
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	e78e      	b.n	80094a4 <__sflush_r+0x1c>
 8009586:	4407      	add	r7, r0
 8009588:	eba8 0800 	sub.w	r8, r8, r0
 800958c:	e7e9      	b.n	8009562 <__sflush_r+0xda>
 800958e:	bf00      	nop
 8009590:	dfbffffe 	.word	0xdfbffffe

08009594 <_fflush_r>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	690b      	ldr	r3, [r1, #16]
 8009598:	4605      	mov	r5, r0
 800959a:	460c      	mov	r4, r1
 800959c:	b913      	cbnz	r3, 80095a4 <_fflush_r+0x10>
 800959e:	2500      	movs	r5, #0
 80095a0:	4628      	mov	r0, r5
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	b118      	cbz	r0, 80095ae <_fflush_r+0x1a>
 80095a6:	6a03      	ldr	r3, [r0, #32]
 80095a8:	b90b      	cbnz	r3, 80095ae <_fflush_r+0x1a>
 80095aa:	f7fe f9a3 	bl	80078f4 <__sinit>
 80095ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d0f3      	beq.n	800959e <_fflush_r+0xa>
 80095b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095b8:	07d0      	lsls	r0, r2, #31
 80095ba:	d404      	bmi.n	80095c6 <_fflush_r+0x32>
 80095bc:	0599      	lsls	r1, r3, #22
 80095be:	d402      	bmi.n	80095c6 <_fflush_r+0x32>
 80095c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095c2:	f7fe fb18 	bl	8007bf6 <__retarget_lock_acquire_recursive>
 80095c6:	4628      	mov	r0, r5
 80095c8:	4621      	mov	r1, r4
 80095ca:	f7ff ff5d 	bl	8009488 <__sflush_r>
 80095ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095d0:	07da      	lsls	r2, r3, #31
 80095d2:	4605      	mov	r5, r0
 80095d4:	d4e4      	bmi.n	80095a0 <_fflush_r+0xc>
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	059b      	lsls	r3, r3, #22
 80095da:	d4e1      	bmi.n	80095a0 <_fflush_r+0xc>
 80095dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095de:	f7fe fb0b 	bl	8007bf8 <__retarget_lock_release_recursive>
 80095e2:	e7dd      	b.n	80095a0 <_fflush_r+0xc>

080095e4 <fiprintf>:
 80095e4:	b40e      	push	{r1, r2, r3}
 80095e6:	b503      	push	{r0, r1, lr}
 80095e8:	4601      	mov	r1, r0
 80095ea:	ab03      	add	r3, sp, #12
 80095ec:	4805      	ldr	r0, [pc, #20]	; (8009604 <fiprintf+0x20>)
 80095ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80095f2:	6800      	ldr	r0, [r0, #0]
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	f000 f8a7 	bl	8009748 <_vfiprintf_r>
 80095fa:	b002      	add	sp, #8
 80095fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009600:	b003      	add	sp, #12
 8009602:	4770      	bx	lr
 8009604:	200001d0 	.word	0x200001d0

08009608 <memmove>:
 8009608:	4288      	cmp	r0, r1
 800960a:	b510      	push	{r4, lr}
 800960c:	eb01 0402 	add.w	r4, r1, r2
 8009610:	d902      	bls.n	8009618 <memmove+0x10>
 8009612:	4284      	cmp	r4, r0
 8009614:	4623      	mov	r3, r4
 8009616:	d807      	bhi.n	8009628 <memmove+0x20>
 8009618:	1e43      	subs	r3, r0, #1
 800961a:	42a1      	cmp	r1, r4
 800961c:	d008      	beq.n	8009630 <memmove+0x28>
 800961e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009622:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009626:	e7f8      	b.n	800961a <memmove+0x12>
 8009628:	4402      	add	r2, r0
 800962a:	4601      	mov	r1, r0
 800962c:	428a      	cmp	r2, r1
 800962e:	d100      	bne.n	8009632 <memmove+0x2a>
 8009630:	bd10      	pop	{r4, pc}
 8009632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009636:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800963a:	e7f7      	b.n	800962c <memmove+0x24>

0800963c <_sbrk_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4d06      	ldr	r5, [pc, #24]	; (8009658 <_sbrk_r+0x1c>)
 8009640:	2300      	movs	r3, #0
 8009642:	4604      	mov	r4, r0
 8009644:	4608      	mov	r0, r1
 8009646:	602b      	str	r3, [r5, #0]
 8009648:	f7f9 fa08 	bl	8002a5c <_sbrk>
 800964c:	1c43      	adds	r3, r0, #1
 800964e:	d102      	bne.n	8009656 <_sbrk_r+0x1a>
 8009650:	682b      	ldr	r3, [r5, #0]
 8009652:	b103      	cbz	r3, 8009656 <_sbrk_r+0x1a>
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	2000078c 	.word	0x2000078c

0800965c <abort>:
 800965c:	b508      	push	{r3, lr}
 800965e:	2006      	movs	r0, #6
 8009660:	f000 fa4a 	bl	8009af8 <raise>
 8009664:	2001      	movs	r0, #1
 8009666:	f7f9 f981 	bl	800296c <_exit>

0800966a <_calloc_r>:
 800966a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800966c:	fba1 2402 	umull	r2, r4, r1, r2
 8009670:	b94c      	cbnz	r4, 8009686 <_calloc_r+0x1c>
 8009672:	4611      	mov	r1, r2
 8009674:	9201      	str	r2, [sp, #4]
 8009676:	f7fe fec7 	bl	8008408 <_malloc_r>
 800967a:	9a01      	ldr	r2, [sp, #4]
 800967c:	4605      	mov	r5, r0
 800967e:	b930      	cbnz	r0, 800968e <_calloc_r+0x24>
 8009680:	4628      	mov	r0, r5
 8009682:	b003      	add	sp, #12
 8009684:	bd30      	pop	{r4, r5, pc}
 8009686:	220c      	movs	r2, #12
 8009688:	6002      	str	r2, [r0, #0]
 800968a:	2500      	movs	r5, #0
 800968c:	e7f8      	b.n	8009680 <_calloc_r+0x16>
 800968e:	4621      	mov	r1, r4
 8009690:	f7fe f9c9 	bl	8007a26 <memset>
 8009694:	e7f4      	b.n	8009680 <_calloc_r+0x16>

08009696 <_realloc_r>:
 8009696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800969a:	4680      	mov	r8, r0
 800969c:	4614      	mov	r4, r2
 800969e:	460e      	mov	r6, r1
 80096a0:	b921      	cbnz	r1, 80096ac <_realloc_r+0x16>
 80096a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096a6:	4611      	mov	r1, r2
 80096a8:	f7fe beae 	b.w	8008408 <_malloc_r>
 80096ac:	b92a      	cbnz	r2, 80096ba <_realloc_r+0x24>
 80096ae:	f7fe fadf 	bl	8007c70 <_free_r>
 80096b2:	4625      	mov	r5, r4
 80096b4:	4628      	mov	r0, r5
 80096b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ba:	f000 fa39 	bl	8009b30 <_malloc_usable_size_r>
 80096be:	4284      	cmp	r4, r0
 80096c0:	4607      	mov	r7, r0
 80096c2:	d802      	bhi.n	80096ca <_realloc_r+0x34>
 80096c4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096c8:	d812      	bhi.n	80096f0 <_realloc_r+0x5a>
 80096ca:	4621      	mov	r1, r4
 80096cc:	4640      	mov	r0, r8
 80096ce:	f7fe fe9b 	bl	8008408 <_malloc_r>
 80096d2:	4605      	mov	r5, r0
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d0ed      	beq.n	80096b4 <_realloc_r+0x1e>
 80096d8:	42bc      	cmp	r4, r7
 80096da:	4622      	mov	r2, r4
 80096dc:	4631      	mov	r1, r6
 80096de:	bf28      	it	cs
 80096e0:	463a      	movcs	r2, r7
 80096e2:	f7fe fa8a 	bl	8007bfa <memcpy>
 80096e6:	4631      	mov	r1, r6
 80096e8:	4640      	mov	r0, r8
 80096ea:	f7fe fac1 	bl	8007c70 <_free_r>
 80096ee:	e7e1      	b.n	80096b4 <_realloc_r+0x1e>
 80096f0:	4635      	mov	r5, r6
 80096f2:	e7df      	b.n	80096b4 <_realloc_r+0x1e>

080096f4 <__sfputc_r>:
 80096f4:	6893      	ldr	r3, [r2, #8]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	b410      	push	{r4}
 80096fc:	6093      	str	r3, [r2, #8]
 80096fe:	da08      	bge.n	8009712 <__sfputc_r+0x1e>
 8009700:	6994      	ldr	r4, [r2, #24]
 8009702:	42a3      	cmp	r3, r4
 8009704:	db01      	blt.n	800970a <__sfputc_r+0x16>
 8009706:	290a      	cmp	r1, #10
 8009708:	d103      	bne.n	8009712 <__sfputc_r+0x1e>
 800970a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800970e:	f000 b935 	b.w	800997c <__swbuf_r>
 8009712:	6813      	ldr	r3, [r2, #0]
 8009714:	1c58      	adds	r0, r3, #1
 8009716:	6010      	str	r0, [r2, #0]
 8009718:	7019      	strb	r1, [r3, #0]
 800971a:	4608      	mov	r0, r1
 800971c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009720:	4770      	bx	lr

08009722 <__sfputs_r>:
 8009722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009724:	4606      	mov	r6, r0
 8009726:	460f      	mov	r7, r1
 8009728:	4614      	mov	r4, r2
 800972a:	18d5      	adds	r5, r2, r3
 800972c:	42ac      	cmp	r4, r5
 800972e:	d101      	bne.n	8009734 <__sfputs_r+0x12>
 8009730:	2000      	movs	r0, #0
 8009732:	e007      	b.n	8009744 <__sfputs_r+0x22>
 8009734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009738:	463a      	mov	r2, r7
 800973a:	4630      	mov	r0, r6
 800973c:	f7ff ffda 	bl	80096f4 <__sfputc_r>
 8009740:	1c43      	adds	r3, r0, #1
 8009742:	d1f3      	bne.n	800972c <__sfputs_r+0xa>
 8009744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009748 <_vfiprintf_r>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	460d      	mov	r5, r1
 800974e:	b09d      	sub	sp, #116	; 0x74
 8009750:	4614      	mov	r4, r2
 8009752:	4698      	mov	r8, r3
 8009754:	4606      	mov	r6, r0
 8009756:	b118      	cbz	r0, 8009760 <_vfiprintf_r+0x18>
 8009758:	6a03      	ldr	r3, [r0, #32]
 800975a:	b90b      	cbnz	r3, 8009760 <_vfiprintf_r+0x18>
 800975c:	f7fe f8ca 	bl	80078f4 <__sinit>
 8009760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009762:	07d9      	lsls	r1, r3, #31
 8009764:	d405      	bmi.n	8009772 <_vfiprintf_r+0x2a>
 8009766:	89ab      	ldrh	r3, [r5, #12]
 8009768:	059a      	lsls	r2, r3, #22
 800976a:	d402      	bmi.n	8009772 <_vfiprintf_r+0x2a>
 800976c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800976e:	f7fe fa42 	bl	8007bf6 <__retarget_lock_acquire_recursive>
 8009772:	89ab      	ldrh	r3, [r5, #12]
 8009774:	071b      	lsls	r3, r3, #28
 8009776:	d501      	bpl.n	800977c <_vfiprintf_r+0x34>
 8009778:	692b      	ldr	r3, [r5, #16]
 800977a:	b99b      	cbnz	r3, 80097a4 <_vfiprintf_r+0x5c>
 800977c:	4629      	mov	r1, r5
 800977e:	4630      	mov	r0, r6
 8009780:	f000 f93a 	bl	80099f8 <__swsetup_r>
 8009784:	b170      	cbz	r0, 80097a4 <_vfiprintf_r+0x5c>
 8009786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009788:	07dc      	lsls	r4, r3, #31
 800978a:	d504      	bpl.n	8009796 <_vfiprintf_r+0x4e>
 800978c:	f04f 30ff 	mov.w	r0, #4294967295
 8009790:	b01d      	add	sp, #116	; 0x74
 8009792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009796:	89ab      	ldrh	r3, [r5, #12]
 8009798:	0598      	lsls	r0, r3, #22
 800979a:	d4f7      	bmi.n	800978c <_vfiprintf_r+0x44>
 800979c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800979e:	f7fe fa2b 	bl	8007bf8 <__retarget_lock_release_recursive>
 80097a2:	e7f3      	b.n	800978c <_vfiprintf_r+0x44>
 80097a4:	2300      	movs	r3, #0
 80097a6:	9309      	str	r3, [sp, #36]	; 0x24
 80097a8:	2320      	movs	r3, #32
 80097aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80097b2:	2330      	movs	r3, #48	; 0x30
 80097b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009968 <_vfiprintf_r+0x220>
 80097b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097bc:	f04f 0901 	mov.w	r9, #1
 80097c0:	4623      	mov	r3, r4
 80097c2:	469a      	mov	sl, r3
 80097c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097c8:	b10a      	cbz	r2, 80097ce <_vfiprintf_r+0x86>
 80097ca:	2a25      	cmp	r2, #37	; 0x25
 80097cc:	d1f9      	bne.n	80097c2 <_vfiprintf_r+0x7a>
 80097ce:	ebba 0b04 	subs.w	fp, sl, r4
 80097d2:	d00b      	beq.n	80097ec <_vfiprintf_r+0xa4>
 80097d4:	465b      	mov	r3, fp
 80097d6:	4622      	mov	r2, r4
 80097d8:	4629      	mov	r1, r5
 80097da:	4630      	mov	r0, r6
 80097dc:	f7ff ffa1 	bl	8009722 <__sfputs_r>
 80097e0:	3001      	adds	r0, #1
 80097e2:	f000 80a9 	beq.w	8009938 <_vfiprintf_r+0x1f0>
 80097e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097e8:	445a      	add	r2, fp
 80097ea:	9209      	str	r2, [sp, #36]	; 0x24
 80097ec:	f89a 3000 	ldrb.w	r3, [sl]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f000 80a1 	beq.w	8009938 <_vfiprintf_r+0x1f0>
 80097f6:	2300      	movs	r3, #0
 80097f8:	f04f 32ff 	mov.w	r2, #4294967295
 80097fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009800:	f10a 0a01 	add.w	sl, sl, #1
 8009804:	9304      	str	r3, [sp, #16]
 8009806:	9307      	str	r3, [sp, #28]
 8009808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800980c:	931a      	str	r3, [sp, #104]	; 0x68
 800980e:	4654      	mov	r4, sl
 8009810:	2205      	movs	r2, #5
 8009812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009816:	4854      	ldr	r0, [pc, #336]	; (8009968 <_vfiprintf_r+0x220>)
 8009818:	f7f6 fce2 	bl	80001e0 <memchr>
 800981c:	9a04      	ldr	r2, [sp, #16]
 800981e:	b9d8      	cbnz	r0, 8009858 <_vfiprintf_r+0x110>
 8009820:	06d1      	lsls	r1, r2, #27
 8009822:	bf44      	itt	mi
 8009824:	2320      	movmi	r3, #32
 8009826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800982a:	0713      	lsls	r3, r2, #28
 800982c:	bf44      	itt	mi
 800982e:	232b      	movmi	r3, #43	; 0x2b
 8009830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009834:	f89a 3000 	ldrb.w	r3, [sl]
 8009838:	2b2a      	cmp	r3, #42	; 0x2a
 800983a:	d015      	beq.n	8009868 <_vfiprintf_r+0x120>
 800983c:	9a07      	ldr	r2, [sp, #28]
 800983e:	4654      	mov	r4, sl
 8009840:	2000      	movs	r0, #0
 8009842:	f04f 0c0a 	mov.w	ip, #10
 8009846:	4621      	mov	r1, r4
 8009848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800984c:	3b30      	subs	r3, #48	; 0x30
 800984e:	2b09      	cmp	r3, #9
 8009850:	d94d      	bls.n	80098ee <_vfiprintf_r+0x1a6>
 8009852:	b1b0      	cbz	r0, 8009882 <_vfiprintf_r+0x13a>
 8009854:	9207      	str	r2, [sp, #28]
 8009856:	e014      	b.n	8009882 <_vfiprintf_r+0x13a>
 8009858:	eba0 0308 	sub.w	r3, r0, r8
 800985c:	fa09 f303 	lsl.w	r3, r9, r3
 8009860:	4313      	orrs	r3, r2
 8009862:	9304      	str	r3, [sp, #16]
 8009864:	46a2      	mov	sl, r4
 8009866:	e7d2      	b.n	800980e <_vfiprintf_r+0xc6>
 8009868:	9b03      	ldr	r3, [sp, #12]
 800986a:	1d19      	adds	r1, r3, #4
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	9103      	str	r1, [sp, #12]
 8009870:	2b00      	cmp	r3, #0
 8009872:	bfbb      	ittet	lt
 8009874:	425b      	neglt	r3, r3
 8009876:	f042 0202 	orrlt.w	r2, r2, #2
 800987a:	9307      	strge	r3, [sp, #28]
 800987c:	9307      	strlt	r3, [sp, #28]
 800987e:	bfb8      	it	lt
 8009880:	9204      	strlt	r2, [sp, #16]
 8009882:	7823      	ldrb	r3, [r4, #0]
 8009884:	2b2e      	cmp	r3, #46	; 0x2e
 8009886:	d10c      	bne.n	80098a2 <_vfiprintf_r+0x15a>
 8009888:	7863      	ldrb	r3, [r4, #1]
 800988a:	2b2a      	cmp	r3, #42	; 0x2a
 800988c:	d134      	bne.n	80098f8 <_vfiprintf_r+0x1b0>
 800988e:	9b03      	ldr	r3, [sp, #12]
 8009890:	1d1a      	adds	r2, r3, #4
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	9203      	str	r2, [sp, #12]
 8009896:	2b00      	cmp	r3, #0
 8009898:	bfb8      	it	lt
 800989a:	f04f 33ff 	movlt.w	r3, #4294967295
 800989e:	3402      	adds	r4, #2
 80098a0:	9305      	str	r3, [sp, #20]
 80098a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009978 <_vfiprintf_r+0x230>
 80098a6:	7821      	ldrb	r1, [r4, #0]
 80098a8:	2203      	movs	r2, #3
 80098aa:	4650      	mov	r0, sl
 80098ac:	f7f6 fc98 	bl	80001e0 <memchr>
 80098b0:	b138      	cbz	r0, 80098c2 <_vfiprintf_r+0x17a>
 80098b2:	9b04      	ldr	r3, [sp, #16]
 80098b4:	eba0 000a 	sub.w	r0, r0, sl
 80098b8:	2240      	movs	r2, #64	; 0x40
 80098ba:	4082      	lsls	r2, r0
 80098bc:	4313      	orrs	r3, r2
 80098be:	3401      	adds	r4, #1
 80098c0:	9304      	str	r3, [sp, #16]
 80098c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c6:	4829      	ldr	r0, [pc, #164]	; (800996c <_vfiprintf_r+0x224>)
 80098c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098cc:	2206      	movs	r2, #6
 80098ce:	f7f6 fc87 	bl	80001e0 <memchr>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d03f      	beq.n	8009956 <_vfiprintf_r+0x20e>
 80098d6:	4b26      	ldr	r3, [pc, #152]	; (8009970 <_vfiprintf_r+0x228>)
 80098d8:	bb1b      	cbnz	r3, 8009922 <_vfiprintf_r+0x1da>
 80098da:	9b03      	ldr	r3, [sp, #12]
 80098dc:	3307      	adds	r3, #7
 80098de:	f023 0307 	bic.w	r3, r3, #7
 80098e2:	3308      	adds	r3, #8
 80098e4:	9303      	str	r3, [sp, #12]
 80098e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e8:	443b      	add	r3, r7
 80098ea:	9309      	str	r3, [sp, #36]	; 0x24
 80098ec:	e768      	b.n	80097c0 <_vfiprintf_r+0x78>
 80098ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80098f2:	460c      	mov	r4, r1
 80098f4:	2001      	movs	r0, #1
 80098f6:	e7a6      	b.n	8009846 <_vfiprintf_r+0xfe>
 80098f8:	2300      	movs	r3, #0
 80098fa:	3401      	adds	r4, #1
 80098fc:	9305      	str	r3, [sp, #20]
 80098fe:	4619      	mov	r1, r3
 8009900:	f04f 0c0a 	mov.w	ip, #10
 8009904:	4620      	mov	r0, r4
 8009906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800990a:	3a30      	subs	r2, #48	; 0x30
 800990c:	2a09      	cmp	r2, #9
 800990e:	d903      	bls.n	8009918 <_vfiprintf_r+0x1d0>
 8009910:	2b00      	cmp	r3, #0
 8009912:	d0c6      	beq.n	80098a2 <_vfiprintf_r+0x15a>
 8009914:	9105      	str	r1, [sp, #20]
 8009916:	e7c4      	b.n	80098a2 <_vfiprintf_r+0x15a>
 8009918:	fb0c 2101 	mla	r1, ip, r1, r2
 800991c:	4604      	mov	r4, r0
 800991e:	2301      	movs	r3, #1
 8009920:	e7f0      	b.n	8009904 <_vfiprintf_r+0x1bc>
 8009922:	ab03      	add	r3, sp, #12
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	462a      	mov	r2, r5
 8009928:	4b12      	ldr	r3, [pc, #72]	; (8009974 <_vfiprintf_r+0x22c>)
 800992a:	a904      	add	r1, sp, #16
 800992c:	4630      	mov	r0, r6
 800992e:	f3af 8000 	nop.w
 8009932:	4607      	mov	r7, r0
 8009934:	1c78      	adds	r0, r7, #1
 8009936:	d1d6      	bne.n	80098e6 <_vfiprintf_r+0x19e>
 8009938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800993a:	07d9      	lsls	r1, r3, #31
 800993c:	d405      	bmi.n	800994a <_vfiprintf_r+0x202>
 800993e:	89ab      	ldrh	r3, [r5, #12]
 8009940:	059a      	lsls	r2, r3, #22
 8009942:	d402      	bmi.n	800994a <_vfiprintf_r+0x202>
 8009944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009946:	f7fe f957 	bl	8007bf8 <__retarget_lock_release_recursive>
 800994a:	89ab      	ldrh	r3, [r5, #12]
 800994c:	065b      	lsls	r3, r3, #25
 800994e:	f53f af1d 	bmi.w	800978c <_vfiprintf_r+0x44>
 8009952:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009954:	e71c      	b.n	8009790 <_vfiprintf_r+0x48>
 8009956:	ab03      	add	r3, sp, #12
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	462a      	mov	r2, r5
 800995c:	4b05      	ldr	r3, [pc, #20]	; (8009974 <_vfiprintf_r+0x22c>)
 800995e:	a904      	add	r1, sp, #16
 8009960:	4630      	mov	r0, r6
 8009962:	f7ff fc6f 	bl	8009244 <_printf_i>
 8009966:	e7e4      	b.n	8009932 <_vfiprintf_r+0x1ea>
 8009968:	0800a394 	.word	0x0800a394
 800996c:	0800a39e 	.word	0x0800a39e
 8009970:	00000000 	.word	0x00000000
 8009974:	08009723 	.word	0x08009723
 8009978:	0800a39a 	.word	0x0800a39a

0800997c <__swbuf_r>:
 800997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997e:	460e      	mov	r6, r1
 8009980:	4614      	mov	r4, r2
 8009982:	4605      	mov	r5, r0
 8009984:	b118      	cbz	r0, 800998e <__swbuf_r+0x12>
 8009986:	6a03      	ldr	r3, [r0, #32]
 8009988:	b90b      	cbnz	r3, 800998e <__swbuf_r+0x12>
 800998a:	f7fd ffb3 	bl	80078f4 <__sinit>
 800998e:	69a3      	ldr	r3, [r4, #24]
 8009990:	60a3      	str	r3, [r4, #8]
 8009992:	89a3      	ldrh	r3, [r4, #12]
 8009994:	071a      	lsls	r2, r3, #28
 8009996:	d525      	bpl.n	80099e4 <__swbuf_r+0x68>
 8009998:	6923      	ldr	r3, [r4, #16]
 800999a:	b31b      	cbz	r3, 80099e4 <__swbuf_r+0x68>
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	6922      	ldr	r2, [r4, #16]
 80099a0:	1a98      	subs	r0, r3, r2
 80099a2:	6963      	ldr	r3, [r4, #20]
 80099a4:	b2f6      	uxtb	r6, r6
 80099a6:	4283      	cmp	r3, r0
 80099a8:	4637      	mov	r7, r6
 80099aa:	dc04      	bgt.n	80099b6 <__swbuf_r+0x3a>
 80099ac:	4621      	mov	r1, r4
 80099ae:	4628      	mov	r0, r5
 80099b0:	f7ff fdf0 	bl	8009594 <_fflush_r>
 80099b4:	b9e0      	cbnz	r0, 80099f0 <__swbuf_r+0x74>
 80099b6:	68a3      	ldr	r3, [r4, #8]
 80099b8:	3b01      	subs	r3, #1
 80099ba:	60a3      	str	r3, [r4, #8]
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	6022      	str	r2, [r4, #0]
 80099c2:	701e      	strb	r6, [r3, #0]
 80099c4:	6962      	ldr	r2, [r4, #20]
 80099c6:	1c43      	adds	r3, r0, #1
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d004      	beq.n	80099d6 <__swbuf_r+0x5a>
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	07db      	lsls	r3, r3, #31
 80099d0:	d506      	bpl.n	80099e0 <__swbuf_r+0x64>
 80099d2:	2e0a      	cmp	r6, #10
 80099d4:	d104      	bne.n	80099e0 <__swbuf_r+0x64>
 80099d6:	4621      	mov	r1, r4
 80099d8:	4628      	mov	r0, r5
 80099da:	f7ff fddb 	bl	8009594 <_fflush_r>
 80099de:	b938      	cbnz	r0, 80099f0 <__swbuf_r+0x74>
 80099e0:	4638      	mov	r0, r7
 80099e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099e4:	4621      	mov	r1, r4
 80099e6:	4628      	mov	r0, r5
 80099e8:	f000 f806 	bl	80099f8 <__swsetup_r>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d0d5      	beq.n	800999c <__swbuf_r+0x20>
 80099f0:	f04f 37ff 	mov.w	r7, #4294967295
 80099f4:	e7f4      	b.n	80099e0 <__swbuf_r+0x64>
	...

080099f8 <__swsetup_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4b2a      	ldr	r3, [pc, #168]	; (8009aa4 <__swsetup_r+0xac>)
 80099fc:	4605      	mov	r5, r0
 80099fe:	6818      	ldr	r0, [r3, #0]
 8009a00:	460c      	mov	r4, r1
 8009a02:	b118      	cbz	r0, 8009a0c <__swsetup_r+0x14>
 8009a04:	6a03      	ldr	r3, [r0, #32]
 8009a06:	b90b      	cbnz	r3, 8009a0c <__swsetup_r+0x14>
 8009a08:	f7fd ff74 	bl	80078f4 <__sinit>
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a12:	0718      	lsls	r0, r3, #28
 8009a14:	d422      	bmi.n	8009a5c <__swsetup_r+0x64>
 8009a16:	06d9      	lsls	r1, r3, #27
 8009a18:	d407      	bmi.n	8009a2a <__swsetup_r+0x32>
 8009a1a:	2309      	movs	r3, #9
 8009a1c:	602b      	str	r3, [r5, #0]
 8009a1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a22:	81a3      	strh	r3, [r4, #12]
 8009a24:	f04f 30ff 	mov.w	r0, #4294967295
 8009a28:	e034      	b.n	8009a94 <__swsetup_r+0x9c>
 8009a2a:	0758      	lsls	r0, r3, #29
 8009a2c:	d512      	bpl.n	8009a54 <__swsetup_r+0x5c>
 8009a2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a30:	b141      	cbz	r1, 8009a44 <__swsetup_r+0x4c>
 8009a32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a36:	4299      	cmp	r1, r3
 8009a38:	d002      	beq.n	8009a40 <__swsetup_r+0x48>
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	f7fe f918 	bl	8007c70 <_free_r>
 8009a40:	2300      	movs	r3, #0
 8009a42:	6363      	str	r3, [r4, #52]	; 0x34
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a4a:	81a3      	strh	r3, [r4, #12]
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	6063      	str	r3, [r4, #4]
 8009a50:	6923      	ldr	r3, [r4, #16]
 8009a52:	6023      	str	r3, [r4, #0]
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	f043 0308 	orr.w	r3, r3, #8
 8009a5a:	81a3      	strh	r3, [r4, #12]
 8009a5c:	6923      	ldr	r3, [r4, #16]
 8009a5e:	b94b      	cbnz	r3, 8009a74 <__swsetup_r+0x7c>
 8009a60:	89a3      	ldrh	r3, [r4, #12]
 8009a62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a6a:	d003      	beq.n	8009a74 <__swsetup_r+0x7c>
 8009a6c:	4621      	mov	r1, r4
 8009a6e:	4628      	mov	r0, r5
 8009a70:	f000 f88c 	bl	8009b8c <__smakebuf_r>
 8009a74:	89a0      	ldrh	r0, [r4, #12]
 8009a76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a7a:	f010 0301 	ands.w	r3, r0, #1
 8009a7e:	d00a      	beq.n	8009a96 <__swsetup_r+0x9e>
 8009a80:	2300      	movs	r3, #0
 8009a82:	60a3      	str	r3, [r4, #8]
 8009a84:	6963      	ldr	r3, [r4, #20]
 8009a86:	425b      	negs	r3, r3
 8009a88:	61a3      	str	r3, [r4, #24]
 8009a8a:	6923      	ldr	r3, [r4, #16]
 8009a8c:	b943      	cbnz	r3, 8009aa0 <__swsetup_r+0xa8>
 8009a8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a92:	d1c4      	bne.n	8009a1e <__swsetup_r+0x26>
 8009a94:	bd38      	pop	{r3, r4, r5, pc}
 8009a96:	0781      	lsls	r1, r0, #30
 8009a98:	bf58      	it	pl
 8009a9a:	6963      	ldrpl	r3, [r4, #20]
 8009a9c:	60a3      	str	r3, [r4, #8]
 8009a9e:	e7f4      	b.n	8009a8a <__swsetup_r+0x92>
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	e7f7      	b.n	8009a94 <__swsetup_r+0x9c>
 8009aa4:	200001d0 	.word	0x200001d0

08009aa8 <_raise_r>:
 8009aa8:	291f      	cmp	r1, #31
 8009aaa:	b538      	push	{r3, r4, r5, lr}
 8009aac:	4604      	mov	r4, r0
 8009aae:	460d      	mov	r5, r1
 8009ab0:	d904      	bls.n	8009abc <_raise_r+0x14>
 8009ab2:	2316      	movs	r3, #22
 8009ab4:	6003      	str	r3, [r0, #0]
 8009ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
 8009abc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009abe:	b112      	cbz	r2, 8009ac6 <_raise_r+0x1e>
 8009ac0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ac4:	b94b      	cbnz	r3, 8009ada <_raise_r+0x32>
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f000 f830 	bl	8009b2c <_getpid_r>
 8009acc:	462a      	mov	r2, r5
 8009ace:	4601      	mov	r1, r0
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ad6:	f000 b817 	b.w	8009b08 <_kill_r>
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d00a      	beq.n	8009af4 <_raise_r+0x4c>
 8009ade:	1c59      	adds	r1, r3, #1
 8009ae0:	d103      	bne.n	8009aea <_raise_r+0x42>
 8009ae2:	2316      	movs	r3, #22
 8009ae4:	6003      	str	r3, [r0, #0]
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	e7e7      	b.n	8009aba <_raise_r+0x12>
 8009aea:	2400      	movs	r4, #0
 8009aec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009af0:	4628      	mov	r0, r5
 8009af2:	4798      	blx	r3
 8009af4:	2000      	movs	r0, #0
 8009af6:	e7e0      	b.n	8009aba <_raise_r+0x12>

08009af8 <raise>:
 8009af8:	4b02      	ldr	r3, [pc, #8]	; (8009b04 <raise+0xc>)
 8009afa:	4601      	mov	r1, r0
 8009afc:	6818      	ldr	r0, [r3, #0]
 8009afe:	f7ff bfd3 	b.w	8009aa8 <_raise_r>
 8009b02:	bf00      	nop
 8009b04:	200001d0 	.word	0x200001d0

08009b08 <_kill_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4d07      	ldr	r5, [pc, #28]	; (8009b28 <_kill_r+0x20>)
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	4604      	mov	r4, r0
 8009b10:	4608      	mov	r0, r1
 8009b12:	4611      	mov	r1, r2
 8009b14:	602b      	str	r3, [r5, #0]
 8009b16:	f7f8 ff19 	bl	800294c <_kill>
 8009b1a:	1c43      	adds	r3, r0, #1
 8009b1c:	d102      	bne.n	8009b24 <_kill_r+0x1c>
 8009b1e:	682b      	ldr	r3, [r5, #0]
 8009b20:	b103      	cbz	r3, 8009b24 <_kill_r+0x1c>
 8009b22:	6023      	str	r3, [r4, #0]
 8009b24:	bd38      	pop	{r3, r4, r5, pc}
 8009b26:	bf00      	nop
 8009b28:	2000078c 	.word	0x2000078c

08009b2c <_getpid_r>:
 8009b2c:	f7f8 bf06 	b.w	800293c <_getpid>

08009b30 <_malloc_usable_size_r>:
 8009b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b34:	1f18      	subs	r0, r3, #4
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	bfbc      	itt	lt
 8009b3a:	580b      	ldrlt	r3, [r1, r0]
 8009b3c:	18c0      	addlt	r0, r0, r3
 8009b3e:	4770      	bx	lr

08009b40 <__swhatbuf_r>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	460c      	mov	r4, r1
 8009b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b48:	2900      	cmp	r1, #0
 8009b4a:	b096      	sub	sp, #88	; 0x58
 8009b4c:	4615      	mov	r5, r2
 8009b4e:	461e      	mov	r6, r3
 8009b50:	da0d      	bge.n	8009b6e <__swhatbuf_r+0x2e>
 8009b52:	89a3      	ldrh	r3, [r4, #12]
 8009b54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b58:	f04f 0100 	mov.w	r1, #0
 8009b5c:	bf0c      	ite	eq
 8009b5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b62:	2340      	movne	r3, #64	; 0x40
 8009b64:	2000      	movs	r0, #0
 8009b66:	6031      	str	r1, [r6, #0]
 8009b68:	602b      	str	r3, [r5, #0]
 8009b6a:	b016      	add	sp, #88	; 0x58
 8009b6c:	bd70      	pop	{r4, r5, r6, pc}
 8009b6e:	466a      	mov	r2, sp
 8009b70:	f000 f848 	bl	8009c04 <_fstat_r>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	dbec      	blt.n	8009b52 <__swhatbuf_r+0x12>
 8009b78:	9901      	ldr	r1, [sp, #4]
 8009b7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009b7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009b82:	4259      	negs	r1, r3
 8009b84:	4159      	adcs	r1, r3
 8009b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b8a:	e7eb      	b.n	8009b64 <__swhatbuf_r+0x24>

08009b8c <__smakebuf_r>:
 8009b8c:	898b      	ldrh	r3, [r1, #12]
 8009b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b90:	079d      	lsls	r5, r3, #30
 8009b92:	4606      	mov	r6, r0
 8009b94:	460c      	mov	r4, r1
 8009b96:	d507      	bpl.n	8009ba8 <__smakebuf_r+0x1c>
 8009b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	6123      	str	r3, [r4, #16]
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	6163      	str	r3, [r4, #20]
 8009ba4:	b002      	add	sp, #8
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}
 8009ba8:	ab01      	add	r3, sp, #4
 8009baa:	466a      	mov	r2, sp
 8009bac:	f7ff ffc8 	bl	8009b40 <__swhatbuf_r>
 8009bb0:	9900      	ldr	r1, [sp, #0]
 8009bb2:	4605      	mov	r5, r0
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f7fe fc27 	bl	8008408 <_malloc_r>
 8009bba:	b948      	cbnz	r0, 8009bd0 <__smakebuf_r+0x44>
 8009bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bc0:	059a      	lsls	r2, r3, #22
 8009bc2:	d4ef      	bmi.n	8009ba4 <__smakebuf_r+0x18>
 8009bc4:	f023 0303 	bic.w	r3, r3, #3
 8009bc8:	f043 0302 	orr.w	r3, r3, #2
 8009bcc:	81a3      	strh	r3, [r4, #12]
 8009bce:	e7e3      	b.n	8009b98 <__smakebuf_r+0xc>
 8009bd0:	89a3      	ldrh	r3, [r4, #12]
 8009bd2:	6020      	str	r0, [r4, #0]
 8009bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bd8:	81a3      	strh	r3, [r4, #12]
 8009bda:	9b00      	ldr	r3, [sp, #0]
 8009bdc:	6163      	str	r3, [r4, #20]
 8009bde:	9b01      	ldr	r3, [sp, #4]
 8009be0:	6120      	str	r0, [r4, #16]
 8009be2:	b15b      	cbz	r3, 8009bfc <__smakebuf_r+0x70>
 8009be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009be8:	4630      	mov	r0, r6
 8009bea:	f000 f81d 	bl	8009c28 <_isatty_r>
 8009bee:	b128      	cbz	r0, 8009bfc <__smakebuf_r+0x70>
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	f023 0303 	bic.w	r3, r3, #3
 8009bf6:	f043 0301 	orr.w	r3, r3, #1
 8009bfa:	81a3      	strh	r3, [r4, #12]
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	431d      	orrs	r5, r3
 8009c00:	81a5      	strh	r5, [r4, #12]
 8009c02:	e7cf      	b.n	8009ba4 <__smakebuf_r+0x18>

08009c04 <_fstat_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	4d07      	ldr	r5, [pc, #28]	; (8009c24 <_fstat_r+0x20>)
 8009c08:	2300      	movs	r3, #0
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	4608      	mov	r0, r1
 8009c0e:	4611      	mov	r1, r2
 8009c10:	602b      	str	r3, [r5, #0]
 8009c12:	f7f8 fefa 	bl	8002a0a <_fstat>
 8009c16:	1c43      	adds	r3, r0, #1
 8009c18:	d102      	bne.n	8009c20 <_fstat_r+0x1c>
 8009c1a:	682b      	ldr	r3, [r5, #0]
 8009c1c:	b103      	cbz	r3, 8009c20 <_fstat_r+0x1c>
 8009c1e:	6023      	str	r3, [r4, #0]
 8009c20:	bd38      	pop	{r3, r4, r5, pc}
 8009c22:	bf00      	nop
 8009c24:	2000078c 	.word	0x2000078c

08009c28 <_isatty_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4d06      	ldr	r5, [pc, #24]	; (8009c44 <_isatty_r+0x1c>)
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4604      	mov	r4, r0
 8009c30:	4608      	mov	r0, r1
 8009c32:	602b      	str	r3, [r5, #0]
 8009c34:	f7f8 fef9 	bl	8002a2a <_isatty>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_isatty_r+0x1a>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_isatty_r+0x1a>
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	2000078c 	.word	0x2000078c

08009c48 <_init>:
 8009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4a:	bf00      	nop
 8009c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4e:	bc08      	pop	{r3}
 8009c50:	469e      	mov	lr, r3
 8009c52:	4770      	bx	lr

08009c54 <_fini>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	bf00      	nop
 8009c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5a:	bc08      	pop	{r3}
 8009c5c:	469e      	mov	lr, r3
 8009c5e:	4770      	bx	lr
