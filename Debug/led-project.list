
led-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08006874  08006874  00016874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b10  08006b10  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006b10  08006b10  00016b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b18  08006b18  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b18  08006b18  00016b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b1c  08006b1c  00016b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  20000068  08006b88  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08006b88  00020584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f56c  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b1  00000000  00000000  0002f647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  00031bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba3  00000000  00000000  00032ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c3f  00000000  00000000  0003367b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000118a7  00000000  00000000  0004c2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009af3b  00000000  00000000  0005db61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004988  00000000  00000000  000f8a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000fd424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800685c 	.word	0x0800685c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800685c 	.word	0x0800685c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <parse_string>:
#include "RGB_led.h"
#include "stm32f4xx_it.h"
#include <stdlib.h>
#include <string.h>

void parse_string(char *input) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    if (input[0] == 'c') {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b63      	cmp	r3, #99	; 0x63
 8000d66:	d10c      	bne.n	8000d82 <parse_string+0x2a>
        LED_setColor(strtoul(&input[1],NULL, 10));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	220a      	movs	r2, #10
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 fd65 	bl	8005840 <strtoul>
 8000d76:	4603      	mov	r3, r0
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f84c 	bl	8000e18 <LED_setColor>
        return;
 8000d80:	e029      	b.n	8000dd6 <parse_string+0x7e>
    }
    char *token = strtok(input, ";");
 8000d82:	4916      	ldr	r1, [pc, #88]	; (8000ddc <parse_string+0x84>)
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f004 fe73 	bl	8005a70 <strtok>
 8000d8a:	60f8      	str	r0, [r7, #12]
    uint8_t var1 = strtoul(token, NULL, 10);
 8000d8c:	220a      	movs	r2, #10
 8000d8e:	2100      	movs	r1, #0
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f004 fd55 	bl	8005840 <strtoul>
 8000d96:	4603      	mov	r3, r0
 8000d98:	72fb      	strb	r3, [r7, #11]
    token = strtok(NULL, ";");
 8000d9a:	4910      	ldr	r1, [pc, #64]	; (8000ddc <parse_string+0x84>)
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f004 fe67 	bl	8005a70 <strtok>
 8000da2:	60f8      	str	r0, [r7, #12]

    uint8_t var2 = strtoul(token, NULL, 10);
 8000da4:	220a      	movs	r2, #10
 8000da6:	2100      	movs	r1, #0
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f004 fd49 	bl	8005840 <strtoul>
 8000dae:	4603      	mov	r3, r0
 8000db0:	72bb      	strb	r3, [r7, #10]
    token = strtok(NULL, ";");
 8000db2:	490a      	ldr	r1, [pc, #40]	; (8000ddc <parse_string+0x84>)
 8000db4:	2000      	movs	r0, #0
 8000db6:	f004 fe5b 	bl	8005a70 <strtok>
 8000dba:	60f8      	str	r0, [r7, #12]

    uint8_t var3 = strtoul(token, NULL, 10);
 8000dbc:	220a      	movs	r2, #10
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f004 fd3d 	bl	8005840 <strtoul>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	727b      	strb	r3, [r7, #9]
    LED_setColorRGB(var1,var2,var3);
 8000dca:	7a7a      	ldrb	r2, [r7, #9]
 8000dcc:	7ab9      	ldrb	r1, [r7, #10]
 8000dce:	7afb      	ldrb	r3, [r7, #11]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f805 	bl	8000de0 <LED_setColorRGB>

}
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	08006874 	.word	0x08006874

08000de0 <LED_setColorRGB>:

void LED_setColorRGB(uint8_t R, uint8_t G, uint8_t B) {
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
 8000dea:	460b      	mov	r3, r1
 8000dec:	71bb      	strb	r3, [r7, #6]
 8000dee:	4613      	mov	r3, r2
 8000df0:	717b      	strb	r3, [r7, #5]
    TIM1->CCR1 = R;
 8000df2:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <LED_setColorRGB+0x30>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	6353      	str	r3, [r2, #52]	; 0x34
    TIM1->CCR2 = G;
 8000df8:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <LED_setColorRGB+0x30>)
 8000dfa:	79bb      	ldrb	r3, [r7, #6]
 8000dfc:	6393      	str	r3, [r2, #56]	; 0x38
    TIM1->CCR3 = B;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <LED_setColorRGB+0x30>)
 8000e00:	797b      	ldrb	r3, [r7, #5]
 8000e02:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	40010000 	.word	0x40010000
 8000e14:	00000000 	.word	0x00000000

08000e18 <LED_setColor>:

void LED_setColor(enum Color color) {
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
    TIM1->CCR1 = colorValues[color].red/2.55;
 8000e22:	79fa      	ldrb	r2, [r7, #7]
 8000e24:	492a      	ldr	r1, [pc, #168]	; (8000ed0 <LED_setColor+0xb8>)
 8000e26:	4613      	mov	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	440b      	add	r3, r1
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb76 	bl	8000524 <__aeabi_i2d>
 8000e38:	a323      	add	r3, pc, #140	; (adr r3, 8000ec8 <LED_setColor+0xb0>)
 8000e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3e:	f7ff fd05 	bl	800084c <__aeabi_ddiv>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4c23      	ldr	r4, [pc, #140]	; (8000ed4 <LED_setColor+0xbc>)
 8000e48:	4610      	mov	r0, r2
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f7ff fde6 	bl	8000a1c <__aeabi_d2uiz>
 8000e50:	4603      	mov	r3, r0
 8000e52:	6363      	str	r3, [r4, #52]	; 0x34
    TIM1->CCR2 = colorValues[color].green/2.55;
 8000e54:	79fa      	ldrb	r2, [r7, #7]
 8000e56:	491e      	ldr	r1, [pc, #120]	; (8000ed0 <LED_setColor+0xb8>)
 8000e58:	4613      	mov	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	3304      	adds	r3, #4
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fb5c 	bl	8000524 <__aeabi_i2d>
 8000e6c:	a316      	add	r3, pc, #88	; (adr r3, 8000ec8 <LED_setColor+0xb0>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	f7ff fceb 	bl	800084c <__aeabi_ddiv>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4c16      	ldr	r4, [pc, #88]	; (8000ed4 <LED_setColor+0xbc>)
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fdcc 	bl	8000a1c <__aeabi_d2uiz>
 8000e84:	4603      	mov	r3, r0
 8000e86:	63a3      	str	r3, [r4, #56]	; 0x38
    TIM1->CCR3 = colorValues[color].blue/2.55;
 8000e88:	79fa      	ldrb	r2, [r7, #7]
 8000e8a:	4911      	ldr	r1, [pc, #68]	; (8000ed0 <LED_setColor+0xb8>)
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	3308      	adds	r3, #8
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fb42 	bl	8000524 <__aeabi_i2d>
 8000ea0:	a309      	add	r3, pc, #36	; (adr r3, 8000ec8 <LED_setColor+0xb0>)
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	f7ff fcd1 	bl	800084c <__aeabi_ddiv>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4c09      	ldr	r4, [pc, #36]	; (8000ed4 <LED_setColor+0xbc>)
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f7ff fdb2 	bl	8000a1c <__aeabi_d2uiz>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd90      	pop	{r4, r7, pc}
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	66666666 	.word	0x66666666
 8000ecc:	40046666 	.word	0x40046666
 8000ed0:	0800687c 	.word	0x0800687c
 8000ed4:	40010000 	.word	0x40010000

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f000 ff27 	bl	8001d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee2:	f000 f871 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000ee6:	f000 fa7b 	bl	80013e0 <MX_GPIO_Init>
    MX_DMA_Init();
 8000eea:	f000 fa59 	bl	80013a0 <MX_DMA_Init>
    MX_ADC1_Init();
 8000eee:	f000 f8d7 	bl	80010a0 <MX_ADC1_Init>
    MX_TIM1_Init();
 8000ef2:	f000 f927 	bl	8001144 <MX_TIM1_Init>
    MX_TIM2_Init();
 8000ef6:	f000 f9dd 	bl	80012b4 <MX_TIM2_Init>
    MX_USART1_UART_Init();
 8000efa:	f000 fa27 	bl	800134c <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    HAL_ADC_Start(&hadc1);
 8000efe:	4828      	ldr	r0, [pc, #160]	; (8000fa0 <main+0xc8>)
 8000f00:	f000 fff0 	bl	8001ee4 <HAL_ADC_Start>
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &UARTRecieveBuffer[UARTBufIterator++], 1);
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <main+0xcc>)
 8000f06:	f993 2000 	ldrsb.w	r2, [r3]
 8000f0a:	b2d3      	uxtb	r3, r2
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	b259      	sxtb	r1, r3
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <main+0xcc>)
 8000f14:	7019      	strb	r1, [r3, #0]
 8000f16:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <main+0xd0>)
 8000f18:	4413      	add	r3, r2
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4823      	ldr	r0, [pc, #140]	; (8000fac <main+0xd4>)
 8000f20:	f003 fc83 	bl	800482a <HAL_UART_Receive_IT>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f24:	2100      	movs	r1, #0
 8000f26:	4822      	ldr	r0, [pc, #136]	; (8000fb0 <main+0xd8>)
 8000f28:	f002 fdda 	bl	8003ae0 <HAL_TIM_PWM_Start>
    //   HAL_TIM_Base_Start_IT(&htim2);
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	4820      	ldr	r0, [pc, #128]	; (8000fb0 <main+0xd8>)
 8000f30:	f002 fdd6 	bl	8003ae0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f34:	2108      	movs	r1, #8
 8000f36:	481e      	ldr	r0, [pc, #120]	; (8000fb0 <main+0xd8>)
 8000f38:	f002 fdd2 	bl	8003ae0 <HAL_TIM_PWM_Start>
    LCD_setRST(GPIOC, GPIO_PIN_4);
 8000f3c:	2110      	movs	r1, #16
 8000f3e:	481d      	ldr	r0, [pc, #116]	; (8000fb4 <main+0xdc>)
 8000f40:	f000 fb14 	bl	800156c <LCD_setRST>
    LCD_setCE(GPIOC, GPIO_PIN_5);
 8000f44:	2120      	movs	r1, #32
 8000f46:	481b      	ldr	r0, [pc, #108]	; (8000fb4 <main+0xdc>)
 8000f48:	f000 fb24 	bl	8001594 <LCD_setCE>
    LCD_setDC(GPIOB, GPIO_PIN_0);
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	481a      	ldr	r0, [pc, #104]	; (8000fb8 <main+0xe0>)
 8000f50:	f000 fb34 	bl	80015bc <LCD_setDC>
    LCD_setDIN(GPIOA, GPIO_PIN_7);
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	4819      	ldr	r0, [pc, #100]	; (8000fbc <main+0xe4>)
 8000f58:	f000 fb44 	bl	80015e4 <LCD_setDIN>
    LCD_setCLK(GPIOA, GPIO_PIN_5);
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	4817      	ldr	r0, [pc, #92]	; (8000fbc <main+0xe4>)
 8000f60:	f000 fb54 	bl	800160c <LCD_setCLK>
	LCD_init();
 8000f64:	f000 fbea 	bl	800173c <LCD_init>
    TIM1->CCR1 = 90;
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <main+0xe8>)
 8000f6a:	225a      	movs	r2, #90	; 0x5a
 8000f6c:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1->CCR2 = 90;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <main+0xe8>)
 8000f70:	225a      	movs	r2, #90	; 0x5a
 8000f72:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1->CCR3 = 90;
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <main+0xe8>)
 8000f76:	225a      	movs	r2, #90	; 0x5a
 8000f78:	63da      	str	r2, [r3, #60]	; 0x3c
//		TIM1->CCR2  = min(tempValue/3, 100); //blue
//		TIM1->CCR3 = min(tempValue/3, 100); //green
//		if(tempValue > 10){
//			HAL_Delay(40);
//		}
        uint8_t buf[] = "AT";
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <main+0xec>)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	6812      	ldr	r2, [r2, #0]
 8000f80:	4611      	mov	r1, r2
 8000f82:	8019      	strh	r1, [r3, #0]
 8000f84:	3302      	adds	r3, #2
 8000f86:	0c12      	lsrs	r2, r2, #16
 8000f88:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t *) buf, sizeof(buf), 100);
 8000f8a:	1d39      	adds	r1, r7, #4
 8000f8c:	2364      	movs	r3, #100	; 0x64
 8000f8e:	2203      	movs	r2, #3
 8000f90:	4806      	ldr	r0, [pc, #24]	; (8000fac <main+0xd4>)
 8000f92:	f003 fbb8 	bl	8004706 <HAL_UART_Transmit>
        HAL_Delay(1000);
 8000f96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9a:	f000 ff3b 	bl	8001e14 <HAL_Delay>
	while (1) {
 8000f9e:	e7ec      	b.n	8000f7a <main+0xa2>
 8000fa0:	20000084 	.word	0x20000084
 8000fa4:	2000020a 	.word	0x2000020a
 8000fa8:	20000200 	.word	0x20000200
 8000fac:	200001bc 	.word	0x200001bc
 8000fb0:	2000012c 	.word	0x2000012c
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40010000 	.word	0x40010000
 8000fc4:	08006878 	.word	0x08006878

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b094      	sub	sp, #80	; 0x50
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	2230      	movs	r2, #48	; 0x30
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 fd41 	bl	8005a5e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <SystemClock_Config+0xd0>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	4a28      	ldr	r2, [pc, #160]	; (8001098 <SystemClock_Config+0xd0>)
 8000ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffc:	4b26      	ldr	r3, [pc, #152]	; (8001098 <SystemClock_Config+0xd0>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <SystemClock_Config+0xd4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001014:	4a21      	ldr	r2, [pc, #132]	; (800109c <SystemClock_Config+0xd4>)
 8001016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <SystemClock_Config+0xd4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001028:	2302      	movs	r3, #2
 800102a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102c:	2301      	movs	r3, #1
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001030:	2310      	movs	r3, #16
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001034:	2302      	movs	r3, #2
 8001036:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001038:	2300      	movs	r3, #0
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 800103c:	2308      	movs	r3, #8
 800103e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 84;
 8001040:	2354      	movs	r3, #84	; 0x54
 8001042:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001044:	2302      	movs	r3, #2
 8001046:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001048:	2304      	movs	r3, #4
 800104a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800104c:	f107 0320 	add.w	r3, r7, #32
 8001050:	4618      	mov	r0, r3
 8001052:	f002 f845 	bl	80030e0 <HAL_RCC_OscConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0x98>
        Error_Handler();
 800105c:	f000 fa80 	bl	8001560 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001060:	230f      	movs	r3, #15
 8001062:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001064:	2302      	movs	r3, #2
 8001066:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001076:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f002 faa6 	bl	80035d0 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800108a:	f000 fa69 	bl	8001560 <Error_Handler>
  }
}
 800108e:	bf00      	nop
 8001090:	3750      	adds	r7, #80	; 0x50
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010a6:	463b      	mov	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <MX_ADC1_Init+0x98>)
 80010b4:	4a21      	ldr	r2, [pc, #132]	; (800113c <MX_ADC1_Init+0x9c>)
 80010b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <MX_ADC1_Init+0x98>)
 80010ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <MX_ADC1_Init+0x98>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MX_ADC1_Init+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_ADC1_Init+0x98>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_ADC1_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_ADC1_Init+0x98>)
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <MX_ADC1_Init+0xa0>)
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_ADC1_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_ADC1_Init+0x98>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_ADC1_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_ADC1_Init+0x98>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_ADC1_Init+0x98>)
 8001102:	f000 feab 	bl	8001e5c <HAL_ADC_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800110c:	f000 fa28 	bl	8001560 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001110:	2300      	movs	r3, #0
 8001112:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_ADC1_Init+0x98>)
 8001122:	f000 ff93 	bl	800204c <HAL_ADC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800112c:	f000 fa18 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000084 	.word	0x20000084
 800113c:	40012000 	.word	0x40012000
 8001140:	0f000001 	.word	0x0f000001

08001144 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b096      	sub	sp, #88	; 0x58
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	615a      	str	r2, [r3, #20]
 8001174:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2220      	movs	r2, #32
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f004 fc6e 	bl	8005a5e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8001182:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <MX_TIM1_Init+0x168>)
 8001184:	4a4a      	ldr	r2, [pc, #296]	; (80012b0 <MX_TIM1_Init+0x16c>)
 8001186:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 84 - 1;
 8001188:	4b48      	ldr	r3, [pc, #288]	; (80012ac <MX_TIM1_Init+0x168>)
 800118a:	2253      	movs	r2, #83	; 0x53
 800118c:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b47      	ldr	r3, [pc, #284]	; (80012ac <MX_TIM1_Init+0x168>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 250 - 1;
 8001194:	4b45      	ldr	r3, [pc, #276]	; (80012ac <MX_TIM1_Init+0x168>)
 8001196:	22f9      	movs	r2, #249	; 0xf9
 8001198:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119a:	4b44      	ldr	r3, [pc, #272]	; (80012ac <MX_TIM1_Init+0x168>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a0:	4b42      	ldr	r3, [pc, #264]	; (80012ac <MX_TIM1_Init+0x168>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b41      	ldr	r3, [pc, #260]	; (80012ac <MX_TIM1_Init+0x168>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ac:	483f      	ldr	r0, [pc, #252]	; (80012ac <MX_TIM1_Init+0x168>)
 80011ae:	f002 fbef 	bl	8003990 <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80011b8:	f000 f9d2 	bl	8001560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c6:	4619      	mov	r1, r3
 80011c8:	4838      	ldr	r0, [pc, #224]	; (80012ac <MX_TIM1_Init+0x168>)
 80011ca:	f002 fdfb 	bl	8003dc4 <HAL_TIM_ConfigClockSource>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80011d4:	f000 f9c4 	bl	8001560 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011d8:	4834      	ldr	r0, [pc, #208]	; (80012ac <MX_TIM1_Init+0x168>)
 80011da:	f002 fc28 	bl	8003a2e <HAL_TIM_PWM_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80011e4:	f000 f9bc 	bl	8001560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011f4:	4619      	mov	r1, r3
 80011f6:	482d      	ldr	r0, [pc, #180]	; (80012ac <MX_TIM1_Init+0x168>)
 80011f8:	f003 f978 	bl	80044ec <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001202:	f000 f9ad 	bl	8001560 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001206:	2360      	movs	r3, #96	; 0x60
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001212:	2300      	movs	r3, #0
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001226:	2200      	movs	r2, #0
 8001228:	4619      	mov	r1, r3
 800122a:	4820      	ldr	r0, [pc, #128]	; (80012ac <MX_TIM1_Init+0x168>)
 800122c:	f002 fd08 	bl	8003c40 <HAL_TIM_PWM_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001236:	f000 f993 	bl	8001560 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	2204      	movs	r2, #4
 8001240:	4619      	mov	r1, r3
 8001242:	481a      	ldr	r0, [pc, #104]	; (80012ac <MX_TIM1_Init+0x168>)
 8001244:	f002 fcfc 	bl	8003c40 <HAL_TIM_PWM_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800124e:	f000 f987 	bl	8001560 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	2208      	movs	r2, #8
 8001258:	4619      	mov	r1, r3
 800125a:	4814      	ldr	r0, [pc, #80]	; (80012ac <MX_TIM1_Init+0x168>)
 800125c:	f002 fcf0 	bl	8003c40 <HAL_TIM_PWM_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001266:	f000 f97b 	bl	8001560 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800127e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001282:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	4619      	mov	r1, r3
 800128c:	4807      	ldr	r0, [pc, #28]	; (80012ac <MX_TIM1_Init+0x168>)
 800128e:	f003 f99b 	bl	80045c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001298:	f000 f962 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <MX_TIM1_Init+0x168>)
 800129e:	f000 fb7d 	bl	800199c <HAL_TIM_MspPostInit>

}
 80012a2:	bf00      	nop
 80012a4:	3758      	adds	r7, #88	; 0x58
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000012c 	.word	0x2000012c
 80012b0:	40010000 	.word	0x40010000

080012b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <MX_TIM2_Init+0x94>)
 80012d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d6:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 840 - 1;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <MX_TIM2_Init+0x94>)
 80012da:	f240 3247 	movw	r2, #839	; 0x347
 80012de:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_TIM2_Init+0x94>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <MX_TIM2_Init+0x94>)
 80012e8:	2209      	movs	r2, #9
 80012ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <MX_TIM2_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <MX_TIM2_Init+0x94>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012f8:	4813      	ldr	r0, [pc, #76]	; (8001348 <MX_TIM2_Init+0x94>)
 80012fa:	f002 fb49 	bl	8003990 <HAL_TIM_Base_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001304:	f000 f92c 	bl	8001560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	4619      	mov	r1, r3
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <MX_TIM2_Init+0x94>)
 8001316:	f002 fd55 	bl	8003dc4 <HAL_TIM_ConfigClockSource>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001320:	f000 f91e 	bl	8001560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_TIM2_Init+0x94>)
 8001332:	f003 f8db 	bl	80044ec <HAL_TIMEx_MasterConfigSynchronization>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800133c:	f000 f910 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000174 	.word	0x20000174

0800134c <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_USART1_UART_Init+0x50>)
 8001354:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001358:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800135c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001384:	f003 f972 	bl	800466c <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART1_UART_Init+0x46>
        Error_Handler();
 800138e:	f000 f8e7 	bl	8001560 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200001bc 	.word	0x200001bc
 800139c:	40011000 	.word	0x40011000

080013a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_DMA_Init+0x3c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <MX_DMA_Init+0x3c>)
 80013b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_DMA_Init+0x3c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2038      	movs	r0, #56	; 0x38
 80013c8:	f001 f939 	bl	800263e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013cc:	2038      	movs	r0, #56	; 0x38
 80013ce:	f001 f952 	bl	8002676 <HAL_NVIC_EnableIRQ>

}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800

080013e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <MX_GPIO_Init+0x100>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a38      	ldr	r2, [pc, #224]	; (80014e0 <MX_GPIO_Init+0x100>)
 8001400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_GPIO_Init+0x100>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <MX_GPIO_Init+0x100>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a31      	ldr	r2, [pc, #196]	; (80014e0 <MX_GPIO_Init+0x100>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <MX_GPIO_Init+0x100>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <MX_GPIO_Init+0x100>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a2a      	ldr	r2, [pc, #168]	; (80014e0 <MX_GPIO_Init+0x100>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <MX_GPIO_Init+0x100>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <MX_GPIO_Init+0x100>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <MX_GPIO_Init+0x100>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <MX_GPIO_Init+0x100>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	21a0      	movs	r1, #160	; 0xa0
 800146a:	481e      	ldr	r0, [pc, #120]	; (80014e4 <MX_GPIO_Init+0x104>)
 800146c:	f001 fe1e 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2130      	movs	r1, #48	; 0x30
 8001474:	481c      	ldr	r0, [pc, #112]	; (80014e8 <MX_GPIO_Init+0x108>)
 8001476:	f001 fe19 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	2101      	movs	r1, #1
 800147e:	481b      	ldr	r0, [pc, #108]	; (80014ec <MX_GPIO_Init+0x10c>)
 8001480:	f001 fe14 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001484:	23a0      	movs	r3, #160	; 0xa0
 8001486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	4812      	ldr	r0, [pc, #72]	; (80014e4 <MX_GPIO_Init+0x104>)
 800149c:	f001 fc82 	bl	8002da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014a0:	2330      	movs	r3, #48	; 0x30
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	480c      	ldr	r0, [pc, #48]	; (80014e8 <MX_GPIO_Init+0x108>)
 80014b8:	f001 fc74 	bl	8002da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014bc:	2301      	movs	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <MX_GPIO_Init+0x10c>)
 80014d4:	f001 fc66 	bl	8002da4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020800 	.word	0x40020800
 80014ec:	40020400 	.word	0x40020400

080014f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a14      	ldr	r2, [pc, #80]	; (8001550 <HAL_UART_RxCpltCallback+0x60>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d112      	bne.n	8001528 <HAL_UART_RxCpltCallback+0x38>
        // Process the received data here
        // ...
        if (UARTRecieveBuffer[UARTBufIterator - 1] == '\0') {
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_UART_RxCpltCallback+0x64>)
 8001504:	f993 3000 	ldrsb.w	r3, [r3]
 8001508:	3b01      	subs	r3, #1
 800150a:	4a13      	ldr	r2, [pc, #76]	; (8001558 <HAL_UART_RxCpltCallback+0x68>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10a      	bne.n	8001528 <HAL_UART_RxCpltCallback+0x38>
            parse_string(UARTRecieveBuffer);
 8001512:	4811      	ldr	r0, [pc, #68]	; (8001558 <HAL_UART_RxCpltCallback+0x68>)
 8001514:	f7ff fc20 	bl	8000d58 <parse_string>
            memset(UARTRecieveBuffer, 0, sizeof(UARTRecieveBuffer));
 8001518:	220a      	movs	r2, #10
 800151a:	2100      	movs	r1, #0
 800151c:	480e      	ldr	r0, [pc, #56]	; (8001558 <HAL_UART_RxCpltCallback+0x68>)
 800151e:	f004 fa9e 	bl	8005a5e <memset>
            UARTBufIterator = 0;
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_UART_RxCpltCallback+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
        }
        // Restart reception for the next byte
    }
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &UARTRecieveBuffer[UARTBufIterator++], 1);
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_UART_RxCpltCallback+0x64>)
 800152a:	f993 2000 	ldrsb.w	r2, [r3]
 800152e:	b2d3      	uxtb	r3, r2
 8001530:	3301      	adds	r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	b259      	sxtb	r1, r3
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_UART_RxCpltCallback+0x64>)
 8001538:	7019      	strb	r1, [r3, #0]
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_UART_RxCpltCallback+0x68>)
 800153c:	4413      	add	r3, r2
 800153e:	2201      	movs	r2, #1
 8001540:	4619      	mov	r1, r3
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <HAL_UART_RxCpltCallback+0x6c>)
 8001544:	f003 f971 	bl	800482a <HAL_UART_Receive_IT>

}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40011000 	.word	0x40011000
 8001554:	2000020a 	.word	0x2000020a
 8001558:	20000200 	.word	0x20000200
 800155c:	200001bc 	.word	0x200001bc

08001560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
}
 8001566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001568:	e7fe      	b.n	8001568 <Error_Handler+0x8>
	...

0800156c <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8001578:	4a05      	ldr	r2, [pc, #20]	; (8001590 <LCD_setRST+0x24>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <LCD_setRST+0x24>)
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	8093      	strh	r3, [r2, #4]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20000408 	.word	0x20000408

08001594 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 80015a0:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <LCD_setCE+0x24>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <LCD_setCE+0x24>)
 80015a8:	887b      	ldrh	r3, [r7, #2]
 80015aa:	8193      	strh	r3, [r2, #12]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	20000408 	.word	0x20000408

080015bc <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 80015c8:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <LCD_setDC+0x24>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <LCD_setDC+0x24>)
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	8293      	strh	r3, [r2, #20]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	20000408 	.word	0x20000408

080015e4 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 80015f0:	4a05      	ldr	r2, [pc, #20]	; (8001608 <LCD_setDIN+0x24>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <LCD_setDIN+0x24>)
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	8393      	strh	r3, [r2, #28]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	20000408 	.word	0x20000408

0800160c <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8001618:	4a05      	ldr	r2, [pc, #20]	; (8001630 <LCD_setCLK+0x24>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 800161e:	4a04      	ldr	r2, [pc, #16]	; (8001630 <LCD_setCLK+0x24>)
 8001620:	887b      	ldrh	r3, [r7, #2]
 8001622:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	20000408 	.word	0x20000408

08001634 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 800163e:	2300      	movs	r3, #0
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e026      	b.n	8001692 <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <LCD_send+0x70>)
 8001646:	6998      	ldr	r0, [r3, #24]
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <LCD_send+0x70>)
 800164a:	8b99      	ldrh	r1, [r3, #28]
 800164c:	79fa      	ldrb	r2, [r7, #7]
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	f1c3 0307 	rsb	r3, r3, #7
 8001654:	fa42 f303 	asr.w	r3, r2, r3
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	f001 fd20 	bl	80030ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <LCD_send+0x70>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4a0c      	ldr	r2, [pc, #48]	; (80016a4 <LCD_send+0x70>)
 8001672:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8001674:	2201      	movs	r2, #1
 8001676:	4618      	mov	r0, r3
 8001678:	f001 fd18 	bl	80030ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <LCD_send+0x70>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <LCD_send+0x70>)
 8001682:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8001684:	2200      	movs	r2, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f001 fd10 	bl	80030ac <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	3301      	adds	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	2b07      	cmp	r3, #7
 8001696:	d9d5      	bls.n	8001644 <LCD_send+0x10>
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000408 	.word	0x20000408

080016a8 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	460a      	mov	r2, r1
 80016b2:	71fb      	strb	r3, [r7, #7]
 80016b4:	4613      	mov	r3, r2
 80016b6:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 80016b8:	79bb      	ldrb	r3, [r7, #6]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d11c      	bne.n	80016f8 <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 80016be:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <LCD_write+0x90>)
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <LCD_write+0x90>)
 80016c4:	8a91      	ldrh	r1, [r2, #20]
 80016c6:	2200      	movs	r2, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f001 fcef 	bl	80030ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <LCD_write+0x90>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	4a19      	ldr	r2, [pc, #100]	; (8001738 <LCD_write+0x90>)
 80016d4:	8991      	ldrh	r1, [r2, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f001 fce7 	bl	80030ac <HAL_GPIO_WritePin>
    LCD_send(data);
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ffa7 	bl	8001634 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <LCD_write+0x90>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	4a13      	ldr	r2, [pc, #76]	; (8001738 <LCD_write+0x90>)
 80016ec:	8991      	ldrh	r1, [r2, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	4618      	mov	r0, r3
 80016f2:	f001 fcdb 	bl	80030ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 80016f6:	e01b      	b.n	8001730 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <LCD_write+0x90>)
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <LCD_write+0x90>)
 80016fe:	8a91      	ldrh	r1, [r2, #20]
 8001700:	2201      	movs	r2, #1
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fcd2 	bl	80030ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <LCD_write+0x90>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <LCD_write+0x90>)
 800170e:	8991      	ldrh	r1, [r2, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fcca 	bl	80030ac <HAL_GPIO_WritePin>
    LCD_send(data);
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ff8a 	bl	8001634 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <LCD_write+0x90>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <LCD_write+0x90>)
 8001726:	8991      	ldrh	r1, [r2, #12]
 8001728:	2201      	movs	r2, #1
 800172a:	4618      	mov	r0, r3
 800172c:	f001 fcbe 	bl	80030ac <HAL_GPIO_WritePin>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000408 	.word	0x20000408

0800173c <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <LCD_init+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a16      	ldr	r2, [pc, #88]	; (80017a0 <LCD_init+0x64>)
 8001746:	8891      	ldrh	r1, [r2, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f001 fcae 	bl	80030ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <LCD_init+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <LCD_init+0x64>)
 8001756:	8891      	ldrh	r1, [r2, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	4618      	mov	r0, r3
 800175c:	f001 fca6 	bl	80030ac <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8001760:	2100      	movs	r1, #0
 8001762:	2021      	movs	r0, #33	; 0x21
 8001764:	f7ff ffa0 	bl	80016a8 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8001768:	2100      	movs	r1, #0
 800176a:	20b8      	movs	r0, #184	; 0xb8
 800176c:	f7ff ff9c 	bl	80016a8 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8001770:	2100      	movs	r1, #0
 8001772:	2004      	movs	r0, #4
 8001774:	f7ff ff98 	bl	80016a8 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8001778:	2100      	movs	r1, #0
 800177a:	2014      	movs	r0, #20
 800177c:	f7ff ff94 	bl	80016a8 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8001780:	2100      	movs	r1, #0
 8001782:	2020      	movs	r0, #32
 8001784:	f7ff ff90 	bl	80016a8 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8001788:	2100      	movs	r1, #0
 800178a:	200c      	movs	r0, #12
 800178c:	f7ff ff8c 	bl	80016a8 <LCD_write>
  LCD_clrScr();
 8001790:	f000 f80a 	bl	80017a8 <LCD_clrScr>
  lcd.inverttext = false;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <LCD_init+0x68>)
 8001796:	2200      	movs	r2, #0
 8001798:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000408 	.word	0x20000408
 80017a4:	2000020c 	.word	0x2000020c

080017a8 <LCD_clrScr>:
}

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	e00b      	b.n	80017cc <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 80017b4:	2101      	movs	r1, #1
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7ff ff76 	bl	80016a8 <LCD_write>
    lcd.buffer[i] = 0;
 80017bc:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <LCD_clrScr+0x38>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3301      	adds	r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80017d2:	dbef      	blt.n	80017b4 <LCD_clrScr+0xc>
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000020c 	.word	0x2000020c

080017e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a0f      	ldr	r2, [pc, #60]	; (8001830 <HAL_MspInit+0x4c>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_MspInit+0x4c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_MspInit+0x4c>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_MspInit+0x4c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a2f      	ldr	r2, [pc, #188]	; (8001910 <HAL_ADC_MspInit+0xdc>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d157      	bne.n	8001906 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <HAL_ADC_MspInit+0xe0>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a2d      	ldr	r2, [pc, #180]	; (8001914 <HAL_ADC_MspInit+0xe0>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <HAL_ADC_MspInit+0xe0>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_ADC_MspInit+0xe0>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a26      	ldr	r2, [pc, #152]	; (8001914 <HAL_ADC_MspInit+0xe0>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b24      	ldr	r3, [pc, #144]	; (8001914 <HAL_ADC_MspInit+0xe0>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
      /**ADC1 GPIO Configuration
      PA0-WKUP     ------> ADC1_IN0
      */
      GPIO_InitStruct.Pin = GPIO_PIN_0;
 800188e:	2301      	movs	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001892:	2303      	movs	r3, #3
 8001894:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	481d      	ldr	r0, [pc, #116]	; (8001918 <HAL_ADC_MspInit+0xe4>)
 80018a2:	f001 fa7f 	bl	8002da4 <HAL_GPIO_Init>

      /* ADC1 DMA Init */
      /* ADC1 Init */
      hdma_adc1.Instance = DMA2_Stream0;
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <HAL_ADC_MspInit+0xe8>)
 80018a8:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <HAL_ADC_MspInit+0xec>)
 80018aa:	601a      	str	r2, [r3, #0]
      hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_ADC_MspInit+0xe8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	605a      	str	r2, [r3, #4]
      hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_ADC_MspInit+0xe8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
      hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_ADC_MspInit+0xe8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
      hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_ADC_MspInit+0xe8>)
 80018c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c4:	611a      	str	r2, [r3, #16]
      hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_ADC_MspInit+0xe8>)
 80018c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018cc:	615a      	str	r2, [r3, #20]
      hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <HAL_ADC_MspInit+0xe8>)
 80018d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d4:	619a      	str	r2, [r3, #24]
      hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_ADC_MspInit+0xe8>)
 80018d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018dc:	61da      	str	r2, [r3, #28]
      hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_ADC_MspInit+0xe8>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
      hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_ADC_MspInit+0xe8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24
      if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 80018ea:	480c      	ldr	r0, [pc, #48]	; (800191c <HAL_ADC_MspInit+0xe8>)
 80018ec:	f000 fede 	bl	80026ac <HAL_DMA_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_ADC_MspInit+0xc6>
          Error_Handler();
 80018f6:	f7ff fe33 	bl	8001560 <Error_Handler>
      }

      __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <HAL_ADC_MspInit+0xe8>)
 80018fe:	639a      	str	r2, [r3, #56]	; 0x38
 8001900:	4a06      	ldr	r2, [pc, #24]	; (800191c <HAL_ADC_MspInit+0xe8>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6393      	str	r3, [r2, #56]	; 0x38
      /* USER CODE BEGIN ADC1_MspInit 1 */

      /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40012000 	.word	0x40012000
 8001914:	40023800 	.word	0x40023800
 8001918:	40020000 	.word	0x40020000
 800191c:	200000cc 	.word	0x200000cc
 8001920:	40026410 	.word	0x40026410

08001924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a18      	ldr	r2, [pc, #96]	; (8001994 <HAL_TIM_Base_MspInit+0x70>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d10e      	bne.n	8001954 <HAL_TIM_Base_MspInit+0x30>
      /* USER CODE BEGIN TIM1_MspInit 0 */

      /* USER CODE END TIM1_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_TIM1_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_TIM_Base_MspInit+0x74>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a16      	ldr	r2, [pc, #88]	; (8001998 <HAL_TIM_Base_MspInit+0x74>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_TIM_Base_MspInit+0x74>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
      /* USER CODE BEGIN TIM2_MspInit 1 */

      /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001952:	e01a      	b.n	800198a <HAL_TIM_Base_MspInit+0x66>
  } else if (htim_base->Instance == TIM2) {
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800195c:	d115      	bne.n	800198a <HAL_TIM_Base_MspInit+0x66>
      __HAL_RCC_TIM2_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_TIM_Base_MspInit+0x74>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a0c      	ldr	r2, [pc, #48]	; (8001998 <HAL_TIM_Base_MspInit+0x74>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_TIM_Base_MspInit+0x74>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	201c      	movs	r0, #28
 8001980:	f000 fe5d 	bl	800263e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001984:	201c      	movs	r0, #28
 8001986:	f000 fe76 	bl	8002676 <HAL_NVIC_EnableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40010000 	.word	0x40010000
 8001998:	40023800 	.word	0x40023800

0800199c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <HAL_TIM_MspPostInit+0x68>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d11e      	bne.n	80019fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_TIM_MspPostInit+0x6c>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <HAL_TIM_MspPostInit+0x6c>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_TIM_MspPostInit+0x6c>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80019da:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80019de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	4619      	mov	r1, r3
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <HAL_TIM_MspPostInit+0x70>)
 80019f8:	f001 f9d4 	bl	8002da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019fc:	bf00      	nop
 80019fe:	3720      	adds	r7, #32
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40010000 	.word	0x40010000
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000

08001a10 <HAL_UART_MspInit>:
* @brief UART MSP Initialization
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART1) {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <HAL_UART_MspInit+0x94>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d133      	bne.n	8001a9a <HAL_UART_MspInit+0x8a>
        /* USER CODE BEGIN USART1_MspInit 0 */

        /* USER CODE END USART1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <HAL_UART_MspInit+0x98>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <HAL_UART_MspInit+0x98>)
 8001a3c:	f043 0310 	orr.w	r3, r3, #16
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_UART_MspInit+0x98>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_UART_MspInit+0x98>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <HAL_UART_MspInit+0x98>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_UART_MspInit+0x98>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
        /**USART1 GPIO Configuration
        PB6     ------> USART1_TX
        PB7     ------> USART1_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001a6a:	23c0      	movs	r3, #192	; 0xc0
 8001a6c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a76:	2303      	movs	r3, #3
 8001a78:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	4809      	ldr	r0, [pc, #36]	; (8001aac <HAL_UART_MspInit+0x9c>)
 8001a86:	f001 f98d 	bl	8002da4 <HAL_GPIO_Init>

        /* USART1 interrupt Init */
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2025      	movs	r0, #37	; 0x25
 8001a90:	f000 fdd5 	bl	800263e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a94:	2025      	movs	r0, #37	; 0x25
 8001a96:	f000 fdee 	bl	8002676 <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USART1_MspInit 1 */

        /* USER CODE END USART1_MspInit 1 */
    }

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	; 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40011000 	.word	0x40011000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020400 	.word	0x40020400

08001ab0 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void) {
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8001ab4:	e7fe      	b.n	8001ab4 <NMI_Handler+0x4>

08001ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <UsageFault_Handler+0x4>

08001ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afc:	f000 f96a 	bl	8001dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <USART1_IRQHandler>:


/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART1_IRQn 0 */
    /* USER CODE END USART1_IRQn 0 */
    HAL_UART_IRQHandler(&huart1);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <USART1_IRQHandler+0x10>)
 8001b0a:	f002 febf 	bl	800488c <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART1_IRQn 1 */

    /* USER CODE END USART1_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200001bc 	.word	0x200001bc

08001b18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

    /* USER CODE END DMA2_Stream0_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_adc1);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <DMA2_Stream0_IRQHandler+0x10>)
 8001b1e:	f000 ff05 	bl	800292c <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

    /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200000cc 	.word	0x200000cc

08001b2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return 1;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <_kill>:

int _kill(int pid, int sig)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b46:	f004 f835 	bl	8005bb4 <__errno>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2216      	movs	r2, #22
 8001b4e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <_exit>:

void _exit (int status)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ffe7 	bl	8001b3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b6e:	e7fe      	b.n	8001b6e <_exit+0x12>

08001b70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e00a      	b.n	8001b98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b82:	f3af 8000 	nop.w
 8001b86:	4601      	mov	r1, r0
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	60ba      	str	r2, [r7, #8]
 8001b8e:	b2ca      	uxtb	r2, r1
 8001b90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	dbf0      	blt.n	8001b82 <_read+0x12>
  }

  return len;
 8001ba0:	687b      	ldr	r3, [r7, #4]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e009      	b.n	8001bd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	60ba      	str	r2, [r7, #8]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dbf1      	blt.n	8001bbc <_write+0x12>
  }
  return len;
 8001bd8:	687b      	ldr	r3, [r7, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_close>:

int _close(int file)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c0a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <_isatty>:

int _isatty(int file)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <_sbrk+0x5c>)
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <_sbrk+0x60>)
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <_sbrk+0x64>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <_sbrk+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d207      	bcs.n	8001c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c7c:	f003 ff9a 	bl	8005bb4 <__errno>
 8001c80:	4603      	mov	r3, r0
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	e009      	b.n	8001ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <_sbrk+0x64>)
 8001c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20018000 	.word	0x20018000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	20000430 	.word	0x20000430
 8001cb4:	20000588 	.word	0x20000588

08001cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <SystemInit+0x20>)
 8001cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <SystemInit+0x20>)
 8001cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ce0:	480d      	ldr	r0, [pc, #52]	; (8001d18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ce2:	490e      	ldr	r1, [pc, #56]	; (8001d1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ce4:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce8:	e002      	b.n	8001cf0 <LoopCopyDataInit>

08001cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cee:	3304      	adds	r3, #4

08001cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf4:	d3f9      	bcc.n	8001cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cf8:	4c0b      	ldr	r4, [pc, #44]	; (8001d28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cfc:	e001      	b.n	8001d02 <LoopFillZerobss>

08001cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d00:	3204      	adds	r2, #4

08001d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d04:	d3fb      	bcc.n	8001cfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d06:	f7ff ffd7 	bl	8001cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d0a:	f003 ff59 	bl	8005bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d0e:	f7ff f8e3 	bl	8000ed8 <main>
  bx  lr    
 8001d12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d1c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d20:	08006b20 	.word	0x08006b20
  ldr r2, =_sbss
 8001d24:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d28:	20000584 	.word	0x20000584

08001d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC_IRQHandler>
	...

08001d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_Init+0x40>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <HAL_Init+0x40>)
 8001d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_Init+0x40>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <HAL_Init+0x40>)
 8001d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <HAL_Init+0x40>)
 8001d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f000 fc65 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5e:	200f      	movs	r0, #15
 8001d60:	f000 f808 	bl	8001d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d64:	f7ff fd3e 	bl	80017e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023c00 	.word	0x40023c00

08001d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_InitTick+0x54>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_InitTick+0x58>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fc7d 	bl	8002692 <HAL_SYSTICK_Config>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00e      	b.n	8001dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d80a      	bhi.n	8001dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f000 fc45 	bl	800263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <HAL_InitTick+0x5c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_IncTick+0x20>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_IncTick+0x24>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <HAL_IncTick+0x24>)
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000008 	.word	0x20000008
 8001df8:	20000434 	.word	0x20000434

08001dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <HAL_GetTick+0x14>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000434 	.word	0x20000434

08001e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e1c:	f7ff ffee 	bl	8001dfc <HAL_GetTick>
 8001e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d005      	beq.n	8001e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_Delay+0x44>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4413      	add	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e3a:	bf00      	nop
 8001e3c:	f7ff ffde 	bl	8001dfc <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d8f7      	bhi.n	8001e3c <HAL_Delay+0x28>
  {
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000008 	.word	0x20000008

08001e5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e033      	b.n	8001eda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d109      	bne.n	8001e8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fcda 	bl	8001834 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d118      	bne.n	8001ecc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ea2:	f023 0302 	bic.w	r3, r3, #2
 8001ea6:	f043 0202 	orr.w	r2, r3, #2
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f9ee 	bl	8002290 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f023 0303 	bic.w	r3, r3, #3
 8001ec2:	f043 0201 	orr.w	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eca:	e001      	b.n	8001ed0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_Start+0x1a>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e097      	b.n	800202e <HAL_ADC_Start+0x14a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d018      	beq.n	8001f46 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f24:	4b45      	ldr	r3, [pc, #276]	; (800203c <HAL_ADC_Start+0x158>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a45      	ldr	r2, [pc, #276]	; (8002040 <HAL_ADC_Start+0x15c>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0c9a      	lsrs	r2, r3, #18
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f38:	e002      	b.n	8001f40 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f9      	bne.n	8001f3a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d15f      	bne.n	8002014 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f92:	d106      	bne.n	8001fa2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	f023 0206 	bic.w	r2, r3, #6
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44
 8001fa0:	e002      	b.n	8001fa8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fb0:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_ADC_Start+0x160>)
 8001fb2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fbc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10f      	bne.n	8001fea <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d129      	bne.n	800202c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	e020      	b.n	800202c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a16      	ldr	r2, [pc, #88]	; (8002048 <HAL_ADC_Start+0x164>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d11b      	bne.n	800202c <HAL_ADC_Start+0x148>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d114      	bne.n	800202c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	e00b      	b.n	800202c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f043 0210 	orr.w	r2, r3, #16
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002024:	f043 0201 	orr.w	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000000 	.word	0x20000000
 8002040:	431bde83 	.word	0x431bde83
 8002044:	40012300 	.word	0x40012300
 8002048:	40012000 	.word	0x40012000

0800204c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x1c>
 8002064:	2302      	movs	r3, #2
 8002066:	e105      	b.n	8002274 <HAL_ADC_ConfigChannel+0x228>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b09      	cmp	r3, #9
 8002076:	d925      	bls.n	80020c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68d9      	ldr	r1, [r3, #12]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	3b1e      	subs	r3, #30
 800208e:	2207      	movs	r2, #7
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43da      	mvns	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	400a      	ands	r2, r1
 800209c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68d9      	ldr	r1, [r3, #12]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	4603      	mov	r3, r0
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4403      	add	r3, r0
 80020b6:	3b1e      	subs	r3, #30
 80020b8:	409a      	lsls	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	e022      	b.n	800210a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6919      	ldr	r1, [r3, #16]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	2207      	movs	r2, #7
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43da      	mvns	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	400a      	ands	r2, r1
 80020e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6919      	ldr	r1, [r3, #16]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	4618      	mov	r0, r3
 80020fa:	4603      	mov	r3, r0
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4403      	add	r3, r0
 8002100:	409a      	lsls	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b06      	cmp	r3, #6
 8002110:	d824      	bhi.n	800215c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	3b05      	subs	r3, #5
 8002124:	221f      	movs	r2, #31
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	400a      	ands	r2, r1
 8002132:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	4618      	mov	r0, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	3b05      	subs	r3, #5
 800214e:	fa00 f203 	lsl.w	r2, r0, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	635a      	str	r2, [r3, #52]	; 0x34
 800215a:	e04c      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b0c      	cmp	r3, #12
 8002162:	d824      	bhi.n	80021ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	3b23      	subs	r3, #35	; 0x23
 8002176:	221f      	movs	r2, #31
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43da      	mvns	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	400a      	ands	r2, r1
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	4618      	mov	r0, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	3b23      	subs	r3, #35	; 0x23
 80021a0:	fa00 f203 	lsl.w	r2, r0, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
 80021ac:	e023      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	3b41      	subs	r3, #65	; 0x41
 80021c0:	221f      	movs	r2, #31
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	400a      	ands	r2, r1
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	4618      	mov	r0, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	3b41      	subs	r3, #65	; 0x41
 80021ea:	fa00 f203 	lsl.w	r2, r0, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021f6:	4b22      	ldr	r3, [pc, #136]	; (8002280 <HAL_ADC_ConfigChannel+0x234>)
 80021f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a21      	ldr	r2, [pc, #132]	; (8002284 <HAL_ADC_ConfigChannel+0x238>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d109      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x1cc>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b12      	cmp	r3, #18
 800220a:	d105      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a19      	ldr	r2, [pc, #100]	; (8002284 <HAL_ADC_ConfigChannel+0x238>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d123      	bne.n	800226a <HAL_ADC_ConfigChannel+0x21e>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b10      	cmp	r3, #16
 8002228:	d003      	beq.n	8002232 <HAL_ADC_ConfigChannel+0x1e6>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b11      	cmp	r3, #17
 8002230:	d11b      	bne.n	800226a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b10      	cmp	r3, #16
 8002244:	d111      	bne.n	800226a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_ADC_ConfigChannel+0x23c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a10      	ldr	r2, [pc, #64]	; (800228c <HAL_ADC_ConfigChannel+0x240>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	0c9a      	lsrs	r2, r3, #18
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800225c:	e002      	b.n	8002264 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	3b01      	subs	r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f9      	bne.n	800225e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	40012300 	.word	0x40012300
 8002284:	40012000 	.word	0x40012000
 8002288:	20000000 	.word	0x20000000
 800228c:	431bde83 	.word	0x431bde83

08002290 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002298:	4b79      	ldr	r3, [pc, #484]	; (8002480 <ADC_Init+0x1f0>)
 800229a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	431a      	orrs	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	021a      	lsls	r2, r3, #8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800230a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6899      	ldr	r1, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	4a58      	ldr	r2, [pc, #352]	; (8002484 <ADC_Init+0x1f4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d022      	beq.n	800236e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002336:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6899      	ldr	r1, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002358:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6899      	ldr	r1, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	e00f      	b.n	800238e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800237c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800238c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0202 	bic.w	r2, r2, #2
 800239c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6899      	ldr	r1, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7e1b      	ldrb	r3, [r3, #24]
 80023a8:	005a      	lsls	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01b      	beq.n	80023f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	3b01      	subs	r3, #1
 80023e8:	035a      	lsls	r2, r3, #13
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	e007      	b.n	8002404 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002402:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	3b01      	subs	r3, #1
 8002420:	051a      	lsls	r2, r3, #20
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002438:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6899      	ldr	r1, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002446:	025a      	lsls	r2, r3, #9
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800245e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6899      	ldr	r1, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	029a      	lsls	r2, r3, #10
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	609a      	str	r2, [r3, #8]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	40012300 	.word	0x40012300
 8002484:	0f000001 	.word	0x0f000001

08002488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a4:	4013      	ands	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ba:	4a04      	ldr	r2, [pc, #16]	; (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	60d3      	str	r3, [r2, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <__NVIC_GetPriorityGrouping+0x18>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	f003 0307 	and.w	r3, r3, #7
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	db0b      	blt.n	8002516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	4907      	ldr	r1, [pc, #28]	; (8002524 <__NVIC_EnableIRQ+0x38>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2001      	movs	r0, #1
 800250e:	fa00 f202 	lsl.w	r2, r0, r2
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000e100 	.word	0xe000e100

08002528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	6039      	str	r1, [r7, #0]
 8002532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	db0a      	blt.n	8002552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	490c      	ldr	r1, [pc, #48]	; (8002574 <__NVIC_SetPriority+0x4c>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	0112      	lsls	r2, r2, #4
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	440b      	add	r3, r1
 800254c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002550:	e00a      	b.n	8002568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4908      	ldr	r1, [pc, #32]	; (8002578 <__NVIC_SetPriority+0x50>)
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	3b04      	subs	r3, #4
 8002560:	0112      	lsls	r2, r2, #4
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	440b      	add	r3, r1
 8002566:	761a      	strb	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000e100 	.word	0xe000e100
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f1c3 0307 	rsb	r3, r3, #7
 8002596:	2b04      	cmp	r3, #4
 8002598:	bf28      	it	cs
 800259a:	2304      	movcs	r3, #4
 800259c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3304      	adds	r3, #4
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d902      	bls.n	80025ac <NVIC_EncodePriority+0x30>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3b03      	subs	r3, #3
 80025aa:	e000      	b.n	80025ae <NVIC_EncodePriority+0x32>
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43da      	mvns	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	401a      	ands	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c4:	f04f 31ff 	mov.w	r1, #4294967295
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	43d9      	mvns	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	4313      	orrs	r3, r2
         );
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	; 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f4:	d301      	bcc.n	80025fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00f      	b.n	800261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <SysTick_Config+0x40>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002602:	210f      	movs	r1, #15
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f7ff ff8e 	bl	8002528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <SysTick_Config+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SysTick_Config+0x40>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff29 	bl	8002488 <__NVIC_SetPriorityGrouping>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff3e 	bl	80024d0 <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff8e 	bl	800257c <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5d 	bl	8002528 <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff31 	bl	80024ec <__NVIC_EnableIRQ>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffa2 	bl	80025e4 <SysTick_Config>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff fba0 	bl	8001dfc <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e099      	b.n	80027fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e8:	e00f      	b.n	800270a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ea:	f7ff fb87 	bl	8001dfc <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d908      	bls.n	800270a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2203      	movs	r2, #3
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e078      	b.n	80027fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1e8      	bne.n	80026ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4b38      	ldr	r3, [pc, #224]	; (8002804 <HAL_DMA_Init+0x158>)
 8002724:	4013      	ands	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002736:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002742:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	2b04      	cmp	r3, #4
 8002762:	d107      	bne.n	8002774 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	4313      	orrs	r3, r2
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f023 0307 	bic.w	r3, r3, #7
 800278a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	2b04      	cmp	r3, #4
 800279c:	d117      	bne.n	80027ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00e      	beq.n	80027ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fa7b 	bl	8002cac <DMA_CheckFifoParam>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2240      	movs	r2, #64	; 0x40
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027ca:	2301      	movs	r3, #1
 80027cc:	e016      	b.n	80027fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fa32 	bl	8002c40 <DMA_CalcBaseAndBitshift>
 80027dc:	4603      	mov	r3, r0
 80027de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	223f      	movs	r2, #63	; 0x3f
 80027e6:	409a      	lsls	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	f010803f 	.word	0xf010803f

08002808 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002816:	f7ff faf1 	bl	8001dfc <HAL_GetTick>
 800281a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d008      	beq.n	800283a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2280      	movs	r2, #128	; 0x80
 800282c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e052      	b.n	80028e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0216 	bic.w	r2, r2, #22
 8002848:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002858:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	d103      	bne.n	800286a <HAL_DMA_Abort+0x62>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0208 	bic.w	r2, r2, #8
 8002878:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800288a:	e013      	b.n	80028b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800288c:	f7ff fab6 	bl	8001dfc <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b05      	cmp	r3, #5
 8002898:	d90c      	bls.n	80028b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2220      	movs	r2, #32
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2203      	movs	r2, #3
 80028a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e015      	b.n	80028e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1e4      	bne.n	800288c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c6:	223f      	movs	r2, #63	; 0x3f
 80028c8:	409a      	lsls	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d004      	beq.n	8002906 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e00c      	b.n	8002920 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2205      	movs	r2, #5
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0201 	bic.w	r2, r2, #1
 800291c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002938:	4b8e      	ldr	r3, [pc, #568]	; (8002b74 <HAL_DMA_IRQHandler+0x248>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a8e      	ldr	r2, [pc, #568]	; (8002b78 <HAL_DMA_IRQHandler+0x24c>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	0a9b      	lsrs	r3, r3, #10
 8002944:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002956:	2208      	movs	r2, #8
 8002958:	409a      	lsls	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4013      	ands	r3, r2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01a      	beq.n	8002998 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0204 	bic.w	r2, r2, #4
 800297e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	2208      	movs	r2, #8
 8002986:	409a      	lsls	r2, r3
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	f043 0201 	orr.w	r2, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299c:	2201      	movs	r2, #1
 800299e:	409a      	lsls	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d012      	beq.n	80029ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	2201      	movs	r2, #1
 80029bc:	409a      	lsls	r2, r3
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c6:	f043 0202 	orr.w	r2, r3, #2
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d2:	2204      	movs	r2, #4
 80029d4:	409a      	lsls	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d012      	beq.n	8002a04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00b      	beq.n	8002a04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f0:	2204      	movs	r2, #4
 80029f2:	409a      	lsls	r2, r3
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fc:	f043 0204 	orr.w	r2, r3, #4
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a08:	2210      	movs	r2, #16
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d043      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d03c      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	2210      	movs	r2, #16
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d018      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d108      	bne.n	8002a5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d024      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4798      	blx	r3
 8002a5a:	e01f      	b.n	8002a9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01b      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
 8002a6c:	e016      	b.n	8002a9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d107      	bne.n	8002a8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0208 	bic.w	r2, r2, #8
 8002a8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 808f 	beq.w	8002bcc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8087 	beq.w	8002bcc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	d136      	bne.n	8002b44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0216 	bic.w	r2, r2, #22
 8002ae4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002af4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d103      	bne.n	8002b06 <HAL_DMA_IRQHandler+0x1da>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0208 	bic.w	r2, r2, #8
 8002b14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	223f      	movs	r2, #63	; 0x3f
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d07e      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	4798      	blx	r3
        }
        return;
 8002b42:	e079      	b.n	8002c38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01d      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10d      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d031      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
 8002b70:	e02c      	b.n	8002bcc <HAL_DMA_IRQHandler+0x2a0>
 8002b72:	bf00      	nop
 8002b74:	20000000 	.word	0x20000000
 8002b78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d023      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4798      	blx	r3
 8002b8c:	e01e      	b.n	8002bcc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10f      	bne.n	8002bbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0210 	bic.w	r2, r2, #16
 8002baa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d032      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d022      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2205      	movs	r2, #5
 8002be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d307      	bcc.n	8002c14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f2      	bne.n	8002bf8 <HAL_DMA_IRQHandler+0x2cc>
 8002c12:	e000      	b.n	8002c16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
 8002c36:	e000      	b.n	8002c3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c38:	bf00      	nop
    }
  }
}
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	3b10      	subs	r3, #16
 8002c50:	4a14      	ldr	r2, [pc, #80]	; (8002ca4 <DMA_CalcBaseAndBitshift+0x64>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c5a:	4a13      	ldr	r2, [pc, #76]	; (8002ca8 <DMA_CalcBaseAndBitshift+0x68>)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4413      	add	r3, r2
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d909      	bls.n	8002c82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c76:	f023 0303 	bic.w	r3, r3, #3
 8002c7a:	1d1a      	adds	r2, r3, #4
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c80:	e007      	b.n	8002c92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c8a:	f023 0303 	bic.w	r3, r3, #3
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	aaaaaaab 	.word	0xaaaaaaab
 8002ca8:	08006924 	.word	0x08006924

08002cac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d11f      	bne.n	8002d06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d856      	bhi.n	8002d7a <DMA_CheckFifoParam+0xce>
 8002ccc:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <DMA_CheckFifoParam+0x28>)
 8002cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd2:	bf00      	nop
 8002cd4:	08002ce5 	.word	0x08002ce5
 8002cd8:	08002cf7 	.word	0x08002cf7
 8002cdc:	08002ce5 	.word	0x08002ce5
 8002ce0:	08002d7b 	.word	0x08002d7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d046      	beq.n	8002d7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf4:	e043      	b.n	8002d7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cfe:	d140      	bne.n	8002d82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d04:	e03d      	b.n	8002d82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0e:	d121      	bne.n	8002d54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d837      	bhi.n	8002d86 <DMA_CheckFifoParam+0xda>
 8002d16:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <DMA_CheckFifoParam+0x70>)
 8002d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1c:	08002d2d 	.word	0x08002d2d
 8002d20:	08002d33 	.word	0x08002d33
 8002d24:	08002d2d 	.word	0x08002d2d
 8002d28:	08002d45 	.word	0x08002d45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d30:	e030      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d025      	beq.n	8002d8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d42:	e022      	b.n	8002d8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d4c:	d11f      	bne.n	8002d8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d52:	e01c      	b.n	8002d8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d903      	bls.n	8002d62 <DMA_CheckFifoParam+0xb6>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d003      	beq.n	8002d68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d60:	e018      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
      break;
 8002d66:	e015      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00e      	beq.n	8002d92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      break;
 8002d78:	e00b      	b.n	8002d92 <DMA_CheckFifoParam+0xe6>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e00a      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e008      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
      break;
 8002d82:	bf00      	nop
 8002d84:	e006      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
      break;
 8002d86:	bf00      	nop
 8002d88:	e004      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e002      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d8e:	bf00      	nop
 8002d90:	e000      	b.n	8002d94 <DMA_CheckFifoParam+0xe8>
      break;
 8002d92:	bf00      	nop
    }
  } 
  
  return status; 
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop

08002da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	e159      	b.n	8003074 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	f040 8148 	bne.w	800306e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d005      	beq.n	8002df6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d130      	bne.n	8002e58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	2203      	movs	r2, #3
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 0201 	and.w	r2, r3, #1
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d017      	beq.n	8002e94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	2203      	movs	r2, #3
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d123      	bne.n	8002ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	08da      	lsrs	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3208      	adds	r2, #8
 8002ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	220f      	movs	r2, #15
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	08da      	lsrs	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3208      	adds	r2, #8
 8002ee2:	69b9      	ldr	r1, [r7, #24]
 8002ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0203 	and.w	r2, r3, #3
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80a2 	beq.w	800306e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	4b57      	ldr	r3, [pc, #348]	; (800308c <HAL_GPIO_Init+0x2e8>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	4a56      	ldr	r2, [pc, #344]	; (800308c <HAL_GPIO_Init+0x2e8>)
 8002f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f38:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3a:	4b54      	ldr	r3, [pc, #336]	; (800308c <HAL_GPIO_Init+0x2e8>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f46:	4a52      	ldr	r2, [pc, #328]	; (8003090 <HAL_GPIO_Init+0x2ec>)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a49      	ldr	r2, [pc, #292]	; (8003094 <HAL_GPIO_Init+0x2f0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d019      	beq.n	8002fa6 <HAL_GPIO_Init+0x202>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a48      	ldr	r2, [pc, #288]	; (8003098 <HAL_GPIO_Init+0x2f4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d013      	beq.n	8002fa2 <HAL_GPIO_Init+0x1fe>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a47      	ldr	r2, [pc, #284]	; (800309c <HAL_GPIO_Init+0x2f8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00d      	beq.n	8002f9e <HAL_GPIO_Init+0x1fa>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a46      	ldr	r2, [pc, #280]	; (80030a0 <HAL_GPIO_Init+0x2fc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d007      	beq.n	8002f9a <HAL_GPIO_Init+0x1f6>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a45      	ldr	r2, [pc, #276]	; (80030a4 <HAL_GPIO_Init+0x300>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <HAL_GPIO_Init+0x1f2>
 8002f92:	2304      	movs	r3, #4
 8002f94:	e008      	b.n	8002fa8 <HAL_GPIO_Init+0x204>
 8002f96:	2307      	movs	r3, #7
 8002f98:	e006      	b.n	8002fa8 <HAL_GPIO_Init+0x204>
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e004      	b.n	8002fa8 <HAL_GPIO_Init+0x204>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e002      	b.n	8002fa8 <HAL_GPIO_Init+0x204>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_GPIO_Init+0x204>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	f002 0203 	and.w	r2, r2, #3
 8002fae:	0092      	lsls	r2, r2, #2
 8002fb0:	4093      	lsls	r3, r2
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fb8:	4935      	ldr	r1, [pc, #212]	; (8003090 <HAL_GPIO_Init+0x2ec>)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	089b      	lsrs	r3, r3, #2
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fc6:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <HAL_GPIO_Init+0x304>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fea:	4a2f      	ldr	r2, [pc, #188]	; (80030a8 <HAL_GPIO_Init+0x304>)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ff0:	4b2d      	ldr	r3, [pc, #180]	; (80030a8 <HAL_GPIO_Init+0x304>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003014:	4a24      	ldr	r2, [pc, #144]	; (80030a8 <HAL_GPIO_Init+0x304>)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800301a:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <HAL_GPIO_Init+0x304>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800303e:	4a1a      	ldr	r2, [pc, #104]	; (80030a8 <HAL_GPIO_Init+0x304>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003044:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <HAL_GPIO_Init+0x304>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003068:	4a0f      	ldr	r2, [pc, #60]	; (80030a8 <HAL_GPIO_Init+0x304>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3301      	adds	r3, #1
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b0f      	cmp	r3, #15
 8003078:	f67f aea2 	bls.w	8002dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	3724      	adds	r7, #36	; 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800
 8003090:	40013800 	.word	0x40013800
 8003094:	40020000 	.word	0x40020000
 8003098:	40020400 	.word	0x40020400
 800309c:	40020800 	.word	0x40020800
 80030a0:	40020c00 	.word	0x40020c00
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40013c00 	.word	0x40013c00

080030ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	807b      	strh	r3, [r7, #2]
 80030b8:	4613      	mov	r3, r2
 80030ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030bc:	787b      	ldrb	r3, [r7, #1]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030c8:	e003      	b.n	80030d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ca:	887b      	ldrh	r3, [r7, #2]
 80030cc:	041a      	lsls	r2, r3, #16
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	619a      	str	r2, [r3, #24]
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e267      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d075      	beq.n	80031ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030fe:	4b88      	ldr	r3, [pc, #544]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b04      	cmp	r3, #4
 8003108:	d00c      	beq.n	8003124 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310a:	4b85      	ldr	r3, [pc, #532]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003112:	2b08      	cmp	r3, #8
 8003114:	d112      	bne.n	800313c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003116:	4b82      	ldr	r3, [pc, #520]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003122:	d10b      	bne.n	800313c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003124:	4b7e      	ldr	r3, [pc, #504]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d05b      	beq.n	80031e8 <HAL_RCC_OscConfig+0x108>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d157      	bne.n	80031e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e242      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003144:	d106      	bne.n	8003154 <HAL_RCC_OscConfig+0x74>
 8003146:	4b76      	ldr	r3, [pc, #472]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a75      	ldr	r2, [pc, #468]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e01d      	b.n	8003190 <HAL_RCC_OscConfig+0xb0>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x98>
 800315e:	4b70      	ldr	r3, [pc, #448]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a6f      	ldr	r2, [pc, #444]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	4b6d      	ldr	r3, [pc, #436]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a6c      	ldr	r2, [pc, #432]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e00b      	b.n	8003190 <HAL_RCC_OscConfig+0xb0>
 8003178:	4b69      	ldr	r3, [pc, #420]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a68      	ldr	r2, [pc, #416]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800317e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	4b66      	ldr	r3, [pc, #408]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a65      	ldr	r2, [pc, #404]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800318a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800318e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d013      	beq.n	80031c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fe fe30 	bl	8001dfc <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a0:	f7fe fe2c 	bl	8001dfc <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	; 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e207      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b5b      	ldr	r3, [pc, #364]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0xc0>
 80031be:	e014      	b.n	80031ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7fe fe1c 	bl	8001dfc <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c8:	f7fe fe18 	bl	8001dfc <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e1f3      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031da:	4b51      	ldr	r3, [pc, #324]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0xe8>
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d063      	beq.n	80032be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031f6:	4b4a      	ldr	r3, [pc, #296]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b47      	ldr	r3, [pc, #284]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800320a:	2b08      	cmp	r3, #8
 800320c:	d11c      	bne.n	8003248 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320e:	4b44      	ldr	r3, [pc, #272]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d116      	bne.n	8003248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	4b41      	ldr	r3, [pc, #260]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_RCC_OscConfig+0x152>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d001      	beq.n	8003232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e1c7      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003232:	4b3b      	ldr	r3, [pc, #236]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4937      	ldr	r1, [pc, #220]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003246:	e03a      	b.n	80032be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d020      	beq.n	8003292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003250:	4b34      	ldr	r3, [pc, #208]	; (8003324 <HAL_RCC_OscConfig+0x244>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003256:	f7fe fdd1 	bl	8001dfc <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325e:	f7fe fdcd 	bl	8001dfc <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e1a8      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003270:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327c:	4b28      	ldr	r3, [pc, #160]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4925      	ldr	r1, [pc, #148]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]
 8003290:	e015      	b.n	80032be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003292:	4b24      	ldr	r3, [pc, #144]	; (8003324 <HAL_RCC_OscConfig+0x244>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fe fdb0 	bl	8001dfc <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a0:	f7fe fdac 	bl	8001dfc <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e187      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d036      	beq.n	8003338 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <HAL_RCC_OscConfig+0x248>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7fe fd90 	bl	8001dfc <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e0:	f7fe fd8c 	bl	8001dfc <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e167      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_OscConfig+0x240>)
 80032f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x200>
 80032fe:	e01b      	b.n	8003338 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_RCC_OscConfig+0x248>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003306:	f7fe fd79 	bl	8001dfc <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330c:	e00e      	b.n	800332c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330e:	f7fe fd75 	bl	8001dfc <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d907      	bls.n	800332c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e150      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
 8003320:	40023800 	.word	0x40023800
 8003324:	42470000 	.word	0x42470000
 8003328:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332c:	4b88      	ldr	r3, [pc, #544]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800332e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1ea      	bne.n	800330e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8097 	beq.w	8003474 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334a:	4b81      	ldr	r3, [pc, #516]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10f      	bne.n	8003376 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	4b7d      	ldr	r3, [pc, #500]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a7c      	ldr	r2, [pc, #496]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
 8003366:	4b7a      	ldr	r3, [pc, #488]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003372:	2301      	movs	r3, #1
 8003374:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003376:	4b77      	ldr	r3, [pc, #476]	; (8003554 <HAL_RCC_OscConfig+0x474>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d118      	bne.n	80033b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003382:	4b74      	ldr	r3, [pc, #464]	; (8003554 <HAL_RCC_OscConfig+0x474>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a73      	ldr	r2, [pc, #460]	; (8003554 <HAL_RCC_OscConfig+0x474>)
 8003388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338e:	f7fe fd35 	bl	8001dfc <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003396:	f7fe fd31 	bl	8001dfc <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e10c      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <HAL_RCC_OscConfig+0x474>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_OscConfig+0x2ea>
 80033bc:	4b64      	ldr	r3, [pc, #400]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a63      	ldr	r2, [pc, #396]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
 80033c8:	e01c      	b.n	8003404 <HAL_RCC_OscConfig+0x324>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b05      	cmp	r3, #5
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x30c>
 80033d2:	4b5f      	ldr	r3, [pc, #380]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	4a5e      	ldr	r2, [pc, #376]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	6713      	str	r3, [r2, #112]	; 0x70
 80033de:	4b5c      	ldr	r3, [pc, #368]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	4a5b      	ldr	r2, [pc, #364]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0x324>
 80033ec:	4b58      	ldr	r3, [pc, #352]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a57      	ldr	r2, [pc, #348]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
 80033f8:	4b55      	ldr	r3, [pc, #340]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	4a54      	ldr	r2, [pc, #336]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80033fe:	f023 0304 	bic.w	r3, r3, #4
 8003402:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d015      	beq.n	8003438 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fe fcf6 	bl	8001dfc <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003412:	e00a      	b.n	800342a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fe fcf2 	bl	8001dfc <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e0cb      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342a:	4b49      	ldr	r3, [pc, #292]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0ee      	beq.n	8003414 <HAL_RCC_OscConfig+0x334>
 8003436:	e014      	b.n	8003462 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003438:	f7fe fce0 	bl	8001dfc <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343e:	e00a      	b.n	8003456 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003440:	f7fe fcdc 	bl	8001dfc <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	; 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e0b5      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003456:	4b3e      	ldr	r3, [pc, #248]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ee      	bne.n	8003440 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d105      	bne.n	8003474 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003468:	4b39      	ldr	r3, [pc, #228]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	4a38      	ldr	r2, [pc, #224]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800346e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003472:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80a1 	beq.w	80035c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800347e:	4b34      	ldr	r3, [pc, #208]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b08      	cmp	r3, #8
 8003488:	d05c      	beq.n	8003544 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d141      	bne.n	8003516 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003492:	4b31      	ldr	r3, [pc, #196]	; (8003558 <HAL_RCC_OscConfig+0x478>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fe fcb0 	bl	8001dfc <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a0:	f7fe fcac 	bl	8001dfc <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e087      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b2:	4b27      	ldr	r3, [pc, #156]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69da      	ldr	r2, [r3, #28]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	019b      	lsls	r3, r3, #6
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	3b01      	subs	r3, #1
 80034d8:	041b      	lsls	r3, r3, #16
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	061b      	lsls	r3, r3, #24
 80034e2:	491b      	ldr	r1, [pc, #108]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_RCC_OscConfig+0x478>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fe fc85 	bl	8001dfc <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f6:	f7fe fc81 	bl	8001dfc <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e05c      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x416>
 8003514:	e054      	b.n	80035c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_RCC_OscConfig+0x478>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7fe fc6e 	bl	8001dfc <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003524:	f7fe fc6a 	bl	8001dfc <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e045      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_RCC_OscConfig+0x470>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x444>
 8003542:	e03d      	b.n	80035c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d107      	bne.n	800355c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e038      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
 8003550:	40023800 	.word	0x40023800
 8003554:	40007000 	.word	0x40007000
 8003558:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800355c:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_RCC_OscConfig+0x4ec>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d028      	beq.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d121      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d11a      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800358c:	4013      	ands	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003592:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003594:	4293      	cmp	r3, r2
 8003596:	d111      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	085b      	lsrs	r3, r3, #1
 80035a4:	3b01      	subs	r3, #1
 80035a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800

080035d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0cc      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e4:	4b68      	ldr	r3, [pc, #416]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d90c      	bls.n	800360c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b65      	ldr	r3, [pc, #404]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b63      	ldr	r3, [pc, #396]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0b8      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d020      	beq.n	800365a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003624:	4b59      	ldr	r3, [pc, #356]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4a58      	ldr	r2, [pc, #352]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800362e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800363c:	4b53      	ldr	r3, [pc, #332]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a52      	ldr	r2, [pc, #328]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003648:	4b50      	ldr	r3, [pc, #320]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	494d      	ldr	r1, [pc, #308]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d044      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	4b47      	ldr	r3, [pc, #284]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d119      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e07f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d003      	beq.n	800368e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800368a:	2b03      	cmp	r3, #3
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368e:	4b3f      	ldr	r3, [pc, #252]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e06f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369e:	4b3b      	ldr	r3, [pc, #236]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e067      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ae:	4b37      	ldr	r3, [pc, #220]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f023 0203 	bic.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4934      	ldr	r1, [pc, #208]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c0:	f7fe fb9c 	bl	8001dfc <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	e00a      	b.n	80036de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c8:	f7fe fb98 	bl	8001dfc <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e04f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	4b2b      	ldr	r3, [pc, #172]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 020c 	and.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1eb      	bne.n	80036c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036f0:	4b25      	ldr	r3, [pc, #148]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d20c      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b22      	ldr	r3, [pc, #136]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	4b20      	ldr	r3, [pc, #128]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e032      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003724:	4b19      	ldr	r3, [pc, #100]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4916      	ldr	r1, [pc, #88]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	490e      	ldr	r1, [pc, #56]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003756:	f000 f821 	bl	800379c <HAL_RCC_GetSysClockFreq>
 800375a:	4602      	mov	r2, r0
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	490a      	ldr	r1, [pc, #40]	; (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	5ccb      	ldrb	r3, [r1, r3]
 800376a:	fa22 f303 	lsr.w	r3, r2, r3
 800376e:	4a09      	ldr	r2, [pc, #36]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_ClockConfig+0x1c8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe fafc 	bl	8001d74 <HAL_InitTick>

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023c00 	.word	0x40023c00
 800378c:	40023800 	.word	0x40023800
 8003790:	0800690c 	.word	0x0800690c
 8003794:	20000000 	.word	0x20000000
 8003798:	20000004 	.word	0x20000004

0800379c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800379c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a0:	b090      	sub	sp, #64	; 0x40
 80037a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
 80037a8:	2300      	movs	r3, #0
 80037aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ac:	2300      	movs	r3, #0
 80037ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b4:	4b59      	ldr	r3, [pc, #356]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 030c 	and.w	r3, r3, #12
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d00d      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x40>
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	f200 80a1 	bhi.w	8003908 <HAL_RCC_GetSysClockFreq+0x16c>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x34>
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d003      	beq.n	80037d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ce:	e09b      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037d0:	4b53      	ldr	r3, [pc, #332]	; (8003920 <HAL_RCC_GetSysClockFreq+0x184>)
 80037d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037d4:	e09b      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037d6:	4b53      	ldr	r3, [pc, #332]	; (8003924 <HAL_RCC_GetSysClockFreq+0x188>)
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037da:	e098      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037dc:	4b4f      	ldr	r3, [pc, #316]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037e6:	4b4d      	ldr	r3, [pc, #308]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d028      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f2:	4b4a      	ldr	r3, [pc, #296]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	099b      	lsrs	r3, r3, #6
 80037f8:	2200      	movs	r2, #0
 80037fa:	623b      	str	r3, [r7, #32]
 80037fc:	627a      	str	r2, [r7, #36]	; 0x24
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003804:	2100      	movs	r1, #0
 8003806:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCC_GetSysClockFreq+0x188>)
 8003808:	fb03 f201 	mul.w	r2, r3, r1
 800380c:	2300      	movs	r3, #0
 800380e:	fb00 f303 	mul.w	r3, r0, r3
 8003812:	4413      	add	r3, r2
 8003814:	4a43      	ldr	r2, [pc, #268]	; (8003924 <HAL_RCC_GetSysClockFreq+0x188>)
 8003816:	fba0 1202 	umull	r1, r2, r0, r2
 800381a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800381c:	460a      	mov	r2, r1
 800381e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003822:	4413      	add	r3, r2
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003828:	2200      	movs	r2, #0
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	61fa      	str	r2, [r7, #28]
 800382e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003832:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003836:	f7fd f911 	bl	8000a5c <__aeabi_uldivmod>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	4613      	mov	r3, r2
 8003840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003842:	e053      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003844:	4b35      	ldr	r3, [pc, #212]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	099b      	lsrs	r3, r3, #6
 800384a:	2200      	movs	r2, #0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	617a      	str	r2, [r7, #20]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003856:	f04f 0b00 	mov.w	fp, #0
 800385a:	4652      	mov	r2, sl
 800385c:	465b      	mov	r3, fp
 800385e:	f04f 0000 	mov.w	r0, #0
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	0159      	lsls	r1, r3, #5
 8003868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800386c:	0150      	lsls	r0, r2, #5
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	ebb2 080a 	subs.w	r8, r2, sl
 8003876:	eb63 090b 	sbc.w	r9, r3, fp
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003886:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800388a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800388e:	ebb2 0408 	subs.w	r4, r2, r8
 8003892:	eb63 0509 	sbc.w	r5, r3, r9
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	00eb      	lsls	r3, r5, #3
 80038a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038a4:	00e2      	lsls	r2, r4, #3
 80038a6:	4614      	mov	r4, r2
 80038a8:	461d      	mov	r5, r3
 80038aa:	eb14 030a 	adds.w	r3, r4, sl
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	eb45 030b 	adc.w	r3, r5, fp
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038c2:	4629      	mov	r1, r5
 80038c4:	028b      	lsls	r3, r1, #10
 80038c6:	4621      	mov	r1, r4
 80038c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038cc:	4621      	mov	r1, r4
 80038ce:	028a      	lsls	r2, r1, #10
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d6:	2200      	movs	r2, #0
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	60fa      	str	r2, [r7, #12]
 80038dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038e0:	f7fd f8bc 	bl	8000a5c <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038ec:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	3301      	adds	r3, #1
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003906:	e002      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_GetSysClockFreq+0x184>)
 800390a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800390c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003910:	4618      	mov	r0, r3
 8003912:	3740      	adds	r7, #64	; 0x40
 8003914:	46bd      	mov	sp, r7
 8003916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800
 8003920:	00f42400 	.word	0x00f42400
 8003924:	017d7840 	.word	0x017d7840

08003928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_RCC_GetHCLKFreq+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000000 	.word	0x20000000

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003944:	f7ff fff0 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0a9b      	lsrs	r3, r3, #10
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4903      	ldr	r1, [pc, #12]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	0800691c 	.word	0x0800691c

08003968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800396c:	f7ff ffdc 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0b5b      	lsrs	r3, r3, #13
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4903      	ldr	r1, [pc, #12]	; (800398c <HAL_RCC_GetPCLK2Freq+0x24>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	0800691c 	.word	0x0800691c

08003990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e041      	b.n	8003a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fd ffb4 	bl	8001924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	4619      	mov	r1, r3
 80039ce:	4610      	mov	r0, r2
 80039d0:	f000 fac0 	bl	8003f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e041      	b.n	8003ac4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d106      	bne.n	8003a5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f839 	bl	8003acc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	f000 fa71 	bl	8003f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d109      	bne.n	8003b04 <HAL_TIM_PWM_Start+0x24>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e022      	b.n	8003b4a <HAL_TIM_PWM_Start+0x6a>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d109      	bne.n	8003b1e <HAL_TIM_PWM_Start+0x3e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	bf14      	ite	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	2300      	moveq	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	e015      	b.n	8003b4a <HAL_TIM_PWM_Start+0x6a>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d109      	bne.n	8003b38 <HAL_TIM_PWM_Start+0x58>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	bf14      	ite	ne
 8003b30:	2301      	movne	r3, #1
 8003b32:	2300      	moveq	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	e008      	b.n	8003b4a <HAL_TIM_PWM_Start+0x6a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	bf14      	ite	ne
 8003b44:	2301      	movne	r3, #1
 8003b46:	2300      	moveq	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e068      	b.n	8003c24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <HAL_TIM_PWM_Start+0x82>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b60:	e013      	b.n	8003b8a <HAL_TIM_PWM_Start+0xaa>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d104      	bne.n	8003b72 <HAL_TIM_PWM_Start+0x92>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b70:	e00b      	b.n	8003b8a <HAL_TIM_PWM_Start+0xaa>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d104      	bne.n	8003b82 <HAL_TIM_PWM_Start+0xa2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b80:	e003      	b.n	8003b8a <HAL_TIM_PWM_Start+0xaa>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2202      	movs	r2, #2
 8003b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	6839      	ldr	r1, [r7, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fc84 	bl	80044a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a23      	ldr	r2, [pc, #140]	; (8003c2c <HAL_TIM_PWM_Start+0x14c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d107      	bne.n	8003bb2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1d      	ldr	r2, [pc, #116]	; (8003c2c <HAL_TIM_PWM_Start+0x14c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d018      	beq.n	8003bee <HAL_TIM_PWM_Start+0x10e>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc4:	d013      	beq.n	8003bee <HAL_TIM_PWM_Start+0x10e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <HAL_TIM_PWM_Start+0x150>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00e      	beq.n	8003bee <HAL_TIM_PWM_Start+0x10e>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a17      	ldr	r2, [pc, #92]	; (8003c34 <HAL_TIM_PWM_Start+0x154>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d009      	beq.n	8003bee <HAL_TIM_PWM_Start+0x10e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <HAL_TIM_PWM_Start+0x158>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d004      	beq.n	8003bee <HAL_TIM_PWM_Start+0x10e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a14      	ldr	r2, [pc, #80]	; (8003c3c <HAL_TIM_PWM_Start+0x15c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d111      	bne.n	8003c12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b06      	cmp	r3, #6
 8003bfe:	d010      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c10:	e007      	b.n	8003c22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40010000 	.word	0x40010000
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40000800 	.word	0x40000800
 8003c38:	40000c00 	.word	0x40000c00
 8003c3c:	40014000 	.word	0x40014000

08003c40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e0ae      	b.n	8003dbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b0c      	cmp	r3, #12
 8003c6a:	f200 809f 	bhi.w	8003dac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c6e:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c74:	08003ca9 	.word	0x08003ca9
 8003c78:	08003dad 	.word	0x08003dad
 8003c7c:	08003dad 	.word	0x08003dad
 8003c80:	08003dad 	.word	0x08003dad
 8003c84:	08003ce9 	.word	0x08003ce9
 8003c88:	08003dad 	.word	0x08003dad
 8003c8c:	08003dad 	.word	0x08003dad
 8003c90:	08003dad 	.word	0x08003dad
 8003c94:	08003d2b 	.word	0x08003d2b
 8003c98:	08003dad 	.word	0x08003dad
 8003c9c:	08003dad 	.word	0x08003dad
 8003ca0:	08003dad 	.word	0x08003dad
 8003ca4:	08003d6b 	.word	0x08003d6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f9d0 	bl	8004054 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0208 	orr.w	r2, r2, #8
 8003cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0204 	bic.w	r2, r2, #4
 8003cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6999      	ldr	r1, [r3, #24]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	619a      	str	r2, [r3, #24]
      break;
 8003ce6:	e064      	b.n	8003db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fa16 	bl	8004120 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6999      	ldr	r1, [r3, #24]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	021a      	lsls	r2, r3, #8
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	619a      	str	r2, [r3, #24]
      break;
 8003d28:	e043      	b.n	8003db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fa61 	bl	80041f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0208 	orr.w	r2, r2, #8
 8003d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0204 	bic.w	r2, r2, #4
 8003d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69d9      	ldr	r1, [r3, #28]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	61da      	str	r2, [r3, #28]
      break;
 8003d68:	e023      	b.n	8003db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 faab 	bl	80042cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69da      	ldr	r2, [r3, #28]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69d9      	ldr	r1, [r3, #28]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	021a      	lsls	r2, r3, #8
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	61da      	str	r2, [r3, #28]
      break;
 8003daa:	e002      	b.n	8003db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	75fb      	strb	r3, [r7, #23]
      break;
 8003db0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_TIM_ConfigClockSource+0x1c>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e0b4      	b.n	8003f4a <HAL_TIM_ConfigClockSource+0x186>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e18:	d03e      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0xd4>
 8003e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1e:	f200 8087 	bhi.w	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e26:	f000 8086 	beq.w	8003f36 <HAL_TIM_ConfigClockSource+0x172>
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2e:	d87f      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e30:	2b70      	cmp	r3, #112	; 0x70
 8003e32:	d01a      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0xa6>
 8003e34:	2b70      	cmp	r3, #112	; 0x70
 8003e36:	d87b      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e38:	2b60      	cmp	r3, #96	; 0x60
 8003e3a:	d050      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0x11a>
 8003e3c:	2b60      	cmp	r3, #96	; 0x60
 8003e3e:	d877      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e40:	2b50      	cmp	r3, #80	; 0x50
 8003e42:	d03c      	beq.n	8003ebe <HAL_TIM_ConfigClockSource+0xfa>
 8003e44:	2b50      	cmp	r3, #80	; 0x50
 8003e46:	d873      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d058      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x13a>
 8003e4c:	2b40      	cmp	r3, #64	; 0x40
 8003e4e:	d86f      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e50:	2b30      	cmp	r3, #48	; 0x30
 8003e52:	d064      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15a>
 8003e54:	2b30      	cmp	r3, #48	; 0x30
 8003e56:	d86b      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d060      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15a>
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d867      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d05c      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15a>
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d05a      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15a>
 8003e68:	e062      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6899      	ldr	r1, [r3, #8]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f000 faf1 	bl	8004460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	609a      	str	r2, [r3, #8]
      break;
 8003e96:	e04f      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6899      	ldr	r1, [r3, #8]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f000 fada 	bl	8004460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eba:	609a      	str	r2, [r3, #8]
      break;
 8003ebc:	e03c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6859      	ldr	r1, [r3, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f000 fa4e 	bl	800436c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2150      	movs	r1, #80	; 0x50
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 faa7 	bl	800442a <TIM_ITRx_SetConfig>
      break;
 8003edc:	e02c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f000 fa6d 	bl	80043ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2160      	movs	r1, #96	; 0x60
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fa97 	bl	800442a <TIM_ITRx_SetConfig>
      break;
 8003efc:	e01c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f000 fa2e 	bl	800436c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2140      	movs	r1, #64	; 0x40
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fa87 	bl	800442a <TIM_ITRx_SetConfig>
      break;
 8003f1c:	e00c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4619      	mov	r1, r3
 8003f28:	4610      	mov	r0, r2
 8003f2a:	f000 fa7e 	bl	800442a <TIM_ITRx_SetConfig>
      break;
 8003f2e:	e003      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
      break;
 8003f34:	e000      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a34      	ldr	r2, [pc, #208]	; (8004038 <TIM_Base_SetConfig+0xe4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00f      	beq.n	8003f8c <TIM_Base_SetConfig+0x38>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f72:	d00b      	beq.n	8003f8c <TIM_Base_SetConfig+0x38>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a31      	ldr	r2, [pc, #196]	; (800403c <TIM_Base_SetConfig+0xe8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d007      	beq.n	8003f8c <TIM_Base_SetConfig+0x38>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a30      	ldr	r2, [pc, #192]	; (8004040 <TIM_Base_SetConfig+0xec>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_Base_SetConfig+0x38>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a2f      	ldr	r2, [pc, #188]	; (8004044 <TIM_Base_SetConfig+0xf0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d108      	bne.n	8003f9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a25      	ldr	r2, [pc, #148]	; (8004038 <TIM_Base_SetConfig+0xe4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01b      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fac:	d017      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a22      	ldr	r2, [pc, #136]	; (800403c <TIM_Base_SetConfig+0xe8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a21      	ldr	r2, [pc, #132]	; (8004040 <TIM_Base_SetConfig+0xec>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00f      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a20      	ldr	r2, [pc, #128]	; (8004044 <TIM_Base_SetConfig+0xf0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d00b      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <TIM_Base_SetConfig+0xf4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d007      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a1e      	ldr	r2, [pc, #120]	; (800404c <TIM_Base_SetConfig+0xf8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d003      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a1d      	ldr	r2, [pc, #116]	; (8004050 <TIM_Base_SetConfig+0xfc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d108      	bne.n	8003ff0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a08      	ldr	r2, [pc, #32]	; (8004038 <TIM_Base_SetConfig+0xe4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d103      	bne.n	8004024 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	615a      	str	r2, [r3, #20]
}
 800402a:	bf00      	nop
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40010000 	.word	0x40010000
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800
 8004044:	40000c00 	.word	0x40000c00
 8004048:	40014000 	.word	0x40014000
 800404c:	40014400 	.word	0x40014400
 8004050:	40014800 	.word	0x40014800

08004054 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	f023 0201 	bic.w	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0303 	bic.w	r3, r3, #3
 800408a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f023 0302 	bic.w	r3, r3, #2
 800409c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a1c      	ldr	r2, [pc, #112]	; (800411c <TIM_OC1_SetConfig+0xc8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d10c      	bne.n	80040ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f023 0308 	bic.w	r3, r3, #8
 80040b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f023 0304 	bic.w	r3, r3, #4
 80040c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a13      	ldr	r2, [pc, #76]	; (800411c <TIM_OC1_SetConfig+0xc8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d111      	bne.n	80040f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	621a      	str	r2, [r3, #32]
}
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	40010000 	.word	0x40010000

08004120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f023 0210 	bic.w	r2, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800414e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0320 	bic.w	r3, r3, #32
 800416a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a1e      	ldr	r2, [pc, #120]	; (80041f4 <TIM_OC2_SetConfig+0xd4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d10d      	bne.n	800419c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800419a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a15      	ldr	r2, [pc, #84]	; (80041f4 <TIM_OC2_SetConfig+0xd4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d113      	bne.n	80041cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40010000 	.word	0x40010000

080041f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0303 	bic.w	r3, r3, #3
 800422e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <TIM_OC3_SetConfig+0xd0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10d      	bne.n	8004272 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800425c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a14      	ldr	r2, [pc, #80]	; (80042c8 <TIM_OC3_SetConfig+0xd0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d113      	bne.n	80042a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	621a      	str	r2, [r3, #32]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	40010000 	.word	0x40010000

080042cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4313      	orrs	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	031b      	lsls	r3, r3, #12
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a10      	ldr	r2, [pc, #64]	; (8004368 <TIM_OC4_SetConfig+0x9c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d109      	bne.n	8004340 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	019b      	lsls	r3, r3, #6
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	621a      	str	r2, [r3, #32]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40010000 	.word	0x40010000

0800436c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f023 0201 	bic.w	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f023 030a 	bic.w	r3, r3, #10
 80043a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	621a      	str	r2, [r3, #32]
}
 80043be:	bf00      	nop
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b087      	sub	sp, #28
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f023 0210 	bic.w	r2, r3, #16
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	031b      	lsls	r3, r3, #12
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004406:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	621a      	str	r2, [r3, #32]
}
 800441e:	bf00      	nop
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800442a:	b480      	push	{r7}
 800442c:	b085      	sub	sp, #20
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	f043 0307 	orr.w	r3, r3, #7
 800444c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	609a      	str	r2, [r3, #8]
}
 8004454:	bf00      	nop
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800447a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	021a      	lsls	r2, r3, #8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	431a      	orrs	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4313      	orrs	r3, r2
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	609a      	str	r2, [r3, #8]
}
 8004494:	bf00      	nop
 8004496:	371c      	adds	r7, #28
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	2201      	movs	r2, #1
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a1a      	ldr	r2, [r3, #32]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	43db      	mvns	r3, r3
 80044c2:	401a      	ands	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1a      	ldr	r2, [r3, #32]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	fa01 f303 	lsl.w	r3, r1, r3
 80044d8:	431a      	orrs	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	621a      	str	r2, [r3, #32]
}
 80044de:	bf00      	nop
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004500:	2302      	movs	r3, #2
 8004502:	e050      	b.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1c      	ldr	r2, [pc, #112]	; (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d018      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004550:	d013      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a18      	ldr	r2, [pc, #96]	; (80045b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00e      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a16      	ldr	r2, [pc, #88]	; (80045bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d009      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a15      	ldr	r2, [pc, #84]	; (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d004      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d10c      	bne.n	8004594 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004580:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	4313      	orrs	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40000c00 	.word	0x40000c00
 80045c4:	40014000 	.word	0x40014000

080045c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e03d      	b.n	8004660 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e03f      	b.n	80046fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fd f9bc 	bl	8001a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2224      	movs	r2, #36	; 0x24
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fddf 	bl	8005274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b08a      	sub	sp, #40	; 0x28
 800470a:	af02      	add	r7, sp, #8
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b20      	cmp	r3, #32
 8004724:	d17c      	bne.n	8004820 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <HAL_UART_Transmit+0x2c>
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e075      	b.n	8004822 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_UART_Transmit+0x3e>
 8004740:	2302      	movs	r3, #2
 8004742:	e06e      	b.n	8004822 <HAL_UART_Transmit+0x11c>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2221      	movs	r2, #33	; 0x21
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800475a:	f7fd fb4f 	bl	8001dfc <HAL_GetTick>
 800475e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	88fa      	ldrh	r2, [r7, #6]
 8004764:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	88fa      	ldrh	r2, [r7, #6]
 800476a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004774:	d108      	bne.n	8004788 <HAL_UART_Transmit+0x82>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	e003      	b.n	8004790 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800478c:	2300      	movs	r3, #0
 800478e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004798:	e02a      	b.n	80047f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2200      	movs	r2, #0
 80047a2:	2180      	movs	r1, #128	; 0x80
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fb1f 	bl	8004de8 <UART_WaitOnFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e036      	b.n	8004822 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10b      	bne.n	80047d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	3302      	adds	r3, #2
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	e007      	b.n	80047e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	781a      	ldrb	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	3301      	adds	r3, #1
 80047e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1cf      	bne.n	800479a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2200      	movs	r2, #0
 8004802:	2140      	movs	r1, #64	; 0x40
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 faef 	bl	8004de8 <UART_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e006      	b.n	8004822 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	e000      	b.n	8004822 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004820:	2302      	movs	r3, #2
  }
}
 8004822:	4618      	mov	r0, r3
 8004824:	3720      	adds	r7, #32
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	4613      	mov	r3, r2
 8004836:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b20      	cmp	r3, #32
 8004842:	d11d      	bne.n	8004880 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_UART_Receive_IT+0x26>
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e016      	b.n	8004882 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_UART_Receive_IT+0x38>
 800485e:	2302      	movs	r3, #2
 8004860:	e00f      	b.n	8004882 <HAL_UART_Receive_IT+0x58>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004870:	88fb      	ldrh	r3, [r7, #6]
 8004872:	461a      	mov	r2, r3
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 fb24 	bl	8004ec4 <UART_Start_Receive_IT>
 800487c:	4603      	mov	r3, r0
 800487e:	e000      	b.n	8004882 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004880:	2302      	movs	r3, #2
  }
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b0ba      	sub	sp, #232	; 0xe8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10f      	bne.n	80048f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_UART_IRQHandler+0x66>
 80048de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fc07 	bl	80050fe <UART_Receive_IT>
      return;
 80048f0:	e256      	b.n	8004da0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 80de 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x22c>
 80048fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800490c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 80d1 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00b      	beq.n	800493a <HAL_UART_IRQHandler+0xae>
 8004922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f043 0201 	orr.w	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800493a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00b      	beq.n	800495e <HAL_UART_IRQHandler+0xd2>
 8004946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f043 0202 	orr.w	r2, r3, #2
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800495e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00b      	beq.n	8004982 <HAL_UART_IRQHandler+0xf6>
 800496a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f043 0204 	orr.w	r2, r3, #4
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d011      	beq.n	80049b2 <HAL_UART_IRQHandler+0x126>
 800498e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800499a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	f043 0208 	orr.w	r2, r3, #8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 81ed 	beq.w	8004d96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_UART_IRQHandler+0x14e>
 80049c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fb92 	bl	80050fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b40      	cmp	r3, #64	; 0x40
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d103      	bne.n	8004a06 <HAL_UART_IRQHandler+0x17a>
 80049fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d04f      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa9a 	bl	8004f40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b40      	cmp	r3, #64	; 0x40
 8004a18:	d141      	bne.n	8004a9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3314      	adds	r3, #20
 8004a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3314      	adds	r3, #20
 8004a42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1d9      	bne.n	8004a1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d013      	beq.n	8004a96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	4a7d      	ldr	r2, [pc, #500]	; (8004c68 <HAL_UART_IRQHandler+0x3dc>)
 8004a74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fd ff34 	bl	80028e8 <HAL_DMA_Abort_IT>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d016      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a90:	4610      	mov	r0, r2
 8004a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a94:	e00e      	b.n	8004ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f990 	bl	8004dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9c:	e00a      	b.n	8004ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f98c 	bl	8004dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa4:	e006      	b.n	8004ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f988 	bl	8004dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ab2:	e170      	b.n	8004d96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab4:	bf00      	nop
    return;
 8004ab6:	e16e      	b.n	8004d96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	f040 814a 	bne.w	8004d56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac6:	f003 0310 	and.w	r3, r3, #16
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 8143 	beq.w	8004d56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 813c 	beq.w	8004d56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	f040 80b4 	bne.w	8004c6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8140 	beq.w	8004d9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b22:	429a      	cmp	r2, r3
 8004b24:	f080 8139 	bcs.w	8004d9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	f000 8088 	beq.w	8004c4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	330c      	adds	r3, #12
 8004b66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1d9      	bne.n	8004b3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3314      	adds	r3, #20
 8004b90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b94:	e853 3f00 	ldrex	r3, [r3]
 8004b98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3314      	adds	r3, #20
 8004baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e1      	bne.n	8004b8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3314      	adds	r3, #20
 8004bcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3314      	adds	r3, #20
 8004be6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e3      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c1e:	f023 0310 	bic.w	r3, r3, #16
 8004c22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c30:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e3      	bne.n	8004c0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fd fddd 	bl	8002808 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f8b6 	bl	8004dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c64:	e099      	b.n	8004d9a <HAL_UART_IRQHandler+0x50e>
 8004c66:	bf00      	nop
 8004c68:	08005007 	.word	0x08005007
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 808b 	beq.w	8004d9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8086 	beq.w	8004d9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	330c      	adds	r3, #12
 8004c98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ca8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	330c      	adds	r3, #12
 8004cb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cb6:	647a      	str	r2, [r7, #68]	; 0x44
 8004cb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e3      	bne.n	8004c92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3314      	adds	r3, #20
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3314      	adds	r3, #20
 8004cea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cee:	633a      	str	r2, [r7, #48]	; 0x30
 8004cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e3      	bne.n	8004cca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	330c      	adds	r3, #12
 8004d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0310 	bic.w	r3, r3, #16
 8004d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	330c      	adds	r3, #12
 8004d30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d34:	61fa      	str	r2, [r7, #28]
 8004d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	69b9      	ldr	r1, [r7, #24]
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	617b      	str	r3, [r7, #20]
   return(result);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e3      	bne.n	8004d10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f83e 	bl	8004dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d54:	e023      	b.n	8004d9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d009      	beq.n	8004d76 <HAL_UART_IRQHandler+0x4ea>
 8004d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f95d 	bl	800502e <UART_Transmit_IT>
    return;
 8004d74:	e014      	b.n	8004da0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00e      	beq.n	8004da0 <HAL_UART_IRQHandler+0x514>
 8004d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d008      	beq.n	8004da0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f99d 	bl	80050ce <UART_EndTransmit_IT>
    return;
 8004d94:	e004      	b.n	8004da0 <HAL_UART_IRQHandler+0x514>
    return;
 8004d96:	bf00      	nop
 8004d98:	e002      	b.n	8004da0 <HAL_UART_IRQHandler+0x514>
      return;
 8004d9a:	bf00      	nop
 8004d9c:	e000      	b.n	8004da0 <HAL_UART_IRQHandler+0x514>
      return;
 8004d9e:	bf00      	nop
  }
}
 8004da0:	37e8      	adds	r7, #232	; 0xe8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop

08004da8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b090      	sub	sp, #64	; 0x40
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	603b      	str	r3, [r7, #0]
 8004df4:	4613      	mov	r3, r2
 8004df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df8:	e050      	b.n	8004e9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e00:	d04c      	beq.n	8004e9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d007      	beq.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e08:	f7fc fff8 	bl	8001dfc <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d241      	bcs.n	8004e9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	330c      	adds	r3, #12
 8004e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e22:	e853 3f00 	ldrex	r3, [r3]
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	330c      	adds	r3, #12
 8004e36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e38:	637a      	str	r2, [r7, #52]	; 0x34
 8004e3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e40:	e841 2300 	strex	r3, r2, [r1]
 8004e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e5      	bne.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3314      	adds	r3, #20
 8004e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f023 0301 	bic.w	r3, r3, #1
 8004e62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3314      	adds	r3, #20
 8004e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e6c:	623a      	str	r2, [r7, #32]
 8004e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	69f9      	ldr	r1, [r7, #28]
 8004e72:	6a3a      	ldr	r2, [r7, #32]
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e5      	bne.n	8004e4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e00f      	b.n	8004ebc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	79fb      	ldrb	r3, [r7, #7]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d09f      	beq.n	8004dfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3740      	adds	r7, #64	; 0x40
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	88fa      	ldrh	r2, [r7, #6]
 8004edc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	88fa      	ldrh	r2, [r7, #6]
 8004ee2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2222      	movs	r2, #34	; 0x22
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d007      	beq.n	8004f12 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f10:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695a      	ldr	r2, [r3, #20]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0201 	orr.w	r2, r2, #1
 8004f20:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0220 	orr.w	r2, r2, #32
 8004f30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b095      	sub	sp, #84	; 0x54
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	330c      	adds	r3, #12
 8004f66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f68:	643a      	str	r2, [r7, #64]	; 0x40
 8004f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e5      	bne.n	8004f48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3314      	adds	r3, #20
 8004f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f023 0301 	bic.w	r3, r3, #1
 8004f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3314      	adds	r3, #20
 8004f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e5      	bne.n	8004f7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d119      	bne.n	8004fec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f023 0310 	bic.w	r3, r3, #16
 8004fce:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fd8:	61ba      	str	r2, [r7, #24]
 8004fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	6979      	ldr	r1, [r7, #20]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	e841 2300 	strex	r3, r2, [r1]
 8004fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e5      	bne.n	8004fb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ffa:	bf00      	nop
 8004ffc:	3754      	adds	r7, #84	; 0x54
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f7ff fecb 	bl	8004dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800502e:	b480      	push	{r7}
 8005030:	b085      	sub	sp, #20
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b21      	cmp	r3, #33	; 0x21
 8005040:	d13e      	bne.n	80050c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504a:	d114      	bne.n	8005076 <UART_Transmit_IT+0x48>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d110      	bne.n	8005076 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005068:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	1c9a      	adds	r2, r3, #2
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	621a      	str	r2, [r3, #32]
 8005074:	e008      	b.n	8005088 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	1c59      	adds	r1, r3, #1
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6211      	str	r1, [r2, #32]
 8005080:	781a      	ldrb	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29b      	uxth	r3, r3
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4619      	mov	r1, r3
 8005096:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10f      	bne.n	80050bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	e000      	b.n	80050c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050c0:	2302      	movs	r3, #2
  }
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b082      	sub	sp, #8
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7ff fe5a 	bl	8004da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b08c      	sub	sp, #48	; 0x30
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b22      	cmp	r3, #34	; 0x22
 8005110:	f040 80ab 	bne.w	800526a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511c:	d117      	bne.n	800514e <UART_Receive_IT+0x50>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d113      	bne.n	800514e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005126:	2300      	movs	r3, #0
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513c:	b29a      	uxth	r2, r3
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	1c9a      	adds	r2, r3, #2
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	629a      	str	r2, [r3, #40]	; 0x28
 800514c:	e026      	b.n	800519c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005154:	2300      	movs	r3, #0
 8005156:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005160:	d007      	beq.n	8005172 <UART_Receive_IT+0x74>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <UART_Receive_IT+0x82>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	b2da      	uxtb	r2, r3
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	e008      	b.n	8005192 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800518c:	b2da      	uxtb	r2, r3
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	4619      	mov	r1, r3
 80051aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d15a      	bne.n	8005266 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0220 	bic.w	r2, r2, #32
 80051be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695a      	ldr	r2, [r3, #20]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0201 	bic.w	r2, r2, #1
 80051de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d135      	bne.n	800525c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	330c      	adds	r3, #12
 80051fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	613b      	str	r3, [r7, #16]
   return(result);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f023 0310 	bic.w	r3, r3, #16
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	330c      	adds	r3, #12
 8005214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005216:	623a      	str	r2, [r7, #32]
 8005218:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521a:	69f9      	ldr	r1, [r7, #28]
 800521c:	6a3a      	ldr	r2, [r7, #32]
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	61bb      	str	r3, [r7, #24]
   return(result);
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e5      	bne.n	80051f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0310 	and.w	r3, r3, #16
 8005234:	2b10      	cmp	r3, #16
 8005236:	d10a      	bne.n	800524e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff fdbb 	bl	8004dd0 <HAL_UARTEx_RxEventCallback>
 800525a:	e002      	b.n	8005262 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7fc f947 	bl	80014f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	e002      	b.n	800526c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	e000      	b.n	800526c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800526a:	2302      	movs	r3, #2
  }
}
 800526c:	4618      	mov	r0, r3
 800526e:	3730      	adds	r7, #48	; 0x30
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005278:	b0c0      	sub	sp, #256	; 0x100
 800527a:	af00      	add	r7, sp, #0
 800527c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005290:	68d9      	ldr	r1, [r3, #12]
 8005292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	ea40 0301 	orr.w	r3, r0, r1
 800529c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800529e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052cc:	f021 010c 	bic.w	r1, r1, #12
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052da:	430b      	orrs	r3, r1
 80052dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ee:	6999      	ldr	r1, [r3, #24]
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	ea40 0301 	orr.w	r3, r0, r1
 80052fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	4b8f      	ldr	r3, [pc, #572]	; (8005540 <UART_SetConfig+0x2cc>)
 8005304:	429a      	cmp	r2, r3
 8005306:	d005      	beq.n	8005314 <UART_SetConfig+0xa0>
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	4b8d      	ldr	r3, [pc, #564]	; (8005544 <UART_SetConfig+0x2d0>)
 8005310:	429a      	cmp	r2, r3
 8005312:	d104      	bne.n	800531e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005314:	f7fe fb28 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8005318:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800531c:	e003      	b.n	8005326 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800531e:	f7fe fb0f 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8005322:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005330:	f040 810c 	bne.w	800554c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005338:	2200      	movs	r2, #0
 800533a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800533e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005342:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005346:	4622      	mov	r2, r4
 8005348:	462b      	mov	r3, r5
 800534a:	1891      	adds	r1, r2, r2
 800534c:	65b9      	str	r1, [r7, #88]	; 0x58
 800534e:	415b      	adcs	r3, r3
 8005350:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005352:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005356:	4621      	mov	r1, r4
 8005358:	eb12 0801 	adds.w	r8, r2, r1
 800535c:	4629      	mov	r1, r5
 800535e:	eb43 0901 	adc.w	r9, r3, r1
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800536e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005376:	4690      	mov	r8, r2
 8005378:	4699      	mov	r9, r3
 800537a:	4623      	mov	r3, r4
 800537c:	eb18 0303 	adds.w	r3, r8, r3
 8005380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005384:	462b      	mov	r3, r5
 8005386:	eb49 0303 	adc.w	r3, r9, r3
 800538a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800539a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800539e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053a2:	460b      	mov	r3, r1
 80053a4:	18db      	adds	r3, r3, r3
 80053a6:	653b      	str	r3, [r7, #80]	; 0x50
 80053a8:	4613      	mov	r3, r2
 80053aa:	eb42 0303 	adc.w	r3, r2, r3
 80053ae:	657b      	str	r3, [r7, #84]	; 0x54
 80053b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053b8:	f7fb fb50 	bl	8000a5c <__aeabi_uldivmod>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4b61      	ldr	r3, [pc, #388]	; (8005548 <UART_SetConfig+0x2d4>)
 80053c2:	fba3 2302 	umull	r2, r3, r3, r2
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	011c      	lsls	r4, r3, #4
 80053ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053dc:	4642      	mov	r2, r8
 80053de:	464b      	mov	r3, r9
 80053e0:	1891      	adds	r1, r2, r2
 80053e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80053e4:	415b      	adcs	r3, r3
 80053e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053ec:	4641      	mov	r1, r8
 80053ee:	eb12 0a01 	adds.w	sl, r2, r1
 80053f2:	4649      	mov	r1, r9
 80053f4:	eb43 0b01 	adc.w	fp, r3, r1
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005404:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800540c:	4692      	mov	sl, r2
 800540e:	469b      	mov	fp, r3
 8005410:	4643      	mov	r3, r8
 8005412:	eb1a 0303 	adds.w	r3, sl, r3
 8005416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800541a:	464b      	mov	r3, r9
 800541c:	eb4b 0303 	adc.w	r3, fp, r3
 8005420:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005430:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005434:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005438:	460b      	mov	r3, r1
 800543a:	18db      	adds	r3, r3, r3
 800543c:	643b      	str	r3, [r7, #64]	; 0x40
 800543e:	4613      	mov	r3, r2
 8005440:	eb42 0303 	adc.w	r3, r2, r3
 8005444:	647b      	str	r3, [r7, #68]	; 0x44
 8005446:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800544a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800544e:	f7fb fb05 	bl	8000a5c <__aeabi_uldivmod>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4611      	mov	r1, r2
 8005458:	4b3b      	ldr	r3, [pc, #236]	; (8005548 <UART_SetConfig+0x2d4>)
 800545a:	fba3 2301 	umull	r2, r3, r3, r1
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	2264      	movs	r2, #100	; 0x64
 8005462:	fb02 f303 	mul.w	r3, r2, r3
 8005466:	1acb      	subs	r3, r1, r3
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800546e:	4b36      	ldr	r3, [pc, #216]	; (8005548 <UART_SetConfig+0x2d4>)
 8005470:	fba3 2302 	umull	r2, r3, r3, r2
 8005474:	095b      	lsrs	r3, r3, #5
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800547c:	441c      	add	r4, r3
 800547e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005482:	2200      	movs	r2, #0
 8005484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005488:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800548c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005490:	4642      	mov	r2, r8
 8005492:	464b      	mov	r3, r9
 8005494:	1891      	adds	r1, r2, r2
 8005496:	63b9      	str	r1, [r7, #56]	; 0x38
 8005498:	415b      	adcs	r3, r3
 800549a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800549c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054a0:	4641      	mov	r1, r8
 80054a2:	1851      	adds	r1, r2, r1
 80054a4:	6339      	str	r1, [r7, #48]	; 0x30
 80054a6:	4649      	mov	r1, r9
 80054a8:	414b      	adcs	r3, r1
 80054aa:	637b      	str	r3, [r7, #52]	; 0x34
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054b8:	4659      	mov	r1, fp
 80054ba:	00cb      	lsls	r3, r1, #3
 80054bc:	4651      	mov	r1, sl
 80054be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054c2:	4651      	mov	r1, sl
 80054c4:	00ca      	lsls	r2, r1, #3
 80054c6:	4610      	mov	r0, r2
 80054c8:	4619      	mov	r1, r3
 80054ca:	4603      	mov	r3, r0
 80054cc:	4642      	mov	r2, r8
 80054ce:	189b      	adds	r3, r3, r2
 80054d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054d4:	464b      	mov	r3, r9
 80054d6:	460a      	mov	r2, r1
 80054d8:	eb42 0303 	adc.w	r3, r2, r3
 80054dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054f4:	460b      	mov	r3, r1
 80054f6:	18db      	adds	r3, r3, r3
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054fa:	4613      	mov	r3, r2
 80054fc:	eb42 0303 	adc.w	r3, r2, r3
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005502:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005506:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800550a:	f7fb faa7 	bl	8000a5c <__aeabi_uldivmod>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4b0d      	ldr	r3, [pc, #52]	; (8005548 <UART_SetConfig+0x2d4>)
 8005514:	fba3 1302 	umull	r1, r3, r3, r2
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	2164      	movs	r1, #100	; 0x64
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	3332      	adds	r3, #50	; 0x32
 8005526:	4a08      	ldr	r2, [pc, #32]	; (8005548 <UART_SetConfig+0x2d4>)
 8005528:	fba2 2303 	umull	r2, r3, r2, r3
 800552c:	095b      	lsrs	r3, r3, #5
 800552e:	f003 0207 	and.w	r2, r3, #7
 8005532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4422      	add	r2, r4
 800553a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800553c:	e106      	b.n	800574c <UART_SetConfig+0x4d8>
 800553e:	bf00      	nop
 8005540:	40011000 	.word	0x40011000
 8005544:	40011400 	.word	0x40011400
 8005548:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800554c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005550:	2200      	movs	r2, #0
 8005552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005556:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800555a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800555e:	4642      	mov	r2, r8
 8005560:	464b      	mov	r3, r9
 8005562:	1891      	adds	r1, r2, r2
 8005564:	6239      	str	r1, [r7, #32]
 8005566:	415b      	adcs	r3, r3
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
 800556a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800556e:	4641      	mov	r1, r8
 8005570:	1854      	adds	r4, r2, r1
 8005572:	4649      	mov	r1, r9
 8005574:	eb43 0501 	adc.w	r5, r3, r1
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	00eb      	lsls	r3, r5, #3
 8005582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005586:	00e2      	lsls	r2, r4, #3
 8005588:	4614      	mov	r4, r2
 800558a:	461d      	mov	r5, r3
 800558c:	4643      	mov	r3, r8
 800558e:	18e3      	adds	r3, r4, r3
 8005590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005594:	464b      	mov	r3, r9
 8005596:	eb45 0303 	adc.w	r3, r5, r3
 800559a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800559e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055ae:	f04f 0200 	mov.w	r2, #0
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055ba:	4629      	mov	r1, r5
 80055bc:	008b      	lsls	r3, r1, #2
 80055be:	4621      	mov	r1, r4
 80055c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055c4:	4621      	mov	r1, r4
 80055c6:	008a      	lsls	r2, r1, #2
 80055c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055cc:	f7fb fa46 	bl	8000a5c <__aeabi_uldivmod>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4b60      	ldr	r3, [pc, #384]	; (8005758 <UART_SetConfig+0x4e4>)
 80055d6:	fba3 2302 	umull	r2, r3, r3, r2
 80055da:	095b      	lsrs	r3, r3, #5
 80055dc:	011c      	lsls	r4, r3, #4
 80055de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055f0:	4642      	mov	r2, r8
 80055f2:	464b      	mov	r3, r9
 80055f4:	1891      	adds	r1, r2, r2
 80055f6:	61b9      	str	r1, [r7, #24]
 80055f8:	415b      	adcs	r3, r3
 80055fa:	61fb      	str	r3, [r7, #28]
 80055fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005600:	4641      	mov	r1, r8
 8005602:	1851      	adds	r1, r2, r1
 8005604:	6139      	str	r1, [r7, #16]
 8005606:	4649      	mov	r1, r9
 8005608:	414b      	adcs	r3, r1
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005618:	4659      	mov	r1, fp
 800561a:	00cb      	lsls	r3, r1, #3
 800561c:	4651      	mov	r1, sl
 800561e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005622:	4651      	mov	r1, sl
 8005624:	00ca      	lsls	r2, r1, #3
 8005626:	4610      	mov	r0, r2
 8005628:	4619      	mov	r1, r3
 800562a:	4603      	mov	r3, r0
 800562c:	4642      	mov	r2, r8
 800562e:	189b      	adds	r3, r3, r2
 8005630:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005634:	464b      	mov	r3, r9
 8005636:	460a      	mov	r2, r1
 8005638:	eb42 0303 	adc.w	r3, r2, r3
 800563c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	67bb      	str	r3, [r7, #120]	; 0x78
 800564a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005658:	4649      	mov	r1, r9
 800565a:	008b      	lsls	r3, r1, #2
 800565c:	4641      	mov	r1, r8
 800565e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005662:	4641      	mov	r1, r8
 8005664:	008a      	lsls	r2, r1, #2
 8005666:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800566a:	f7fb f9f7 	bl	8000a5c <__aeabi_uldivmod>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4611      	mov	r1, r2
 8005674:	4b38      	ldr	r3, [pc, #224]	; (8005758 <UART_SetConfig+0x4e4>)
 8005676:	fba3 2301 	umull	r2, r3, r3, r1
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	2264      	movs	r2, #100	; 0x64
 800567e:	fb02 f303 	mul.w	r3, r2, r3
 8005682:	1acb      	subs	r3, r1, r3
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	3332      	adds	r3, #50	; 0x32
 8005688:	4a33      	ldr	r2, [pc, #204]	; (8005758 <UART_SetConfig+0x4e4>)
 800568a:	fba2 2303 	umull	r2, r3, r2, r3
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005694:	441c      	add	r4, r3
 8005696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800569a:	2200      	movs	r2, #0
 800569c:	673b      	str	r3, [r7, #112]	; 0x70
 800569e:	677a      	str	r2, [r7, #116]	; 0x74
 80056a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056a4:	4642      	mov	r2, r8
 80056a6:	464b      	mov	r3, r9
 80056a8:	1891      	adds	r1, r2, r2
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	415b      	adcs	r3, r3
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056b4:	4641      	mov	r1, r8
 80056b6:	1851      	adds	r1, r2, r1
 80056b8:	6039      	str	r1, [r7, #0]
 80056ba:	4649      	mov	r1, r9
 80056bc:	414b      	adcs	r3, r1
 80056be:	607b      	str	r3, [r7, #4]
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056cc:	4659      	mov	r1, fp
 80056ce:	00cb      	lsls	r3, r1, #3
 80056d0:	4651      	mov	r1, sl
 80056d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056d6:	4651      	mov	r1, sl
 80056d8:	00ca      	lsls	r2, r1, #3
 80056da:	4610      	mov	r0, r2
 80056dc:	4619      	mov	r1, r3
 80056de:	4603      	mov	r3, r0
 80056e0:	4642      	mov	r2, r8
 80056e2:	189b      	adds	r3, r3, r2
 80056e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80056e6:	464b      	mov	r3, r9
 80056e8:	460a      	mov	r2, r1
 80056ea:	eb42 0303 	adc.w	r3, r2, r3
 80056ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	663b      	str	r3, [r7, #96]	; 0x60
 80056fa:	667a      	str	r2, [r7, #100]	; 0x64
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005708:	4649      	mov	r1, r9
 800570a:	008b      	lsls	r3, r1, #2
 800570c:	4641      	mov	r1, r8
 800570e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005712:	4641      	mov	r1, r8
 8005714:	008a      	lsls	r2, r1, #2
 8005716:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800571a:	f7fb f99f 	bl	8000a5c <__aeabi_uldivmod>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4b0d      	ldr	r3, [pc, #52]	; (8005758 <UART_SetConfig+0x4e4>)
 8005724:	fba3 1302 	umull	r1, r3, r3, r2
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	2164      	movs	r1, #100	; 0x64
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	3332      	adds	r3, #50	; 0x32
 8005736:	4a08      	ldr	r2, [pc, #32]	; (8005758 <UART_SetConfig+0x4e4>)
 8005738:	fba2 2303 	umull	r2, r3, r2, r3
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	f003 020f 	and.w	r2, r3, #15
 8005742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4422      	add	r2, r4
 800574a:	609a      	str	r2, [r3, #8]
}
 800574c:	bf00      	nop
 800574e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005752:	46bd      	mov	sp, r7
 8005754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005758:	51eb851f 	.word	0x51eb851f

0800575c <_strtoul_l.constprop.0>:
 800575c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005760:	4f36      	ldr	r7, [pc, #216]	; (800583c <_strtoul_l.constprop.0+0xe0>)
 8005762:	4686      	mov	lr, r0
 8005764:	460d      	mov	r5, r1
 8005766:	4628      	mov	r0, r5
 8005768:	f815 4b01 	ldrb.w	r4, [r5], #1
 800576c:	5d3e      	ldrb	r6, [r7, r4]
 800576e:	f016 0608 	ands.w	r6, r6, #8
 8005772:	d1f8      	bne.n	8005766 <_strtoul_l.constprop.0+0xa>
 8005774:	2c2d      	cmp	r4, #45	; 0x2d
 8005776:	d130      	bne.n	80057da <_strtoul_l.constprop.0+0x7e>
 8005778:	782c      	ldrb	r4, [r5, #0]
 800577a:	2601      	movs	r6, #1
 800577c:	1c85      	adds	r5, r0, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d057      	beq.n	8005832 <_strtoul_l.constprop.0+0xd6>
 8005782:	2b10      	cmp	r3, #16
 8005784:	d109      	bne.n	800579a <_strtoul_l.constprop.0+0x3e>
 8005786:	2c30      	cmp	r4, #48	; 0x30
 8005788:	d107      	bne.n	800579a <_strtoul_l.constprop.0+0x3e>
 800578a:	7828      	ldrb	r0, [r5, #0]
 800578c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005790:	2858      	cmp	r0, #88	; 0x58
 8005792:	d149      	bne.n	8005828 <_strtoul_l.constprop.0+0xcc>
 8005794:	786c      	ldrb	r4, [r5, #1]
 8005796:	2310      	movs	r3, #16
 8005798:	3502      	adds	r5, #2
 800579a:	f04f 38ff 	mov.w	r8, #4294967295
 800579e:	2700      	movs	r7, #0
 80057a0:	fbb8 f8f3 	udiv	r8, r8, r3
 80057a4:	fb03 f908 	mul.w	r9, r3, r8
 80057a8:	ea6f 0909 	mvn.w	r9, r9
 80057ac:	4638      	mov	r0, r7
 80057ae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80057b2:	f1bc 0f09 	cmp.w	ip, #9
 80057b6:	d815      	bhi.n	80057e4 <_strtoul_l.constprop.0+0x88>
 80057b8:	4664      	mov	r4, ip
 80057ba:	42a3      	cmp	r3, r4
 80057bc:	dd23      	ble.n	8005806 <_strtoul_l.constprop.0+0xaa>
 80057be:	f1b7 3fff 	cmp.w	r7, #4294967295
 80057c2:	d007      	beq.n	80057d4 <_strtoul_l.constprop.0+0x78>
 80057c4:	4580      	cmp	r8, r0
 80057c6:	d31b      	bcc.n	8005800 <_strtoul_l.constprop.0+0xa4>
 80057c8:	d101      	bne.n	80057ce <_strtoul_l.constprop.0+0x72>
 80057ca:	45a1      	cmp	r9, r4
 80057cc:	db18      	blt.n	8005800 <_strtoul_l.constprop.0+0xa4>
 80057ce:	fb00 4003 	mla	r0, r0, r3, r4
 80057d2:	2701      	movs	r7, #1
 80057d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057d8:	e7e9      	b.n	80057ae <_strtoul_l.constprop.0+0x52>
 80057da:	2c2b      	cmp	r4, #43	; 0x2b
 80057dc:	bf04      	itt	eq
 80057de:	782c      	ldrbeq	r4, [r5, #0]
 80057e0:	1c85      	addeq	r5, r0, #2
 80057e2:	e7cc      	b.n	800577e <_strtoul_l.constprop.0+0x22>
 80057e4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80057e8:	f1bc 0f19 	cmp.w	ip, #25
 80057ec:	d801      	bhi.n	80057f2 <_strtoul_l.constprop.0+0x96>
 80057ee:	3c37      	subs	r4, #55	; 0x37
 80057f0:	e7e3      	b.n	80057ba <_strtoul_l.constprop.0+0x5e>
 80057f2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80057f6:	f1bc 0f19 	cmp.w	ip, #25
 80057fa:	d804      	bhi.n	8005806 <_strtoul_l.constprop.0+0xaa>
 80057fc:	3c57      	subs	r4, #87	; 0x57
 80057fe:	e7dc      	b.n	80057ba <_strtoul_l.constprop.0+0x5e>
 8005800:	f04f 37ff 	mov.w	r7, #4294967295
 8005804:	e7e6      	b.n	80057d4 <_strtoul_l.constprop.0+0x78>
 8005806:	1c7b      	adds	r3, r7, #1
 8005808:	d106      	bne.n	8005818 <_strtoul_l.constprop.0+0xbc>
 800580a:	2322      	movs	r3, #34	; 0x22
 800580c:	f8ce 3000 	str.w	r3, [lr]
 8005810:	4638      	mov	r0, r7
 8005812:	b932      	cbnz	r2, 8005822 <_strtoul_l.constprop.0+0xc6>
 8005814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005818:	b106      	cbz	r6, 800581c <_strtoul_l.constprop.0+0xc0>
 800581a:	4240      	negs	r0, r0
 800581c:	2a00      	cmp	r2, #0
 800581e:	d0f9      	beq.n	8005814 <_strtoul_l.constprop.0+0xb8>
 8005820:	b107      	cbz	r7, 8005824 <_strtoul_l.constprop.0+0xc8>
 8005822:	1e69      	subs	r1, r5, #1
 8005824:	6011      	str	r1, [r2, #0]
 8005826:	e7f5      	b.n	8005814 <_strtoul_l.constprop.0+0xb8>
 8005828:	2430      	movs	r4, #48	; 0x30
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1b5      	bne.n	800579a <_strtoul_l.constprop.0+0x3e>
 800582e:	2308      	movs	r3, #8
 8005830:	e7b3      	b.n	800579a <_strtoul_l.constprop.0+0x3e>
 8005832:	2c30      	cmp	r4, #48	; 0x30
 8005834:	d0a9      	beq.n	800578a <_strtoul_l.constprop.0+0x2e>
 8005836:	230a      	movs	r3, #10
 8005838:	e7af      	b.n	800579a <_strtoul_l.constprop.0+0x3e>
 800583a:	bf00      	nop
 800583c:	0800692d 	.word	0x0800692d

08005840 <strtoul>:
 8005840:	4613      	mov	r3, r2
 8005842:	460a      	mov	r2, r1
 8005844:	4601      	mov	r1, r0
 8005846:	4802      	ldr	r0, [pc, #8]	; (8005850 <strtoul+0x10>)
 8005848:	6800      	ldr	r0, [r0, #0]
 800584a:	f7ff bf87 	b.w	800575c <_strtoul_l.constprop.0>
 800584e:	bf00      	nop
 8005850:	20000064 	.word	0x20000064

08005854 <std>:
 8005854:	2300      	movs	r3, #0
 8005856:	b510      	push	{r4, lr}
 8005858:	4604      	mov	r4, r0
 800585a:	e9c0 3300 	strd	r3, r3, [r0]
 800585e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005862:	6083      	str	r3, [r0, #8]
 8005864:	8181      	strh	r1, [r0, #12]
 8005866:	6643      	str	r3, [r0, #100]	; 0x64
 8005868:	81c2      	strh	r2, [r0, #14]
 800586a:	6183      	str	r3, [r0, #24]
 800586c:	4619      	mov	r1, r3
 800586e:	2208      	movs	r2, #8
 8005870:	305c      	adds	r0, #92	; 0x5c
 8005872:	f000 f8f4 	bl	8005a5e <memset>
 8005876:	4b0d      	ldr	r3, [pc, #52]	; (80058ac <std+0x58>)
 8005878:	6263      	str	r3, [r4, #36]	; 0x24
 800587a:	4b0d      	ldr	r3, [pc, #52]	; (80058b0 <std+0x5c>)
 800587c:	62a3      	str	r3, [r4, #40]	; 0x28
 800587e:	4b0d      	ldr	r3, [pc, #52]	; (80058b4 <std+0x60>)
 8005880:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005882:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <std+0x64>)
 8005884:	6323      	str	r3, [r4, #48]	; 0x30
 8005886:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <std+0x68>)
 8005888:	6224      	str	r4, [r4, #32]
 800588a:	429c      	cmp	r4, r3
 800588c:	d006      	beq.n	800589c <std+0x48>
 800588e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005892:	4294      	cmp	r4, r2
 8005894:	d002      	beq.n	800589c <std+0x48>
 8005896:	33d0      	adds	r3, #208	; 0xd0
 8005898:	429c      	cmp	r4, r3
 800589a:	d105      	bne.n	80058a8 <std+0x54>
 800589c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a4:	f000 b9b0 	b.w	8005c08 <__retarget_lock_init_recursive>
 80058a8:	bd10      	pop	{r4, pc}
 80058aa:	bf00      	nop
 80058ac:	080059d9 	.word	0x080059d9
 80058b0:	080059fb 	.word	0x080059fb
 80058b4:	08005a33 	.word	0x08005a33
 80058b8:	08005a57 	.word	0x08005a57
 80058bc:	20000438 	.word	0x20000438

080058c0 <stdio_exit_handler>:
 80058c0:	4a02      	ldr	r2, [pc, #8]	; (80058cc <stdio_exit_handler+0xc>)
 80058c2:	4903      	ldr	r1, [pc, #12]	; (80058d0 <stdio_exit_handler+0x10>)
 80058c4:	4803      	ldr	r0, [pc, #12]	; (80058d4 <stdio_exit_handler+0x14>)
 80058c6:	f000 b869 	b.w	800599c <_fwalk_sglue>
 80058ca:	bf00      	nop
 80058cc:	2000000c 	.word	0x2000000c
 80058d0:	08005f59 	.word	0x08005f59
 80058d4:	20000018 	.word	0x20000018

080058d8 <cleanup_stdio>:
 80058d8:	6841      	ldr	r1, [r0, #4]
 80058da:	4b0c      	ldr	r3, [pc, #48]	; (800590c <cleanup_stdio+0x34>)
 80058dc:	4299      	cmp	r1, r3
 80058de:	b510      	push	{r4, lr}
 80058e0:	4604      	mov	r4, r0
 80058e2:	d001      	beq.n	80058e8 <cleanup_stdio+0x10>
 80058e4:	f000 fb38 	bl	8005f58 <_fflush_r>
 80058e8:	68a1      	ldr	r1, [r4, #8]
 80058ea:	4b09      	ldr	r3, [pc, #36]	; (8005910 <cleanup_stdio+0x38>)
 80058ec:	4299      	cmp	r1, r3
 80058ee:	d002      	beq.n	80058f6 <cleanup_stdio+0x1e>
 80058f0:	4620      	mov	r0, r4
 80058f2:	f000 fb31 	bl	8005f58 <_fflush_r>
 80058f6:	68e1      	ldr	r1, [r4, #12]
 80058f8:	4b06      	ldr	r3, [pc, #24]	; (8005914 <cleanup_stdio+0x3c>)
 80058fa:	4299      	cmp	r1, r3
 80058fc:	d004      	beq.n	8005908 <cleanup_stdio+0x30>
 80058fe:	4620      	mov	r0, r4
 8005900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005904:	f000 bb28 	b.w	8005f58 <_fflush_r>
 8005908:	bd10      	pop	{r4, pc}
 800590a:	bf00      	nop
 800590c:	20000438 	.word	0x20000438
 8005910:	200004a0 	.word	0x200004a0
 8005914:	20000508 	.word	0x20000508

08005918 <global_stdio_init.part.0>:
 8005918:	b510      	push	{r4, lr}
 800591a:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <global_stdio_init.part.0+0x30>)
 800591c:	4c0b      	ldr	r4, [pc, #44]	; (800594c <global_stdio_init.part.0+0x34>)
 800591e:	4a0c      	ldr	r2, [pc, #48]	; (8005950 <global_stdio_init.part.0+0x38>)
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	4620      	mov	r0, r4
 8005924:	2200      	movs	r2, #0
 8005926:	2104      	movs	r1, #4
 8005928:	f7ff ff94 	bl	8005854 <std>
 800592c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005930:	2201      	movs	r2, #1
 8005932:	2109      	movs	r1, #9
 8005934:	f7ff ff8e 	bl	8005854 <std>
 8005938:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800593c:	2202      	movs	r2, #2
 800593e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005942:	2112      	movs	r1, #18
 8005944:	f7ff bf86 	b.w	8005854 <std>
 8005948:	20000570 	.word	0x20000570
 800594c:	20000438 	.word	0x20000438
 8005950:	080058c1 	.word	0x080058c1

08005954 <__sfp_lock_acquire>:
 8005954:	4801      	ldr	r0, [pc, #4]	; (800595c <__sfp_lock_acquire+0x8>)
 8005956:	f000 b958 	b.w	8005c0a <__retarget_lock_acquire_recursive>
 800595a:	bf00      	nop
 800595c:	20000579 	.word	0x20000579

08005960 <__sfp_lock_release>:
 8005960:	4801      	ldr	r0, [pc, #4]	; (8005968 <__sfp_lock_release+0x8>)
 8005962:	f000 b953 	b.w	8005c0c <__retarget_lock_release_recursive>
 8005966:	bf00      	nop
 8005968:	20000579 	.word	0x20000579

0800596c <__sinit>:
 800596c:	b510      	push	{r4, lr}
 800596e:	4604      	mov	r4, r0
 8005970:	f7ff fff0 	bl	8005954 <__sfp_lock_acquire>
 8005974:	6a23      	ldr	r3, [r4, #32]
 8005976:	b11b      	cbz	r3, 8005980 <__sinit+0x14>
 8005978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800597c:	f7ff bff0 	b.w	8005960 <__sfp_lock_release>
 8005980:	4b04      	ldr	r3, [pc, #16]	; (8005994 <__sinit+0x28>)
 8005982:	6223      	str	r3, [r4, #32]
 8005984:	4b04      	ldr	r3, [pc, #16]	; (8005998 <__sinit+0x2c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1f5      	bne.n	8005978 <__sinit+0xc>
 800598c:	f7ff ffc4 	bl	8005918 <global_stdio_init.part.0>
 8005990:	e7f2      	b.n	8005978 <__sinit+0xc>
 8005992:	bf00      	nop
 8005994:	080058d9 	.word	0x080058d9
 8005998:	20000570 	.word	0x20000570

0800599c <_fwalk_sglue>:
 800599c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059a0:	4607      	mov	r7, r0
 80059a2:	4688      	mov	r8, r1
 80059a4:	4614      	mov	r4, r2
 80059a6:	2600      	movs	r6, #0
 80059a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059ac:	f1b9 0901 	subs.w	r9, r9, #1
 80059b0:	d505      	bpl.n	80059be <_fwalk_sglue+0x22>
 80059b2:	6824      	ldr	r4, [r4, #0]
 80059b4:	2c00      	cmp	r4, #0
 80059b6:	d1f7      	bne.n	80059a8 <_fwalk_sglue+0xc>
 80059b8:	4630      	mov	r0, r6
 80059ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059be:	89ab      	ldrh	r3, [r5, #12]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d907      	bls.n	80059d4 <_fwalk_sglue+0x38>
 80059c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059c8:	3301      	adds	r3, #1
 80059ca:	d003      	beq.n	80059d4 <_fwalk_sglue+0x38>
 80059cc:	4629      	mov	r1, r5
 80059ce:	4638      	mov	r0, r7
 80059d0:	47c0      	blx	r8
 80059d2:	4306      	orrs	r6, r0
 80059d4:	3568      	adds	r5, #104	; 0x68
 80059d6:	e7e9      	b.n	80059ac <_fwalk_sglue+0x10>

080059d8 <__sread>:
 80059d8:	b510      	push	{r4, lr}
 80059da:	460c      	mov	r4, r1
 80059dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e0:	f000 f8c4 	bl	8005b6c <_read_r>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	bfab      	itete	ge
 80059e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059ea:	89a3      	ldrhlt	r3, [r4, #12]
 80059ec:	181b      	addge	r3, r3, r0
 80059ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059f2:	bfac      	ite	ge
 80059f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80059f6:	81a3      	strhlt	r3, [r4, #12]
 80059f8:	bd10      	pop	{r4, pc}

080059fa <__swrite>:
 80059fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fe:	461f      	mov	r7, r3
 8005a00:	898b      	ldrh	r3, [r1, #12]
 8005a02:	05db      	lsls	r3, r3, #23
 8005a04:	4605      	mov	r5, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	4616      	mov	r6, r2
 8005a0a:	d505      	bpl.n	8005a18 <__swrite+0x1e>
 8005a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a10:	2302      	movs	r3, #2
 8005a12:	2200      	movs	r2, #0
 8005a14:	f000 f898 	bl	8005b48 <_lseek_r>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a22:	81a3      	strh	r3, [r4, #12]
 8005a24:	4632      	mov	r2, r6
 8005a26:	463b      	mov	r3, r7
 8005a28:	4628      	mov	r0, r5
 8005a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2e:	f000 b8af 	b.w	8005b90 <_write_r>

08005a32 <__sseek>:
 8005a32:	b510      	push	{r4, lr}
 8005a34:	460c      	mov	r4, r1
 8005a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a3a:	f000 f885 	bl	8005b48 <_lseek_r>
 8005a3e:	1c43      	adds	r3, r0, #1
 8005a40:	89a3      	ldrh	r3, [r4, #12]
 8005a42:	bf15      	itete	ne
 8005a44:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a4e:	81a3      	strheq	r3, [r4, #12]
 8005a50:	bf18      	it	ne
 8005a52:	81a3      	strhne	r3, [r4, #12]
 8005a54:	bd10      	pop	{r4, pc}

08005a56 <__sclose>:
 8005a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a5a:	f000 b865 	b.w	8005b28 <_close_r>

08005a5e <memset>:
 8005a5e:	4402      	add	r2, r0
 8005a60:	4603      	mov	r3, r0
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d100      	bne.n	8005a68 <memset+0xa>
 8005a66:	4770      	bx	lr
 8005a68:	f803 1b01 	strb.w	r1, [r3], #1
 8005a6c:	e7f9      	b.n	8005a62 <memset+0x4>
	...

08005a70 <strtok>:
 8005a70:	4b16      	ldr	r3, [pc, #88]	; (8005acc <strtok+0x5c>)
 8005a72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a74:	681e      	ldr	r6, [r3, #0]
 8005a76:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8005a78:	4605      	mov	r5, r0
 8005a7a:	b9fc      	cbnz	r4, 8005abc <strtok+0x4c>
 8005a7c:	2050      	movs	r0, #80	; 0x50
 8005a7e:	9101      	str	r1, [sp, #4]
 8005a80:	f000 f930 	bl	8005ce4 <malloc>
 8005a84:	9901      	ldr	r1, [sp, #4]
 8005a86:	6470      	str	r0, [r6, #68]	; 0x44
 8005a88:	4602      	mov	r2, r0
 8005a8a:	b920      	cbnz	r0, 8005a96 <strtok+0x26>
 8005a8c:	4b10      	ldr	r3, [pc, #64]	; (8005ad0 <strtok+0x60>)
 8005a8e:	4811      	ldr	r0, [pc, #68]	; (8005ad4 <strtok+0x64>)
 8005a90:	215b      	movs	r1, #91	; 0x5b
 8005a92:	f000 f8bd 	bl	8005c10 <__assert_func>
 8005a96:	e9c0 4400 	strd	r4, r4, [r0]
 8005a9a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005a9e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005aa2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005aa6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005aaa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005aae:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005ab2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005ab6:	6184      	str	r4, [r0, #24]
 8005ab8:	7704      	strb	r4, [r0, #28]
 8005aba:	6244      	str	r4, [r0, #36]	; 0x24
 8005abc:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8005abe:	2301      	movs	r3, #1
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	b002      	add	sp, #8
 8005ac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ac8:	f000 b806 	b.w	8005ad8 <__strtok_r>
 8005acc:	20000064 	.word	0x20000064
 8005ad0:	08006a2d 	.word	0x08006a2d
 8005ad4:	08006a44 	.word	0x08006a44

08005ad8 <__strtok_r>:
 8005ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ada:	b908      	cbnz	r0, 8005ae0 <__strtok_r+0x8>
 8005adc:	6810      	ldr	r0, [r2, #0]
 8005ade:	b188      	cbz	r0, 8005b04 <__strtok_r+0x2c>
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005ae8:	460f      	mov	r7, r1
 8005aea:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005aee:	b91e      	cbnz	r6, 8005af8 <__strtok_r+0x20>
 8005af0:	b965      	cbnz	r5, 8005b0c <__strtok_r+0x34>
 8005af2:	6015      	str	r5, [r2, #0]
 8005af4:	4628      	mov	r0, r5
 8005af6:	e005      	b.n	8005b04 <__strtok_r+0x2c>
 8005af8:	42b5      	cmp	r5, r6
 8005afa:	d1f6      	bne.n	8005aea <__strtok_r+0x12>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1f0      	bne.n	8005ae2 <__strtok_r+0xa>
 8005b00:	6014      	str	r4, [r2, #0]
 8005b02:	7003      	strb	r3, [r0, #0]
 8005b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b06:	461c      	mov	r4, r3
 8005b08:	e00c      	b.n	8005b24 <__strtok_r+0x4c>
 8005b0a:	b915      	cbnz	r5, 8005b12 <__strtok_r+0x3a>
 8005b0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b10:	460e      	mov	r6, r1
 8005b12:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005b16:	42ab      	cmp	r3, r5
 8005b18:	d1f7      	bne.n	8005b0a <__strtok_r+0x32>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0f3      	beq.n	8005b06 <__strtok_r+0x2e>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005b24:	6014      	str	r4, [r2, #0]
 8005b26:	e7ed      	b.n	8005b04 <__strtok_r+0x2c>

08005b28 <_close_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4d06      	ldr	r5, [pc, #24]	; (8005b44 <_close_r+0x1c>)
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	4604      	mov	r4, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	602b      	str	r3, [r5, #0]
 8005b34:	f7fc f855 	bl	8001be2 <_close>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d102      	bne.n	8005b42 <_close_r+0x1a>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	b103      	cbz	r3, 8005b42 <_close_r+0x1a>
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	20000574 	.word	0x20000574

08005b48 <_lseek_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	4d07      	ldr	r5, [pc, #28]	; (8005b68 <_lseek_r+0x20>)
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	4608      	mov	r0, r1
 8005b50:	4611      	mov	r1, r2
 8005b52:	2200      	movs	r2, #0
 8005b54:	602a      	str	r2, [r5, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	f7fc f86a 	bl	8001c30 <_lseek>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d102      	bne.n	8005b66 <_lseek_r+0x1e>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	b103      	cbz	r3, 8005b66 <_lseek_r+0x1e>
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	bd38      	pop	{r3, r4, r5, pc}
 8005b68:	20000574 	.word	0x20000574

08005b6c <_read_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	4d07      	ldr	r5, [pc, #28]	; (8005b8c <_read_r+0x20>)
 8005b70:	4604      	mov	r4, r0
 8005b72:	4608      	mov	r0, r1
 8005b74:	4611      	mov	r1, r2
 8005b76:	2200      	movs	r2, #0
 8005b78:	602a      	str	r2, [r5, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f7fb fff8 	bl	8001b70 <_read>
 8005b80:	1c43      	adds	r3, r0, #1
 8005b82:	d102      	bne.n	8005b8a <_read_r+0x1e>
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	b103      	cbz	r3, 8005b8a <_read_r+0x1e>
 8005b88:	6023      	str	r3, [r4, #0]
 8005b8a:	bd38      	pop	{r3, r4, r5, pc}
 8005b8c:	20000574 	.word	0x20000574

08005b90 <_write_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4d07      	ldr	r5, [pc, #28]	; (8005bb0 <_write_r+0x20>)
 8005b94:	4604      	mov	r4, r0
 8005b96:	4608      	mov	r0, r1
 8005b98:	4611      	mov	r1, r2
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	602a      	str	r2, [r5, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f7fc f803 	bl	8001baa <_write>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	d102      	bne.n	8005bae <_write_r+0x1e>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	b103      	cbz	r3, 8005bae <_write_r+0x1e>
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	bd38      	pop	{r3, r4, r5, pc}
 8005bb0:	20000574 	.word	0x20000574

08005bb4 <__errno>:
 8005bb4:	4b01      	ldr	r3, [pc, #4]	; (8005bbc <__errno+0x8>)
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	20000064 	.word	0x20000064

08005bc0 <__libc_init_array>:
 8005bc0:	b570      	push	{r4, r5, r6, lr}
 8005bc2:	4d0d      	ldr	r5, [pc, #52]	; (8005bf8 <__libc_init_array+0x38>)
 8005bc4:	4c0d      	ldr	r4, [pc, #52]	; (8005bfc <__libc_init_array+0x3c>)
 8005bc6:	1b64      	subs	r4, r4, r5
 8005bc8:	10a4      	asrs	r4, r4, #2
 8005bca:	2600      	movs	r6, #0
 8005bcc:	42a6      	cmp	r6, r4
 8005bce:	d109      	bne.n	8005be4 <__libc_init_array+0x24>
 8005bd0:	4d0b      	ldr	r5, [pc, #44]	; (8005c00 <__libc_init_array+0x40>)
 8005bd2:	4c0c      	ldr	r4, [pc, #48]	; (8005c04 <__libc_init_array+0x44>)
 8005bd4:	f000 fe42 	bl	800685c <_init>
 8005bd8:	1b64      	subs	r4, r4, r5
 8005bda:	10a4      	asrs	r4, r4, #2
 8005bdc:	2600      	movs	r6, #0
 8005bde:	42a6      	cmp	r6, r4
 8005be0:	d105      	bne.n	8005bee <__libc_init_array+0x2e>
 8005be2:	bd70      	pop	{r4, r5, r6, pc}
 8005be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be8:	4798      	blx	r3
 8005bea:	3601      	adds	r6, #1
 8005bec:	e7ee      	b.n	8005bcc <__libc_init_array+0xc>
 8005bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf2:	4798      	blx	r3
 8005bf4:	3601      	adds	r6, #1
 8005bf6:	e7f2      	b.n	8005bde <__libc_init_array+0x1e>
 8005bf8:	08006b18 	.word	0x08006b18
 8005bfc:	08006b18 	.word	0x08006b18
 8005c00:	08006b18 	.word	0x08006b18
 8005c04:	08006b1c 	.word	0x08006b1c

08005c08 <__retarget_lock_init_recursive>:
 8005c08:	4770      	bx	lr

08005c0a <__retarget_lock_acquire_recursive>:
 8005c0a:	4770      	bx	lr

08005c0c <__retarget_lock_release_recursive>:
 8005c0c:	4770      	bx	lr
	...

08005c10 <__assert_func>:
 8005c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c12:	4614      	mov	r4, r2
 8005c14:	461a      	mov	r2, r3
 8005c16:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <__assert_func+0x2c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4605      	mov	r5, r0
 8005c1c:	68d8      	ldr	r0, [r3, #12]
 8005c1e:	b14c      	cbz	r4, 8005c34 <__assert_func+0x24>
 8005c20:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <__assert_func+0x30>)
 8005c22:	9100      	str	r1, [sp, #0]
 8005c24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c28:	4906      	ldr	r1, [pc, #24]	; (8005c44 <__assert_func+0x34>)
 8005c2a:	462b      	mov	r3, r5
 8005c2c:	f000 f9bc 	bl	8005fa8 <fiprintf>
 8005c30:	f000 f9dc 	bl	8005fec <abort>
 8005c34:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <__assert_func+0x38>)
 8005c36:	461c      	mov	r4, r3
 8005c38:	e7f3      	b.n	8005c22 <__assert_func+0x12>
 8005c3a:	bf00      	nop
 8005c3c:	20000064 	.word	0x20000064
 8005c40:	08006a9e 	.word	0x08006a9e
 8005c44:	08006aab 	.word	0x08006aab
 8005c48:	08006ad9 	.word	0x08006ad9

08005c4c <_free_r>:
 8005c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c4e:	2900      	cmp	r1, #0
 8005c50:	d044      	beq.n	8005cdc <_free_r+0x90>
 8005c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c56:	9001      	str	r0, [sp, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f1a1 0404 	sub.w	r4, r1, #4
 8005c5e:	bfb8      	it	lt
 8005c60:	18e4      	addlt	r4, r4, r3
 8005c62:	f000 f8e7 	bl	8005e34 <__malloc_lock>
 8005c66:	4a1e      	ldr	r2, [pc, #120]	; (8005ce0 <_free_r+0x94>)
 8005c68:	9801      	ldr	r0, [sp, #4]
 8005c6a:	6813      	ldr	r3, [r2, #0]
 8005c6c:	b933      	cbnz	r3, 8005c7c <_free_r+0x30>
 8005c6e:	6063      	str	r3, [r4, #4]
 8005c70:	6014      	str	r4, [r2, #0]
 8005c72:	b003      	add	sp, #12
 8005c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c78:	f000 b8e2 	b.w	8005e40 <__malloc_unlock>
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	d908      	bls.n	8005c92 <_free_r+0x46>
 8005c80:	6825      	ldr	r5, [r4, #0]
 8005c82:	1961      	adds	r1, r4, r5
 8005c84:	428b      	cmp	r3, r1
 8005c86:	bf01      	itttt	eq
 8005c88:	6819      	ldreq	r1, [r3, #0]
 8005c8a:	685b      	ldreq	r3, [r3, #4]
 8005c8c:	1949      	addeq	r1, r1, r5
 8005c8e:	6021      	streq	r1, [r4, #0]
 8005c90:	e7ed      	b.n	8005c6e <_free_r+0x22>
 8005c92:	461a      	mov	r2, r3
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	b10b      	cbz	r3, 8005c9c <_free_r+0x50>
 8005c98:	42a3      	cmp	r3, r4
 8005c9a:	d9fa      	bls.n	8005c92 <_free_r+0x46>
 8005c9c:	6811      	ldr	r1, [r2, #0]
 8005c9e:	1855      	adds	r5, r2, r1
 8005ca0:	42a5      	cmp	r5, r4
 8005ca2:	d10b      	bne.n	8005cbc <_free_r+0x70>
 8005ca4:	6824      	ldr	r4, [r4, #0]
 8005ca6:	4421      	add	r1, r4
 8005ca8:	1854      	adds	r4, r2, r1
 8005caa:	42a3      	cmp	r3, r4
 8005cac:	6011      	str	r1, [r2, #0]
 8005cae:	d1e0      	bne.n	8005c72 <_free_r+0x26>
 8005cb0:	681c      	ldr	r4, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	6053      	str	r3, [r2, #4]
 8005cb6:	440c      	add	r4, r1
 8005cb8:	6014      	str	r4, [r2, #0]
 8005cba:	e7da      	b.n	8005c72 <_free_r+0x26>
 8005cbc:	d902      	bls.n	8005cc4 <_free_r+0x78>
 8005cbe:	230c      	movs	r3, #12
 8005cc0:	6003      	str	r3, [r0, #0]
 8005cc2:	e7d6      	b.n	8005c72 <_free_r+0x26>
 8005cc4:	6825      	ldr	r5, [r4, #0]
 8005cc6:	1961      	adds	r1, r4, r5
 8005cc8:	428b      	cmp	r3, r1
 8005cca:	bf04      	itt	eq
 8005ccc:	6819      	ldreq	r1, [r3, #0]
 8005cce:	685b      	ldreq	r3, [r3, #4]
 8005cd0:	6063      	str	r3, [r4, #4]
 8005cd2:	bf04      	itt	eq
 8005cd4:	1949      	addeq	r1, r1, r5
 8005cd6:	6021      	streq	r1, [r4, #0]
 8005cd8:	6054      	str	r4, [r2, #4]
 8005cda:	e7ca      	b.n	8005c72 <_free_r+0x26>
 8005cdc:	b003      	add	sp, #12
 8005cde:	bd30      	pop	{r4, r5, pc}
 8005ce0:	2000057c 	.word	0x2000057c

08005ce4 <malloc>:
 8005ce4:	4b02      	ldr	r3, [pc, #8]	; (8005cf0 <malloc+0xc>)
 8005ce6:	4601      	mov	r1, r0
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	f000 b823 	b.w	8005d34 <_malloc_r>
 8005cee:	bf00      	nop
 8005cf0:	20000064 	.word	0x20000064

08005cf4 <sbrk_aligned>:
 8005cf4:	b570      	push	{r4, r5, r6, lr}
 8005cf6:	4e0e      	ldr	r6, [pc, #56]	; (8005d30 <sbrk_aligned+0x3c>)
 8005cf8:	460c      	mov	r4, r1
 8005cfa:	6831      	ldr	r1, [r6, #0]
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	b911      	cbnz	r1, 8005d06 <sbrk_aligned+0x12>
 8005d00:	f000 f964 	bl	8005fcc <_sbrk_r>
 8005d04:	6030      	str	r0, [r6, #0]
 8005d06:	4621      	mov	r1, r4
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f000 f95f 	bl	8005fcc <_sbrk_r>
 8005d0e:	1c43      	adds	r3, r0, #1
 8005d10:	d00a      	beq.n	8005d28 <sbrk_aligned+0x34>
 8005d12:	1cc4      	adds	r4, r0, #3
 8005d14:	f024 0403 	bic.w	r4, r4, #3
 8005d18:	42a0      	cmp	r0, r4
 8005d1a:	d007      	beq.n	8005d2c <sbrk_aligned+0x38>
 8005d1c:	1a21      	subs	r1, r4, r0
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f000 f954 	bl	8005fcc <_sbrk_r>
 8005d24:	3001      	adds	r0, #1
 8005d26:	d101      	bne.n	8005d2c <sbrk_aligned+0x38>
 8005d28:	f04f 34ff 	mov.w	r4, #4294967295
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	bd70      	pop	{r4, r5, r6, pc}
 8005d30:	20000580 	.word	0x20000580

08005d34 <_malloc_r>:
 8005d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d38:	1ccd      	adds	r5, r1, #3
 8005d3a:	f025 0503 	bic.w	r5, r5, #3
 8005d3e:	3508      	adds	r5, #8
 8005d40:	2d0c      	cmp	r5, #12
 8005d42:	bf38      	it	cc
 8005d44:	250c      	movcc	r5, #12
 8005d46:	2d00      	cmp	r5, #0
 8005d48:	4607      	mov	r7, r0
 8005d4a:	db01      	blt.n	8005d50 <_malloc_r+0x1c>
 8005d4c:	42a9      	cmp	r1, r5
 8005d4e:	d905      	bls.n	8005d5c <_malloc_r+0x28>
 8005d50:	230c      	movs	r3, #12
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	2600      	movs	r6, #0
 8005d56:	4630      	mov	r0, r6
 8005d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e30 <_malloc_r+0xfc>
 8005d60:	f000 f868 	bl	8005e34 <__malloc_lock>
 8005d64:	f8d8 3000 	ldr.w	r3, [r8]
 8005d68:	461c      	mov	r4, r3
 8005d6a:	bb5c      	cbnz	r4, 8005dc4 <_malloc_r+0x90>
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	4638      	mov	r0, r7
 8005d70:	f7ff ffc0 	bl	8005cf4 <sbrk_aligned>
 8005d74:	1c43      	adds	r3, r0, #1
 8005d76:	4604      	mov	r4, r0
 8005d78:	d155      	bne.n	8005e26 <_malloc_r+0xf2>
 8005d7a:	f8d8 4000 	ldr.w	r4, [r8]
 8005d7e:	4626      	mov	r6, r4
 8005d80:	2e00      	cmp	r6, #0
 8005d82:	d145      	bne.n	8005e10 <_malloc_r+0xdc>
 8005d84:	2c00      	cmp	r4, #0
 8005d86:	d048      	beq.n	8005e1a <_malloc_r+0xe6>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4638      	mov	r0, r7
 8005d8e:	eb04 0903 	add.w	r9, r4, r3
 8005d92:	f000 f91b 	bl	8005fcc <_sbrk_r>
 8005d96:	4581      	cmp	r9, r0
 8005d98:	d13f      	bne.n	8005e1a <_malloc_r+0xe6>
 8005d9a:	6821      	ldr	r1, [r4, #0]
 8005d9c:	1a6d      	subs	r5, r5, r1
 8005d9e:	4629      	mov	r1, r5
 8005da0:	4638      	mov	r0, r7
 8005da2:	f7ff ffa7 	bl	8005cf4 <sbrk_aligned>
 8005da6:	3001      	adds	r0, #1
 8005da8:	d037      	beq.n	8005e1a <_malloc_r+0xe6>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	442b      	add	r3, r5
 8005dae:	6023      	str	r3, [r4, #0]
 8005db0:	f8d8 3000 	ldr.w	r3, [r8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d038      	beq.n	8005e2a <_malloc_r+0xf6>
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	42a2      	cmp	r2, r4
 8005dbc:	d12b      	bne.n	8005e16 <_malloc_r+0xe2>
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	605a      	str	r2, [r3, #4]
 8005dc2:	e00f      	b.n	8005de4 <_malloc_r+0xb0>
 8005dc4:	6822      	ldr	r2, [r4, #0]
 8005dc6:	1b52      	subs	r2, r2, r5
 8005dc8:	d41f      	bmi.n	8005e0a <_malloc_r+0xd6>
 8005dca:	2a0b      	cmp	r2, #11
 8005dcc:	d917      	bls.n	8005dfe <_malloc_r+0xca>
 8005dce:	1961      	adds	r1, r4, r5
 8005dd0:	42a3      	cmp	r3, r4
 8005dd2:	6025      	str	r5, [r4, #0]
 8005dd4:	bf18      	it	ne
 8005dd6:	6059      	strne	r1, [r3, #4]
 8005dd8:	6863      	ldr	r3, [r4, #4]
 8005dda:	bf08      	it	eq
 8005ddc:	f8c8 1000 	streq.w	r1, [r8]
 8005de0:	5162      	str	r2, [r4, r5]
 8005de2:	604b      	str	r3, [r1, #4]
 8005de4:	4638      	mov	r0, r7
 8005de6:	f104 060b 	add.w	r6, r4, #11
 8005dea:	f000 f829 	bl	8005e40 <__malloc_unlock>
 8005dee:	f026 0607 	bic.w	r6, r6, #7
 8005df2:	1d23      	adds	r3, r4, #4
 8005df4:	1af2      	subs	r2, r6, r3
 8005df6:	d0ae      	beq.n	8005d56 <_malloc_r+0x22>
 8005df8:	1b9b      	subs	r3, r3, r6
 8005dfa:	50a3      	str	r3, [r4, r2]
 8005dfc:	e7ab      	b.n	8005d56 <_malloc_r+0x22>
 8005dfe:	42a3      	cmp	r3, r4
 8005e00:	6862      	ldr	r2, [r4, #4]
 8005e02:	d1dd      	bne.n	8005dc0 <_malloc_r+0x8c>
 8005e04:	f8c8 2000 	str.w	r2, [r8]
 8005e08:	e7ec      	b.n	8005de4 <_malloc_r+0xb0>
 8005e0a:	4623      	mov	r3, r4
 8005e0c:	6864      	ldr	r4, [r4, #4]
 8005e0e:	e7ac      	b.n	8005d6a <_malloc_r+0x36>
 8005e10:	4634      	mov	r4, r6
 8005e12:	6876      	ldr	r6, [r6, #4]
 8005e14:	e7b4      	b.n	8005d80 <_malloc_r+0x4c>
 8005e16:	4613      	mov	r3, r2
 8005e18:	e7cc      	b.n	8005db4 <_malloc_r+0x80>
 8005e1a:	230c      	movs	r3, #12
 8005e1c:	603b      	str	r3, [r7, #0]
 8005e1e:	4638      	mov	r0, r7
 8005e20:	f000 f80e 	bl	8005e40 <__malloc_unlock>
 8005e24:	e797      	b.n	8005d56 <_malloc_r+0x22>
 8005e26:	6025      	str	r5, [r4, #0]
 8005e28:	e7dc      	b.n	8005de4 <_malloc_r+0xb0>
 8005e2a:	605b      	str	r3, [r3, #4]
 8005e2c:	deff      	udf	#255	; 0xff
 8005e2e:	bf00      	nop
 8005e30:	2000057c 	.word	0x2000057c

08005e34 <__malloc_lock>:
 8005e34:	4801      	ldr	r0, [pc, #4]	; (8005e3c <__malloc_lock+0x8>)
 8005e36:	f7ff bee8 	b.w	8005c0a <__retarget_lock_acquire_recursive>
 8005e3a:	bf00      	nop
 8005e3c:	20000578 	.word	0x20000578

08005e40 <__malloc_unlock>:
 8005e40:	4801      	ldr	r0, [pc, #4]	; (8005e48 <__malloc_unlock+0x8>)
 8005e42:	f7ff bee3 	b.w	8005c0c <__retarget_lock_release_recursive>
 8005e46:	bf00      	nop
 8005e48:	20000578 	.word	0x20000578

08005e4c <__sflush_r>:
 8005e4c:	898a      	ldrh	r2, [r1, #12]
 8005e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e52:	4605      	mov	r5, r0
 8005e54:	0710      	lsls	r0, r2, #28
 8005e56:	460c      	mov	r4, r1
 8005e58:	d458      	bmi.n	8005f0c <__sflush_r+0xc0>
 8005e5a:	684b      	ldr	r3, [r1, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	dc05      	bgt.n	8005e6c <__sflush_r+0x20>
 8005e60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	dc02      	bgt.n	8005e6c <__sflush_r+0x20>
 8005e66:	2000      	movs	r0, #0
 8005e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e6e:	2e00      	cmp	r6, #0
 8005e70:	d0f9      	beq.n	8005e66 <__sflush_r+0x1a>
 8005e72:	2300      	movs	r3, #0
 8005e74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e78:	682f      	ldr	r7, [r5, #0]
 8005e7a:	6a21      	ldr	r1, [r4, #32]
 8005e7c:	602b      	str	r3, [r5, #0]
 8005e7e:	d032      	beq.n	8005ee6 <__sflush_r+0x9a>
 8005e80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e82:	89a3      	ldrh	r3, [r4, #12]
 8005e84:	075a      	lsls	r2, r3, #29
 8005e86:	d505      	bpl.n	8005e94 <__sflush_r+0x48>
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	1ac0      	subs	r0, r0, r3
 8005e8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e8e:	b10b      	cbz	r3, 8005e94 <__sflush_r+0x48>
 8005e90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e92:	1ac0      	subs	r0, r0, r3
 8005e94:	2300      	movs	r3, #0
 8005e96:	4602      	mov	r2, r0
 8005e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e9a:	6a21      	ldr	r1, [r4, #32]
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	47b0      	blx	r6
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	d106      	bne.n	8005eb4 <__sflush_r+0x68>
 8005ea6:	6829      	ldr	r1, [r5, #0]
 8005ea8:	291d      	cmp	r1, #29
 8005eaa:	d82b      	bhi.n	8005f04 <__sflush_r+0xb8>
 8005eac:	4a29      	ldr	r2, [pc, #164]	; (8005f54 <__sflush_r+0x108>)
 8005eae:	410a      	asrs	r2, r1
 8005eb0:	07d6      	lsls	r6, r2, #31
 8005eb2:	d427      	bmi.n	8005f04 <__sflush_r+0xb8>
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	6062      	str	r2, [r4, #4]
 8005eb8:	04d9      	lsls	r1, r3, #19
 8005eba:	6922      	ldr	r2, [r4, #16]
 8005ebc:	6022      	str	r2, [r4, #0]
 8005ebe:	d504      	bpl.n	8005eca <__sflush_r+0x7e>
 8005ec0:	1c42      	adds	r2, r0, #1
 8005ec2:	d101      	bne.n	8005ec8 <__sflush_r+0x7c>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b903      	cbnz	r3, 8005eca <__sflush_r+0x7e>
 8005ec8:	6560      	str	r0, [r4, #84]	; 0x54
 8005eca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ecc:	602f      	str	r7, [r5, #0]
 8005ece:	2900      	cmp	r1, #0
 8005ed0:	d0c9      	beq.n	8005e66 <__sflush_r+0x1a>
 8005ed2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ed6:	4299      	cmp	r1, r3
 8005ed8:	d002      	beq.n	8005ee0 <__sflush_r+0x94>
 8005eda:	4628      	mov	r0, r5
 8005edc:	f7ff feb6 	bl	8005c4c <_free_r>
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	6360      	str	r0, [r4, #52]	; 0x34
 8005ee4:	e7c0      	b.n	8005e68 <__sflush_r+0x1c>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	4628      	mov	r0, r5
 8005eea:	47b0      	blx	r6
 8005eec:	1c41      	adds	r1, r0, #1
 8005eee:	d1c8      	bne.n	8005e82 <__sflush_r+0x36>
 8005ef0:	682b      	ldr	r3, [r5, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0c5      	beq.n	8005e82 <__sflush_r+0x36>
 8005ef6:	2b1d      	cmp	r3, #29
 8005ef8:	d001      	beq.n	8005efe <__sflush_r+0xb2>
 8005efa:	2b16      	cmp	r3, #22
 8005efc:	d101      	bne.n	8005f02 <__sflush_r+0xb6>
 8005efe:	602f      	str	r7, [r5, #0]
 8005f00:	e7b1      	b.n	8005e66 <__sflush_r+0x1a>
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f08:	81a3      	strh	r3, [r4, #12]
 8005f0a:	e7ad      	b.n	8005e68 <__sflush_r+0x1c>
 8005f0c:	690f      	ldr	r7, [r1, #16]
 8005f0e:	2f00      	cmp	r7, #0
 8005f10:	d0a9      	beq.n	8005e66 <__sflush_r+0x1a>
 8005f12:	0793      	lsls	r3, r2, #30
 8005f14:	680e      	ldr	r6, [r1, #0]
 8005f16:	bf08      	it	eq
 8005f18:	694b      	ldreq	r3, [r1, #20]
 8005f1a:	600f      	str	r7, [r1, #0]
 8005f1c:	bf18      	it	ne
 8005f1e:	2300      	movne	r3, #0
 8005f20:	eba6 0807 	sub.w	r8, r6, r7
 8005f24:	608b      	str	r3, [r1, #8]
 8005f26:	f1b8 0f00 	cmp.w	r8, #0
 8005f2a:	dd9c      	ble.n	8005e66 <__sflush_r+0x1a>
 8005f2c:	6a21      	ldr	r1, [r4, #32]
 8005f2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f30:	4643      	mov	r3, r8
 8005f32:	463a      	mov	r2, r7
 8005f34:	4628      	mov	r0, r5
 8005f36:	47b0      	blx	r6
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	dc06      	bgt.n	8005f4a <__sflush_r+0xfe>
 8005f3c:	89a3      	ldrh	r3, [r4, #12]
 8005f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f42:	81a3      	strh	r3, [r4, #12]
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295
 8005f48:	e78e      	b.n	8005e68 <__sflush_r+0x1c>
 8005f4a:	4407      	add	r7, r0
 8005f4c:	eba8 0800 	sub.w	r8, r8, r0
 8005f50:	e7e9      	b.n	8005f26 <__sflush_r+0xda>
 8005f52:	bf00      	nop
 8005f54:	dfbffffe 	.word	0xdfbffffe

08005f58 <_fflush_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	690b      	ldr	r3, [r1, #16]
 8005f5c:	4605      	mov	r5, r0
 8005f5e:	460c      	mov	r4, r1
 8005f60:	b913      	cbnz	r3, 8005f68 <_fflush_r+0x10>
 8005f62:	2500      	movs	r5, #0
 8005f64:	4628      	mov	r0, r5
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	b118      	cbz	r0, 8005f72 <_fflush_r+0x1a>
 8005f6a:	6a03      	ldr	r3, [r0, #32]
 8005f6c:	b90b      	cbnz	r3, 8005f72 <_fflush_r+0x1a>
 8005f6e:	f7ff fcfd 	bl	800596c <__sinit>
 8005f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0f3      	beq.n	8005f62 <_fflush_r+0xa>
 8005f7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f7c:	07d0      	lsls	r0, r2, #31
 8005f7e:	d404      	bmi.n	8005f8a <_fflush_r+0x32>
 8005f80:	0599      	lsls	r1, r3, #22
 8005f82:	d402      	bmi.n	8005f8a <_fflush_r+0x32>
 8005f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f86:	f7ff fe40 	bl	8005c0a <__retarget_lock_acquire_recursive>
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	f7ff ff5d 	bl	8005e4c <__sflush_r>
 8005f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f94:	07da      	lsls	r2, r3, #31
 8005f96:	4605      	mov	r5, r0
 8005f98:	d4e4      	bmi.n	8005f64 <_fflush_r+0xc>
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	059b      	lsls	r3, r3, #22
 8005f9e:	d4e1      	bmi.n	8005f64 <_fflush_r+0xc>
 8005fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fa2:	f7ff fe33 	bl	8005c0c <__retarget_lock_release_recursive>
 8005fa6:	e7dd      	b.n	8005f64 <_fflush_r+0xc>

08005fa8 <fiprintf>:
 8005fa8:	b40e      	push	{r1, r2, r3}
 8005faa:	b503      	push	{r0, r1, lr}
 8005fac:	4601      	mov	r1, r0
 8005fae:	ab03      	add	r3, sp, #12
 8005fb0:	4805      	ldr	r0, [pc, #20]	; (8005fc8 <fiprintf+0x20>)
 8005fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fb6:	6800      	ldr	r0, [r0, #0]
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	f000 f847 	bl	800604c <_vfiprintf_r>
 8005fbe:	b002      	add	sp, #8
 8005fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fc4:	b003      	add	sp, #12
 8005fc6:	4770      	bx	lr
 8005fc8:	20000064 	.word	0x20000064

08005fcc <_sbrk_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d06      	ldr	r5, [pc, #24]	; (8005fe8 <_sbrk_r+0x1c>)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	602b      	str	r3, [r5, #0]
 8005fd8:	f7fb fe38 	bl	8001c4c <_sbrk>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_sbrk_r+0x1a>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_sbrk_r+0x1a>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	20000574 	.word	0x20000574

08005fec <abort>:
 8005fec:	b508      	push	{r3, lr}
 8005fee:	2006      	movs	r0, #6
 8005ff0:	f000 fb94 	bl	800671c <raise>
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	f7fb fdb1 	bl	8001b5c <_exit>

08005ffa <__sfputc_r>:
 8005ffa:	6893      	ldr	r3, [r2, #8]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	b410      	push	{r4}
 8006002:	6093      	str	r3, [r2, #8]
 8006004:	da08      	bge.n	8006018 <__sfputc_r+0x1e>
 8006006:	6994      	ldr	r4, [r2, #24]
 8006008:	42a3      	cmp	r3, r4
 800600a:	db01      	blt.n	8006010 <__sfputc_r+0x16>
 800600c:	290a      	cmp	r1, #10
 800600e:	d103      	bne.n	8006018 <__sfputc_r+0x1e>
 8006010:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006014:	f000 bac4 	b.w	80065a0 <__swbuf_r>
 8006018:	6813      	ldr	r3, [r2, #0]
 800601a:	1c58      	adds	r0, r3, #1
 800601c:	6010      	str	r0, [r2, #0]
 800601e:	7019      	strb	r1, [r3, #0]
 8006020:	4608      	mov	r0, r1
 8006022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006026:	4770      	bx	lr

08006028 <__sfputs_r>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	4606      	mov	r6, r0
 800602c:	460f      	mov	r7, r1
 800602e:	4614      	mov	r4, r2
 8006030:	18d5      	adds	r5, r2, r3
 8006032:	42ac      	cmp	r4, r5
 8006034:	d101      	bne.n	800603a <__sfputs_r+0x12>
 8006036:	2000      	movs	r0, #0
 8006038:	e007      	b.n	800604a <__sfputs_r+0x22>
 800603a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800603e:	463a      	mov	r2, r7
 8006040:	4630      	mov	r0, r6
 8006042:	f7ff ffda 	bl	8005ffa <__sfputc_r>
 8006046:	1c43      	adds	r3, r0, #1
 8006048:	d1f3      	bne.n	8006032 <__sfputs_r+0xa>
 800604a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800604c <_vfiprintf_r>:
 800604c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006050:	460d      	mov	r5, r1
 8006052:	b09d      	sub	sp, #116	; 0x74
 8006054:	4614      	mov	r4, r2
 8006056:	4698      	mov	r8, r3
 8006058:	4606      	mov	r6, r0
 800605a:	b118      	cbz	r0, 8006064 <_vfiprintf_r+0x18>
 800605c:	6a03      	ldr	r3, [r0, #32]
 800605e:	b90b      	cbnz	r3, 8006064 <_vfiprintf_r+0x18>
 8006060:	f7ff fc84 	bl	800596c <__sinit>
 8006064:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006066:	07d9      	lsls	r1, r3, #31
 8006068:	d405      	bmi.n	8006076 <_vfiprintf_r+0x2a>
 800606a:	89ab      	ldrh	r3, [r5, #12]
 800606c:	059a      	lsls	r2, r3, #22
 800606e:	d402      	bmi.n	8006076 <_vfiprintf_r+0x2a>
 8006070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006072:	f7ff fdca 	bl	8005c0a <__retarget_lock_acquire_recursive>
 8006076:	89ab      	ldrh	r3, [r5, #12]
 8006078:	071b      	lsls	r3, r3, #28
 800607a:	d501      	bpl.n	8006080 <_vfiprintf_r+0x34>
 800607c:	692b      	ldr	r3, [r5, #16]
 800607e:	b99b      	cbnz	r3, 80060a8 <_vfiprintf_r+0x5c>
 8006080:	4629      	mov	r1, r5
 8006082:	4630      	mov	r0, r6
 8006084:	f000 faca 	bl	800661c <__swsetup_r>
 8006088:	b170      	cbz	r0, 80060a8 <_vfiprintf_r+0x5c>
 800608a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800608c:	07dc      	lsls	r4, r3, #31
 800608e:	d504      	bpl.n	800609a <_vfiprintf_r+0x4e>
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	b01d      	add	sp, #116	; 0x74
 8006096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609a:	89ab      	ldrh	r3, [r5, #12]
 800609c:	0598      	lsls	r0, r3, #22
 800609e:	d4f7      	bmi.n	8006090 <_vfiprintf_r+0x44>
 80060a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060a2:	f7ff fdb3 	bl	8005c0c <__retarget_lock_release_recursive>
 80060a6:	e7f3      	b.n	8006090 <_vfiprintf_r+0x44>
 80060a8:	2300      	movs	r3, #0
 80060aa:	9309      	str	r3, [sp, #36]	; 0x24
 80060ac:	2320      	movs	r3, #32
 80060ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80060b6:	2330      	movs	r3, #48	; 0x30
 80060b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800626c <_vfiprintf_r+0x220>
 80060bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060c0:	f04f 0901 	mov.w	r9, #1
 80060c4:	4623      	mov	r3, r4
 80060c6:	469a      	mov	sl, r3
 80060c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060cc:	b10a      	cbz	r2, 80060d2 <_vfiprintf_r+0x86>
 80060ce:	2a25      	cmp	r2, #37	; 0x25
 80060d0:	d1f9      	bne.n	80060c6 <_vfiprintf_r+0x7a>
 80060d2:	ebba 0b04 	subs.w	fp, sl, r4
 80060d6:	d00b      	beq.n	80060f0 <_vfiprintf_r+0xa4>
 80060d8:	465b      	mov	r3, fp
 80060da:	4622      	mov	r2, r4
 80060dc:	4629      	mov	r1, r5
 80060de:	4630      	mov	r0, r6
 80060e0:	f7ff ffa2 	bl	8006028 <__sfputs_r>
 80060e4:	3001      	adds	r0, #1
 80060e6:	f000 80a9 	beq.w	800623c <_vfiprintf_r+0x1f0>
 80060ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ec:	445a      	add	r2, fp
 80060ee:	9209      	str	r2, [sp, #36]	; 0x24
 80060f0:	f89a 3000 	ldrb.w	r3, [sl]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 80a1 	beq.w	800623c <_vfiprintf_r+0x1f0>
 80060fa:	2300      	movs	r3, #0
 80060fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006104:	f10a 0a01 	add.w	sl, sl, #1
 8006108:	9304      	str	r3, [sp, #16]
 800610a:	9307      	str	r3, [sp, #28]
 800610c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006110:	931a      	str	r3, [sp, #104]	; 0x68
 8006112:	4654      	mov	r4, sl
 8006114:	2205      	movs	r2, #5
 8006116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800611a:	4854      	ldr	r0, [pc, #336]	; (800626c <_vfiprintf_r+0x220>)
 800611c:	f7fa f860 	bl	80001e0 <memchr>
 8006120:	9a04      	ldr	r2, [sp, #16]
 8006122:	b9d8      	cbnz	r0, 800615c <_vfiprintf_r+0x110>
 8006124:	06d1      	lsls	r1, r2, #27
 8006126:	bf44      	itt	mi
 8006128:	2320      	movmi	r3, #32
 800612a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800612e:	0713      	lsls	r3, r2, #28
 8006130:	bf44      	itt	mi
 8006132:	232b      	movmi	r3, #43	; 0x2b
 8006134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006138:	f89a 3000 	ldrb.w	r3, [sl]
 800613c:	2b2a      	cmp	r3, #42	; 0x2a
 800613e:	d015      	beq.n	800616c <_vfiprintf_r+0x120>
 8006140:	9a07      	ldr	r2, [sp, #28]
 8006142:	4654      	mov	r4, sl
 8006144:	2000      	movs	r0, #0
 8006146:	f04f 0c0a 	mov.w	ip, #10
 800614a:	4621      	mov	r1, r4
 800614c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006150:	3b30      	subs	r3, #48	; 0x30
 8006152:	2b09      	cmp	r3, #9
 8006154:	d94d      	bls.n	80061f2 <_vfiprintf_r+0x1a6>
 8006156:	b1b0      	cbz	r0, 8006186 <_vfiprintf_r+0x13a>
 8006158:	9207      	str	r2, [sp, #28]
 800615a:	e014      	b.n	8006186 <_vfiprintf_r+0x13a>
 800615c:	eba0 0308 	sub.w	r3, r0, r8
 8006160:	fa09 f303 	lsl.w	r3, r9, r3
 8006164:	4313      	orrs	r3, r2
 8006166:	9304      	str	r3, [sp, #16]
 8006168:	46a2      	mov	sl, r4
 800616a:	e7d2      	b.n	8006112 <_vfiprintf_r+0xc6>
 800616c:	9b03      	ldr	r3, [sp, #12]
 800616e:	1d19      	adds	r1, r3, #4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	9103      	str	r1, [sp, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	bfbb      	ittet	lt
 8006178:	425b      	neglt	r3, r3
 800617a:	f042 0202 	orrlt.w	r2, r2, #2
 800617e:	9307      	strge	r3, [sp, #28]
 8006180:	9307      	strlt	r3, [sp, #28]
 8006182:	bfb8      	it	lt
 8006184:	9204      	strlt	r2, [sp, #16]
 8006186:	7823      	ldrb	r3, [r4, #0]
 8006188:	2b2e      	cmp	r3, #46	; 0x2e
 800618a:	d10c      	bne.n	80061a6 <_vfiprintf_r+0x15a>
 800618c:	7863      	ldrb	r3, [r4, #1]
 800618e:	2b2a      	cmp	r3, #42	; 0x2a
 8006190:	d134      	bne.n	80061fc <_vfiprintf_r+0x1b0>
 8006192:	9b03      	ldr	r3, [sp, #12]
 8006194:	1d1a      	adds	r2, r3, #4
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	9203      	str	r2, [sp, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	bfb8      	it	lt
 800619e:	f04f 33ff 	movlt.w	r3, #4294967295
 80061a2:	3402      	adds	r4, #2
 80061a4:	9305      	str	r3, [sp, #20]
 80061a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800627c <_vfiprintf_r+0x230>
 80061aa:	7821      	ldrb	r1, [r4, #0]
 80061ac:	2203      	movs	r2, #3
 80061ae:	4650      	mov	r0, sl
 80061b0:	f7fa f816 	bl	80001e0 <memchr>
 80061b4:	b138      	cbz	r0, 80061c6 <_vfiprintf_r+0x17a>
 80061b6:	9b04      	ldr	r3, [sp, #16]
 80061b8:	eba0 000a 	sub.w	r0, r0, sl
 80061bc:	2240      	movs	r2, #64	; 0x40
 80061be:	4082      	lsls	r2, r0
 80061c0:	4313      	orrs	r3, r2
 80061c2:	3401      	adds	r4, #1
 80061c4:	9304      	str	r3, [sp, #16]
 80061c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ca:	4829      	ldr	r0, [pc, #164]	; (8006270 <_vfiprintf_r+0x224>)
 80061cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061d0:	2206      	movs	r2, #6
 80061d2:	f7fa f805 	bl	80001e0 <memchr>
 80061d6:	2800      	cmp	r0, #0
 80061d8:	d03f      	beq.n	800625a <_vfiprintf_r+0x20e>
 80061da:	4b26      	ldr	r3, [pc, #152]	; (8006274 <_vfiprintf_r+0x228>)
 80061dc:	bb1b      	cbnz	r3, 8006226 <_vfiprintf_r+0x1da>
 80061de:	9b03      	ldr	r3, [sp, #12]
 80061e0:	3307      	adds	r3, #7
 80061e2:	f023 0307 	bic.w	r3, r3, #7
 80061e6:	3308      	adds	r3, #8
 80061e8:	9303      	str	r3, [sp, #12]
 80061ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ec:	443b      	add	r3, r7
 80061ee:	9309      	str	r3, [sp, #36]	; 0x24
 80061f0:	e768      	b.n	80060c4 <_vfiprintf_r+0x78>
 80061f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80061f6:	460c      	mov	r4, r1
 80061f8:	2001      	movs	r0, #1
 80061fa:	e7a6      	b.n	800614a <_vfiprintf_r+0xfe>
 80061fc:	2300      	movs	r3, #0
 80061fe:	3401      	adds	r4, #1
 8006200:	9305      	str	r3, [sp, #20]
 8006202:	4619      	mov	r1, r3
 8006204:	f04f 0c0a 	mov.w	ip, #10
 8006208:	4620      	mov	r0, r4
 800620a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800620e:	3a30      	subs	r2, #48	; 0x30
 8006210:	2a09      	cmp	r2, #9
 8006212:	d903      	bls.n	800621c <_vfiprintf_r+0x1d0>
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0c6      	beq.n	80061a6 <_vfiprintf_r+0x15a>
 8006218:	9105      	str	r1, [sp, #20]
 800621a:	e7c4      	b.n	80061a6 <_vfiprintf_r+0x15a>
 800621c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006220:	4604      	mov	r4, r0
 8006222:	2301      	movs	r3, #1
 8006224:	e7f0      	b.n	8006208 <_vfiprintf_r+0x1bc>
 8006226:	ab03      	add	r3, sp, #12
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	462a      	mov	r2, r5
 800622c:	4b12      	ldr	r3, [pc, #72]	; (8006278 <_vfiprintf_r+0x22c>)
 800622e:	a904      	add	r1, sp, #16
 8006230:	4630      	mov	r0, r6
 8006232:	f3af 8000 	nop.w
 8006236:	4607      	mov	r7, r0
 8006238:	1c78      	adds	r0, r7, #1
 800623a:	d1d6      	bne.n	80061ea <_vfiprintf_r+0x19e>
 800623c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800623e:	07d9      	lsls	r1, r3, #31
 8006240:	d405      	bmi.n	800624e <_vfiprintf_r+0x202>
 8006242:	89ab      	ldrh	r3, [r5, #12]
 8006244:	059a      	lsls	r2, r3, #22
 8006246:	d402      	bmi.n	800624e <_vfiprintf_r+0x202>
 8006248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800624a:	f7ff fcdf 	bl	8005c0c <__retarget_lock_release_recursive>
 800624e:	89ab      	ldrh	r3, [r5, #12]
 8006250:	065b      	lsls	r3, r3, #25
 8006252:	f53f af1d 	bmi.w	8006090 <_vfiprintf_r+0x44>
 8006256:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006258:	e71c      	b.n	8006094 <_vfiprintf_r+0x48>
 800625a:	ab03      	add	r3, sp, #12
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	462a      	mov	r2, r5
 8006260:	4b05      	ldr	r3, [pc, #20]	; (8006278 <_vfiprintf_r+0x22c>)
 8006262:	a904      	add	r1, sp, #16
 8006264:	4630      	mov	r0, r6
 8006266:	f000 f879 	bl	800635c <_printf_i>
 800626a:	e7e4      	b.n	8006236 <_vfiprintf_r+0x1ea>
 800626c:	08006ada 	.word	0x08006ada
 8006270:	08006ae4 	.word	0x08006ae4
 8006274:	00000000 	.word	0x00000000
 8006278:	08006029 	.word	0x08006029
 800627c:	08006ae0 	.word	0x08006ae0

08006280 <_printf_common>:
 8006280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006284:	4616      	mov	r6, r2
 8006286:	4699      	mov	r9, r3
 8006288:	688a      	ldr	r2, [r1, #8]
 800628a:	690b      	ldr	r3, [r1, #16]
 800628c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006290:	4293      	cmp	r3, r2
 8006292:	bfb8      	it	lt
 8006294:	4613      	movlt	r3, r2
 8006296:	6033      	str	r3, [r6, #0]
 8006298:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800629c:	4607      	mov	r7, r0
 800629e:	460c      	mov	r4, r1
 80062a0:	b10a      	cbz	r2, 80062a6 <_printf_common+0x26>
 80062a2:	3301      	adds	r3, #1
 80062a4:	6033      	str	r3, [r6, #0]
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	0699      	lsls	r1, r3, #26
 80062aa:	bf42      	ittt	mi
 80062ac:	6833      	ldrmi	r3, [r6, #0]
 80062ae:	3302      	addmi	r3, #2
 80062b0:	6033      	strmi	r3, [r6, #0]
 80062b2:	6825      	ldr	r5, [r4, #0]
 80062b4:	f015 0506 	ands.w	r5, r5, #6
 80062b8:	d106      	bne.n	80062c8 <_printf_common+0x48>
 80062ba:	f104 0a19 	add.w	sl, r4, #25
 80062be:	68e3      	ldr	r3, [r4, #12]
 80062c0:	6832      	ldr	r2, [r6, #0]
 80062c2:	1a9b      	subs	r3, r3, r2
 80062c4:	42ab      	cmp	r3, r5
 80062c6:	dc26      	bgt.n	8006316 <_printf_common+0x96>
 80062c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062cc:	1e13      	subs	r3, r2, #0
 80062ce:	6822      	ldr	r2, [r4, #0]
 80062d0:	bf18      	it	ne
 80062d2:	2301      	movne	r3, #1
 80062d4:	0692      	lsls	r2, r2, #26
 80062d6:	d42b      	bmi.n	8006330 <_printf_common+0xb0>
 80062d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062dc:	4649      	mov	r1, r9
 80062de:	4638      	mov	r0, r7
 80062e0:	47c0      	blx	r8
 80062e2:	3001      	adds	r0, #1
 80062e4:	d01e      	beq.n	8006324 <_printf_common+0xa4>
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	6922      	ldr	r2, [r4, #16]
 80062ea:	f003 0306 	and.w	r3, r3, #6
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	bf02      	ittt	eq
 80062f2:	68e5      	ldreq	r5, [r4, #12]
 80062f4:	6833      	ldreq	r3, [r6, #0]
 80062f6:	1aed      	subeq	r5, r5, r3
 80062f8:	68a3      	ldr	r3, [r4, #8]
 80062fa:	bf0c      	ite	eq
 80062fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006300:	2500      	movne	r5, #0
 8006302:	4293      	cmp	r3, r2
 8006304:	bfc4      	itt	gt
 8006306:	1a9b      	subgt	r3, r3, r2
 8006308:	18ed      	addgt	r5, r5, r3
 800630a:	2600      	movs	r6, #0
 800630c:	341a      	adds	r4, #26
 800630e:	42b5      	cmp	r5, r6
 8006310:	d11a      	bne.n	8006348 <_printf_common+0xc8>
 8006312:	2000      	movs	r0, #0
 8006314:	e008      	b.n	8006328 <_printf_common+0xa8>
 8006316:	2301      	movs	r3, #1
 8006318:	4652      	mov	r2, sl
 800631a:	4649      	mov	r1, r9
 800631c:	4638      	mov	r0, r7
 800631e:	47c0      	blx	r8
 8006320:	3001      	adds	r0, #1
 8006322:	d103      	bne.n	800632c <_printf_common+0xac>
 8006324:	f04f 30ff 	mov.w	r0, #4294967295
 8006328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800632c:	3501      	adds	r5, #1
 800632e:	e7c6      	b.n	80062be <_printf_common+0x3e>
 8006330:	18e1      	adds	r1, r4, r3
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	2030      	movs	r0, #48	; 0x30
 8006336:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800633a:	4422      	add	r2, r4
 800633c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006340:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006344:	3302      	adds	r3, #2
 8006346:	e7c7      	b.n	80062d8 <_printf_common+0x58>
 8006348:	2301      	movs	r3, #1
 800634a:	4622      	mov	r2, r4
 800634c:	4649      	mov	r1, r9
 800634e:	4638      	mov	r0, r7
 8006350:	47c0      	blx	r8
 8006352:	3001      	adds	r0, #1
 8006354:	d0e6      	beq.n	8006324 <_printf_common+0xa4>
 8006356:	3601      	adds	r6, #1
 8006358:	e7d9      	b.n	800630e <_printf_common+0x8e>
	...

0800635c <_printf_i>:
 800635c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006360:	7e0f      	ldrb	r7, [r1, #24]
 8006362:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006364:	2f78      	cmp	r7, #120	; 0x78
 8006366:	4691      	mov	r9, r2
 8006368:	4680      	mov	r8, r0
 800636a:	460c      	mov	r4, r1
 800636c:	469a      	mov	sl, r3
 800636e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006372:	d807      	bhi.n	8006384 <_printf_i+0x28>
 8006374:	2f62      	cmp	r7, #98	; 0x62
 8006376:	d80a      	bhi.n	800638e <_printf_i+0x32>
 8006378:	2f00      	cmp	r7, #0
 800637a:	f000 80d4 	beq.w	8006526 <_printf_i+0x1ca>
 800637e:	2f58      	cmp	r7, #88	; 0x58
 8006380:	f000 80c0 	beq.w	8006504 <_printf_i+0x1a8>
 8006384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006388:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800638c:	e03a      	b.n	8006404 <_printf_i+0xa8>
 800638e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006392:	2b15      	cmp	r3, #21
 8006394:	d8f6      	bhi.n	8006384 <_printf_i+0x28>
 8006396:	a101      	add	r1, pc, #4	; (adr r1, 800639c <_printf_i+0x40>)
 8006398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800639c:	080063f5 	.word	0x080063f5
 80063a0:	08006409 	.word	0x08006409
 80063a4:	08006385 	.word	0x08006385
 80063a8:	08006385 	.word	0x08006385
 80063ac:	08006385 	.word	0x08006385
 80063b0:	08006385 	.word	0x08006385
 80063b4:	08006409 	.word	0x08006409
 80063b8:	08006385 	.word	0x08006385
 80063bc:	08006385 	.word	0x08006385
 80063c0:	08006385 	.word	0x08006385
 80063c4:	08006385 	.word	0x08006385
 80063c8:	0800650d 	.word	0x0800650d
 80063cc:	08006435 	.word	0x08006435
 80063d0:	080064c7 	.word	0x080064c7
 80063d4:	08006385 	.word	0x08006385
 80063d8:	08006385 	.word	0x08006385
 80063dc:	0800652f 	.word	0x0800652f
 80063e0:	08006385 	.word	0x08006385
 80063e4:	08006435 	.word	0x08006435
 80063e8:	08006385 	.word	0x08006385
 80063ec:	08006385 	.word	0x08006385
 80063f0:	080064cf 	.word	0x080064cf
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	1d1a      	adds	r2, r3, #4
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	602a      	str	r2, [r5, #0]
 80063fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006404:	2301      	movs	r3, #1
 8006406:	e09f      	b.n	8006548 <_printf_i+0x1ec>
 8006408:	6820      	ldr	r0, [r4, #0]
 800640a:	682b      	ldr	r3, [r5, #0]
 800640c:	0607      	lsls	r7, r0, #24
 800640e:	f103 0104 	add.w	r1, r3, #4
 8006412:	6029      	str	r1, [r5, #0]
 8006414:	d501      	bpl.n	800641a <_printf_i+0xbe>
 8006416:	681e      	ldr	r6, [r3, #0]
 8006418:	e003      	b.n	8006422 <_printf_i+0xc6>
 800641a:	0646      	lsls	r6, r0, #25
 800641c:	d5fb      	bpl.n	8006416 <_printf_i+0xba>
 800641e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006422:	2e00      	cmp	r6, #0
 8006424:	da03      	bge.n	800642e <_printf_i+0xd2>
 8006426:	232d      	movs	r3, #45	; 0x2d
 8006428:	4276      	negs	r6, r6
 800642a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800642e:	485a      	ldr	r0, [pc, #360]	; (8006598 <_printf_i+0x23c>)
 8006430:	230a      	movs	r3, #10
 8006432:	e012      	b.n	800645a <_printf_i+0xfe>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	6820      	ldr	r0, [r4, #0]
 8006438:	1d19      	adds	r1, r3, #4
 800643a:	6029      	str	r1, [r5, #0]
 800643c:	0605      	lsls	r5, r0, #24
 800643e:	d501      	bpl.n	8006444 <_printf_i+0xe8>
 8006440:	681e      	ldr	r6, [r3, #0]
 8006442:	e002      	b.n	800644a <_printf_i+0xee>
 8006444:	0641      	lsls	r1, r0, #25
 8006446:	d5fb      	bpl.n	8006440 <_printf_i+0xe4>
 8006448:	881e      	ldrh	r6, [r3, #0]
 800644a:	4853      	ldr	r0, [pc, #332]	; (8006598 <_printf_i+0x23c>)
 800644c:	2f6f      	cmp	r7, #111	; 0x6f
 800644e:	bf0c      	ite	eq
 8006450:	2308      	moveq	r3, #8
 8006452:	230a      	movne	r3, #10
 8006454:	2100      	movs	r1, #0
 8006456:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800645a:	6865      	ldr	r5, [r4, #4]
 800645c:	60a5      	str	r5, [r4, #8]
 800645e:	2d00      	cmp	r5, #0
 8006460:	bfa2      	ittt	ge
 8006462:	6821      	ldrge	r1, [r4, #0]
 8006464:	f021 0104 	bicge.w	r1, r1, #4
 8006468:	6021      	strge	r1, [r4, #0]
 800646a:	b90e      	cbnz	r6, 8006470 <_printf_i+0x114>
 800646c:	2d00      	cmp	r5, #0
 800646e:	d04b      	beq.n	8006508 <_printf_i+0x1ac>
 8006470:	4615      	mov	r5, r2
 8006472:	fbb6 f1f3 	udiv	r1, r6, r3
 8006476:	fb03 6711 	mls	r7, r3, r1, r6
 800647a:	5dc7      	ldrb	r7, [r0, r7]
 800647c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006480:	4637      	mov	r7, r6
 8006482:	42bb      	cmp	r3, r7
 8006484:	460e      	mov	r6, r1
 8006486:	d9f4      	bls.n	8006472 <_printf_i+0x116>
 8006488:	2b08      	cmp	r3, #8
 800648a:	d10b      	bne.n	80064a4 <_printf_i+0x148>
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	07de      	lsls	r6, r3, #31
 8006490:	d508      	bpl.n	80064a4 <_printf_i+0x148>
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	6861      	ldr	r1, [r4, #4]
 8006496:	4299      	cmp	r1, r3
 8006498:	bfde      	ittt	le
 800649a:	2330      	movle	r3, #48	; 0x30
 800649c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064a4:	1b52      	subs	r2, r2, r5
 80064a6:	6122      	str	r2, [r4, #16]
 80064a8:	f8cd a000 	str.w	sl, [sp]
 80064ac:	464b      	mov	r3, r9
 80064ae:	aa03      	add	r2, sp, #12
 80064b0:	4621      	mov	r1, r4
 80064b2:	4640      	mov	r0, r8
 80064b4:	f7ff fee4 	bl	8006280 <_printf_common>
 80064b8:	3001      	adds	r0, #1
 80064ba:	d14a      	bne.n	8006552 <_printf_i+0x1f6>
 80064bc:	f04f 30ff 	mov.w	r0, #4294967295
 80064c0:	b004      	add	sp, #16
 80064c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	f043 0320 	orr.w	r3, r3, #32
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	4833      	ldr	r0, [pc, #204]	; (800659c <_printf_i+0x240>)
 80064d0:	2778      	movs	r7, #120	; 0x78
 80064d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	6829      	ldr	r1, [r5, #0]
 80064da:	061f      	lsls	r7, r3, #24
 80064dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80064e0:	d402      	bmi.n	80064e8 <_printf_i+0x18c>
 80064e2:	065f      	lsls	r7, r3, #25
 80064e4:	bf48      	it	mi
 80064e6:	b2b6      	uxthmi	r6, r6
 80064e8:	07df      	lsls	r7, r3, #31
 80064ea:	bf48      	it	mi
 80064ec:	f043 0320 	orrmi.w	r3, r3, #32
 80064f0:	6029      	str	r1, [r5, #0]
 80064f2:	bf48      	it	mi
 80064f4:	6023      	strmi	r3, [r4, #0]
 80064f6:	b91e      	cbnz	r6, 8006500 <_printf_i+0x1a4>
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	f023 0320 	bic.w	r3, r3, #32
 80064fe:	6023      	str	r3, [r4, #0]
 8006500:	2310      	movs	r3, #16
 8006502:	e7a7      	b.n	8006454 <_printf_i+0xf8>
 8006504:	4824      	ldr	r0, [pc, #144]	; (8006598 <_printf_i+0x23c>)
 8006506:	e7e4      	b.n	80064d2 <_printf_i+0x176>
 8006508:	4615      	mov	r5, r2
 800650a:	e7bd      	b.n	8006488 <_printf_i+0x12c>
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	6826      	ldr	r6, [r4, #0]
 8006510:	6961      	ldr	r1, [r4, #20]
 8006512:	1d18      	adds	r0, r3, #4
 8006514:	6028      	str	r0, [r5, #0]
 8006516:	0635      	lsls	r5, r6, #24
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	d501      	bpl.n	8006520 <_printf_i+0x1c4>
 800651c:	6019      	str	r1, [r3, #0]
 800651e:	e002      	b.n	8006526 <_printf_i+0x1ca>
 8006520:	0670      	lsls	r0, r6, #25
 8006522:	d5fb      	bpl.n	800651c <_printf_i+0x1c0>
 8006524:	8019      	strh	r1, [r3, #0]
 8006526:	2300      	movs	r3, #0
 8006528:	6123      	str	r3, [r4, #16]
 800652a:	4615      	mov	r5, r2
 800652c:	e7bc      	b.n	80064a8 <_printf_i+0x14c>
 800652e:	682b      	ldr	r3, [r5, #0]
 8006530:	1d1a      	adds	r2, r3, #4
 8006532:	602a      	str	r2, [r5, #0]
 8006534:	681d      	ldr	r5, [r3, #0]
 8006536:	6862      	ldr	r2, [r4, #4]
 8006538:	2100      	movs	r1, #0
 800653a:	4628      	mov	r0, r5
 800653c:	f7f9 fe50 	bl	80001e0 <memchr>
 8006540:	b108      	cbz	r0, 8006546 <_printf_i+0x1ea>
 8006542:	1b40      	subs	r0, r0, r5
 8006544:	6060      	str	r0, [r4, #4]
 8006546:	6863      	ldr	r3, [r4, #4]
 8006548:	6123      	str	r3, [r4, #16]
 800654a:	2300      	movs	r3, #0
 800654c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006550:	e7aa      	b.n	80064a8 <_printf_i+0x14c>
 8006552:	6923      	ldr	r3, [r4, #16]
 8006554:	462a      	mov	r2, r5
 8006556:	4649      	mov	r1, r9
 8006558:	4640      	mov	r0, r8
 800655a:	47d0      	blx	sl
 800655c:	3001      	adds	r0, #1
 800655e:	d0ad      	beq.n	80064bc <_printf_i+0x160>
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	079b      	lsls	r3, r3, #30
 8006564:	d413      	bmi.n	800658e <_printf_i+0x232>
 8006566:	68e0      	ldr	r0, [r4, #12]
 8006568:	9b03      	ldr	r3, [sp, #12]
 800656a:	4298      	cmp	r0, r3
 800656c:	bfb8      	it	lt
 800656e:	4618      	movlt	r0, r3
 8006570:	e7a6      	b.n	80064c0 <_printf_i+0x164>
 8006572:	2301      	movs	r3, #1
 8006574:	4632      	mov	r2, r6
 8006576:	4649      	mov	r1, r9
 8006578:	4640      	mov	r0, r8
 800657a:	47d0      	blx	sl
 800657c:	3001      	adds	r0, #1
 800657e:	d09d      	beq.n	80064bc <_printf_i+0x160>
 8006580:	3501      	adds	r5, #1
 8006582:	68e3      	ldr	r3, [r4, #12]
 8006584:	9903      	ldr	r1, [sp, #12]
 8006586:	1a5b      	subs	r3, r3, r1
 8006588:	42ab      	cmp	r3, r5
 800658a:	dcf2      	bgt.n	8006572 <_printf_i+0x216>
 800658c:	e7eb      	b.n	8006566 <_printf_i+0x20a>
 800658e:	2500      	movs	r5, #0
 8006590:	f104 0619 	add.w	r6, r4, #25
 8006594:	e7f5      	b.n	8006582 <_printf_i+0x226>
 8006596:	bf00      	nop
 8006598:	08006aeb 	.word	0x08006aeb
 800659c:	08006afc 	.word	0x08006afc

080065a0 <__swbuf_r>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	460e      	mov	r6, r1
 80065a4:	4614      	mov	r4, r2
 80065a6:	4605      	mov	r5, r0
 80065a8:	b118      	cbz	r0, 80065b2 <__swbuf_r+0x12>
 80065aa:	6a03      	ldr	r3, [r0, #32]
 80065ac:	b90b      	cbnz	r3, 80065b2 <__swbuf_r+0x12>
 80065ae:	f7ff f9dd 	bl	800596c <__sinit>
 80065b2:	69a3      	ldr	r3, [r4, #24]
 80065b4:	60a3      	str	r3, [r4, #8]
 80065b6:	89a3      	ldrh	r3, [r4, #12]
 80065b8:	071a      	lsls	r2, r3, #28
 80065ba:	d525      	bpl.n	8006608 <__swbuf_r+0x68>
 80065bc:	6923      	ldr	r3, [r4, #16]
 80065be:	b31b      	cbz	r3, 8006608 <__swbuf_r+0x68>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	6922      	ldr	r2, [r4, #16]
 80065c4:	1a98      	subs	r0, r3, r2
 80065c6:	6963      	ldr	r3, [r4, #20]
 80065c8:	b2f6      	uxtb	r6, r6
 80065ca:	4283      	cmp	r3, r0
 80065cc:	4637      	mov	r7, r6
 80065ce:	dc04      	bgt.n	80065da <__swbuf_r+0x3a>
 80065d0:	4621      	mov	r1, r4
 80065d2:	4628      	mov	r0, r5
 80065d4:	f7ff fcc0 	bl	8005f58 <_fflush_r>
 80065d8:	b9e0      	cbnz	r0, 8006614 <__swbuf_r+0x74>
 80065da:	68a3      	ldr	r3, [r4, #8]
 80065dc:	3b01      	subs	r3, #1
 80065de:	60a3      	str	r3, [r4, #8]
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	6022      	str	r2, [r4, #0]
 80065e6:	701e      	strb	r6, [r3, #0]
 80065e8:	6962      	ldr	r2, [r4, #20]
 80065ea:	1c43      	adds	r3, r0, #1
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d004      	beq.n	80065fa <__swbuf_r+0x5a>
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	07db      	lsls	r3, r3, #31
 80065f4:	d506      	bpl.n	8006604 <__swbuf_r+0x64>
 80065f6:	2e0a      	cmp	r6, #10
 80065f8:	d104      	bne.n	8006604 <__swbuf_r+0x64>
 80065fa:	4621      	mov	r1, r4
 80065fc:	4628      	mov	r0, r5
 80065fe:	f7ff fcab 	bl	8005f58 <_fflush_r>
 8006602:	b938      	cbnz	r0, 8006614 <__swbuf_r+0x74>
 8006604:	4638      	mov	r0, r7
 8006606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006608:	4621      	mov	r1, r4
 800660a:	4628      	mov	r0, r5
 800660c:	f000 f806 	bl	800661c <__swsetup_r>
 8006610:	2800      	cmp	r0, #0
 8006612:	d0d5      	beq.n	80065c0 <__swbuf_r+0x20>
 8006614:	f04f 37ff 	mov.w	r7, #4294967295
 8006618:	e7f4      	b.n	8006604 <__swbuf_r+0x64>
	...

0800661c <__swsetup_r>:
 800661c:	b538      	push	{r3, r4, r5, lr}
 800661e:	4b2a      	ldr	r3, [pc, #168]	; (80066c8 <__swsetup_r+0xac>)
 8006620:	4605      	mov	r5, r0
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	460c      	mov	r4, r1
 8006626:	b118      	cbz	r0, 8006630 <__swsetup_r+0x14>
 8006628:	6a03      	ldr	r3, [r0, #32]
 800662a:	b90b      	cbnz	r3, 8006630 <__swsetup_r+0x14>
 800662c:	f7ff f99e 	bl	800596c <__sinit>
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006636:	0718      	lsls	r0, r3, #28
 8006638:	d422      	bmi.n	8006680 <__swsetup_r+0x64>
 800663a:	06d9      	lsls	r1, r3, #27
 800663c:	d407      	bmi.n	800664e <__swsetup_r+0x32>
 800663e:	2309      	movs	r3, #9
 8006640:	602b      	str	r3, [r5, #0]
 8006642:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006646:	81a3      	strh	r3, [r4, #12]
 8006648:	f04f 30ff 	mov.w	r0, #4294967295
 800664c:	e034      	b.n	80066b8 <__swsetup_r+0x9c>
 800664e:	0758      	lsls	r0, r3, #29
 8006650:	d512      	bpl.n	8006678 <__swsetup_r+0x5c>
 8006652:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006654:	b141      	cbz	r1, 8006668 <__swsetup_r+0x4c>
 8006656:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800665a:	4299      	cmp	r1, r3
 800665c:	d002      	beq.n	8006664 <__swsetup_r+0x48>
 800665e:	4628      	mov	r0, r5
 8006660:	f7ff faf4 	bl	8005c4c <_free_r>
 8006664:	2300      	movs	r3, #0
 8006666:	6363      	str	r3, [r4, #52]	; 0x34
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800666e:	81a3      	strh	r3, [r4, #12]
 8006670:	2300      	movs	r3, #0
 8006672:	6063      	str	r3, [r4, #4]
 8006674:	6923      	ldr	r3, [r4, #16]
 8006676:	6023      	str	r3, [r4, #0]
 8006678:	89a3      	ldrh	r3, [r4, #12]
 800667a:	f043 0308 	orr.w	r3, r3, #8
 800667e:	81a3      	strh	r3, [r4, #12]
 8006680:	6923      	ldr	r3, [r4, #16]
 8006682:	b94b      	cbnz	r3, 8006698 <__swsetup_r+0x7c>
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800668a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800668e:	d003      	beq.n	8006698 <__swsetup_r+0x7c>
 8006690:	4621      	mov	r1, r4
 8006692:	4628      	mov	r0, r5
 8006694:	f000 f884 	bl	80067a0 <__smakebuf_r>
 8006698:	89a0      	ldrh	r0, [r4, #12]
 800669a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800669e:	f010 0301 	ands.w	r3, r0, #1
 80066a2:	d00a      	beq.n	80066ba <__swsetup_r+0x9e>
 80066a4:	2300      	movs	r3, #0
 80066a6:	60a3      	str	r3, [r4, #8]
 80066a8:	6963      	ldr	r3, [r4, #20]
 80066aa:	425b      	negs	r3, r3
 80066ac:	61a3      	str	r3, [r4, #24]
 80066ae:	6923      	ldr	r3, [r4, #16]
 80066b0:	b943      	cbnz	r3, 80066c4 <__swsetup_r+0xa8>
 80066b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066b6:	d1c4      	bne.n	8006642 <__swsetup_r+0x26>
 80066b8:	bd38      	pop	{r3, r4, r5, pc}
 80066ba:	0781      	lsls	r1, r0, #30
 80066bc:	bf58      	it	pl
 80066be:	6963      	ldrpl	r3, [r4, #20]
 80066c0:	60a3      	str	r3, [r4, #8]
 80066c2:	e7f4      	b.n	80066ae <__swsetup_r+0x92>
 80066c4:	2000      	movs	r0, #0
 80066c6:	e7f7      	b.n	80066b8 <__swsetup_r+0x9c>
 80066c8:	20000064 	.word	0x20000064

080066cc <_raise_r>:
 80066cc:	291f      	cmp	r1, #31
 80066ce:	b538      	push	{r3, r4, r5, lr}
 80066d0:	4604      	mov	r4, r0
 80066d2:	460d      	mov	r5, r1
 80066d4:	d904      	bls.n	80066e0 <_raise_r+0x14>
 80066d6:	2316      	movs	r3, #22
 80066d8:	6003      	str	r3, [r0, #0]
 80066da:	f04f 30ff 	mov.w	r0, #4294967295
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80066e2:	b112      	cbz	r2, 80066ea <_raise_r+0x1e>
 80066e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066e8:	b94b      	cbnz	r3, 80066fe <_raise_r+0x32>
 80066ea:	4620      	mov	r0, r4
 80066ec:	f000 f830 	bl	8006750 <_getpid_r>
 80066f0:	462a      	mov	r2, r5
 80066f2:	4601      	mov	r1, r0
 80066f4:	4620      	mov	r0, r4
 80066f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066fa:	f000 b817 	b.w	800672c <_kill_r>
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d00a      	beq.n	8006718 <_raise_r+0x4c>
 8006702:	1c59      	adds	r1, r3, #1
 8006704:	d103      	bne.n	800670e <_raise_r+0x42>
 8006706:	2316      	movs	r3, #22
 8006708:	6003      	str	r3, [r0, #0]
 800670a:	2001      	movs	r0, #1
 800670c:	e7e7      	b.n	80066de <_raise_r+0x12>
 800670e:	2400      	movs	r4, #0
 8006710:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006714:	4628      	mov	r0, r5
 8006716:	4798      	blx	r3
 8006718:	2000      	movs	r0, #0
 800671a:	e7e0      	b.n	80066de <_raise_r+0x12>

0800671c <raise>:
 800671c:	4b02      	ldr	r3, [pc, #8]	; (8006728 <raise+0xc>)
 800671e:	4601      	mov	r1, r0
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	f7ff bfd3 	b.w	80066cc <_raise_r>
 8006726:	bf00      	nop
 8006728:	20000064 	.word	0x20000064

0800672c <_kill_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d07      	ldr	r5, [pc, #28]	; (800674c <_kill_r+0x20>)
 8006730:	2300      	movs	r3, #0
 8006732:	4604      	mov	r4, r0
 8006734:	4608      	mov	r0, r1
 8006736:	4611      	mov	r1, r2
 8006738:	602b      	str	r3, [r5, #0]
 800673a:	f7fb f9ff 	bl	8001b3c <_kill>
 800673e:	1c43      	adds	r3, r0, #1
 8006740:	d102      	bne.n	8006748 <_kill_r+0x1c>
 8006742:	682b      	ldr	r3, [r5, #0]
 8006744:	b103      	cbz	r3, 8006748 <_kill_r+0x1c>
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	bd38      	pop	{r3, r4, r5, pc}
 800674a:	bf00      	nop
 800674c:	20000574 	.word	0x20000574

08006750 <_getpid_r>:
 8006750:	f7fb b9ec 	b.w	8001b2c <_getpid>

08006754 <__swhatbuf_r>:
 8006754:	b570      	push	{r4, r5, r6, lr}
 8006756:	460c      	mov	r4, r1
 8006758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800675c:	2900      	cmp	r1, #0
 800675e:	b096      	sub	sp, #88	; 0x58
 8006760:	4615      	mov	r5, r2
 8006762:	461e      	mov	r6, r3
 8006764:	da0d      	bge.n	8006782 <__swhatbuf_r+0x2e>
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	f013 0f80 	tst.w	r3, #128	; 0x80
 800676c:	f04f 0100 	mov.w	r1, #0
 8006770:	bf0c      	ite	eq
 8006772:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006776:	2340      	movne	r3, #64	; 0x40
 8006778:	2000      	movs	r0, #0
 800677a:	6031      	str	r1, [r6, #0]
 800677c:	602b      	str	r3, [r5, #0]
 800677e:	b016      	add	sp, #88	; 0x58
 8006780:	bd70      	pop	{r4, r5, r6, pc}
 8006782:	466a      	mov	r2, sp
 8006784:	f000 f848 	bl	8006818 <_fstat_r>
 8006788:	2800      	cmp	r0, #0
 800678a:	dbec      	blt.n	8006766 <__swhatbuf_r+0x12>
 800678c:	9901      	ldr	r1, [sp, #4]
 800678e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006792:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006796:	4259      	negs	r1, r3
 8006798:	4159      	adcs	r1, r3
 800679a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800679e:	e7eb      	b.n	8006778 <__swhatbuf_r+0x24>

080067a0 <__smakebuf_r>:
 80067a0:	898b      	ldrh	r3, [r1, #12]
 80067a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067a4:	079d      	lsls	r5, r3, #30
 80067a6:	4606      	mov	r6, r0
 80067a8:	460c      	mov	r4, r1
 80067aa:	d507      	bpl.n	80067bc <__smakebuf_r+0x1c>
 80067ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	6123      	str	r3, [r4, #16]
 80067b4:	2301      	movs	r3, #1
 80067b6:	6163      	str	r3, [r4, #20]
 80067b8:	b002      	add	sp, #8
 80067ba:	bd70      	pop	{r4, r5, r6, pc}
 80067bc:	ab01      	add	r3, sp, #4
 80067be:	466a      	mov	r2, sp
 80067c0:	f7ff ffc8 	bl	8006754 <__swhatbuf_r>
 80067c4:	9900      	ldr	r1, [sp, #0]
 80067c6:	4605      	mov	r5, r0
 80067c8:	4630      	mov	r0, r6
 80067ca:	f7ff fab3 	bl	8005d34 <_malloc_r>
 80067ce:	b948      	cbnz	r0, 80067e4 <__smakebuf_r+0x44>
 80067d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067d4:	059a      	lsls	r2, r3, #22
 80067d6:	d4ef      	bmi.n	80067b8 <__smakebuf_r+0x18>
 80067d8:	f023 0303 	bic.w	r3, r3, #3
 80067dc:	f043 0302 	orr.w	r3, r3, #2
 80067e0:	81a3      	strh	r3, [r4, #12]
 80067e2:	e7e3      	b.n	80067ac <__smakebuf_r+0xc>
 80067e4:	89a3      	ldrh	r3, [r4, #12]
 80067e6:	6020      	str	r0, [r4, #0]
 80067e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ec:	81a3      	strh	r3, [r4, #12]
 80067ee:	9b00      	ldr	r3, [sp, #0]
 80067f0:	6163      	str	r3, [r4, #20]
 80067f2:	9b01      	ldr	r3, [sp, #4]
 80067f4:	6120      	str	r0, [r4, #16]
 80067f6:	b15b      	cbz	r3, 8006810 <__smakebuf_r+0x70>
 80067f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067fc:	4630      	mov	r0, r6
 80067fe:	f000 f81d 	bl	800683c <_isatty_r>
 8006802:	b128      	cbz	r0, 8006810 <__smakebuf_r+0x70>
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	81a3      	strh	r3, [r4, #12]
 8006810:	89a3      	ldrh	r3, [r4, #12]
 8006812:	431d      	orrs	r5, r3
 8006814:	81a5      	strh	r5, [r4, #12]
 8006816:	e7cf      	b.n	80067b8 <__smakebuf_r+0x18>

08006818 <_fstat_r>:
 8006818:	b538      	push	{r3, r4, r5, lr}
 800681a:	4d07      	ldr	r5, [pc, #28]	; (8006838 <_fstat_r+0x20>)
 800681c:	2300      	movs	r3, #0
 800681e:	4604      	mov	r4, r0
 8006820:	4608      	mov	r0, r1
 8006822:	4611      	mov	r1, r2
 8006824:	602b      	str	r3, [r5, #0]
 8006826:	f7fb f9e8 	bl	8001bfa <_fstat>
 800682a:	1c43      	adds	r3, r0, #1
 800682c:	d102      	bne.n	8006834 <_fstat_r+0x1c>
 800682e:	682b      	ldr	r3, [r5, #0]
 8006830:	b103      	cbz	r3, 8006834 <_fstat_r+0x1c>
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	bd38      	pop	{r3, r4, r5, pc}
 8006836:	bf00      	nop
 8006838:	20000574 	.word	0x20000574

0800683c <_isatty_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	4d06      	ldr	r5, [pc, #24]	; (8006858 <_isatty_r+0x1c>)
 8006840:	2300      	movs	r3, #0
 8006842:	4604      	mov	r4, r0
 8006844:	4608      	mov	r0, r1
 8006846:	602b      	str	r3, [r5, #0]
 8006848:	f7fb f9e7 	bl	8001c1a <_isatty>
 800684c:	1c43      	adds	r3, r0, #1
 800684e:	d102      	bne.n	8006856 <_isatty_r+0x1a>
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	b103      	cbz	r3, 8006856 <_isatty_r+0x1a>
 8006854:	6023      	str	r3, [r4, #0]
 8006856:	bd38      	pop	{r3, r4, r5, pc}
 8006858:	20000574 	.word	0x20000574

0800685c <_init>:
 800685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685e:	bf00      	nop
 8006860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006862:	bc08      	pop	{r3}
 8006864:	469e      	mov	lr, r3
 8006866:	4770      	bx	lr

08006868 <_fini>:
 8006868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686a:	bf00      	nop
 800686c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800686e:	bc08      	pop	{r3}
 8006870:	469e      	mov	lr, r3
 8006872:	4770      	bx	lr
